
smartsonic-hellochirp-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cf90  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040cf90  0040cf90  0001cf90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000348  20000000  0040cf98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000005e8  20000348  0040d2e0  00020348  2**3
                  ALLOC
  4 .stack        00003000  20000930  0040d8c8  00020348  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020376  2**0
                  CONTENTS, READONLY
  7 .debug_info   00034ef4  00000000  00000000  000203cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005ccc  00000000  00000000  000552c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ddf6  00000000  00000000  0005af8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000018c8  00000000  00000000  00068d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001778  00000000  00000000  0006a64d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d2d7  00000000  00000000  0006bdc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000075fb  00000000  00000000  0007909c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007594  00000000  00000000  00080698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 39 00 20 c1 51 40 00 91 52 40 00 91 52 40 00     09. .Q@..R@..R@.
  400010:	91 52 40 00 91 52 40 00 91 52 40 00 00 00 00 00     .R@..R@..R@.....
	...
  40002c:	91 52 40 00 91 52 40 00 00 00 00 00 91 52 40 00     .R@..R@......R@.
  40003c:	91 52 40 00 91 52 40 00 91 52 40 00 91 52 40 00     .R@..R@..R@..R@.
  40004c:	05 13 40 00 91 52 40 00 91 52 40 00 91 52 40 00     ..@..R@..R@..R@.
  40005c:	91 52 40 00 91 52 40 00 69 11 40 00 00 00 00 00     .R@..R@.i.@.....
  40006c:	5d 10 40 00 99 3f 40 00 91 52 40 00 91 52 40 00     ].@..?@..R@..R@.
  40007c:	91 52 40 00 91 52 40 00 91 52 40 00 91 52 40 00     .R@..R@..R@..R@.
  40008c:	7d 11 40 00 91 52 40 00 91 52 40 00 91 52 40 00     }.@..R@..R@..R@.
  40009c:	1d 13 40 00 2d 13 40 00 91 52 40 00 91 52 40 00     ..@.-.@..R@..R@.
  4000ac:	91 52 40 00 91 52 40 00 b5 36 40 00 91 52 40 00     .R@..R@..6@..R@.
	...
  4000fc:	91 52 40 00 91 52 40 00 91 52 40 00 00 00 00 00     .R@..R@..R@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000348 	.word	0x20000348
  400164:	00000000 	.word	0x00000000
  400168:	0040cf98 	.word	0x0040cf98

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	0040cf98 	.word	0x0040cf98
  4001a8:	2000034c 	.word	0x2000034c
  4001ac:	0040cf98 	.word	0x0040cf98
  4001b0:	00000000 	.word	0x00000000

004001b4 <main>:
 * and configuration, callback routine registration, and timer setup.  After 
 * the initialization sequence completes, this routine enters an infinite 
 * loop that will run for the remainder of the application execution.
 */

int main(void) {
  4001b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4001b8:	b08f      	sub	sp, #60	; 0x3c
  4001ba:	af04      	add	r7, sp, #16
	ch_group_t	*grp_ptr = &chirp_group;
  4001bc:	4b90      	ldr	r3, [pc, #576]	; (400400 <main+0x24c>)
  4001be:	623b      	str	r3, [r7, #32]
	uint8_t chirp_error = 0;
  4001c0:	2300      	movs	r3, #0
  4001c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	 *
	 *   The chbsp_board_init() function also initializes fields within the 
	 *   sensor group descriptor, including number of supported sensors and 
	 *   the RTC clock calibration pulse length.
	 */
	chbsp_board_init(grp_ptr);
  4001c6:	6a38      	ldr	r0, [r7, #32]
  4001c8:	4b8e      	ldr	r3, [pc, #568]	; (400404 <main+0x250>)
  4001ca:	4798      	blx	r3

	printf("\n\nHello Chirp! - Chirp SonicLib Example Application\n");
  4001cc:	488e      	ldr	r0, [pc, #568]	; (400408 <main+0x254>)
  4001ce:	4b8f      	ldr	r3, [pc, #572]	; (40040c <main+0x258>)
  4001d0:	4798      	blx	r3
	printf("    Compile time:  %s %s\n", __DATE__, __TIME__);
  4001d2:	4a8f      	ldr	r2, [pc, #572]	; (400410 <main+0x25c>)
  4001d4:	498f      	ldr	r1, [pc, #572]	; (400414 <main+0x260>)
  4001d6:	4890      	ldr	r0, [pc, #576]	; (400418 <main+0x264>)
  4001d8:	4b8c      	ldr	r3, [pc, #560]	; (40040c <main+0x258>)
  4001da:	4798      	blx	r3
	printf("    Version: %u.%u.%u", APP_VERSION_MAJOR, APP_VERSION_MINOR,
  4001dc:	2300      	movs	r3, #0
  4001de:	220b      	movs	r2, #11
  4001e0:	2101      	movs	r1, #1
  4001e2:	488e      	ldr	r0, [pc, #568]	; (40041c <main+0x268>)
  4001e4:	4c89      	ldr	r4, [pc, #548]	; (40040c <main+0x258>)
  4001e6:	47a0      	blx	r4
										  APP_VERSION_REV);
	printf("    SonicLib version: %u.%u.%u\n", SONICLIB_VER_MAJOR, 
  4001e8:	2302      	movs	r3, #2
  4001ea:	2201      	movs	r2, #1
  4001ec:	2102      	movs	r1, #2
  4001ee:	488c      	ldr	r0, [pc, #560]	; (400420 <main+0x26c>)
  4001f0:	4c86      	ldr	r4, [pc, #536]	; (40040c <main+0x258>)
  4001f2:	47a0      	blx	r4
										  SONICLIB_VER_MINOR, SONICLIB_VER_REV);
	printf("\n");
  4001f4:	488b      	ldr	r0, [pc, #556]	; (400424 <main+0x270>)
  4001f6:	4b85      	ldr	r3, [pc, #532]	; (40040c <main+0x258>)
  4001f8:	4798      	blx	r3


	/* Get the number of (possible) sensor devices on the board
	 *   Set by the BSP during chbsp_board_init() 
	 */
	num_ports = ch_get_num_ports(grp_ptr);
  4001fa:	6a38      	ldr	r0, [r7, #32]
  4001fc:	4b8a      	ldr	r3, [pc, #552]	; (400428 <main+0x274>)
  4001fe:	4798      	blx	r3
  400200:	4603      	mov	r3, r0
  400202:	77fb      	strb	r3, [r7, #31]
	 *   it will be added to, the device number within the group, and the sensor
	 *   firmware initialization routine that will be used.  (The sensor 
	 *   firmware selection effectively specifies whether it is a CH101 or 
	 *   CH201 sensor, as well as the exact feature set.)
	 */
	printf("Initializing sensor(s)... ");
  400204:	4889      	ldr	r0, [pc, #548]	; (40042c <main+0x278>)
  400206:	4b81      	ldr	r3, [pc, #516]	; (40040c <main+0x258>)
  400208:	4798      	blx	r3

	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  40020a:	2300      	movs	r3, #0
  40020c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  400210:	e01a      	b.n	400248 <main+0x94>
		ch_dev_t *dev_ptr = &(chirp_devices[dev_num]);	// init struct in array
  400212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  400216:	22d8      	movs	r2, #216	; 0xd8
  400218:	fb02 f303 	mul.w	r3, r2, r3
  40021c:	4a84      	ldr	r2, [pc, #528]	; (400430 <main+0x27c>)
  40021e:	4413      	add	r3, r2
  400220:	61bb      	str	r3, [r7, #24]
		 *
		 *   However, it is possible for different sensors to use different 
		 *   firmware images, by specifying different firmware init routines 
		 *   when ch_init() is called for each.
		 */
		chirp_error |= ch_init(dev_ptr, grp_ptr, dev_num, 
  400222:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  400226:	4b83      	ldr	r3, [pc, #524]	; (400434 <main+0x280>)
  400228:	6a39      	ldr	r1, [r7, #32]
  40022a:	69b8      	ldr	r0, [r7, #24]
  40022c:	4c82      	ldr	r4, [pc, #520]	; (400438 <main+0x284>)
  40022e:	47a0      	blx	r4
  400230:	4603      	mov	r3, r0
  400232:	461a      	mov	r2, r3
  400234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400238:	4313      	orrs	r3, r2
  40023a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  40023e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  400242:	3301      	adds	r3, #1
  400244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  400248:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  40024c:	7ffb      	ldrb	r3, [r7, #31]
  40024e:	429a      	cmp	r2, r3
  400250:	d3df      	bcc.n	400212 <main+0x5e>
	 *   the firmware specified above during ch_init()) and waits for it to 
	 *   perform a self-calibration step.  Then, once it has found all the 
	 *   sensors, ch_group_start() completes a timing reference calibration by 
	 *   applying a pulse of known length to the sensor's INT line.
	 */
	if (chirp_error == 0) {
  400252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400256:	2b00      	cmp	r3, #0
  400258:	d108      	bne.n	40026c <main+0xb8>
		printf("starting group... ");
  40025a:	4878      	ldr	r0, [pc, #480]	; (40043c <main+0x288>)
  40025c:	4b6b      	ldr	r3, [pc, #428]	; (40040c <main+0x258>)
  40025e:	4798      	blx	r3
		chirp_error = ch_group_start(grp_ptr);
  400260:	6a38      	ldr	r0, [r7, #32]
  400262:	4b77      	ldr	r3, [pc, #476]	; (400440 <main+0x28c>)
  400264:	4798      	blx	r3
  400266:	4603      	mov	r3, r0
  400268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if (chirp_error == 0) {
  40026c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400270:	2b00      	cmp	r3, #0
  400272:	d103      	bne.n	40027c <main+0xc8>
		printf("OK\n");
  400274:	4873      	ldr	r0, [pc, #460]	; (400444 <main+0x290>)
  400276:	4b65      	ldr	r3, [pc, #404]	; (40040c <main+0x258>)
  400278:	4798      	blx	r3
  40027a:	e005      	b.n	400288 <main+0xd4>
	} else {
		printf("FAILED: %d\n", chirp_error);
  40027c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400280:	4619      	mov	r1, r3
  400282:	4871      	ldr	r0, [pc, #452]	; (400448 <main+0x294>)
  400284:	4b61      	ldr	r3, [pc, #388]	; (40040c <main+0x258>)
  400286:	4798      	blx	r3
	}
	printf("\n");
  400288:	4866      	ldr	r0, [pc, #408]	; (400424 <main+0x270>)
  40028a:	4b60      	ldr	r3, [pc, #384]	; (40040c <main+0x258>)
  40028c:	4798      	blx	r3
	 *   This loop checks each device number in the sensor group to determine 
	 *   if a sensor is actually connected.  If so, it makes a series of 
	 *   function calls to get different operating values, including the 
	 *   operating frequency, clock calibration values, and firmware version.
 	 */
	printf("Sensor\tType \t   Freq\t\t RTC Cal \tFirmware\n");
  40028e:	486f      	ldr	r0, [pc, #444]	; (40044c <main+0x298>)
  400290:	4b5e      	ldr	r3, [pc, #376]	; (40040c <main+0x258>)
  400292:	4798      	blx	r3

	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  400294:	2300      	movs	r3, #0
  400296:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  40029a:	e033      	b.n	400304 <main+0x150>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  40029c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4002a0:	4619      	mov	r1, r3
  4002a2:	6a38      	ldr	r0, [r7, #32]
  4002a4:	4b6a      	ldr	r3, [pc, #424]	; (400450 <main+0x29c>)
  4002a6:	4798      	blx	r3
  4002a8:	6178      	str	r0, [r7, #20]

		if (ch_sensor_is_connected(dev_ptr)) {
  4002aa:	6978      	ldr	r0, [r7, #20]
  4002ac:	4b69      	ldr	r3, [pc, #420]	; (400454 <main+0x2a0>)
  4002ae:	4798      	blx	r3
  4002b0:	4603      	mov	r3, r0
  4002b2:	2b00      	cmp	r3, #0
  4002b4:	d021      	beq.n	4002fa <main+0x146>
			printf("%d\tCH%d\t %u Hz\t%u@%ums\t%s\n", dev_num,
  4002b6:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
									ch_get_part_number(dev_ptr),
  4002ba:	6978      	ldr	r0, [r7, #20]
  4002bc:	4b66      	ldr	r3, [pc, #408]	; (400458 <main+0x2a4>)
  4002be:	4798      	blx	r3
  4002c0:	4603      	mov	r3, r0
			printf("%d\tCH%d\t %u Hz\t%u@%ums\t%s\n", dev_num,
  4002c2:	4698      	mov	r8, r3
									(unsigned int) ch_get_frequency(dev_ptr),
  4002c4:	6978      	ldr	r0, [r7, #20]
  4002c6:	4b65      	ldr	r3, [pc, #404]	; (40045c <main+0x2a8>)
  4002c8:	4798      	blx	r3
  4002ca:	4681      	mov	r9, r0
									ch_get_rtc_cal_result(dev_ptr),
  4002cc:	6978      	ldr	r0, [r7, #20]
  4002ce:	4b64      	ldr	r3, [pc, #400]	; (400460 <main+0x2ac>)
  4002d0:	4798      	blx	r3
  4002d2:	4603      	mov	r3, r0
			printf("%d\tCH%d\t %u Hz\t%u@%ums\t%s\n", dev_num,
  4002d4:	461d      	mov	r5, r3
									ch_get_rtc_cal_pulselength(dev_ptr),
  4002d6:	6978      	ldr	r0, [r7, #20]
  4002d8:	4b62      	ldr	r3, [pc, #392]	; (400464 <main+0x2b0>)
  4002da:	4798      	blx	r3
  4002dc:	4603      	mov	r3, r0
			printf("%d\tCH%d\t %u Hz\t%u@%ums\t%s\n", dev_num,
  4002de:	461e      	mov	r6, r3
  4002e0:	6978      	ldr	r0, [r7, #20]
  4002e2:	4b61      	ldr	r3, [pc, #388]	; (400468 <main+0x2b4>)
  4002e4:	4798      	blx	r3
  4002e6:	4603      	mov	r3, r0
  4002e8:	9302      	str	r3, [sp, #8]
  4002ea:	9601      	str	r6, [sp, #4]
  4002ec:	9500      	str	r5, [sp, #0]
  4002ee:	464b      	mov	r3, r9
  4002f0:	4642      	mov	r2, r8
  4002f2:	4621      	mov	r1, r4
  4002f4:	485d      	ldr	r0, [pc, #372]	; (40046c <main+0x2b8>)
  4002f6:	4c45      	ldr	r4, [pc, #276]	; (40040c <main+0x258>)
  4002f8:	47a0      	blx	r4
	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  4002fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4002fe:	3301      	adds	r3, #1
  400300:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  400304:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  400308:	7ffb      	ldrb	r3, [r7, #31]
  40030a:	429a      	cmp	r2, r3
  40030c:	d3c6      	bcc.n	40029c <main+0xe8>
									ch_get_fw_version_string(dev_ptr));
		}
	}
	printf("\n");
  40030e:	4845      	ldr	r0, [pc, #276]	; (400424 <main+0x270>)
  400310:	4b3e      	ldr	r3, [pc, #248]	; (40040c <main+0x258>)
  400312:	4798      	blx	r3

	/* Register callback function to be called when Chirp sensor interrupts */
	ch_io_int_callback_set(grp_ptr, sensor_int_callback);
  400314:	4956      	ldr	r1, [pc, #344]	; (400470 <main+0x2bc>)
  400316:	6a38      	ldr	r0, [r7, #32]
  400318:	4b56      	ldr	r3, [pc, #344]	; (400474 <main+0x2c0>)
  40031a:	4798      	blx	r3

	/* Register callback function called when non-blocking I/Q readout completes
 	 *   Note, this callback will only be used if READ_IQ_DATA_NONBLOCK is 
	 *   defined to enable non-blocking I/Q readout in this application.
	 */
	ch_io_complete_callback_set(grp_ptr, io_complete_callback);
  40031c:	4956      	ldr	r1, [pc, #344]	; (400478 <main+0x2c4>)
  40031e:	6a38      	ldr	r0, [r7, #32]
  400320:	4b56      	ldr	r3, [pc, #344]	; (40047c <main+0x2c8>)
  400322:	4798      	blx	r3
	/* Configure each sensor with its operating parameters 
	 *   Initialize a ch_config_t structure with values defined in the
	 *   app_config.h header file, then write the configuration to the 
	 *   sensor using ch_set_config().
	 */
	printf ("Configuring sensor(s)...\n");
  400324:	4856      	ldr	r0, [pc, #344]	; (400480 <main+0x2cc>)
  400326:	4b39      	ldr	r3, [pc, #228]	; (40040c <main+0x258>)
  400328:	4798      	blx	r3
	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  40032a:	2300      	movs	r3, #0
  40032c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  400330:	e0cc      	b.n	4004cc <main+0x318>
		ch_config_t dev_config;
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  400332:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  400336:	4619      	mov	r1, r3
  400338:	6a38      	ldr	r0, [r7, #32]
  40033a:	4b45      	ldr	r3, [pc, #276]	; (400450 <main+0x29c>)
  40033c:	4798      	blx	r3
  40033e:	6138      	str	r0, [r7, #16]

		if (ch_sensor_is_connected(dev_ptr)) {
  400340:	6938      	ldr	r0, [r7, #16]
  400342:	4b44      	ldr	r3, [pc, #272]	; (400454 <main+0x2a0>)
  400344:	4798      	blx	r3
  400346:	4603      	mov	r3, r0
  400348:	2b00      	cmp	r3, #0
  40034a:	f000 80ba 	beq.w	4004c2 <main+0x30e>
			 *   All connected sensors are placed in hardware triggered mode.
 	 		 *   The first connected (lowest numbered) sensor will transmit and 
			 *   receive, all others will only receive.
 	 		 */

			num_connected_sensors++;			// count one more connected
  40034e:	4b4d      	ldr	r3, [pc, #308]	; (400484 <main+0x2d0>)
  400350:	781b      	ldrb	r3, [r3, #0]
  400352:	3301      	adds	r3, #1
  400354:	b2da      	uxtb	r2, r3
  400356:	4b4b      	ldr	r3, [pc, #300]	; (400484 <main+0x2d0>)
  400358:	701a      	strb	r2, [r3, #0]
			active_devices |= (1 << dev_num);	// add to active device bit mask
  40035a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40035e:	2201      	movs	r2, #1
  400360:	fa02 f303 	lsl.w	r3, r2, r3
  400364:	461a      	mov	r2, r3
  400366:	4b48      	ldr	r3, [pc, #288]	; (400488 <main+0x2d4>)
  400368:	681b      	ldr	r3, [r3, #0]
  40036a:	4313      	orrs	r3, r2
  40036c:	4a46      	ldr	r2, [pc, #280]	; (400488 <main+0x2d4>)
  40036e:	6013      	str	r3, [r2, #0]
			
			if (num_connected_sensors == 1) {	// if this is the first sensor
  400370:	4b44      	ldr	r3, [pc, #272]	; (400484 <main+0x2d0>)
  400372:	781b      	ldrb	r3, [r3, #0]
  400374:	2b01      	cmp	r3, #1
  400376:	d102      	bne.n	40037e <main+0x1ca>
				dev_config.mode = CHIRP_FIRST_SENSOR_MODE;
  400378:	2310      	movs	r3, #16
  40037a:	703b      	strb	r3, [r7, #0]
  40037c:	e001      	b.n	400382 <main+0x1ce>
			} else {									
				dev_config.mode = CHIRP_OTHER_SENSOR_MODE;
  40037e:	2320      	movs	r3, #32
  400380:	703b      	strb	r3, [r7, #0]
			}

			if (dev_config.mode != CH_MODE_FREERUN) {	// unless free-running
  400382:	783b      	ldrb	r3, [r7, #0]
  400384:	2b02      	cmp	r3, #2
  400386:	d005      	beq.n	400394 <main+0x1e0>
				num_triggered_devices++;				// will be triggered
  400388:	4b40      	ldr	r3, [pc, #256]	; (40048c <main+0x2d8>)
  40038a:	781b      	ldrb	r3, [r3, #0]
  40038c:	3301      	adds	r3, #1
  40038e:	b2da      	uxtb	r2, r3
  400390:	4b3e      	ldr	r3, [pc, #248]	; (40048c <main+0x2d8>)
  400392:	701a      	strb	r2, [r3, #0]
			}

			/* Init config structure with values from app_config.h */
			dev_config.max_range       = CHIRP_SENSOR_MAX_RANGE_MM;
  400394:	f241 3388 	movw	r3, #5000	; 0x1388
  400398:	807b      	strh	r3, [r7, #2]
			dev_config.static_range    = CHIRP_SENSOR_STATIC_RANGE;
  40039a:	2300      	movs	r3, #0
  40039c:	80bb      	strh	r3, [r7, #4]

			/* If sensor will be free-running, set internal sample interval */
			if (dev_config.mode == CH_MODE_FREERUN) {
  40039e:	783b      	ldrb	r3, [r7, #0]
  4003a0:	2b02      	cmp	r3, #2
  4003a2:	d103      	bne.n	4003ac <main+0x1f8>
				dev_config.sample_interval = MEASUREMENT_INTERVAL_MS;
  4003a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4003a8:	80fb      	strh	r3, [r7, #6]
  4003aa:	e001      	b.n	4003b0 <main+0x1fc>
			} else {
				dev_config.sample_interval = 0;
  4003ac:	2300      	movs	r3, #0
  4003ae:	80fb      	strh	r3, [r7, #6]
			}

			/* Set detection thresholds (CH201 only) */
			if (ch_get_part_number(dev_ptr) == CH201_PART_NUMBER) {
  4003b0:	6938      	ldr	r0, [r7, #16]
  4003b2:	4b29      	ldr	r3, [pc, #164]	; (400458 <main+0x2a4>)
  4003b4:	4798      	blx	r3
  4003b6:	4603      	mov	r3, r0
  4003b8:	2bc9      	cmp	r3, #201	; 0xc9
  4003ba:	d102      	bne.n	4003c2 <main+0x20e>
				/* Set pointer to struct containing detection thresholds */
				dev_config.thresh_ptr = &chirp_ch201_thresholds;	
  4003bc:	4b34      	ldr	r3, [pc, #208]	; (400490 <main+0x2dc>)
  4003be:	60bb      	str	r3, [r7, #8]
  4003c0:	e001      	b.n	4003c6 <main+0x212>
			} else {
				dev_config.thresh_ptr = 0;							
  4003c2:	2300      	movs	r3, #0
  4003c4:	60bb      	str	r3, [r7, #8]
			}

			/* Apply sensor configuration */
			chirp_error = ch_set_config(dev_ptr, &dev_config);
  4003c6:	463b      	mov	r3, r7
  4003c8:	4619      	mov	r1, r3
  4003ca:	6938      	ldr	r0, [r7, #16]
  4003cc:	4b31      	ldr	r3, [pc, #196]	; (400494 <main+0x2e0>)
  4003ce:	4798      	blx	r3
  4003d0:	4603      	mov	r3, r0
  4003d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			/* Enable sensor interrupt if using free-running mode 
			 *   Note that interrupt is automatically enabled if using 
			 *   triggered modes.
			 */
			if ((!chirp_error) && (dev_config.mode == CH_MODE_FREERUN)) {
  4003d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4003da:	2b00      	cmp	r3, #0
  4003dc:	d108      	bne.n	4003f0 <main+0x23c>
  4003de:	783b      	ldrb	r3, [r7, #0]
  4003e0:	2b02      	cmp	r3, #2
  4003e2:	d105      	bne.n	4003f0 <main+0x23c>
				chbsp_set_io_dir_in(dev_ptr);
  4003e4:	6938      	ldr	r0, [r7, #16]
  4003e6:	4b2c      	ldr	r3, [pc, #176]	; (400498 <main+0x2e4>)
  4003e8:	4798      	blx	r3
				chbsp_io_interrupt_enable(dev_ptr);
  4003ea:	6938      	ldr	r0, [r7, #16]
  4003ec:	4b2b      	ldr	r3, [pc, #172]	; (40049c <main+0x2e8>)
  4003ee:	4798      	blx	r3
			}

			/* Read back and display config settings */
			if (!chirp_error) {
  4003f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4003f4:	2b00      	cmp	r3, #0
  4003f6:	d155      	bne.n	4004a4 <main+0x2f0>
				display_config_info(dev_ptr);
  4003f8:	6938      	ldr	r0, [r7, #16]
  4003fa:	4b29      	ldr	r3, [pc, #164]	; (4004a0 <main+0x2ec>)
  4003fc:	4798      	blx	r3
  4003fe:	e057      	b.n	4004b0 <main+0x2fc>
  400400:	2000043c 	.word	0x2000043c
  400404:	00401f09 	.word	0x00401f09
  400408:	0040c06c 	.word	0x0040c06c
  40040c:	00409431 	.word	0x00409431
  400410:	0040c0a4 	.word	0x0040c0a4
  400414:	0040c0b0 	.word	0x0040c0b0
  400418:	0040c0bc 	.word	0x0040c0bc
  40041c:	0040c0d8 	.word	0x0040c0d8
  400420:	0040c0f0 	.word	0x0040c0f0
  400424:	0040c110 	.word	0x0040c110
  400428:	0040598b 	.word	0x0040598b
  40042c:	0040c114 	.word	0x0040c114
  400430:	20000510 	.word	0x20000510
  400434:	00405515 	.word	0x00405515
  400438:	00405719 	.word	0x00405719
  40043c:	0040c130 	.word	0x0040c130
  400440:	004058b1 	.word	0x004058b1
  400444:	0040c144 	.word	0x0040c144
  400448:	0040c148 	.word	0x0040c148
  40044c:	0040c154 	.word	0x0040c154
  400450:	00405937 	.word	0x00405937
  400454:	004058ed 	.word	0x004058ed
  400458:	00405905 	.word	0x00405905
  40045c:	00405b7b 	.word	0x00405b7b
  400460:	00405bad 	.word	0x00405bad
  400464:	00405b93 	.word	0x00405b93
  400468:	004059a3 	.word	0x004059a3
  40046c:	0040c180 	.word	0x0040c180
  400470:	004005a9 	.word	0x004005a9
  400474:	00405d43 	.word	0x00405d43
  400478:	0040063d 	.word	0x0040063d
  40047c:	00405d5f 	.word	0x00405d5f
  400480:	0040c19c 	.word	0x0040c19c
  400484:	20000370 	.word	0x20000370
  400488:	20000368 	.word	0x20000368
  40048c:	20000371 	.word	0x20000371
  400490:	200000fc 	.word	0x200000fc
  400494:	004057b9 	.word	0x004057b9
  400498:	0040200d 	.word	0x0040200d
  40049c:	004023bd 	.word	0x004023bd
  4004a0:	00400661 	.word	0x00400661
			} else {
				printf("Device %d: Error during ch_set_config()\n", dev_num);
  4004a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4004a8:	4619      	mov	r1, r3
  4004aa:	4826      	ldr	r0, [pc, #152]	; (400544 <main+0x390>)
  4004ac:	4b26      	ldr	r3, [pc, #152]	; (400548 <main+0x394>)
  4004ae:	4798      	blx	r3
			}

			/* Turn on an LED to indicate device connected */
			if (!chirp_error) {
  4004b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4004b4:	2b00      	cmp	r3, #0
  4004b6:	d104      	bne.n	4004c2 <main+0x30e>
				chbsp_led_on(dev_num);
  4004b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4004bc:	4618      	mov	r0, r3
  4004be:	4b23      	ldr	r3, [pc, #140]	; (40054c <main+0x398>)
  4004c0:	4798      	blx	r3
	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  4004c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4004c6:	3301      	adds	r3, #1
  4004c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  4004cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  4004d0:	7ffb      	ldrb	r3, [r7, #31]
  4004d2:	429a      	cmp	r2, r3
  4004d4:	f4ff af2d 	bcc.w	400332 <main+0x17e>
			}
		}
	}

	printf("\n");
  4004d8:	481d      	ldr	r0, [pc, #116]	; (400550 <main+0x39c>)
  4004da:	4b1b      	ldr	r3, [pc, #108]	; (400548 <main+0x394>)
  4004dc:	4798      	blx	r3

	/* Enable receive sensor pre-triggering, if specified */
	ch_set_rx_pretrigger(grp_ptr, RX_PRETRIGGER_ENABLE);
  4004de:	2101      	movs	r1, #1
  4004e0:	6a38      	ldr	r0, [r7, #32]
  4004e2:	4b1c      	ldr	r3, [pc, #112]	; (400554 <main+0x3a0>)
  4004e4:	4798      	blx	r3
	 *   expires, after the specified measurement interval.  The function also 
	 *   registers a callback function that will be called from the timer 
	 *   handler when the interrupt occurs.  The callback function will be 
	 *   used to trigger a measurement cycle on the group of sensors.
	 */
	if (num_triggered_devices > 0) {
  4004e6:	4b1c      	ldr	r3, [pc, #112]	; (400558 <main+0x3a4>)
  4004e8:	781b      	ldrb	r3, [r3, #0]
  4004ea:	2b00      	cmp	r3, #0
  4004ec:	d010      	beq.n	400510 <main+0x35c>
		printf("Initializing sample timer for %dms interval... ", 
  4004ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4004f2:	481a      	ldr	r0, [pc, #104]	; (40055c <main+0x3a8>)
  4004f4:	4b14      	ldr	r3, [pc, #80]	; (400548 <main+0x394>)
  4004f6:	4798      	blx	r3
				MEASUREMENT_INTERVAL_MS);

		chbsp_periodic_timer_init(MEASUREMENT_INTERVAL_MS, 
  4004f8:	4919      	ldr	r1, [pc, #100]	; (400560 <main+0x3ac>)
  4004fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4004fe:	4b19      	ldr	r3, [pc, #100]	; (400564 <main+0x3b0>)
  400500:	4798      	blx	r3
							      periodic_timer_callback);

		/* Enable interrupt and start timer to trigger sensor sampling */
		chbsp_periodic_timer_irq_enable();
  400502:	4b19      	ldr	r3, [pc, #100]	; (400568 <main+0x3b4>)
  400504:	4798      	blx	r3
		chbsp_periodic_timer_start();
  400506:	4b19      	ldr	r3, [pc, #100]	; (40056c <main+0x3b8>)
  400508:	4798      	blx	r3

		printf("OK\n");
  40050a:	4819      	ldr	r0, [pc, #100]	; (400570 <main+0x3bc>)
  40050c:	4b0e      	ldr	r3, [pc, #56]	; (400548 <main+0x394>)
  40050e:	4798      	blx	r3
	}

	printf("Starting measurements\n");
  400510:	4818      	ldr	r0, [pc, #96]	; (400574 <main+0x3c0>)
  400512:	4b0d      	ldr	r3, [pc, #52]	; (400548 <main+0x394>)
  400514:	4798      	blx	r3
		/*
		 * Put processor in light sleep mode if there are no pending tasks, but 
		 * never turn off the main clock, so that interrupts can still wake 
		 * the processor.
		 */
		if (taskflags==0) {
  400516:	4b18      	ldr	r3, [pc, #96]	; (400578 <main+0x3c4>)
  400518:	681b      	ldr	r3, [r3, #0]
  40051a:	2b00      	cmp	r3, #0
  40051c:	d101      	bne.n	400522 <main+0x36e>
			chbsp_proc_sleep();			// put processor in low-power sleep mode
  40051e:	4b17      	ldr	r3, [pc, #92]	; (40057c <main+0x3c8>)
  400520:	4798      	blx	r3

			/* We only continue here after an interrupt wakes the processor */
		}

		/* Check for sensor data-ready interrupt(s) */
		if (taskflags & DATA_READY_FLAG) {
  400522:	4b15      	ldr	r3, [pc, #84]	; (400578 <main+0x3c4>)
  400524:	681b      	ldr	r3, [r3, #0]
  400526:	f003 0301 	and.w	r3, r3, #1
  40052a:	2b00      	cmp	r3, #0
  40052c:	d0f3      	beq.n	400516 <main+0x362>

			/* All sensors have interrupted - handle sensor data */
			taskflags &= ~DATA_READY_FLAG;		// clear flag
  40052e:	4b12      	ldr	r3, [pc, #72]	; (400578 <main+0x3c4>)
  400530:	681b      	ldr	r3, [r3, #0]
  400532:	f023 0301 	bic.w	r3, r3, #1
  400536:	4a10      	ldr	r2, [pc, #64]	; (400578 <main+0x3c4>)
  400538:	6013      	str	r3, [r2, #0]
			handle_data_ready(grp_ptr);			// read and display measurement
  40053a:	6a38      	ldr	r0, [r7, #32]
  40053c:	4b10      	ldr	r3, [pc, #64]	; (400580 <main+0x3cc>)
  40053e:	4798      	blx	r3
		if (taskflags==0) {
  400540:	e7e9      	b.n	400516 <main+0x362>
  400542:	bf00      	nop
  400544:	0040c1b8 	.word	0x0040c1b8
  400548:	00409431 	.word	0x00409431
  40054c:	00402e49 	.word	0x00402e49
  400550:	0040c110 	.word	0x0040c110
  400554:	00405dd9 	.word	0x00405dd9
  400558:	20000371 	.word	0x20000371
  40055c:	0040c1e4 	.word	0x0040c1e4
  400560:	00400585 	.word	0x00400585
  400564:	00402b3d 	.word	0x00402b3d
  400568:	00402d85 	.word	0x00402d85
  40056c:	00402dad 	.word	0x00402dad
  400570:	0040c144 	.word	0x0040c144
  400574:	0040c214 	.word	0x0040c214
  400578:	20000364 	.word	0x20000364
  40057c:	00402e35 	.word	0x00402e35
  400580:	00400839 	.word	0x00400839

00400584 <periodic_timer_callback>:
 *
 * This function is registered by the call to chbsp_periodic_timer_init() 
 * in main().
 */

void periodic_timer_callback(void) {
  400584:	b580      	push	{r7, lr}
  400586:	af00      	add	r7, sp, #0

	if (num_triggered_devices > 0) {
  400588:	4b04      	ldr	r3, [pc, #16]	; (40059c <periodic_timer_callback+0x18>)
  40058a:	781b      	ldrb	r3, [r3, #0]
  40058c:	2b00      	cmp	r3, #0
  40058e:	d002      	beq.n	400596 <periodic_timer_callback+0x12>
		ch_group_trigger(&chirp_group);
  400590:	4803      	ldr	r0, [pc, #12]	; (4005a0 <periodic_timer_callback+0x1c>)
  400592:	4b04      	ldr	r3, [pc, #16]	; (4005a4 <periodic_timer_callback+0x20>)
  400594:	4798      	blx	r3
	}
}
  400596:	bf00      	nop
  400598:	bd80      	pop	{r7, pc}
  40059a:	bf00      	nop
  40059c:	20000371 	.word	0x20000371
  4005a0:	2000043c 	.word	0x2000043c
  4005a4:	004058d1 	.word	0x004058d1

004005a8 <sensor_int_callback>:
 * DATA_READY_FLAG is set.  That flag will be detected in the main() loop.
 *
 * This callback function is registered by the call to ch_io_int_callback_set() 
 * in main().
 */
static void sensor_int_callback(ch_group_t *grp_ptr, uint8_t dev_num) {
  4005a8:	b580      	push	{r7, lr}
  4005aa:	b084      	sub	sp, #16
  4005ac:	af00      	add	r7, sp, #0
  4005ae:	6078      	str	r0, [r7, #4]
  4005b0:	460b      	mov	r3, r1
  4005b2:	70fb      	strb	r3, [r7, #3]
	ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  4005b4:	78fb      	ldrb	r3, [r7, #3]
  4005b6:	4619      	mov	r1, r3
  4005b8:	6878      	ldr	r0, [r7, #4]
  4005ba:	4b18      	ldr	r3, [pc, #96]	; (40061c <sensor_int_callback+0x74>)
  4005bc:	4798      	blx	r3
  4005be:	60f8      	str	r0, [r7, #12]

	data_ready_devices |= (1 << dev_num);		// add to data-ready bit mask
  4005c0:	78fb      	ldrb	r3, [r7, #3]
  4005c2:	2201      	movs	r2, #1
  4005c4:	fa02 f303 	lsl.w	r3, r2, r3
  4005c8:	461a      	mov	r2, r3
  4005ca:	4b15      	ldr	r3, [pc, #84]	; (400620 <sensor_int_callback+0x78>)
  4005cc:	681b      	ldr	r3, [r3, #0]
  4005ce:	4313      	orrs	r3, r2
  4005d0:	4a13      	ldr	r2, [pc, #76]	; (400620 <sensor_int_callback+0x78>)
  4005d2:	6013      	str	r3, [r2, #0]

	if (data_ready_devices == active_devices) {
  4005d4:	4b12      	ldr	r3, [pc, #72]	; (400620 <sensor_int_callback+0x78>)
  4005d6:	681a      	ldr	r2, [r3, #0]
  4005d8:	4b12      	ldr	r3, [pc, #72]	; (400624 <sensor_int_callback+0x7c>)
  4005da:	681b      	ldr	r3, [r3, #0]
  4005dc:	429a      	cmp	r2, r3
  4005de:	d118      	bne.n	400612 <sensor_int_callback+0x6a>
		/* All active sensors have interrupted after performing a measurement */
		data_ready_devices = 0;
  4005e0:	4b0f      	ldr	r3, [pc, #60]	; (400620 <sensor_int_callback+0x78>)
  4005e2:	2200      	movs	r2, #0
  4005e4:	601a      	str	r2, [r3, #0]

		/* Set data-ready flag - it will be checked in main() loop */
		taskflags |= DATA_READY_FLAG;
  4005e6:	4b10      	ldr	r3, [pc, #64]	; (400628 <sensor_int_callback+0x80>)
  4005e8:	681b      	ldr	r3, [r3, #0]
  4005ea:	f043 0301 	orr.w	r3, r3, #1
  4005ee:	4a0e      	ldr	r2, [pc, #56]	; (400628 <sensor_int_callback+0x80>)
  4005f0:	6013      	str	r3, [r2, #0]

		/* Disable interrupt unless in free-running mode
		 *   It will automatically be re-enabled by the next ch_group_trigger() 
		 */
		if (ch_get_mode(dev_ptr) == CH_MODE_FREERUN) {
  4005f2:	68f8      	ldr	r0, [r7, #12]
  4005f4:	4b0d      	ldr	r3, [pc, #52]	; (40062c <sensor_int_callback+0x84>)
  4005f6:	4798      	blx	r3
  4005f8:	4603      	mov	r3, r0
  4005fa:	2b02      	cmp	r3, #2
  4005fc:	d106      	bne.n	40060c <sensor_int_callback+0x64>
			chbsp_set_io_dir_in(dev_ptr);				// set INT line as input
  4005fe:	68f8      	ldr	r0, [r7, #12]
  400600:	4b0b      	ldr	r3, [pc, #44]	; (400630 <sensor_int_callback+0x88>)
  400602:	4798      	blx	r3
			chbsp_group_io_interrupt_enable(grp_ptr);
  400604:	6878      	ldr	r0, [r7, #4]
  400606:	4b0b      	ldr	r3, [pc, #44]	; (400634 <sensor_int_callback+0x8c>)
  400608:	4798      	blx	r3
		} else {
			chbsp_group_io_interrupt_disable(grp_ptr);
		}
	}
}
  40060a:	e002      	b.n	400612 <sensor_int_callback+0x6a>
			chbsp_group_io_interrupt_disable(grp_ptr);
  40060c:	6878      	ldr	r0, [r7, #4]
  40060e:	4b0a      	ldr	r3, [pc, #40]	; (400638 <sensor_int_callback+0x90>)
  400610:	4798      	blx	r3
}
  400612:	bf00      	nop
  400614:	3710      	adds	r7, #16
  400616:	46bd      	mov	sp, r7
  400618:	bd80      	pop	{r7, pc}
  40061a:	bf00      	nop
  40061c:	00405937 	.word	0x00405937
  400620:	2000036c 	.word	0x2000036c
  400624:	20000368 	.word	0x20000368
  400628:	20000364 	.word	0x20000364
  40062c:	004059bb 	.word	0x004059bb
  400630:	0040200d 	.word	0x0040200d
  400634:	00402371 	.word	0x00402371
  400638:	0040241d 	.word	0x0040241d

0040063c <io_complete_callback>:
 * ch_io_complete_callback_set() in main().
 *
 *  Note: This callback is only used if READ_IQ_NONBLOCKING is defined to 
 *  select non-blocking I/Q readout in this application.
 */
static void io_complete_callback(ch_group_t __attribute__((unused)) *grp_ptr) {
  40063c:	b480      	push	{r7}
  40063e:	b083      	sub	sp, #12
  400640:	af00      	add	r7, sp, #0
  400642:	6078      	str	r0, [r7, #4]

	taskflags |= IQ_READY_FLAG;
  400644:	4b05      	ldr	r3, [pc, #20]	; (40065c <io_complete_callback+0x20>)
  400646:	681b      	ldr	r3, [r3, #0]
  400648:	f043 0302 	orr.w	r3, r3, #2
  40064c:	4a03      	ldr	r2, [pc, #12]	; (40065c <io_complete_callback+0x20>)
  40064e:	6013      	str	r3, [r2, #0]
}
  400650:	bf00      	nop
  400652:	370c      	adds	r7, #12
  400654:	46bd      	mov	sp, r7
  400656:	f85d 7b04 	ldr.w	r7, [sp], #4
  40065a:	4770      	bx	lr
  40065c:	20000364 	.word	0x20000364

00400660 <display_config_info>:
 * range (if used) are displayed.
 *
 * For CH201 sensors only, the multiple detection threshold values are also 
 * displayed.
 */
static uint8_t display_config_info(ch_dev_t *dev_ptr) {
  400660:	b590      	push	{r4, r7, lr}
  400662:	b091      	sub	sp, #68	; 0x44
  400664:	af00      	add	r7, sp, #0
  400666:	6078      	str	r0, [r7, #4]
	ch_config_t 	read_config;
	uint8_t 		chirp_error;
	uint8_t 		dev_num = ch_get_dev_num(dev_ptr);
  400668:	6878      	ldr	r0, [r7, #4]
  40066a:	4b62      	ldr	r3, [pc, #392]	; (4007f4 <display_config_info+0x194>)
  40066c:	4798      	blx	r3
  40066e:	4603      	mov	r3, r0
  400670:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	/* Read configuration values for the device into ch_config_t structure */
	chirp_error = ch_get_config(dev_ptr, &read_config);
  400674:	f107 0320 	add.w	r3, r7, #32
  400678:	4619      	mov	r1, r3
  40067a:	6878      	ldr	r0, [r7, #4]
  40067c:	4b5e      	ldr	r3, [pc, #376]	; (4007f8 <display_config_info+0x198>)
  40067e:	4798      	blx	r3
  400680:	4603      	mov	r3, r0
  400682:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (!chirp_error) {
  400686:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
  40068a:	2b00      	cmp	r3, #0
  40068c:	f040 80a5 	bne.w	4007da <display_config_info+0x17a>
		const char *mode_string;

		switch (read_config.mode) {
  400690:	f897 3020 	ldrb.w	r3, [r7, #32]
  400694:	2b20      	cmp	r3, #32
  400696:	d851      	bhi.n	40073c <display_config_info+0xdc>
  400698:	a201      	add	r2, pc, #4	; (adr r2, 4006a0 <display_config_info+0x40>)
  40069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40069e:	bf00      	nop
  4006a0:	00400725 	.word	0x00400725
  4006a4:	0040073d 	.word	0x0040073d
  4006a8:	0040072b 	.word	0x0040072b
  4006ac:	0040073d 	.word	0x0040073d
  4006b0:	0040073d 	.word	0x0040073d
  4006b4:	0040073d 	.word	0x0040073d
  4006b8:	0040073d 	.word	0x0040073d
  4006bc:	0040073d 	.word	0x0040073d
  4006c0:	0040073d 	.word	0x0040073d
  4006c4:	0040073d 	.word	0x0040073d
  4006c8:	0040073d 	.word	0x0040073d
  4006cc:	0040073d 	.word	0x0040073d
  4006d0:	0040073d 	.word	0x0040073d
  4006d4:	0040073d 	.word	0x0040073d
  4006d8:	0040073d 	.word	0x0040073d
  4006dc:	0040073d 	.word	0x0040073d
  4006e0:	00400731 	.word	0x00400731
  4006e4:	0040073d 	.word	0x0040073d
  4006e8:	0040073d 	.word	0x0040073d
  4006ec:	0040073d 	.word	0x0040073d
  4006f0:	0040073d 	.word	0x0040073d
  4006f4:	0040073d 	.word	0x0040073d
  4006f8:	0040073d 	.word	0x0040073d
  4006fc:	0040073d 	.word	0x0040073d
  400700:	0040073d 	.word	0x0040073d
  400704:	0040073d 	.word	0x0040073d
  400708:	0040073d 	.word	0x0040073d
  40070c:	0040073d 	.word	0x0040073d
  400710:	0040073d 	.word	0x0040073d
  400714:	0040073d 	.word	0x0040073d
  400718:	0040073d 	.word	0x0040073d
  40071c:	0040073d 	.word	0x0040073d
  400720:	00400737 	.word	0x00400737
			case CH_MODE_IDLE:
				mode_string = "IDLE";
  400724:	4b35      	ldr	r3, [pc, #212]	; (4007fc <display_config_info+0x19c>)
  400726:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
  400728:	e00a      	b.n	400740 <display_config_info+0xe0>
			case CH_MODE_FREERUN:
				mode_string = "FREERUN";
  40072a:	4b35      	ldr	r3, [pc, #212]	; (400800 <display_config_info+0x1a0>)
  40072c:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
  40072e:	e007      	b.n	400740 <display_config_info+0xe0>
			case CH_MODE_TRIGGERED_TX_RX:
				mode_string = "TRIGGERED_TX_RX";
  400730:	4b34      	ldr	r3, [pc, #208]	; (400804 <display_config_info+0x1a4>)
  400732:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
  400734:	e004      	b.n	400740 <display_config_info+0xe0>
			case CH_MODE_TRIGGERED_RX_ONLY:
				mode_string = "TRIGGERED_RX_ONLY";
  400736:	4b34      	ldr	r3, [pc, #208]	; (400808 <display_config_info+0x1a8>)
  400738:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
  40073a:	e001      	b.n	400740 <display_config_info+0xe0>
			default:
				mode_string = "UNKNOWN";
  40073c:	4b33      	ldr	r3, [pc, #204]	; (40080c <display_config_info+0x1ac>)
  40073e:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		/* Display sensor number, mode and max range */
		printf("Sensor %d:\tmax_range=%dmm \tmode=%s  ", dev_num,
  400740:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
				read_config.max_range, mode_string);
  400744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
		printf("Sensor %d:\tmax_range=%dmm \tmode=%s  ", dev_num,
  400746:	461a      	mov	r2, r3
  400748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40074a:	4831      	ldr	r0, [pc, #196]	; (400810 <display_config_info+0x1b0>)
  40074c:	4c31      	ldr	r4, [pc, #196]	; (400814 <display_config_info+0x1b4>)
  40074e:	47a0      	blx	r4

		/* Display static target rejection range, if used */
		if (read_config.static_range != 0) {
  400750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  400752:	2b00      	cmp	r3, #0
  400754:	d004      	beq.n	400760 <display_config_info+0x100>
			printf("static_range=%d samples", read_config.static_range);
  400756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  400758:	4619      	mov	r1, r3
  40075a:	482f      	ldr	r0, [pc, #188]	; (400818 <display_config_info+0x1b8>)
  40075c:	4b2d      	ldr	r3, [pc, #180]	; (400814 <display_config_info+0x1b4>)
  40075e:	4798      	blx	r3
		}
	
		/* Display detection thresholds (only supported on CH201) */
		if (ch_get_part_number(dev_ptr) == CH201_PART_NUMBER) {
  400760:	6878      	ldr	r0, [r7, #4]
  400762:	4b2e      	ldr	r3, [pc, #184]	; (40081c <display_config_info+0x1bc>)
  400764:	4798      	blx	r3
  400766:	4603      	mov	r3, r0
  400768:	2bc9      	cmp	r3, #201	; 0xc9
  40076a:	d132      	bne.n	4007d2 <display_config_info+0x172>
			ch_thresholds_t read_thresholds;

			/* Get threshold values in structure */
			chirp_error = ch_get_thresholds(dev_ptr, &read_thresholds);
  40076c:	f107 0308 	add.w	r3, r7, #8
  400770:	4619      	mov	r1, r3
  400772:	6878      	ldr	r0, [r7, #4]
  400774:	4b2a      	ldr	r3, [pc, #168]	; (400820 <display_config_info+0x1c0>)
  400776:	4798      	blx	r3
  400778:	4603      	mov	r3, r0
  40077a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			if (!chirp_error) {
  40077e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
  400782:	2b00      	cmp	r3, #0
  400784:	d11f      	bne.n	4007c6 <display_config_info+0x166>
				printf("\n  Detection thresholds:\n");
  400786:	4827      	ldr	r0, [pc, #156]	; (400824 <display_config_info+0x1c4>)
  400788:	4b22      	ldr	r3, [pc, #136]	; (400814 <display_config_info+0x1b4>)
  40078a:	4798      	blx	r3
				for (int i = 0; i < CH_NUM_THRESHOLDS; i++) {
  40078c:	2300      	movs	r3, #0
  40078e:	637b      	str	r3, [r7, #52]	; 0x34
  400790:	e015      	b.n	4007be <display_config_info+0x15e>
					printf("     %d\tstart: %2d\tlevel: %d\n", i, 
							read_thresholds.threshold[i].start_sample,
  400792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400794:	009b      	lsls	r3, r3, #2
  400796:	f107 0240 	add.w	r2, r7, #64	; 0x40
  40079a:	4413      	add	r3, r2
  40079c:	f833 3c38 	ldrh.w	r3, [r3, #-56]
					printf("     %d\tstart: %2d\tlevel: %d\n", i, 
  4007a0:	461a      	mov	r2, r3
							read_thresholds.threshold[i].level);
  4007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4007a4:	009b      	lsls	r3, r3, #2
  4007a6:	f107 0140 	add.w	r1, r7, #64	; 0x40
  4007aa:	440b      	add	r3, r1
  4007ac:	f833 3c36 	ldrh.w	r3, [r3, #-54]
					printf("     %d\tstart: %2d\tlevel: %d\n", i, 
  4007b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
  4007b2:	481d      	ldr	r0, [pc, #116]	; (400828 <display_config_info+0x1c8>)
  4007b4:	4c17      	ldr	r4, [pc, #92]	; (400814 <display_config_info+0x1b4>)
  4007b6:	47a0      	blx	r4
				for (int i = 0; i < CH_NUM_THRESHOLDS; i++) {
  4007b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4007ba:	3301      	adds	r3, #1
  4007bc:	637b      	str	r3, [r7, #52]	; 0x34
  4007be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4007c0:	2b05      	cmp	r3, #5
  4007c2:	dde6      	ble.n	400792 <display_config_info+0x132>
  4007c4:	e005      	b.n	4007d2 <display_config_info+0x172>
				}
			} else {
				printf(" Device %d: Error during ch_get_thresholds()", dev_num);
  4007c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  4007ca:	4619      	mov	r1, r3
  4007cc:	4817      	ldr	r0, [pc, #92]	; (40082c <display_config_info+0x1cc>)
  4007ce:	4b11      	ldr	r3, [pc, #68]	; (400814 <display_config_info+0x1b4>)
  4007d0:	4798      	blx	r3
			}
		}
		printf("\n");
  4007d2:	4817      	ldr	r0, [pc, #92]	; (400830 <display_config_info+0x1d0>)
  4007d4:	4b0f      	ldr	r3, [pc, #60]	; (400814 <display_config_info+0x1b4>)
  4007d6:	4798      	blx	r3
  4007d8:	e005      	b.n	4007e6 <display_config_info+0x186>

	} else {
		printf(" Device %d: Error during ch_get_config()\n", dev_num);
  4007da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  4007de:	4619      	mov	r1, r3
  4007e0:	4814      	ldr	r0, [pc, #80]	; (400834 <display_config_info+0x1d4>)
  4007e2:	4b0c      	ldr	r3, [pc, #48]	; (400814 <display_config_info+0x1b4>)
  4007e4:	4798      	blx	r3
	}

	return chirp_error;
  4007e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
  4007ea:	4618      	mov	r0, r3
  4007ec:	3744      	adds	r7, #68	; 0x44
  4007ee:	46bd      	mov	sp, r7
  4007f0:	bd90      	pop	{r4, r7, pc}
  4007f2:	bf00      	nop
  4007f4:	0040591d 	.word	0x0040591d
  4007f8:	00405775 	.word	0x00405775
  4007fc:	0040c22c 	.word	0x0040c22c
  400800:	0040c234 	.word	0x0040c234
  400804:	0040c23c 	.word	0x0040c23c
  400808:	0040c24c 	.word	0x0040c24c
  40080c:	0040c260 	.word	0x0040c260
  400810:	0040c268 	.word	0x0040c268
  400814:	00409431 	.word	0x00409431
  400818:	0040c290 	.word	0x0040c290
  40081c:	00405905 	.word	0x00405905
  400820:	00405cd3 	.word	0x00405cd3
  400824:	0040c2a8 	.word	0x0040c2a8
  400828:	0040c2c4 	.word	0x0040c2c4
  40082c:	0040c2e4 	.word	0x0040c2e4
  400830:	0040c110 	.word	0x0040c110
  400834:	0040c314 	.word	0x0040c314

00400838 <handle_data_ready>:
 *
 * See the comments in app_config.h for information about the amplitude data
 * and I/Q readout build options.
 *
 */
static uint8_t handle_data_ready(ch_group_t *grp_ptr) {
  400838:	b590      	push	{r4, r7, lr}
  40083a:	b089      	sub	sp, #36	; 0x24
  40083c:	af02      	add	r7, sp, #8
  40083e:	6078      	str	r0, [r7, #4]
	uint8_t 	dev_num;
	int 		num_samples = 0;
  400840:	2300      	movs	r3, #0
  400842:	613b      	str	r3, [r7, #16]
	uint8_t 	ret_val = 0;
  400844:	2300      	movs	r3, #0
  400846:	73fb      	strb	r3, [r7, #15]
	 *   This loop will write the sensor data to this application's "chirp_data"
	 *   array.  Each sensor has a separate chirp_data_t structure in that 
	 *   array, so the device number is used as an index.
	 */

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  400848:	2300      	movs	r3, #0
  40084a:	75fb      	strb	r3, [r7, #23]
  40084c:	e076      	b.n	40093c <handle_data_ready+0x104>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  40084e:	7dfb      	ldrb	r3, [r7, #23]
  400850:	4619      	mov	r1, r3
  400852:	6878      	ldr	r0, [r7, #4]
  400854:	4b41      	ldr	r3, [pc, #260]	; (40095c <handle_data_ready+0x124>)
  400856:	4798      	blx	r3
  400858:	60b8      	str	r0, [r7, #8]

		if (ch_sensor_is_connected(dev_ptr)) {
  40085a:	68b8      	ldr	r0, [r7, #8]
  40085c:	4b40      	ldr	r3, [pc, #256]	; (400960 <handle_data_ready+0x128>)
  40085e:	4798      	blx	r3
  400860:	4603      	mov	r3, r0
  400862:	2b00      	cmp	r3, #0
  400864:	d067      	beq.n	400936 <handle_data_ready+0xfe>
			 *   For sensor in transmit/receive mode, report one-way echo 
			 *   distance,  For sensor(s) in receive-only mode, report direct 
			 *   one-way distance from transmitting sensor 
			 */
			
			if (ch_get_mode(dev_ptr) == CH_MODE_TRIGGERED_RX_ONLY) {
  400866:	68b8      	ldr	r0, [r7, #8]
  400868:	4b3e      	ldr	r3, [pc, #248]	; (400964 <handle_data_ready+0x12c>)
  40086a:	4798      	blx	r3
  40086c:	4603      	mov	r3, r0
  40086e:	2b20      	cmp	r3, #32
  400870:	d109      	bne.n	400886 <handle_data_ready+0x4e>
				chirp_data[dev_num].range = ch_get_range(dev_ptr, 
  400872:	7dfc      	ldrb	r4, [r7, #23]
  400874:	2102      	movs	r1, #2
  400876:	68b8      	ldr	r0, [r7, #8]
  400878:	4b3b      	ldr	r3, [pc, #236]	; (400968 <handle_data_ready+0x130>)
  40087a:	4798      	blx	r3
  40087c:	4602      	mov	r2, r0
  40087e:	4b3b      	ldr	r3, [pc, #236]	; (40096c <handle_data_ready+0x134>)
  400880:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
  400884:	e008      	b.n	400898 <handle_data_ready+0x60>
														CH_RANGE_DIRECT);
			} else {
				chirp_data[dev_num].range = ch_get_range(dev_ptr, 
  400886:	7dfc      	ldrb	r4, [r7, #23]
  400888:	2100      	movs	r1, #0
  40088a:	68b8      	ldr	r0, [r7, #8]
  40088c:	4b36      	ldr	r3, [pc, #216]	; (400968 <handle_data_ready+0x130>)
  40088e:	4798      	blx	r3
  400890:	4602      	mov	r2, r0
  400892:	4b36      	ldr	r3, [pc, #216]	; (40096c <handle_data_ready+0x134>)
  400894:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
														CH_RANGE_ECHO_ONE_WAY);
			}

			if (chirp_data[dev_num].range == CH_NO_TARGET) {
  400898:	7dfb      	ldrb	r3, [r7, #23]
  40089a:	4a34      	ldr	r2, [pc, #208]	; (40096c <handle_data_ready+0x134>)
  40089c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4008a0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4008a4:	d10b      	bne.n	4008be <handle_data_ready+0x86>
				/* No target object was detected - no range value */

				chirp_data[dev_num].amplitude = 0;  /* no updated amplitude */
  4008a6:	7dfb      	ldrb	r3, [r7, #23]
  4008a8:	4a30      	ldr	r2, [pc, #192]	; (40096c <handle_data_ready+0x134>)
  4008aa:	00db      	lsls	r3, r3, #3
  4008ac:	4413      	add	r3, r2
  4008ae:	2200      	movs	r2, #0
  4008b0:	809a      	strh	r2, [r3, #4]

				printf("Port %d:          no target found        ", dev_num);
  4008b2:	7dfb      	ldrb	r3, [r7, #23]
  4008b4:	4619      	mov	r1, r3
  4008b6:	482e      	ldr	r0, [pc, #184]	; (400970 <handle_data_ready+0x138>)
  4008b8:	4b2e      	ldr	r3, [pc, #184]	; (400974 <handle_data_ready+0x13c>)
  4008ba:	4798      	blx	r3
  4008bc:	e027      	b.n	40090e <handle_data_ready+0xd6>
			} else {
				/* Target object was successfully detected (range available) */

				 /* Get the new amplitude value - it's only updated if range 
				  * was successfully measured.  */
				chirp_data[dev_num].amplitude = ch_get_amplitude(dev_ptr);
  4008be:	7dfc      	ldrb	r4, [r7, #23]
  4008c0:	68b8      	ldr	r0, [r7, #8]
  4008c2:	4b2d      	ldr	r3, [pc, #180]	; (400978 <handle_data_ready+0x140>)
  4008c4:	4798      	blx	r3
  4008c6:	4603      	mov	r3, r0
  4008c8:	4619      	mov	r1, r3
  4008ca:	4a28      	ldr	r2, [pc, #160]	; (40096c <handle_data_ready+0x134>)
  4008cc:	00e3      	lsls	r3, r4, #3
  4008ce:	4413      	add	r3, r2
  4008d0:	460a      	mov	r2, r1
  4008d2:	809a      	strh	r2, [r3, #4]

				printf("Port %d:  Range: %0.1f mm  Amp: %u  ", dev_num, 
  4008d4:	7dfc      	ldrb	r4, [r7, #23]
						(float) chirp_data[dev_num].range/32.0f,
  4008d6:	7dfb      	ldrb	r3, [r7, #23]
  4008d8:	4a24      	ldr	r2, [pc, #144]	; (40096c <handle_data_ready+0x134>)
  4008da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4008de:	ee07 3a90 	vmov	s15, r3
  4008e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4008e6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 40097c <handle_data_ready+0x144>
  4008ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
				printf("Port %d:  Range: %0.1f mm  Amp: %u  ", dev_num, 
  4008ee:	4b24      	ldr	r3, [pc, #144]	; (400980 <handle_data_ready+0x148>)
  4008f0:	ee16 0a90 	vmov	r0, s13
  4008f4:	4798      	blx	r3
					   	chirp_data[dev_num].amplitude);
  4008f6:	7dfb      	ldrb	r3, [r7, #23]
  4008f8:	4a1c      	ldr	r2, [pc, #112]	; (40096c <handle_data_ready+0x134>)
  4008fa:	00db      	lsls	r3, r3, #3
  4008fc:	4413      	add	r3, r2
  4008fe:	889b      	ldrh	r3, [r3, #4]
				printf("Port %d:  Range: %0.1f mm  Amp: %u  ", dev_num, 
  400900:	9300      	str	r3, [sp, #0]
  400902:	4602      	mov	r2, r0
  400904:	460b      	mov	r3, r1
  400906:	4621      	mov	r1, r4
  400908:	481e      	ldr	r0, [pc, #120]	; (400984 <handle_data_ready+0x14c>)
  40090a:	4c1a      	ldr	r4, [pc, #104]	; (400974 <handle_data_ready+0x13c>)
  40090c:	47a0      	blx	r4
			}

			/* Store number of active samples in this measurement */
			num_samples = ch_get_num_samples(dev_ptr);
  40090e:	68b8      	ldr	r0, [r7, #8]
  400910:	4b1d      	ldr	r3, [pc, #116]	; (400988 <handle_data_ready+0x150>)
  400912:	4798      	blx	r3
  400914:	4603      	mov	r3, r0
  400916:	613b      	str	r3, [r7, #16]
			chirp_data[dev_num].num_samples = num_samples;
  400918:	7dfb      	ldrb	r3, [r7, #23]
  40091a:	693a      	ldr	r2, [r7, #16]
  40091c:	b291      	uxth	r1, r2
  40091e:	4a13      	ldr	r2, [pc, #76]	; (40096c <handle_data_ready+0x134>)
  400920:	00db      	lsls	r3, r3, #3
  400922:	4413      	add	r3, r2
  400924:	460a      	mov	r2, r1
  400926:	80da      	strh	r2, [r3, #6]
			/* Optionally read raw I/Q values for all samples */
#ifdef READ_IQ_DATA
			display_iq_data(dev_ptr);
#endif
			/* If more than 2 sensors, put each on its own line */
			if (num_connected_sensors > 2) {
  400928:	4b18      	ldr	r3, [pc, #96]	; (40098c <handle_data_ready+0x154>)
  40092a:	781b      	ldrb	r3, [r3, #0]
  40092c:	2b02      	cmp	r3, #2
  40092e:	d902      	bls.n	400936 <handle_data_ready+0xfe>
				printf("\n");
  400930:	4817      	ldr	r0, [pc, #92]	; (400990 <handle_data_ready+0x158>)
  400932:	4b10      	ldr	r3, [pc, #64]	; (400974 <handle_data_ready+0x13c>)
  400934:	4798      	blx	r3
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  400936:	7dfb      	ldrb	r3, [r7, #23]
  400938:	3301      	adds	r3, #1
  40093a:	75fb      	strb	r3, [r7, #23]
  40093c:	6878      	ldr	r0, [r7, #4]
  40093e:	4b15      	ldr	r3, [pc, #84]	; (400994 <handle_data_ready+0x15c>)
  400940:	4798      	blx	r3
  400942:	4603      	mov	r3, r0
  400944:	461a      	mov	r2, r3
  400946:	7dfb      	ldrb	r3, [r7, #23]
  400948:	4293      	cmp	r3, r2
  40094a:	d380      	bcc.n	40084e <handle_data_ready+0x16>
			}
		}
	}
	printf("\n");
  40094c:	4810      	ldr	r0, [pc, #64]	; (400990 <handle_data_ready+0x158>)
  40094e:	4b09      	ldr	r3, [pc, #36]	; (400974 <handle_data_ready+0x13c>)
  400950:	4798      	blx	r3
	
	return ret_val;
  400952:	7bfb      	ldrb	r3, [r7, #15]
}
  400954:	4618      	mov	r0, r3
  400956:	371c      	adds	r7, #28
  400958:	46bd      	mov	sp, r7
  40095a:	bd90      	pop	{r4, r7, pc}
  40095c:	00405937 	.word	0x00405937
  400960:	004058ed 	.word	0x004058ed
  400964:	004059bb 	.word	0x004059bb
  400968:	00405b1b 	.word	0x00405b1b
  40096c:	200004f0 	.word	0x200004f0
  400970:	0040c340 	.word	0x0040c340
  400974:	00409431 	.word	0x00409431
  400978:	00405b4d 	.word	0x00405b4d
  40097c:	42000000 	.word	0x42000000
  400980:	0040b6c5 	.word	0x0040b6c5
  400984:	0040c36c 	.word	0x0040c36c
  400988:	00405a4b 	.word	0x00405a4b
  40098c:	20000370 	.word	0x20000370
  400990:	0040c110 	.word	0x0040c110
  400994:	0040598b 	.word	0x0040598b

00400998 <time_get_in_us>:
  400998:	b598      	push	{r3, r4, r7, lr}
  40099a:	af00      	add	r7, sp, #0
  40099c:	4b03      	ldr	r3, [pc, #12]	; (4009ac <time_get_in_us+0x14>)
  40099e:	4798      	blx	r3
  4009a0:	4603      	mov	r3, r0
  4009a2:	460c      	mov	r4, r1
  4009a4:	4618      	mov	r0, r3
  4009a6:	4621      	mov	r1, r4
  4009a8:	bd98      	pop	{r3, r4, r7, pc}
  4009aa:	bf00      	nop
  4009ac:	00402e9d 	.word	0x00402e9d

004009b0 <osc_enable>:
  4009b0:	b580      	push	{r7, lr}
  4009b2:	b082      	sub	sp, #8
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	6078      	str	r0, [r7, #4]
  4009b8:	687b      	ldr	r3, [r7, #4]
  4009ba:	2b07      	cmp	r3, #7
  4009bc:	d831      	bhi.n	400a22 <osc_enable+0x72>
  4009be:	a201      	add	r2, pc, #4	; (adr r2, 4009c4 <osc_enable+0x14>)
  4009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009c4:	00400a21 	.word	0x00400a21
  4009c8:	004009e5 	.word	0x004009e5
  4009cc:	004009ed 	.word	0x004009ed
  4009d0:	004009f5 	.word	0x004009f5
  4009d4:	004009fd 	.word	0x004009fd
  4009d8:	00400a05 	.word	0x00400a05
  4009dc:	00400a0d 	.word	0x00400a0d
  4009e0:	00400a17 	.word	0x00400a17
  4009e4:	2000      	movs	r0, #0
  4009e6:	4b11      	ldr	r3, [pc, #68]	; (400a2c <osc_enable+0x7c>)
  4009e8:	4798      	blx	r3
  4009ea:	e01a      	b.n	400a22 <osc_enable+0x72>
  4009ec:	2001      	movs	r0, #1
  4009ee:	4b0f      	ldr	r3, [pc, #60]	; (400a2c <osc_enable+0x7c>)
  4009f0:	4798      	blx	r3
  4009f2:	e016      	b.n	400a22 <osc_enable+0x72>
  4009f4:	2000      	movs	r0, #0
  4009f6:	4b0e      	ldr	r3, [pc, #56]	; (400a30 <osc_enable+0x80>)
  4009f8:	4798      	blx	r3
  4009fa:	e012      	b.n	400a22 <osc_enable+0x72>
  4009fc:	2010      	movs	r0, #16
  4009fe:	4b0c      	ldr	r3, [pc, #48]	; (400a30 <osc_enable+0x80>)
  400a00:	4798      	blx	r3
  400a02:	e00e      	b.n	400a22 <osc_enable+0x72>
  400a04:	2020      	movs	r0, #32
  400a06:	4b0a      	ldr	r3, [pc, #40]	; (400a30 <osc_enable+0x80>)
  400a08:	4798      	blx	r3
  400a0a:	e00a      	b.n	400a22 <osc_enable+0x72>
  400a0c:	213e      	movs	r1, #62	; 0x3e
  400a0e:	2000      	movs	r0, #0
  400a10:	4b08      	ldr	r3, [pc, #32]	; (400a34 <osc_enable+0x84>)
  400a12:	4798      	blx	r3
  400a14:	e005      	b.n	400a22 <osc_enable+0x72>
  400a16:	213e      	movs	r1, #62	; 0x3e
  400a18:	2001      	movs	r0, #1
  400a1a:	4b06      	ldr	r3, [pc, #24]	; (400a34 <osc_enable+0x84>)
  400a1c:	4798      	blx	r3
  400a1e:	e000      	b.n	400a22 <osc_enable+0x72>
  400a20:	bf00      	nop
  400a22:	bf00      	nop
  400a24:	3708      	adds	r7, #8
  400a26:	46bd      	mov	sp, r7
  400a28:	bd80      	pop	{r7, pc}
  400a2a:	bf00      	nop
  400a2c:	0040412d 	.word	0x0040412d
  400a30:	00404199 	.word	0x00404199
  400a34:	00404209 	.word	0x00404209

00400a38 <osc_is_ready>:
  400a38:	b580      	push	{r7, lr}
  400a3a:	b082      	sub	sp, #8
  400a3c:	af00      	add	r7, sp, #0
  400a3e:	6078      	str	r0, [r7, #4]
  400a40:	687b      	ldr	r3, [r7, #4]
  400a42:	2b07      	cmp	r3, #7
  400a44:	d826      	bhi.n	400a94 <osc_is_ready+0x5c>
  400a46:	a201      	add	r2, pc, #4	; (adr r2, 400a4c <osc_is_ready+0x14>)
  400a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a4c:	00400a6d 	.word	0x00400a6d
  400a50:	00400a71 	.word	0x00400a71
  400a54:	00400a71 	.word	0x00400a71
  400a58:	00400a83 	.word	0x00400a83
  400a5c:	00400a83 	.word	0x00400a83
  400a60:	00400a83 	.word	0x00400a83
  400a64:	00400a83 	.word	0x00400a83
  400a68:	00400a83 	.word	0x00400a83
  400a6c:	2301      	movs	r3, #1
  400a6e:	e012      	b.n	400a96 <osc_is_ready+0x5e>
  400a70:	4b0b      	ldr	r3, [pc, #44]	; (400aa0 <osc_is_ready+0x68>)
  400a72:	4798      	blx	r3
  400a74:	4603      	mov	r3, r0
  400a76:	2b00      	cmp	r3, #0
  400a78:	bf14      	ite	ne
  400a7a:	2301      	movne	r3, #1
  400a7c:	2300      	moveq	r3, #0
  400a7e:	b2db      	uxtb	r3, r3
  400a80:	e009      	b.n	400a96 <osc_is_ready+0x5e>
  400a82:	4b08      	ldr	r3, [pc, #32]	; (400aa4 <osc_is_ready+0x6c>)
  400a84:	4798      	blx	r3
  400a86:	4603      	mov	r3, r0
  400a88:	2b00      	cmp	r3, #0
  400a8a:	bf14      	ite	ne
  400a8c:	2301      	movne	r3, #1
  400a8e:	2300      	moveq	r3, #0
  400a90:	b2db      	uxtb	r3, r3
  400a92:	e000      	b.n	400a96 <osc_is_ready+0x5e>
  400a94:	2300      	movs	r3, #0
  400a96:	4618      	mov	r0, r3
  400a98:	3708      	adds	r7, #8
  400a9a:	46bd      	mov	sp, r7
  400a9c:	bd80      	pop	{r7, pc}
  400a9e:	bf00      	nop
  400aa0:	00404165 	.word	0x00404165
  400aa4:	00404281 	.word	0x00404281

00400aa8 <osc_get_rate>:
  400aa8:	b480      	push	{r7}
  400aaa:	b083      	sub	sp, #12
  400aac:	af00      	add	r7, sp, #0
  400aae:	6078      	str	r0, [r7, #4]
  400ab0:	687b      	ldr	r3, [r7, #4]
  400ab2:	2b07      	cmp	r3, #7
  400ab4:	d825      	bhi.n	400b02 <osc_get_rate+0x5a>
  400ab6:	a201      	add	r2, pc, #4	; (adr r2, 400abc <osc_get_rate+0x14>)
  400ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400abc:	00400add 	.word	0x00400add
  400ac0:	00400ae3 	.word	0x00400ae3
  400ac4:	00400ae9 	.word	0x00400ae9
  400ac8:	00400aef 	.word	0x00400aef
  400acc:	00400af3 	.word	0x00400af3
  400ad0:	00400af7 	.word	0x00400af7
  400ad4:	00400afb 	.word	0x00400afb
  400ad8:	00400aff 	.word	0x00400aff
  400adc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400ae0:	e010      	b.n	400b04 <osc_get_rate+0x5c>
  400ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ae6:	e00d      	b.n	400b04 <osc_get_rate+0x5c>
  400ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400aec:	e00a      	b.n	400b04 <osc_get_rate+0x5c>
  400aee:	4b08      	ldr	r3, [pc, #32]	; (400b10 <osc_get_rate+0x68>)
  400af0:	e008      	b.n	400b04 <osc_get_rate+0x5c>
  400af2:	4b08      	ldr	r3, [pc, #32]	; (400b14 <osc_get_rate+0x6c>)
  400af4:	e006      	b.n	400b04 <osc_get_rate+0x5c>
  400af6:	4b08      	ldr	r3, [pc, #32]	; (400b18 <osc_get_rate+0x70>)
  400af8:	e004      	b.n	400b04 <osc_get_rate+0x5c>
  400afa:	2300      	movs	r3, #0
  400afc:	e002      	b.n	400b04 <osc_get_rate+0x5c>
  400afe:	2300      	movs	r3, #0
  400b00:	e000      	b.n	400b04 <osc_get_rate+0x5c>
  400b02:	2300      	movs	r3, #0
  400b04:	4618      	mov	r0, r3
  400b06:	370c      	adds	r7, #12
  400b08:	46bd      	mov	sp, r7
  400b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b0e:	4770      	bx	lr
  400b10:	007a1200 	.word	0x007a1200
  400b14:	00f42400 	.word	0x00f42400
  400b18:	016e3600 	.word	0x016e3600

00400b1c <osc_wait_ready>:
  400b1c:	b580      	push	{r7, lr}
  400b1e:	b082      	sub	sp, #8
  400b20:	af00      	add	r7, sp, #0
  400b22:	4603      	mov	r3, r0
  400b24:	71fb      	strb	r3, [r7, #7]
  400b26:	bf00      	nop
  400b28:	79fb      	ldrb	r3, [r7, #7]
  400b2a:	4618      	mov	r0, r3
  400b2c:	4b05      	ldr	r3, [pc, #20]	; (400b44 <osc_wait_ready+0x28>)
  400b2e:	4798      	blx	r3
  400b30:	4603      	mov	r3, r0
  400b32:	f083 0301 	eor.w	r3, r3, #1
  400b36:	b2db      	uxtb	r3, r3
  400b38:	2b00      	cmp	r3, #0
  400b3a:	d1f5      	bne.n	400b28 <osc_wait_ready+0xc>
  400b3c:	bf00      	nop
  400b3e:	3708      	adds	r7, #8
  400b40:	46bd      	mov	sp, r7
  400b42:	bd80      	pop	{r7, pc}
  400b44:	00400a39 	.word	0x00400a39

00400b48 <pll_config_init>:
  400b48:	b580      	push	{r7, lr}
  400b4a:	b086      	sub	sp, #24
  400b4c:	af00      	add	r7, sp, #0
  400b4e:	60f8      	str	r0, [r7, #12]
  400b50:	607a      	str	r2, [r7, #4]
  400b52:	603b      	str	r3, [r7, #0]
  400b54:	460b      	mov	r3, r1
  400b56:	72fb      	strb	r3, [r7, #11]
  400b58:	7afb      	ldrb	r3, [r7, #11]
  400b5a:	4618      	mov	r0, r3
  400b5c:	4b0d      	ldr	r3, [pc, #52]	; (400b94 <pll_config_init+0x4c>)
  400b5e:	4798      	blx	r3
  400b60:	4602      	mov	r2, r0
  400b62:	687b      	ldr	r3, [r7, #4]
  400b64:	fbb2 f3f3 	udiv	r3, r2, r3
  400b68:	617b      	str	r3, [r7, #20]
  400b6a:	697b      	ldr	r3, [r7, #20]
  400b6c:	683a      	ldr	r2, [r7, #0]
  400b6e:	fb02 f303 	mul.w	r3, r2, r3
  400b72:	617b      	str	r3, [r7, #20]
  400b74:	683b      	ldr	r3, [r7, #0]
  400b76:	3b01      	subs	r3, #1
  400b78:	041a      	lsls	r2, r3, #16
  400b7a:	4b07      	ldr	r3, [pc, #28]	; (400b98 <pll_config_init+0x50>)
  400b7c:	4013      	ands	r3, r2
  400b7e:	687a      	ldr	r2, [r7, #4]
  400b80:	b2d2      	uxtb	r2, r2
  400b82:	4313      	orrs	r3, r2
  400b84:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400b88:	68fb      	ldr	r3, [r7, #12]
  400b8a:	601a      	str	r2, [r3, #0]
  400b8c:	bf00      	nop
  400b8e:	3718      	adds	r7, #24
  400b90:	46bd      	mov	sp, r7
  400b92:	bd80      	pop	{r7, pc}
  400b94:	00400aa9 	.word	0x00400aa9
  400b98:	1fff0000 	.word	0x1fff0000

00400b9c <pll_enable>:
  400b9c:	b580      	push	{r7, lr}
  400b9e:	b082      	sub	sp, #8
  400ba0:	af00      	add	r7, sp, #0
  400ba2:	6078      	str	r0, [r7, #4]
  400ba4:	6039      	str	r1, [r7, #0]
  400ba6:	683b      	ldr	r3, [r7, #0]
  400ba8:	2b00      	cmp	r3, #0
  400baa:	d106      	bne.n	400bba <pll_enable+0x1e>
  400bac:	4b08      	ldr	r3, [pc, #32]	; (400bd0 <pll_enable+0x34>)
  400bae:	4798      	blx	r3
  400bb0:	4a08      	ldr	r2, [pc, #32]	; (400bd4 <pll_enable+0x38>)
  400bb2:	687b      	ldr	r3, [r7, #4]
  400bb4:	681b      	ldr	r3, [r3, #0]
  400bb6:	6293      	str	r3, [r2, #40]	; 0x28
  400bb8:	e005      	b.n	400bc6 <pll_enable+0x2a>
  400bba:	4b07      	ldr	r3, [pc, #28]	; (400bd8 <pll_enable+0x3c>)
  400bbc:	4798      	blx	r3
  400bbe:	4a05      	ldr	r2, [pc, #20]	; (400bd4 <pll_enable+0x38>)
  400bc0:	687b      	ldr	r3, [r7, #4]
  400bc2:	681b      	ldr	r3, [r3, #0]
  400bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
  400bc6:	bf00      	nop
  400bc8:	3708      	adds	r7, #8
  400bca:	46bd      	mov	sp, r7
  400bcc:	bd80      	pop	{r7, pc}
  400bce:	bf00      	nop
  400bd0:	0040429d 	.word	0x0040429d
  400bd4:	400e0400 	.word	0x400e0400
  400bd8:	004042d1 	.word	0x004042d1

00400bdc <pll_is_locked>:
  400bdc:	b580      	push	{r7, lr}
  400bde:	b082      	sub	sp, #8
  400be0:	af00      	add	r7, sp, #0
  400be2:	6078      	str	r0, [r7, #4]
  400be4:	687b      	ldr	r3, [r7, #4]
  400be6:	2b00      	cmp	r3, #0
  400be8:	d103      	bne.n	400bf2 <pll_is_locked+0x16>
  400bea:	4b08      	ldr	r3, [pc, #32]	; (400c0c <pll_is_locked+0x30>)
  400bec:	4798      	blx	r3
  400bee:	4603      	mov	r3, r0
  400bf0:	e007      	b.n	400c02 <pll_is_locked+0x26>
  400bf2:	687b      	ldr	r3, [r7, #4]
  400bf4:	2b01      	cmp	r3, #1
  400bf6:	d103      	bne.n	400c00 <pll_is_locked+0x24>
  400bf8:	4b05      	ldr	r3, [pc, #20]	; (400c10 <pll_is_locked+0x34>)
  400bfa:	4798      	blx	r3
  400bfc:	4603      	mov	r3, r0
  400bfe:	e000      	b.n	400c02 <pll_is_locked+0x26>
  400c00:	2300      	movs	r3, #0
  400c02:	4618      	mov	r0, r3
  400c04:	3708      	adds	r7, #8
  400c06:	46bd      	mov	sp, r7
  400c08:	bd80      	pop	{r7, pc}
  400c0a:	bf00      	nop
  400c0c:	004042b5 	.word	0x004042b5
  400c10:	004042e9 	.word	0x004042e9

00400c14 <pll_enable_source>:
  400c14:	b580      	push	{r7, lr}
  400c16:	b082      	sub	sp, #8
  400c18:	af00      	add	r7, sp, #0
  400c1a:	4603      	mov	r3, r0
  400c1c:	71fb      	strb	r3, [r7, #7]
  400c1e:	79fb      	ldrb	r3, [r7, #7]
  400c20:	3300      	adds	r3, #0
  400c22:	2b01      	cmp	r3, #1
  400c24:	d808      	bhi.n	400c38 <pll_enable_source+0x24>
  400c26:	79fb      	ldrb	r3, [r7, #7]
  400c28:	4618      	mov	r0, r3
  400c2a:	4b06      	ldr	r3, [pc, #24]	; (400c44 <pll_enable_source+0x30>)
  400c2c:	4798      	blx	r3
  400c2e:	79fb      	ldrb	r3, [r7, #7]
  400c30:	4618      	mov	r0, r3
  400c32:	4b05      	ldr	r3, [pc, #20]	; (400c48 <pll_enable_source+0x34>)
  400c34:	4798      	blx	r3
  400c36:	e000      	b.n	400c3a <pll_enable_source+0x26>
  400c38:	bf00      	nop
  400c3a:	bf00      	nop
  400c3c:	3708      	adds	r7, #8
  400c3e:	46bd      	mov	sp, r7
  400c40:	bd80      	pop	{r7, pc}
  400c42:	bf00      	nop
  400c44:	004009b1 	.word	0x004009b1
  400c48:	00400b1d 	.word	0x00400b1d

00400c4c <pll_wait_for_lock>:
  400c4c:	b580      	push	{r7, lr}
  400c4e:	b082      	sub	sp, #8
  400c50:	af00      	add	r7, sp, #0
  400c52:	6078      	str	r0, [r7, #4]
  400c54:	bf00      	nop
  400c56:	6878      	ldr	r0, [r7, #4]
  400c58:	4b04      	ldr	r3, [pc, #16]	; (400c6c <pll_wait_for_lock+0x20>)
  400c5a:	4798      	blx	r3
  400c5c:	4603      	mov	r3, r0
  400c5e:	2b00      	cmp	r3, #0
  400c60:	d0f9      	beq.n	400c56 <pll_wait_for_lock+0xa>
  400c62:	2300      	movs	r3, #0
  400c64:	4618      	mov	r0, r3
  400c66:	3708      	adds	r7, #8
  400c68:	46bd      	mov	sp, r7
  400c6a:	bd80      	pop	{r7, pc}
  400c6c:	00400bdd 	.word	0x00400bdd

00400c70 <sysclk_get_main_hz>:
  400c70:	b580      	push	{r7, lr}
  400c72:	af00      	add	r7, sp, #0
  400c74:	2001      	movs	r0, #1
  400c76:	4b04      	ldr	r3, [pc, #16]	; (400c88 <sysclk_get_main_hz+0x18>)
  400c78:	4798      	blx	r3
  400c7a:	4602      	mov	r2, r0
  400c7c:	f640 634e 	movw	r3, #3662	; 0xe4e
  400c80:	fb03 f302 	mul.w	r3, r3, r2
  400c84:	4618      	mov	r0, r3
  400c86:	bd80      	pop	{r7, pc}
  400c88:	00400aa9 	.word	0x00400aa9

00400c8c <sysclk_get_cpu_hz>:
  400c8c:	b580      	push	{r7, lr}
  400c8e:	af00      	add	r7, sp, #0
  400c90:	4b02      	ldr	r3, [pc, #8]	; (400c9c <sysclk_get_cpu_hz+0x10>)
  400c92:	4798      	blx	r3
  400c94:	4603      	mov	r3, r0
  400c96:	4618      	mov	r0, r3
  400c98:	bd80      	pop	{r7, pc}
  400c9a:	bf00      	nop
  400c9c:	00400c71 	.word	0x00400c71

00400ca0 <sysclk_init>:
  400ca0:	b590      	push	{r4, r7, lr}
  400ca2:	b0a5      	sub	sp, #148	; 0x94
  400ca4:	af02      	add	r7, sp, #8
  400ca6:	4820      	ldr	r0, [pc, #128]	; (400d28 <sysclk_init+0x88>)
  400ca8:	4b20      	ldr	r3, [pc, #128]	; (400d2c <sysclk_init+0x8c>)
  400caa:	4798      	blx	r3
  400cac:	2001      	movs	r0, #1
  400cae:	4b20      	ldr	r3, [pc, #128]	; (400d30 <sysclk_init+0x90>)
  400cb0:	4798      	blx	r3
  400cb2:	4638      	mov	r0, r7
  400cb4:	f640 634e 	movw	r3, #3662	; 0xe4e
  400cb8:	2201      	movs	r2, #1
  400cba:	2101      	movs	r1, #1
  400cbc:	4c1d      	ldr	r4, [pc, #116]	; (400d34 <sysclk_init+0x94>)
  400cbe:	47a0      	blx	r4
  400cc0:	463b      	mov	r3, r7
  400cc2:	2100      	movs	r1, #0
  400cc4:	4618      	mov	r0, r3
  400cc6:	4b1c      	ldr	r3, [pc, #112]	; (400d38 <sysclk_init+0x98>)
  400cc8:	4798      	blx	r3
  400cca:	2000      	movs	r0, #0
  400ccc:	4b1b      	ldr	r3, [pc, #108]	; (400d3c <sysclk_init+0x9c>)
  400cce:	4798      	blx	r3
  400cd0:	2000      	movs	r0, #0
  400cd2:	4b1b      	ldr	r3, [pc, #108]	; (400d40 <sysclk_init+0xa0>)
  400cd4:	4798      	blx	r3
  400cd6:	4b1b      	ldr	r3, [pc, #108]	; (400d44 <sysclk_init+0xa4>)
  400cd8:	4798      	blx	r3
  400cda:	4b1b      	ldr	r3, [pc, #108]	; (400d48 <sysclk_init+0xa8>)
  400cdc:	4798      	blx	r3
  400cde:	4603      	mov	r3, r0
  400ce0:	4618      	mov	r0, r3
  400ce2:	4b12      	ldr	r3, [pc, #72]	; (400d2c <sysclk_init+0x8c>)
  400ce4:	4798      	blx	r3
  400ce6:	4b19      	ldr	r3, [pc, #100]	; (400d4c <sysclk_init+0xac>)
  400ce8:	681b      	ldr	r3, [r3, #0]
  400cea:	4a19      	ldr	r2, [pc, #100]	; (400d50 <sysclk_init+0xb0>)
  400cec:	4293      	cmp	r3, r2
  400cee:	d816      	bhi.n	400d1e <sysclk_init+0x7e>
  400cf0:	4b16      	ldr	r3, [pc, #88]	; (400d4c <sysclk_init+0xac>)
  400cf2:	681b      	ldr	r3, [r3, #0]
  400cf4:	4a17      	ldr	r2, [pc, #92]	; (400d54 <sysclk_init+0xb4>)
  400cf6:	4293      	cmp	r3, r2
  400cf8:	d911      	bls.n	400d1e <sysclk_init+0x7e>
  400cfa:	1d3a      	adds	r2, r7, #4
  400cfc:	2320      	movs	r3, #32
  400cfe:	9300      	str	r3, [sp, #0]
  400d00:	4613      	mov	r3, r2
  400d02:	220f      	movs	r2, #15
  400d04:	210e      	movs	r1, #14
  400d06:	4814      	ldr	r0, [pc, #80]	; (400d58 <sysclk_init+0xb8>)
  400d08:	4c14      	ldr	r4, [pc, #80]	; (400d5c <sysclk_init+0xbc>)
  400d0a:	47a0      	blx	r4
  400d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  400d0e:	b29b      	uxth	r3, r3
  400d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  400d14:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
  400d18:	4811      	ldr	r0, [pc, #68]	; (400d60 <sysclk_init+0xc0>)
  400d1a:	4b12      	ldr	r3, [pc, #72]	; (400d64 <sysclk_init+0xc4>)
  400d1c:	4798      	blx	r3
  400d1e:	bf00      	nop
  400d20:	378c      	adds	r7, #140	; 0x8c
  400d22:	46bd      	mov	sp, r7
  400d24:	bd90      	pop	{r4, r7, pc}
  400d26:	bf00      	nop
  400d28:	07270e00 	.word	0x07270e00
  400d2c:	004053bd 	.word	0x004053bd
  400d30:	00400c15 	.word	0x00400c15
  400d34:	00400b49 	.word	0x00400b49
  400d38:	00400b9d 	.word	0x00400b9d
  400d3c:	00400c4d 	.word	0x00400c4d
  400d40:	004040a9 	.word	0x004040a9
  400d44:	00405299 	.word	0x00405299
  400d48:	00400c8d 	.word	0x00400c8d
  400d4c:	20000170 	.word	0x20000170
  400d50:	080befc0 	.word	0x080befc0
  400d54:	06422c3f 	.word	0x06422c3f
  400d58:	400e0a00 	.word	0x400e0a00
  400d5c:	2000000b 	.word	0x2000000b
  400d60:	400e1410 	.word	0x400e1410
  400d64:	004048d9 	.word	0x004048d9

00400d68 <cpu_irq_enter_critical>:
  400d68:	b480      	push	{r7}
  400d6a:	b083      	sub	sp, #12
  400d6c:	af00      	add	r7, sp, #0
  400d6e:	4b11      	ldr	r3, [pc, #68]	; (400db4 <cpu_irq_enter_critical+0x4c>)
  400d70:	681b      	ldr	r3, [r3, #0]
  400d72:	2b00      	cmp	r3, #0
  400d74:	d112      	bne.n	400d9c <cpu_irq_enter_critical+0x34>
  400d76:	f3ef 8310 	mrs	r3, PRIMASK
  400d7a:	607b      	str	r3, [r7, #4]
  400d7c:	687b      	ldr	r3, [r7, #4]
  400d7e:	2b00      	cmp	r3, #0
  400d80:	d109      	bne.n	400d96 <cpu_irq_enter_critical+0x2e>
  400d82:	b672      	cpsid	i
  400d84:	f3bf 8f5f 	dmb	sy
  400d88:	4b0b      	ldr	r3, [pc, #44]	; (400db8 <cpu_irq_enter_critical+0x50>)
  400d8a:	2200      	movs	r2, #0
  400d8c:	701a      	strb	r2, [r3, #0]
  400d8e:	4b0b      	ldr	r3, [pc, #44]	; (400dbc <cpu_irq_enter_critical+0x54>)
  400d90:	2201      	movs	r2, #1
  400d92:	701a      	strb	r2, [r3, #0]
  400d94:	e002      	b.n	400d9c <cpu_irq_enter_critical+0x34>
  400d96:	4b09      	ldr	r3, [pc, #36]	; (400dbc <cpu_irq_enter_critical+0x54>)
  400d98:	2200      	movs	r2, #0
  400d9a:	701a      	strb	r2, [r3, #0]
  400d9c:	4b05      	ldr	r3, [pc, #20]	; (400db4 <cpu_irq_enter_critical+0x4c>)
  400d9e:	681b      	ldr	r3, [r3, #0]
  400da0:	3301      	adds	r3, #1
  400da2:	4a04      	ldr	r2, [pc, #16]	; (400db4 <cpu_irq_enter_critical+0x4c>)
  400da4:	6013      	str	r3, [r2, #0]
  400da6:	bf00      	nop
  400da8:	370c      	adds	r7, #12
  400daa:	46bd      	mov	sp, r7
  400dac:	f85d 7b04 	ldr.w	r7, [sp], #4
  400db0:	4770      	bx	lr
  400db2:	bf00      	nop
  400db4:	20000374 	.word	0x20000374
  400db8:	20000114 	.word	0x20000114
  400dbc:	20000378 	.word	0x20000378

00400dc0 <cpu_irq_leave_critical>:
  400dc0:	b480      	push	{r7}
  400dc2:	af00      	add	r7, sp, #0
  400dc4:	4b0c      	ldr	r3, [pc, #48]	; (400df8 <cpu_irq_leave_critical+0x38>)
  400dc6:	681b      	ldr	r3, [r3, #0]
  400dc8:	3b01      	subs	r3, #1
  400dca:	4a0b      	ldr	r2, [pc, #44]	; (400df8 <cpu_irq_leave_critical+0x38>)
  400dcc:	6013      	str	r3, [r2, #0]
  400dce:	4b0a      	ldr	r3, [pc, #40]	; (400df8 <cpu_irq_leave_critical+0x38>)
  400dd0:	681b      	ldr	r3, [r3, #0]
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d10a      	bne.n	400dec <cpu_irq_leave_critical+0x2c>
  400dd6:	4b09      	ldr	r3, [pc, #36]	; (400dfc <cpu_irq_leave_critical+0x3c>)
  400dd8:	781b      	ldrb	r3, [r3, #0]
  400dda:	b2db      	uxtb	r3, r3
  400ddc:	2b00      	cmp	r3, #0
  400dde:	d005      	beq.n	400dec <cpu_irq_leave_critical+0x2c>
  400de0:	4b07      	ldr	r3, [pc, #28]	; (400e00 <cpu_irq_leave_critical+0x40>)
  400de2:	2201      	movs	r2, #1
  400de4:	701a      	strb	r2, [r3, #0]
  400de6:	f3bf 8f5f 	dmb	sy
  400dea:	b662      	cpsie	i
  400dec:	bf00      	nop
  400dee:	46bd      	mov	sp, r7
  400df0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400df4:	4770      	bx	lr
  400df6:	bf00      	nop
  400df8:	20000374 	.word	0x20000374
  400dfc:	20000378 	.word	0x20000378
  400e00:	20000114 	.word	0x20000114

00400e04 <_read>:
  400e04:	b580      	push	{r7, lr}
  400e06:	b086      	sub	sp, #24
  400e08:	af00      	add	r7, sp, #0
  400e0a:	60f8      	str	r0, [r7, #12]
  400e0c:	60b9      	str	r1, [r7, #8]
  400e0e:	607a      	str	r2, [r7, #4]
  400e10:	2300      	movs	r3, #0
  400e12:	617b      	str	r3, [r7, #20]
  400e14:	68fb      	ldr	r3, [r7, #12]
  400e16:	2b00      	cmp	r3, #0
  400e18:	d012      	beq.n	400e40 <_read+0x3c>
  400e1a:	f04f 33ff 	mov.w	r3, #4294967295
  400e1e:	e013      	b.n	400e48 <_read+0x44>
  400e20:	4b0b      	ldr	r3, [pc, #44]	; (400e50 <_read+0x4c>)
  400e22:	681b      	ldr	r3, [r3, #0]
  400e24:	4a0b      	ldr	r2, [pc, #44]	; (400e54 <_read+0x50>)
  400e26:	6812      	ldr	r2, [r2, #0]
  400e28:	68b9      	ldr	r1, [r7, #8]
  400e2a:	4610      	mov	r0, r2
  400e2c:	4798      	blx	r3
  400e2e:	68bb      	ldr	r3, [r7, #8]
  400e30:	3301      	adds	r3, #1
  400e32:	60bb      	str	r3, [r7, #8]
  400e34:	697b      	ldr	r3, [r7, #20]
  400e36:	3301      	adds	r3, #1
  400e38:	617b      	str	r3, [r7, #20]
  400e3a:	687b      	ldr	r3, [r7, #4]
  400e3c:	3b01      	subs	r3, #1
  400e3e:	607b      	str	r3, [r7, #4]
  400e40:	687b      	ldr	r3, [r7, #4]
  400e42:	2b00      	cmp	r3, #0
  400e44:	dcec      	bgt.n	400e20 <_read+0x1c>
  400e46:	697b      	ldr	r3, [r7, #20]
  400e48:	4618      	mov	r0, r3
  400e4a:	3718      	adds	r7, #24
  400e4c:	46bd      	mov	sp, r7
  400e4e:	bd80      	pop	{r7, pc}
  400e50:	20000878 	.word	0x20000878
  400e54:	20000880 	.word	0x20000880

00400e58 <_write>:
  400e58:	b580      	push	{r7, lr}
  400e5a:	b086      	sub	sp, #24
  400e5c:	af00      	add	r7, sp, #0
  400e5e:	60f8      	str	r0, [r7, #12]
  400e60:	60b9      	str	r1, [r7, #8]
  400e62:	607a      	str	r2, [r7, #4]
  400e64:	2300      	movs	r3, #0
  400e66:	617b      	str	r3, [r7, #20]
  400e68:	68fb      	ldr	r3, [r7, #12]
  400e6a:	2b01      	cmp	r3, #1
  400e6c:	d01e      	beq.n	400eac <_write+0x54>
  400e6e:	68fb      	ldr	r3, [r7, #12]
  400e70:	2b02      	cmp	r3, #2
  400e72:	d01b      	beq.n	400eac <_write+0x54>
  400e74:	68fb      	ldr	r3, [r7, #12]
  400e76:	2b03      	cmp	r3, #3
  400e78:	d018      	beq.n	400eac <_write+0x54>
  400e7a:	f04f 33ff 	mov.w	r3, #4294967295
  400e7e:	e019      	b.n	400eb4 <_write+0x5c>
  400e80:	4b0e      	ldr	r3, [pc, #56]	; (400ebc <_write+0x64>)
  400e82:	681a      	ldr	r2, [r3, #0]
  400e84:	4b0e      	ldr	r3, [pc, #56]	; (400ec0 <_write+0x68>)
  400e86:	6818      	ldr	r0, [r3, #0]
  400e88:	68bb      	ldr	r3, [r7, #8]
  400e8a:	1c59      	adds	r1, r3, #1
  400e8c:	60b9      	str	r1, [r7, #8]
  400e8e:	781b      	ldrb	r3, [r3, #0]
  400e90:	4619      	mov	r1, r3
  400e92:	4790      	blx	r2
  400e94:	4603      	mov	r3, r0
  400e96:	2b00      	cmp	r3, #0
  400e98:	da02      	bge.n	400ea0 <_write+0x48>
  400e9a:	f04f 33ff 	mov.w	r3, #4294967295
  400e9e:	e009      	b.n	400eb4 <_write+0x5c>
  400ea0:	697b      	ldr	r3, [r7, #20]
  400ea2:	3301      	adds	r3, #1
  400ea4:	617b      	str	r3, [r7, #20]
  400ea6:	687b      	ldr	r3, [r7, #4]
  400ea8:	3b01      	subs	r3, #1
  400eaa:	607b      	str	r3, [r7, #4]
  400eac:	687b      	ldr	r3, [r7, #4]
  400eae:	2b00      	cmp	r3, #0
  400eb0:	d1e6      	bne.n	400e80 <_write+0x28>
  400eb2:	697b      	ldr	r3, [r7, #20]
  400eb4:	4618      	mov	r0, r3
  400eb6:	3718      	adds	r7, #24
  400eb8:	46bd      	mov	sp, r7
  400eba:	bd80      	pop	{r7, pc}
  400ebc:	2000087c 	.word	0x2000087c
  400ec0:	20000880 	.word	0x20000880

00400ec4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400ec4:	b480      	push	{r7}
  400ec6:	b083      	sub	sp, #12
  400ec8:	af00      	add	r7, sp, #0
  400eca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400ecc:	687b      	ldr	r3, [r7, #4]
  400ece:	2b07      	cmp	r3, #7
  400ed0:	d825      	bhi.n	400f1e <osc_get_rate+0x5a>
  400ed2:	a201      	add	r2, pc, #4	; (adr r2, 400ed8 <osc_get_rate+0x14>)
  400ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ed8:	00400ef9 	.word	0x00400ef9
  400edc:	00400eff 	.word	0x00400eff
  400ee0:	00400f05 	.word	0x00400f05
  400ee4:	00400f0b 	.word	0x00400f0b
  400ee8:	00400f0f 	.word	0x00400f0f
  400eec:	00400f13 	.word	0x00400f13
  400ef0:	00400f17 	.word	0x00400f17
  400ef4:	00400f1b 	.word	0x00400f1b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400ef8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400efc:	e010      	b.n	400f20 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f02:	e00d      	b.n	400f20 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f08:	e00a      	b.n	400f20 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400f0a:	4b08      	ldr	r3, [pc, #32]	; (400f2c <osc_get_rate+0x68>)
  400f0c:	e008      	b.n	400f20 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  400f0e:	4b08      	ldr	r3, [pc, #32]	; (400f30 <osc_get_rate+0x6c>)
  400f10:	e006      	b.n	400f20 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  400f12:	4b08      	ldr	r3, [pc, #32]	; (400f34 <osc_get_rate+0x70>)
  400f14:	e004      	b.n	400f20 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400f16:	2300      	movs	r3, #0
  400f18:	e002      	b.n	400f20 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400f1a:	2300      	movs	r3, #0
  400f1c:	e000      	b.n	400f20 <osc_get_rate+0x5c>
#endif
	}

	return 0;
  400f1e:	2300      	movs	r3, #0
}
  400f20:	4618      	mov	r0, r3
  400f22:	370c      	adds	r7, #12
  400f24:	46bd      	mov	sp, r7
  400f26:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f2a:	4770      	bx	lr
  400f2c:	007a1200 	.word	0x007a1200
  400f30:	00f42400 	.word	0x00f42400
  400f34:	016e3600 	.word	0x016e3600

00400f38 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400f38:	b580      	push	{r7, lr}
  400f3a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400f3c:	2001      	movs	r0, #1
  400f3e:	4b04      	ldr	r3, [pc, #16]	; (400f50 <sysclk_get_main_hz+0x18>)
  400f40:	4798      	blx	r3
  400f42:	4602      	mov	r2, r0
  400f44:	f640 634e 	movw	r3, #3662	; 0xe4e
  400f48:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400f4c:	4618      	mov	r0, r3
  400f4e:	bd80      	pop	{r7, pc}
  400f50:	00400ec5 	.word	0x00400ec5

00400f54 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400f54:	b580      	push	{r7, lr}
  400f56:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400f58:	4b02      	ldr	r3, [pc, #8]	; (400f64 <sysclk_get_cpu_hz+0x10>)
  400f5a:	4798      	blx	r3
  400f5c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400f5e:	4618      	mov	r0, r3
  400f60:	bd80      	pop	{r7, pc}
  400f62:	bf00      	nop
  400f64:	00400f39 	.word	0x00400f39

00400f68 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400f68:	b480      	push	{r7}
  400f6a:	b08d      	sub	sp, #52	; 0x34
  400f6c:	af00      	add	r7, sp, #0
  400f6e:	6078      	str	r0, [r7, #4]
  400f70:	460b      	mov	r3, r1
  400f72:	70fb      	strb	r3, [r7, #3]
  400f74:	687b      	ldr	r3, [r7, #4]
  400f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  400f78:	78fb      	ldrb	r3, [r7, #3]
  400f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f80:	627b      	str	r3, [r7, #36]	; 0x24
  400f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f84:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400f86:	6a3b      	ldr	r3, [r7, #32]
  400f88:	095b      	lsrs	r3, r3, #5
  400f8a:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400f8c:	69fb      	ldr	r3, [r7, #28]
  400f8e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400f92:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400f96:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400f98:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400f9e:	2b01      	cmp	r3, #1
  400fa0:	d109      	bne.n	400fb6 <ioport_set_pin_dir+0x4e>
  400fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fa4:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400fa6:	697b      	ldr	r3, [r7, #20]
  400fa8:	f003 031f 	and.w	r3, r3, #31
  400fac:	2201      	movs	r2, #1
  400fae:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400fb0:	69bb      	ldr	r3, [r7, #24]
  400fb2:	611a      	str	r2, [r3, #16]
  400fb4:	e00c      	b.n	400fd0 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  400fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400fba:	2b00      	cmp	r3, #0
  400fbc:	d108      	bne.n	400fd0 <ioport_set_pin_dir+0x68>
  400fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fc0:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400fc2:	693b      	ldr	r3, [r7, #16]
  400fc4:	f003 031f 	and.w	r3, r3, #31
  400fc8:	2201      	movs	r2, #1
  400fca:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400fcc:	69bb      	ldr	r3, [r7, #24]
  400fce:	615a      	str	r2, [r3, #20]
  400fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fd2:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400fd4:	68fb      	ldr	r3, [r7, #12]
  400fd6:	f003 031f 	and.w	r3, r3, #31
  400fda:	2201      	movs	r2, #1
  400fdc:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fde:	69bb      	ldr	r3, [r7, #24]
  400fe0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400fe4:	bf00      	nop
  400fe6:	3734      	adds	r7, #52	; 0x34
  400fe8:	46bd      	mov	sp, r7
  400fea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fee:	4770      	bx	lr

00400ff0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400ff0:	b480      	push	{r7}
  400ff2:	b08b      	sub	sp, #44	; 0x2c
  400ff4:	af00      	add	r7, sp, #0
  400ff6:	6078      	str	r0, [r7, #4]
  400ff8:	460b      	mov	r3, r1
  400ffa:	70fb      	strb	r3, [r7, #3]
  400ffc:	687b      	ldr	r3, [r7, #4]
  400ffe:	627b      	str	r3, [r7, #36]	; 0x24
  401000:	78fb      	ldrb	r3, [r7, #3]
  401002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401008:	61fb      	str	r3, [r7, #28]
  40100a:	69fb      	ldr	r3, [r7, #28]
  40100c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40100e:	69bb      	ldr	r3, [r7, #24]
  401010:	095b      	lsrs	r3, r3, #5
  401012:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401014:	697b      	ldr	r3, [r7, #20]
  401016:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40101a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40101e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401020:	613b      	str	r3, [r7, #16]

	if (level) {
  401022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401026:	2b00      	cmp	r3, #0
  401028:	d009      	beq.n	40103e <ioport_set_pin_level+0x4e>
  40102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40102c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40102e:	68fb      	ldr	r3, [r7, #12]
  401030:	f003 031f 	and.w	r3, r3, #31
  401034:	2201      	movs	r2, #1
  401036:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401038:	693b      	ldr	r3, [r7, #16]
  40103a:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  40103c:	e008      	b.n	401050 <ioport_set_pin_level+0x60>
  40103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401040:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401042:	68bb      	ldr	r3, [r7, #8]
  401044:	f003 031f 	and.w	r3, r3, #31
  401048:	2201      	movs	r2, #1
  40104a:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40104c:	693b      	ldr	r3, [r7, #16]
  40104e:	635a      	str	r2, [r3, #52]	; 0x34
  401050:	bf00      	nop
  401052:	372c      	adds	r7, #44	; 0x2c
  401054:	46bd      	mov	sp, r7
  401056:	f85d 7b04 	ldr.w	r7, [sp], #4
  40105a:	4770      	bx	lr

0040105c <PIOA_Handler>:
 *    the ISR must be as short as possible to ensure the INT level is set back to
 *    0 logical level before the CHx01 is ready for a new measurement. The maximum
 *    time for ISR is 8 us.
 */
void PIOA_Handler(void)
{
  40105c:	b580      	push	{r7, lr}
  40105e:	b082      	sub	sp, #8
  401060:	af00      	add	r7, sp, #0
	/* Read the ISR and IMR registers to know which interrupt(s) is(are) pending */
	uint32_t status = pio_get_interrupt_status(PIOA);
  401062:	481b      	ldr	r0, [pc, #108]	; (4010d0 <PIOA_Handler+0x74>)
  401064:	4b1b      	ldr	r3, [pc, #108]	; (4010d4 <PIOA_Handler+0x78>)
  401066:	4798      	blx	r3
  401068:	6078      	str	r0, [r7, #4]
	status &= pio_get_interrupt_mask(PIOA);
  40106a:	4819      	ldr	r0, [pc, #100]	; (4010d0 <PIOA_Handler+0x74>)
  40106c:	4b1a      	ldr	r3, [pc, #104]	; (4010d8 <PIOA_Handler+0x7c>)
  40106e:	4798      	blx	r3
  401070:	4602      	mov	r2, r0
  401072:	687b      	ldr	r3, [r7, #4]
  401074:	4013      	ands	r3, r2
  401076:	607b      	str	r3, [r7, #4]

	if (status & PIN_EXT_MotionINT_MASK)
  401078:	687b      	ldr	r3, [r7, #4]
  40107a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  40107e:	2b00      	cmp	r3, #0
  401080:	d001      	beq.n	401086 <PIOA_Handler+0x2a>
		ext_MotionINT_handler();
  401082:	4b16      	ldr	r3, [pc, #88]	; (4010dc <PIOA_Handler+0x80>)
  401084:	4798      	blx	r3
	if (status & PIN_EXT_ChirpINT0_MASK)
  401086:	687b      	ldr	r3, [r7, #4]
  401088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  40108c:	2b00      	cmp	r3, #0
  40108e:	d002      	beq.n	401096 <PIOA_Handler+0x3a>
		ext_int_handler(0);
  401090:	2000      	movs	r0, #0
  401092:	4b13      	ldr	r3, [pc, #76]	; (4010e0 <PIOA_Handler+0x84>)
  401094:	4798      	blx	r3
	if (status & PIN_EXT_ChirpINT1_MASK)
  401096:	687b      	ldr	r3, [r7, #4]
  401098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  40109c:	2b00      	cmp	r3, #0
  40109e:	d002      	beq.n	4010a6 <PIOA_Handler+0x4a>
		ext_int_handler(1);
  4010a0:	2001      	movs	r0, #1
  4010a2:	4b0f      	ldr	r3, [pc, #60]	; (4010e0 <PIOA_Handler+0x84>)
  4010a4:	4798      	blx	r3
	if (status & PIN_EXT_ChirpINT2_MASK)
  4010a6:	687b      	ldr	r3, [r7, #4]
  4010a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  4010ac:	2b00      	cmp	r3, #0
  4010ae:	d002      	beq.n	4010b6 <PIOA_Handler+0x5a>
		ext_int_handler(2);
  4010b0:	2002      	movs	r0, #2
  4010b2:	4b0b      	ldr	r3, [pc, #44]	; (4010e0 <PIOA_Handler+0x84>)
  4010b4:	4798      	blx	r3
	if (status & PIN_EXT_ChirpINT3_MASK)
  4010b6:	687b      	ldr	r3, [r7, #4]
  4010b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
  4010bc:	2b00      	cmp	r3, #0
  4010be:	d002      	beq.n	4010c6 <PIOA_Handler+0x6a>
		ext_int_handler(3);
  4010c0:	2003      	movs	r0, #3
  4010c2:	4b07      	ldr	r3, [pc, #28]	; (4010e0 <PIOA_Handler+0x84>)
  4010c4:	4798      	blx	r3
}
  4010c6:	bf00      	nop
  4010c8:	3708      	adds	r7, #8
  4010ca:	46bd      	mov	sp, r7
  4010cc:	bd80      	pop	{r7, pc}
  4010ce:	bf00      	nop
  4010d0:	400e0e00 	.word	0x400e0e00
  4010d4:	00403d21 	.word	0x00403d21
  4010d8:	00403d39 	.word	0x00403d39
  4010dc:	004010e5 	.word	0x004010e5
  4010e0:	004010f5 	.word	0x004010f5

004010e4 <ext_MotionINT_handler>:

void ext_MotionINT_handler(void) {
  4010e4:	b480      	push	{r7}
  4010e6:	af00      	add	r7, sp, #0
#ifdef ICM42688
	imu_data_ready_isr_callback();
#endif // ICM42688
}
  4010e8:	bf00      	nop
  4010ea:	46bd      	mov	sp, r7
  4010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010f0:	4770      	bx	lr
	...

004010f4 <ext_int_handler>:

static void ext_int_handler(uint32_t sensor_id) {
  4010f4:	b580      	push	{r7, lr}
  4010f6:	b084      	sub	sp, #16
  4010f8:	af00      	add	r7, sp, #0
  4010fa:	6078      	str	r0, [r7, #4]
	ch_io_int_callback_t func_ptr = sensor_group_ptr->io_int_callback;
  4010fc:	4b13      	ldr	r3, [pc, #76]	; (40114c <ext_int_handler+0x58>)
  4010fe:	681b      	ldr	r3, [r3, #0]
  401100:	691b      	ldr	r3, [r3, #16]
  401102:	60fb      	str	r3, [r7, #12]
	uint32_t gpio_pin = chirp_pin_io[sensor_id];
  401104:	4a12      	ldr	r2, [pc, #72]	; (401150 <ext_int_handler+0x5c>)
  401106:	687b      	ldr	r3, [r7, #4]
  401108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40110c:	60bb      	str	r3, [r7, #8]

	/* Put the line in output to stabilize it to 0V until the next trig */
	ioport_set_pin_level(gpio_pin, IOPORT_PIN_LEVEL_LOW);	// set to low level
  40110e:	2100      	movs	r1, #0
  401110:	68b8      	ldr	r0, [r7, #8]
  401112:	4b10      	ldr	r3, [pc, #64]	; (401154 <ext_int_handler+0x60>)
  401114:	4798      	blx	r3
	ioport_set_pin_dir(gpio_pin, IOPORT_DIR_OUTPUT);		// set pin direction as output
  401116:	2101      	movs	r1, #1
  401118:	68b8      	ldr	r0, [r7, #8]
  40111a:	4b0f      	ldr	r3, [pc, #60]	; (401158 <ext_int_handler+0x64>)
  40111c:	4798      	blx	r3
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, chirp_pin_io_irq[sensor_id]); // disable interrupt
  40111e:	4a0f      	ldr	r2, [pc, #60]	; (40115c <ext_int_handler+0x68>)
  401120:	687b      	ldr	r3, [r7, #4]
  401122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401126:	4619      	mov	r1, r3
  401128:	480d      	ldr	r0, [pc, #52]	; (401160 <ext_int_handler+0x6c>)
  40112a:	4b0e      	ldr	r3, [pc, #56]	; (401164 <ext_int_handler+0x70>)
  40112c:	4798      	blx	r3

	if (func_ptr != NULL) {
  40112e:	68fb      	ldr	r3, [r7, #12]
  401130:	2b00      	cmp	r3, #0
  401132:	d006      	beq.n	401142 <ext_int_handler+0x4e>
		// Call application callback function - pass I/O index to identify interrupting device
		(*func_ptr)(sensor_group_ptr, sensor_id);
  401134:	4b05      	ldr	r3, [pc, #20]	; (40114c <ext_int_handler+0x58>)
  401136:	681a      	ldr	r2, [r3, #0]
  401138:	687b      	ldr	r3, [r7, #4]
  40113a:	b2d9      	uxtb	r1, r3
  40113c:	68fb      	ldr	r3, [r7, #12]
  40113e:	4610      	mov	r0, r2
  401140:	4798      	blx	r3
	}
}
  401142:	bf00      	nop
  401144:	3710      	adds	r7, #16
  401146:	46bd      	mov	sp, r7
  401148:	bd80      	pop	{r7, pc}
  40114a:	bf00      	nop
  40114c:	20000894 	.word	0x20000894
  401150:	20000130 	.word	0x20000130
  401154:	00400ff1 	.word	0x00400ff1
  401158:	00400f69 	.word	0x00400f69
  40115c:	20000140 	.word	0x20000140
  401160:	400e0e00 	.word	0x400e0e00
  401164:	00403d05 	.word	0x00403d05

00401168 <FLEXCOM1_Handler>:

void FLEXCOM1_Handler(void) {
  401168:	b580      	push	{r7, lr}
  40116a:	af00      	add	r7, sp, #0
	flexcom_handler(1);			// call local handler with index value
  40116c:	2001      	movs	r0, #1
  40116e:	4b02      	ldr	r3, [pc, #8]	; (401178 <FLEXCOM1_Handler+0x10>)
  401170:	4798      	blx	r3
}
  401172:	bf00      	nop
  401174:	bd80      	pop	{r7, pc}
  401176:	bf00      	nop
  401178:	00401191 	.word	0x00401191

0040117c <FLEXCOM3_Handler>:
	
void FLEXCOM3_Handler(void) {
  40117c:	b580      	push	{r7, lr}
  40117e:	af00      	add	r7, sp, #0
	flexcom_handler(3);			// call local handler with index value
  401180:	2003      	movs	r0, #3
  401182:	4b02      	ldr	r3, [pc, #8]	; (40118c <FLEXCOM3_Handler+0x10>)
  401184:	4798      	blx	r3
}
  401186:	bf00      	nop
  401188:	bd80      	pop	{r7, pc}
  40118a:	bf00      	nop
  40118c:	00401191 	.word	0x00401191

00401190 <flexcom_handler>:


void flexcom_handler(uint8_t port_index) {
  401190:	b580      	push	{r7, lr}
  401192:	b08a      	sub	sp, #40	; 0x28
  401194:	af00      	add	r7, sp, #0
  401196:	4603      	mov	r3, r0
  401198:	71fb      	strb	r3, [r7, #7]
	Twi *twi_ptr;
	Pdc *pdc_ptr;
	uint8_t *buf_ptr;
	uint32_t num_bytes;
	uint8_t	 bus_index = 0;
  40119a:	2300      	movs	r3, #0
  40119c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t twi_status;
	uint32_t timeout_count = 0;
  4011a0:	2300      	movs	r3, #0
  4011a2:	61fb      	str	r3, [r7, #28]
	uint8_t error = 0;
  4011a4:	2300      	movs	r3, #0
  4011a6:	76fb      	strb	r3, [r7, #27]

	if (port_index == 1) {
  4011a8:	79fb      	ldrb	r3, [r7, #7]
  4011aa:	2b01      	cmp	r3, #1
  4011ac:	d105      	bne.n	4011ba <flexcom_handler+0x2a>
		twi_ptr = BOARD_BASE_TWI1;
  4011ae:	4b4b      	ldr	r3, [pc, #300]	; (4012dc <flexcom_handler+0x14c>)
  4011b0:	627b      	str	r3, [r7, #36]	; 0x24
		bus_index = 0;
  4011b2:	2300      	movs	r3, #0
  4011b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4011b8:	e00b      	b.n	4011d2 <flexcom_handler+0x42>
	} else if (port_index == 3) {
  4011ba:	79fb      	ldrb	r3, [r7, #7]
  4011bc:	2b03      	cmp	r3, #3
  4011be:	d105      	bne.n	4011cc <flexcom_handler+0x3c>
		twi_ptr = BOARD_BASE_TWI3;
  4011c0:	4b47      	ldr	r3, [pc, #284]	; (4012e0 <flexcom_handler+0x150>)
  4011c2:	627b      	str	r3, [r7, #36]	; 0x24
		bus_index = 1;
  4011c4:	2301      	movs	r3, #1
  4011c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4011ca:	e002      	b.n	4011d2 <flexcom_handler+0x42>
	} else {
		error = 1;		// bad port index
  4011cc:	2301      	movs	r3, #1
  4011ce:	76fb      	strb	r3, [r7, #27]
		return;
  4011d0:	e080      	b.n	4012d4 <flexcom_handler+0x144>
	}

	pdc_ptr   = twi_get_pdc_base(twi_ptr);
  4011d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4011d4:	4b43      	ldr	r3, [pc, #268]	; (4012e4 <flexcom_handler+0x154>)
  4011d6:	4798      	blx	r3
  4011d8:	6178      	str	r0, [r7, #20]
	buf_ptr   = i2c_nb_transactions[bus_index].buf_ptr;
  4011da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4011de:	4a42      	ldr	r2, [pc, #264]	; (4012e8 <flexcom_handler+0x158>)
  4011e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4011e4:	613b      	str	r3, [r7, #16]
	num_bytes = i2c_nb_transactions[bus_index].num_bytes;	
  4011e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4011ea:	4a3f      	ldr	r2, [pc, #252]	; (4012e8 <flexcom_handler+0x158>)
  4011ec:	00db      	lsls	r3, r3, #3
  4011ee:	4413      	add	r3, r2
  4011f0:	889b      	ldrh	r3, [r3, #4]
  4011f2:	60fb      	str	r3, [r7, #12]

	twi_status = twi_get_interrupt_status(twi_ptr);
  4011f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4011f6:	4b3d      	ldr	r3, [pc, #244]	; (4012ec <flexcom_handler+0x15c>)
  4011f8:	4798      	blx	r3
  4011fa:	60b8      	str	r0, [r7, #8]
	twi_status &= twi_get_interrupt_mask(twi_ptr);
  4011fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4011fe:	4b3c      	ldr	r3, [pc, #240]	; (4012f0 <flexcom_handler+0x160>)
  401200:	4798      	blx	r3
  401202:	4602      	mov	r2, r0
  401204:	68bb      	ldr	r3, [r7, #8]
  401206:	4013      	ands	r3, r2
  401208:	60bb      	str	r3, [r7, #8]


	if ((!error) && (twi_status & TWI_SR_ENDRX))  {
  40120a:	7efb      	ldrb	r3, [r7, #27]
  40120c:	2b00      	cmp	r3, #0
  40120e:	d161      	bne.n	4012d4 <flexcom_handler+0x144>
  401210:	68bb      	ldr	r3, [r7, #8]
  401212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  401216:	2b00      	cmp	r3, #0
  401218:	d05c      	beq.n	4012d4 <flexcom_handler+0x144>
		/* Disable the RX PDC transfer requests */
		pdc_disable_transfer(pdc_ptr, PERIPH_PTCR_RXTDIS);
  40121a:	2102      	movs	r1, #2
  40121c:	6978      	ldr	r0, [r7, #20]
  40121e:	4b35      	ldr	r3, [pc, #212]	; (4012f4 <flexcom_handler+0x164>)
  401220:	4798      	blx	r3

		/* Disable TWI interrupts */
		twi_disable_interrupt(twi_ptr, TWI_SR_ENDRX);
  401222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401226:	6a78      	ldr	r0, [r7, #36]	; 0x24
  401228:	4b33      	ldr	r3, [pc, #204]	; (4012f8 <flexcom_handler+0x168>)
  40122a:	4798      	blx	r3

		/* Wait for next-to-last byte to be read */
		timeout_count = 0;
  40122c:	2300      	movs	r3, #0
  40122e:	61fb      	str	r3, [r7, #28]
		while ((twi_ptr->TWI_SR & TWI_SR_RXRDY) == 0) {
  401230:	e007      	b.n	401242 <flexcom_handler+0xb2>
			if (++timeout_count >= I2C_TIMEOUT_COUNT) {
  401232:	69fb      	ldr	r3, [r7, #28]
  401234:	3301      	adds	r3, #1
  401236:	61fb      	str	r3, [r7, #28]
  401238:	69fb      	ldr	r3, [r7, #28]
  40123a:	f242 720f 	movw	r2, #9999	; 0x270f
  40123e:	4293      	cmp	r3, r2
  401240:	d806      	bhi.n	401250 <flexcom_handler+0xc0>
		while ((twi_ptr->TWI_SR & TWI_SR_RXRDY) == 0) {
  401242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401244:	6a1b      	ldr	r3, [r3, #32]
  401246:	f003 0302 	and.w	r3, r3, #2
  40124a:	2b00      	cmp	r3, #0
  40124c:	d0f1      	beq.n	401232 <flexcom_handler+0xa2>
  40124e:	e000      	b.n	401252 <flexcom_handler+0xc2>
				break;
  401250:	bf00      	nop
			}
		}

		/* Set stop command */
		twi_ptr->TWI_CR = TWI_CR_STOP;
  401252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401254:	2202      	movs	r2, #2
  401256:	601a      	str	r2, [r3, #0]

		buf_ptr[num_bytes-2] = twi_ptr->TWI_RHR;
  401258:	68fb      	ldr	r3, [r7, #12]
  40125a:	3b02      	subs	r3, #2
  40125c:	693a      	ldr	r2, [r7, #16]
  40125e:	4413      	add	r3, r2
  401260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401262:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401264:	b2d2      	uxtb	r2, r2
  401266:	701a      	strb	r2, [r3, #0]

		/* Wait for last byte to be read */
		timeout_count = 0;
  401268:	2300      	movs	r3, #0
  40126a:	61fb      	str	r3, [r7, #28]
		while ((twi_ptr->TWI_SR & TWI_SR_RXRDY) == 0) {
  40126c:	e007      	b.n	40127e <flexcom_handler+0xee>
			if (++timeout_count >= I2C_TIMEOUT_COUNT) {
  40126e:	69fb      	ldr	r3, [r7, #28]
  401270:	3301      	adds	r3, #1
  401272:	61fb      	str	r3, [r7, #28]
  401274:	69fb      	ldr	r3, [r7, #28]
  401276:	f242 720f 	movw	r2, #9999	; 0x270f
  40127a:	4293      	cmp	r3, r2
  40127c:	d806      	bhi.n	40128c <flexcom_handler+0xfc>
		while ((twi_ptr->TWI_SR & TWI_SR_RXRDY) == 0) {
  40127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401280:	6a1b      	ldr	r3, [r3, #32]
  401282:	f003 0302 	and.w	r3, r3, #2
  401286:	2b00      	cmp	r3, #0
  401288:	d0f1      	beq.n	40126e <flexcom_handler+0xde>
  40128a:	e000      	b.n	40128e <flexcom_handler+0xfe>
				break;
  40128c:	bf00      	nop
			}
		}

		buf_ptr[num_bytes-1] = twi_ptr->TWI_RHR;
  40128e:	68fb      	ldr	r3, [r7, #12]
  401290:	3b01      	subs	r3, #1
  401292:	693a      	ldr	r2, [r7, #16]
  401294:	4413      	add	r3, r2
  401296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401298:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40129a:	b2d2      	uxtb	r2, r2
  40129c:	701a      	strb	r2, [r3, #0]

		/* Wait for transfer to complete */
		timeout_count = 0;
  40129e:	2300      	movs	r3, #0
  4012a0:	61fb      	str	r3, [r7, #28]
		while ((twi_ptr->TWI_SR & TWI_SR_TXCOMP) == 0) {
  4012a2:	e007      	b.n	4012b4 <flexcom_handler+0x124>
			if (++timeout_count >= I2C_TIMEOUT_COUNT) {
  4012a4:	69fb      	ldr	r3, [r7, #28]
  4012a6:	3301      	adds	r3, #1
  4012a8:	61fb      	str	r3, [r7, #28]
  4012aa:	69fb      	ldr	r3, [r7, #28]
  4012ac:	f242 720f 	movw	r2, #9999	; 0x270f
  4012b0:	4293      	cmp	r3, r2
  4012b2:	d806      	bhi.n	4012c2 <flexcom_handler+0x132>
		while ((twi_ptr->TWI_SR & TWI_SR_TXCOMP) == 0) {
  4012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012b6:	6a1b      	ldr	r3, [r3, #32]
  4012b8:	f003 0301 	and.w	r3, r3, #1
  4012bc:	2b00      	cmp	r3, #0
  4012be:	d0f1      	beq.n	4012a4 <flexcom_handler+0x114>
  4012c0:	e000      	b.n	4012c4 <flexcom_handler+0x134>
				break;
  4012c2:	bf00      	nop
			}
		}

		/* Notify sensor driver that this transaction is complete */
		ch_io_notify(sensor_group_ptr, bus_index);
  4012c4:	4b0d      	ldr	r3, [pc, #52]	; (4012fc <flexcom_handler+0x16c>)
  4012c6:	681b      	ldr	r3, [r3, #0]
  4012c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  4012cc:	4611      	mov	r1, r2
  4012ce:	4618      	mov	r0, r3
  4012d0:	4b0b      	ldr	r3, [pc, #44]	; (401300 <flexcom_handler+0x170>)
  4012d2:	4798      	blx	r3
	}

}
  4012d4:	3728      	adds	r7, #40	; 0x28
  4012d6:	46bd      	mov	sp, r7
  4012d8:	bd80      	pop	{r7, pc}
  4012da:	bf00      	nop
  4012dc:	40020600 	.word	0x40020600
  4012e0:	40018600 	.word	0x40018600
  4012e4:	00404e51 	.word	0x00404e51
  4012e8:	20000884 	.word	0x20000884
  4012ec:	00404e01 	.word	0x00404e01
  4012f0:	00404e19 	.word	0x00404e19
  4012f4:	004039bd 	.word	0x004039bd
  4012f8:	00404de1 	.word	0x00404de1
  4012fc:	20000894 	.word	0x20000894
  401300:	00405d7d 	.word	0x00405d7d

00401304 <RTT_Handler>:


void RTT_Handler(void) {
  401304:	b580      	push	{r7, lr}
  401306:	af00      	add	r7, sp, #0

	/* Get RTT status */
	rtt_get_status(RTT);
  401308:	4802      	ldr	r0, [pc, #8]	; (401314 <RTT_Handler+0x10>)
  40130a:	4b03      	ldr	r3, [pc, #12]	; (401318 <RTT_Handler+0x14>)
  40130c:	4798      	blx	r3
}
  40130e:	bf00      	nop
  401310:	bd80      	pop	{r7, pc}
  401312:	bf00      	nop
  401314:	400e1430 	.word	0x400e1430
  401318:	004048c1 	.word	0x004048c1

0040131c <TC0_Handler>:

/* Interrupt handler for TC0/Channel0 peripheral */
void TC0_Handler(void)
{
  40131c:	b580      	push	{r7, lr}
  40131e:	af00      	add	r7, sp, #0
	/* This handles the case of counter overflow on TC_CHANNEL_LSEPOCH and clears the status register */
	time_get_in_us();
  401320:	4b01      	ldr	r3, [pc, #4]	; (401328 <TC0_Handler+0xc>)
  401322:	4798      	blx	r3
}
  401324:	bf00      	nop
  401326:	bd80      	pop	{r7, pc}
  401328:	00400999 	.word	0x00400999

0040132c <TC1_Handler>:

/* Interrupt handler for TC0/Channel1 peripheral */
void TC1_Handler(void)
{
  40132c:	b580      	push	{r7, lr}
  40132e:	b082      	sub	sp, #8
  401330:	af00      	add	r7, sp, #0
	uint32_t status = tc_get_status(TC0, TC_CHANNEL_US);
  401332:	2101      	movs	r1, #1
  401334:	480a      	ldr	r0, [pc, #40]	; (401360 <TC1_Handler+0x34>)
  401336:	4b0b      	ldr	r3, [pc, #44]	; (401364 <TC1_Handler+0x38>)
  401338:	4798      	blx	r3
  40133a:	6078      	str	r0, [r7, #4]
	uint32_t int_mask = tc_get_interrupt_mask(TC0, TC_CHANNEL_US);
  40133c:	2101      	movs	r1, #1
  40133e:	4808      	ldr	r0, [pc, #32]	; (401360 <TC1_Handler+0x34>)
  401340:	4b09      	ldr	r3, [pc, #36]	; (401368 <TC1_Handler+0x3c>)
  401342:	4798      	blx	r3
  401344:	6038      	str	r0, [r7, #0]

	if (status & (int_mask & TC_IMR_CPCS)) {
  401346:	683a      	ldr	r2, [r7, #0]
  401348:	687b      	ldr	r3, [r7, #4]
  40134a:	4013      	ands	r3, r2
  40134c:	f003 0310 	and.w	r3, r3, #16
  401350:	2b00      	cmp	r3, #0
  401352:	d001      	beq.n	401358 <TC1_Handler+0x2c>
		chbsp_periodic_timer_handler();
  401354:	4b05      	ldr	r3, [pc, #20]	; (40136c <TC1_Handler+0x40>)
  401356:	4798      	blx	r3
	}
}
  401358:	bf00      	nop
  40135a:	3708      	adds	r7, #8
  40135c:	46bd      	mov	sp, r7
  40135e:	bd80      	pop	{r7, pc}
  401360:	40010000 	.word	0x40010000
  401364:	004049df 	.word	0x004049df
  401368:	004049bb 	.word	0x004049bb
  40136c:	00402de5 	.word	0x00402de5

00401370 <sensor_led_on>:

void sensor_led_on(uint32_t chirp_led_pin) {
  401370:	b580      	push	{r7, lr}
  401372:	b082      	sub	sp, #8
  401374:	af00      	add	r7, sp, #0
  401376:	6078      	str	r0, [r7, #4]
	ioport_set_pin_dir(chirp_led_pin, IOPORT_DIR_OUTPUT); 
  401378:	2101      	movs	r1, #1
  40137a:	6878      	ldr	r0, [r7, #4]
  40137c:	4b04      	ldr	r3, [pc, #16]	; (401390 <sensor_led_on+0x20>)
  40137e:	4798      	blx	r3
	ioport_set_pin_level(chirp_led_pin, IOPORT_PIN_LEVEL_LOW); 
  401380:	2100      	movs	r1, #0
  401382:	6878      	ldr	r0, [r7, #4]
  401384:	4b03      	ldr	r3, [pc, #12]	; (401394 <sensor_led_on+0x24>)
  401386:	4798      	blx	r3
}	
  401388:	bf00      	nop
  40138a:	3708      	adds	r7, #8
  40138c:	46bd      	mov	sp, r7
  40138e:	bd80      	pop	{r7, pc}
  401390:	00400f69 	.word	0x00400f69
  401394:	00400ff1 	.word	0x00400ff1

00401398 <indicate_alive>:
void sensor_led_toggle(uint32_t chirp_led_pin)
{
	ioport_toggle_pin_level(chirp_led_pin);
}

void indicate_alive(void) {
  401398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40139c:	af00      	add	r7, sp, #0
	ioport_set_pin_dir(CHIRP_OK_0, IOPORT_DIR_OUTPUT); //CHIRP_OK_0=output
  40139e:	2101      	movs	r1, #1
  4013a0:	2000      	movs	r0, #0
  4013a2:	4b35      	ldr	r3, [pc, #212]	; (401478 <indicate_alive+0xe0>)
  4013a4:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_OK_1, IOPORT_DIR_OUTPUT);
  4013a6:	2101      	movs	r1, #1
  4013a8:	2001      	movs	r0, #1
  4013aa:	4b33      	ldr	r3, [pc, #204]	; (401478 <indicate_alive+0xe0>)
  4013ac:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_OK_2, IOPORT_DIR_OUTPUT);
  4013ae:	2101      	movs	r1, #1
  4013b0:	2005      	movs	r0, #5
  4013b2:	4b31      	ldr	r3, [pc, #196]	; (401478 <indicate_alive+0xe0>)
  4013b4:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_OK_3, IOPORT_DIR_OUTPUT);
  4013b6:	2101      	movs	r1, #1
  4013b8:	202f      	movs	r0, #47	; 0x2f
  4013ba:	4b2f      	ldr	r3, [pc, #188]	; (401478 <indicate_alive+0xe0>)
  4013bc:	4798      	blx	r3
	
	ioport_set_pin_level(CHIRP_OK_0, IOPORT_PIN_LEVEL_LOW); //CHIRP_OK_0=L LED=on
  4013be:	2100      	movs	r1, #0
  4013c0:	2000      	movs	r0, #0
  4013c2:	4b2e      	ldr	r3, [pc, #184]	; (40147c <indicate_alive+0xe4>)
  4013c4:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_1, IOPORT_PIN_LEVEL_LOW);
  4013c6:	2100      	movs	r1, #0
  4013c8:	2001      	movs	r0, #1
  4013ca:	4b2c      	ldr	r3, [pc, #176]	; (40147c <indicate_alive+0xe4>)
  4013cc:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_2, IOPORT_PIN_LEVEL_LOW);
  4013ce:	2100      	movs	r1, #0
  4013d0:	2005      	movs	r0, #5
  4013d2:	4b2a      	ldr	r3, [pc, #168]	; (40147c <indicate_alive+0xe4>)
  4013d4:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_3, IOPORT_PIN_LEVEL_LOW);
  4013d6:	2100      	movs	r1, #0
  4013d8:	202f      	movs	r0, #47	; 0x2f
  4013da:	4b28      	ldr	r3, [pc, #160]	; (40147c <indicate_alive+0xe4>)
  4013dc:	4798      	blx	r3
	
	delay_s(1);		//light up for 1s
  4013de:	4b28      	ldr	r3, [pc, #160]	; (401480 <indicate_alive+0xe8>)
  4013e0:	4798      	blx	r3
  4013e2:	4603      	mov	r3, r0
  4013e4:	4619      	mov	r1, r3
  4013e6:	f04f 0200 	mov.w	r2, #0
  4013ea:	460b      	mov	r3, r1
  4013ec:	4614      	mov	r4, r2
  4013ee:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  4013f2:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  4013f6:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  4013fa:	4653      	mov	r3, sl
  4013fc:	465c      	mov	r4, fp
  4013fe:	1a5b      	subs	r3, r3, r1
  401400:	eb64 0402 	sbc.w	r4, r4, r2
  401404:	ea4f 0984 	mov.w	r9, r4, lsl #2
  401408:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  40140c:	ea4f 0883 	mov.w	r8, r3, lsl #2
  401410:	4643      	mov	r3, r8
  401412:	464c      	mov	r4, r9
  401414:	185b      	adds	r3, r3, r1
  401416:	eb44 0402 	adc.w	r4, r4, r2
  40141a:	00e6      	lsls	r6, r4, #3
  40141c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401420:	00dd      	lsls	r5, r3, #3
  401422:	462b      	mov	r3, r5
  401424:	4634      	mov	r4, r6
  401426:	4619      	mov	r1, r3
  401428:	4622      	mov	r2, r4
  40142a:	f243 63af 	movw	r3, #13999	; 0x36af
  40142e:	f04f 0400 	mov.w	r4, #0
  401432:	18cd      	adds	r5, r1, r3
  401434:	eb42 0604 	adc.w	r6, r2, r4
  401438:	4628      	mov	r0, r5
  40143a:	4631      	mov	r1, r6
  40143c:	4c11      	ldr	r4, [pc, #68]	; (401484 <indicate_alive+0xec>)
  40143e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401442:	f04f 0300 	mov.w	r3, #0
  401446:	47a0      	blx	r4
  401448:	4603      	mov	r3, r0
  40144a:	460c      	mov	r4, r1
  40144c:	4618      	mov	r0, r3
  40144e:	4b0e      	ldr	r3, [pc, #56]	; (401488 <indicate_alive+0xf0>)
  401450:	4798      	blx	r3
	
	ioport_set_pin_level(CHIRP_OK_0, IOPORT_PIN_LEVEL_HIGH); //CHIRP_OK_0=H LED=off
  401452:	2101      	movs	r1, #1
  401454:	2000      	movs	r0, #0
  401456:	4b09      	ldr	r3, [pc, #36]	; (40147c <indicate_alive+0xe4>)
  401458:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_1, IOPORT_PIN_LEVEL_HIGH);
  40145a:	2101      	movs	r1, #1
  40145c:	2001      	movs	r0, #1
  40145e:	4b07      	ldr	r3, [pc, #28]	; (40147c <indicate_alive+0xe4>)
  401460:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_2, IOPORT_PIN_LEVEL_HIGH);
  401462:	2101      	movs	r1, #1
  401464:	2005      	movs	r0, #5
  401466:	4b05      	ldr	r3, [pc, #20]	; (40147c <indicate_alive+0xe4>)
  401468:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_3, IOPORT_PIN_LEVEL_HIGH);
  40146a:	2101      	movs	r1, #1
  40146c:	202f      	movs	r0, #47	; 0x2f
  40146e:	4b03      	ldr	r3, [pc, #12]	; (40147c <indicate_alive+0xe4>)
  401470:	4798      	blx	r3
}
  401472:	bf00      	nop
  401474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401478:	00400f69 	.word	0x00400f69
  40147c:	00400ff1 	.word	0x00400ff1
  401480:	00400f55 	.word	0x00400f55
  401484:	0040bd5d 	.word	0x0040bd5d
  401488:	20000001 	.word	0x20000001

0040148c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40148c:	b480      	push	{r7}
  40148e:	b083      	sub	sp, #12
  401490:	af00      	add	r7, sp, #0
  401492:	4603      	mov	r3, r0
  401494:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401496:	4909      	ldr	r1, [pc, #36]	; (4014bc <NVIC_EnableIRQ+0x30>)
  401498:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40149c:	095b      	lsrs	r3, r3, #5
  40149e:	79fa      	ldrb	r2, [r7, #7]
  4014a0:	f002 021f 	and.w	r2, r2, #31
  4014a4:	2001      	movs	r0, #1
  4014a6:	fa00 f202 	lsl.w	r2, r0, r2
  4014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4014ae:	bf00      	nop
  4014b0:	370c      	adds	r7, #12
  4014b2:	46bd      	mov	sp, r7
  4014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014b8:	4770      	bx	lr
  4014ba:	bf00      	nop
  4014bc:	e000e100 	.word	0xe000e100

004014c0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4014c0:	b480      	push	{r7}
  4014c2:	b083      	sub	sp, #12
  4014c4:	af00      	add	r7, sp, #0
  4014c6:	4603      	mov	r3, r0
  4014c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4014ca:	4909      	ldr	r1, [pc, #36]	; (4014f0 <NVIC_DisableIRQ+0x30>)
  4014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4014d0:	095b      	lsrs	r3, r3, #5
  4014d2:	79fa      	ldrb	r2, [r7, #7]
  4014d4:	f002 021f 	and.w	r2, r2, #31
  4014d8:	2001      	movs	r0, #1
  4014da:	fa00 f202 	lsl.w	r2, r0, r2
  4014de:	3320      	adds	r3, #32
  4014e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4014e4:	bf00      	nop
  4014e6:	370c      	adds	r7, #12
  4014e8:	46bd      	mov	sp, r7
  4014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014ee:	4770      	bx	lr
  4014f0:	e000e100 	.word	0xe000e100

004014f4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4014f4:	b480      	push	{r7}
  4014f6:	b083      	sub	sp, #12
  4014f8:	af00      	add	r7, sp, #0
  4014fa:	4603      	mov	r3, r0
  4014fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4014fe:	4909      	ldr	r1, [pc, #36]	; (401524 <NVIC_ClearPendingIRQ+0x30>)
  401500:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401504:	095b      	lsrs	r3, r3, #5
  401506:	79fa      	ldrb	r2, [r7, #7]
  401508:	f002 021f 	and.w	r2, r2, #31
  40150c:	2001      	movs	r0, #1
  40150e:	fa00 f202 	lsl.w	r2, r0, r2
  401512:	3360      	adds	r3, #96	; 0x60
  401514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401518:	bf00      	nop
  40151a:	370c      	adds	r7, #12
  40151c:	46bd      	mov	sp, r7
  40151e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401522:	4770      	bx	lr
  401524:	e000e100 	.word	0xe000e100

00401528 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401528:	b480      	push	{r7}
  40152a:	b083      	sub	sp, #12
  40152c:	af00      	add	r7, sp, #0
  40152e:	4603      	mov	r3, r0
  401530:	6039      	str	r1, [r7, #0]
  401532:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401534:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401538:	2b00      	cmp	r3, #0
  40153a:	da0b      	bge.n	401554 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40153c:	490d      	ldr	r1, [pc, #52]	; (401574 <NVIC_SetPriority+0x4c>)
  40153e:	79fb      	ldrb	r3, [r7, #7]
  401540:	f003 030f 	and.w	r3, r3, #15
  401544:	3b04      	subs	r3, #4
  401546:	683a      	ldr	r2, [r7, #0]
  401548:	b2d2      	uxtb	r2, r2
  40154a:	0112      	lsls	r2, r2, #4
  40154c:	b2d2      	uxtb	r2, r2
  40154e:	440b      	add	r3, r1
  401550:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  401552:	e009      	b.n	401568 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401554:	4908      	ldr	r1, [pc, #32]	; (401578 <NVIC_SetPriority+0x50>)
  401556:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40155a:	683a      	ldr	r2, [r7, #0]
  40155c:	b2d2      	uxtb	r2, r2
  40155e:	0112      	lsls	r2, r2, #4
  401560:	b2d2      	uxtb	r2, r2
  401562:	440b      	add	r3, r1
  401564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401568:	bf00      	nop
  40156a:	370c      	adds	r7, #12
  40156c:	46bd      	mov	sp, r7
  40156e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401572:	4770      	bx	lr
  401574:	e000ed00 	.word	0xe000ed00
  401578:	e000e100 	.word	0xe000e100

0040157c <osc_get_rate>:
{
  40157c:	b480      	push	{r7}
  40157e:	b083      	sub	sp, #12
  401580:	af00      	add	r7, sp, #0
  401582:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401584:	687b      	ldr	r3, [r7, #4]
  401586:	2b07      	cmp	r3, #7
  401588:	d825      	bhi.n	4015d6 <osc_get_rate+0x5a>
  40158a:	a201      	add	r2, pc, #4	; (adr r2, 401590 <osc_get_rate+0x14>)
  40158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401590:	004015b1 	.word	0x004015b1
  401594:	004015b7 	.word	0x004015b7
  401598:	004015bd 	.word	0x004015bd
  40159c:	004015c3 	.word	0x004015c3
  4015a0:	004015c7 	.word	0x004015c7
  4015a4:	004015cb 	.word	0x004015cb
  4015a8:	004015cf 	.word	0x004015cf
  4015ac:	004015d3 	.word	0x004015d3
		return OSC_SLCK_32K_RC_HZ;
  4015b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4015b4:	e010      	b.n	4015d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4015b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015ba:	e00d      	b.n	4015d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4015bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015c0:	e00a      	b.n	4015d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4015c2:	4b08      	ldr	r3, [pc, #32]	; (4015e4 <osc_get_rate+0x68>)
  4015c4:	e008      	b.n	4015d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  4015c6:	4b08      	ldr	r3, [pc, #32]	; (4015e8 <osc_get_rate+0x6c>)
  4015c8:	e006      	b.n	4015d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  4015ca:	4b08      	ldr	r3, [pc, #32]	; (4015ec <osc_get_rate+0x70>)
  4015cc:	e004      	b.n	4015d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4015ce:	2300      	movs	r3, #0
  4015d0:	e002      	b.n	4015d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4015d2:	2300      	movs	r3, #0
  4015d4:	e000      	b.n	4015d8 <osc_get_rate+0x5c>
	return 0;
  4015d6:	2300      	movs	r3, #0
}
  4015d8:	4618      	mov	r0, r3
  4015da:	370c      	adds	r7, #12
  4015dc:	46bd      	mov	sp, r7
  4015de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e2:	4770      	bx	lr
  4015e4:	007a1200 	.word	0x007a1200
  4015e8:	00f42400 	.word	0x00f42400
  4015ec:	016e3600 	.word	0x016e3600

004015f0 <sysclk_get_main_hz>:
{
  4015f0:	b580      	push	{r7, lr}
  4015f2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4015f4:	2001      	movs	r0, #1
  4015f6:	4b04      	ldr	r3, [pc, #16]	; (401608 <sysclk_get_main_hz+0x18>)
  4015f8:	4798      	blx	r3
  4015fa:	4602      	mov	r2, r0
  4015fc:	f640 634e 	movw	r3, #3662	; 0xe4e
  401600:	fb03 f302 	mul.w	r3, r3, r2
}
  401604:	4618      	mov	r0, r3
  401606:	bd80      	pop	{r7, pc}
  401608:	0040157d 	.word	0x0040157d

0040160c <sysclk_get_cpu_hz>:
{
  40160c:	b580      	push	{r7, lr}
  40160e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401610:	4b02      	ldr	r3, [pc, #8]	; (40161c <sysclk_get_cpu_hz+0x10>)
  401612:	4798      	blx	r3
  401614:	4603      	mov	r3, r0
}
  401616:	4618      	mov	r0, r3
  401618:	bd80      	pop	{r7, pc}
  40161a:	bf00      	nop
  40161c:	004015f1 	.word	0x004015f1

00401620 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401620:	b580      	push	{r7, lr}
  401622:	b082      	sub	sp, #8
  401624:	af00      	add	r7, sp, #0
  401626:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401628:	6878      	ldr	r0, [r7, #4]
  40162a:	4b03      	ldr	r3, [pc, #12]	; (401638 <sysclk_enable_peripheral_clock+0x18>)
  40162c:	4798      	blx	r3
}
  40162e:	bf00      	nop
  401630:	3708      	adds	r7, #8
  401632:	46bd      	mov	sp, r7
  401634:	bd80      	pop	{r7, pc}
  401636:	bf00      	nop
  401638:	00404305 	.word	0x00404305

0040163c <ioport_set_port_dir>:
{
  40163c:	b480      	push	{r7}
  40163e:	b08b      	sub	sp, #44	; 0x2c
  401640:	af00      	add	r7, sp, #0
  401642:	60f8      	str	r0, [r7, #12]
  401644:	60b9      	str	r1, [r7, #8]
  401646:	4613      	mov	r3, r2
  401648:	71fb      	strb	r3, [r7, #7]
  40164a:	68fb      	ldr	r3, [r7, #12]
  40164c:	627b      	str	r3, [r7, #36]	; 0x24
  40164e:	68bb      	ldr	r3, [r7, #8]
  401650:	623b      	str	r3, [r7, #32]
  401652:	79fb      	ldrb	r3, [r7, #7]
  401654:	77fb      	strb	r3, [r7, #31]
  401656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401658:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40165a:	69bb      	ldr	r3, [r7, #24]
  40165c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401660:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401664:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401666:	617b      	str	r3, [r7, #20]
	if (group_direction == IOPORT_DIR_OUTPUT) {
  401668:	7ffb      	ldrb	r3, [r7, #31]
  40166a:	2b01      	cmp	r3, #1
  40166c:	d103      	bne.n	401676 <ioport_set_port_dir+0x3a>
		base->PIO_OER = mask;
  40166e:	697b      	ldr	r3, [r7, #20]
  401670:	6a3a      	ldr	r2, [r7, #32]
  401672:	611a      	str	r2, [r3, #16]
  401674:	e005      	b.n	401682 <ioport_set_port_dir+0x46>
	} else if (group_direction == IOPORT_DIR_INPUT) {
  401676:	7ffb      	ldrb	r3, [r7, #31]
  401678:	2b00      	cmp	r3, #0
  40167a:	d102      	bne.n	401682 <ioport_set_port_dir+0x46>
		base->PIO_ODR = mask;
  40167c:	697b      	ldr	r3, [r7, #20]
  40167e:	6a3a      	ldr	r2, [r7, #32]
  401680:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = mask;
  401682:	697b      	ldr	r3, [r7, #20]
  401684:	6a3a      	ldr	r2, [r7, #32]
  401686:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  40168a:	bf00      	nop
  40168c:	372c      	adds	r7, #44	; 0x2c
  40168e:	46bd      	mov	sp, r7
  401690:	f85d 7b04 	ldr.w	r7, [sp], #4
  401694:	4770      	bx	lr

00401696 <ioport_set_pin_dir>:
{
  401696:	b480      	push	{r7}
  401698:	b08d      	sub	sp, #52	; 0x34
  40169a:	af00      	add	r7, sp, #0
  40169c:	6078      	str	r0, [r7, #4]
  40169e:	460b      	mov	r3, r1
  4016a0:	70fb      	strb	r3, [r7, #3]
  4016a2:	687b      	ldr	r3, [r7, #4]
  4016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4016a6:	78fb      	ldrb	r3, [r7, #3]
  4016a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016ae:	627b      	str	r3, [r7, #36]	; 0x24
  4016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4016b2:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4016b4:	6a3b      	ldr	r3, [r7, #32]
  4016b6:	095b      	lsrs	r3, r3, #5
  4016b8:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4016ba:	69fb      	ldr	r3, [r7, #28]
  4016bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4016c0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4016c4:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4016c6:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  4016c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4016cc:	2b01      	cmp	r3, #1
  4016ce:	d109      	bne.n	4016e4 <ioport_set_pin_dir+0x4e>
  4016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016d2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4016d4:	697b      	ldr	r3, [r7, #20]
  4016d6:	f003 031f 	and.w	r3, r3, #31
  4016da:	2201      	movs	r2, #1
  4016dc:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4016de:	69bb      	ldr	r3, [r7, #24]
  4016e0:	611a      	str	r2, [r3, #16]
  4016e2:	e00c      	b.n	4016fe <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4016e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4016e8:	2b00      	cmp	r3, #0
  4016ea:	d108      	bne.n	4016fe <ioport_set_pin_dir+0x68>
  4016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016ee:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4016f0:	693b      	ldr	r3, [r7, #16]
  4016f2:	f003 031f 	and.w	r3, r3, #31
  4016f6:	2201      	movs	r2, #1
  4016f8:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4016fa:	69bb      	ldr	r3, [r7, #24]
  4016fc:	615a      	str	r2, [r3, #20]
  4016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401700:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401702:	68fb      	ldr	r3, [r7, #12]
  401704:	f003 031f 	and.w	r3, r3, #31
  401708:	2201      	movs	r2, #1
  40170a:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40170c:	69bb      	ldr	r3, [r7, #24]
  40170e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401712:	bf00      	nop
  401714:	3734      	adds	r7, #52	; 0x34
  401716:	46bd      	mov	sp, r7
  401718:	f85d 7b04 	ldr.w	r7, [sp], #4
  40171c:	4770      	bx	lr

0040171e <ioport_set_pin_level>:
{
  40171e:	b480      	push	{r7}
  401720:	b08b      	sub	sp, #44	; 0x2c
  401722:	af00      	add	r7, sp, #0
  401724:	6078      	str	r0, [r7, #4]
  401726:	460b      	mov	r3, r1
  401728:	70fb      	strb	r3, [r7, #3]
  40172a:	687b      	ldr	r3, [r7, #4]
  40172c:	627b      	str	r3, [r7, #36]	; 0x24
  40172e:	78fb      	ldrb	r3, [r7, #3]
  401730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401736:	61fb      	str	r3, [r7, #28]
  401738:	69fb      	ldr	r3, [r7, #28]
  40173a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40173c:	69bb      	ldr	r3, [r7, #24]
  40173e:	095b      	lsrs	r3, r3, #5
  401740:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401742:	697b      	ldr	r3, [r7, #20]
  401744:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401748:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40174c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  40174e:	613b      	str	r3, [r7, #16]
	if (level) {
  401750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401754:	2b00      	cmp	r3, #0
  401756:	d009      	beq.n	40176c <ioport_set_pin_level+0x4e>
  401758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40175a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40175c:	68fb      	ldr	r3, [r7, #12]
  40175e:	f003 031f 	and.w	r3, r3, #31
  401762:	2201      	movs	r2, #1
  401764:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401766:	693b      	ldr	r3, [r7, #16]
  401768:	631a      	str	r2, [r3, #48]	; 0x30
}
  40176a:	e008      	b.n	40177e <ioport_set_pin_level+0x60>
  40176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40176e:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401770:	68bb      	ldr	r3, [r7, #8]
  401772:	f003 031f 	and.w	r3, r3, #31
  401776:	2201      	movs	r2, #1
  401778:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40177a:	693b      	ldr	r3, [r7, #16]
  40177c:	635a      	str	r2, [r3, #52]	; 0x34
  40177e:	bf00      	nop
  401780:	372c      	adds	r7, #44	; 0x2c
  401782:	46bd      	mov	sp, r7
  401784:	f85d 7b04 	ldr.w	r7, [sp], #4
  401788:	4770      	bx	lr

0040178a <ioport_set_port_level>:
 * \param mask Pin mask of pins to modify
 * \param level Level of the pins to be modified
 */
static inline void ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_value level)
{
  40178a:	b480      	push	{r7}
  40178c:	b08b      	sub	sp, #44	; 0x2c
  40178e:	af00      	add	r7, sp, #0
  401790:	60f8      	str	r0, [r7, #12]
  401792:	60b9      	str	r1, [r7, #8]
  401794:	4613      	mov	r3, r2
  401796:	71fb      	strb	r3, [r7, #7]
  401798:	68fb      	ldr	r3, [r7, #12]
  40179a:	627b      	str	r3, [r7, #36]	; 0x24
  40179c:	68bb      	ldr	r3, [r7, #8]
  40179e:	623b      	str	r3, [r7, #32]
  4017a0:	79fb      	ldrb	r3, [r7, #7]
  4017a2:	77fb      	strb	r3, [r7, #31]
  4017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4017a6:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4017a8:	69bb      	ldr	r3, [r7, #24]
  4017aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4017ae:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4017b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_value level)
{
	Pio *base = arch_ioport_port_to_base(port);
  4017b4:	617b      	str	r3, [r7, #20]

	if (level){
  4017b6:	7ffb      	ldrb	r3, [r7, #31]
  4017b8:	2b00      	cmp	r3, #0
  4017ba:	d003      	beq.n	4017c4 <ioport_set_port_level+0x3a>
		base->PIO_SODR = mask;
  4017bc:	697b      	ldr	r3, [r7, #20]
  4017be:	6a3a      	ldr	r2, [r7, #32]
  4017c0:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_port_level(port, mask, level);
}
  4017c2:	e002      	b.n	4017ca <ioport_set_port_level+0x40>
	} else {
		base->PIO_CODR = mask;
  4017c4:	697b      	ldr	r3, [r7, #20]
  4017c6:	6a3a      	ldr	r2, [r7, #32]
  4017c8:	635a      	str	r2, [r3, #52]	; 0x34
  4017ca:	bf00      	nop
  4017cc:	372c      	adds	r7, #44	; 0x2c
  4017ce:	46bd      	mov	sp, r7
  4017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017d4:	4770      	bx	lr

004017d6 <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
  4017d6:	b480      	push	{r7}
  4017d8:	b085      	sub	sp, #20
  4017da:	af00      	add	r7, sp, #0
  4017dc:	6078      	str	r0, [r7, #4]
  4017de:	687b      	ldr	r3, [r7, #4]
  4017e0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4017e2:	68fb      	ldr	r3, [r7, #12]
  4017e4:	f003 031f 	and.w	r3, r3, #31
  4017e8:	2201      	movs	r2, #1
  4017ea:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
  4017ee:	bf00      	nop
}
  4017f0:	4618      	mov	r0, r3
  4017f2:	3714      	adds	r7, #20
  4017f4:	46bd      	mov	sp, r7
  4017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017fa:	4770      	bx	lr

004017fc <adc_ch_sanity_check>:
 * \param channel  Adc channel number.
 *
 */
static inline void adc_ch_sanity_check(Adc *const adc,
		const enum adc_channel_num channel)
{
  4017fc:	b480      	push	{r7}
  4017fe:	b083      	sub	sp, #12
  401800:	af00      	add	r7, sp, #0
  401802:	6078      	str	r0, [r7, #4]
  401804:	460b      	mov	r3, r1
  401806:	807b      	strh	r3, [r7, #2]
#endif
				);
	}

	UNUSED(channel);
}
  401808:	bf00      	nop
  40180a:	370c      	adds	r7, #12
  40180c:	46bd      	mov	sp, r7
  40180e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401812:	4770      	bx	lr

00401814 <adc_select_clock_source_mck>:
 *
 * \param adc  Base address of the ADC.
 *
 */
static inline void adc_select_clock_source_mck(Adc *const adc)
{
  401814:	b480      	push	{r7}
  401816:	b085      	sub	sp, #20
  401818:	af00      	add	r7, sp, #0
  40181a:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	reg = adc->ADC_EMR;
  40181c:	687b      	ldr	r3, [r7, #4]
  40181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401820:	60fb      	str	r3, [r7, #12]

	reg &= ~ADC_EMR_SRCCLK_PMC_PCK;
  401822:	68fb      	ldr	r3, [r7, #12]
  401824:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  401828:	60fb      	str	r3, [r7, #12]

	adc->ADC_EMR = reg;
  40182a:	687b      	ldr	r3, [r7, #4]
  40182c:	68fa      	ldr	r2, [r7, #12]
  40182e:	641a      	str	r2, [r3, #64]	; 0x40
}
  401830:	bf00      	nop
  401832:	3714      	adds	r7, #20
  401834:	46bd      	mov	sp, r7
  401836:	f85d 7b04 	ldr.w	r7, [sp], #4
  40183a:	4770      	bx	lr

0040183c <adc_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void adc_set_trigger(Adc *const adc,
		const enum adc_trigger trigger)
{
  40183c:	b480      	push	{r7}
  40183e:	b085      	sub	sp, #20
  401840:	af00      	add	r7, sp, #0
  401842:	6078      	str	r0, [r7, #4]
  401844:	460b      	mov	r3, r1
  401846:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = adc->ADC_MR;
  401848:	687b      	ldr	r3, [r7, #4]
  40184a:	685b      	ldr	r3, [r3, #4]
  40184c:	60fb      	str	r3, [r7, #12]

	if (trigger == ADC_TRIG_FREERUN) {
  40184e:	78fb      	ldrb	r3, [r7, #3]
  401850:	2bff      	cmp	r3, #255	; 0xff
  401852:	d104      	bne.n	40185e <adc_set_trigger+0x22>
		reg |= ADC_MR_FREERUN_ON;
  401854:	68fb      	ldr	r3, [r7, #12]
  401856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40185a:	60fb      	str	r3, [r7, #12]
  40185c:	e007      	b.n	40186e <adc_set_trigger+0x32>
	} else {
		reg &= ~(ADC_MR_TRGSEL_Msk | ADC_MR_TRGEN | ADC_MR_FREERUN_ON);
  40185e:	68fb      	ldr	r3, [r7, #12]
  401860:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  401864:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  401866:	78fb      	ldrb	r3, [r7, #3]
  401868:	68fa      	ldr	r2, [r7, #12]
  40186a:	4313      	orrs	r3, r2
  40186c:	60fb      	str	r3, [r7, #12]
	}

	adc->ADC_MR = reg;
  40186e:	687b      	ldr	r3, [r7, #4]
  401870:	68fa      	ldr	r2, [r7, #12]
  401872:	605a      	str	r2, [r3, #4]
}
  401874:	bf00      	nop
  401876:	3714      	adds	r7, #20
  401878:	46bd      	mov	sp, r7
  40187a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40187e:	4770      	bx	lr

00401880 <adc_set_writeprotect>:
 * \param adc  Base address of the ADC.
 * \param is_enable 1 to enable, 0 to disable.
 */
static inline void adc_set_writeprotect(Adc *const adc,
		const bool is_enable)
{
  401880:	b480      	push	{r7}
  401882:	b083      	sub	sp, #12
  401884:	af00      	add	r7, sp, #0
  401886:	6078      	str	r0, [r7, #4]
  401888:	460b      	mov	r3, r1
  40188a:	70fb      	strb	r3, [r7, #3]
	if (is_enable) {
  40188c:	78fb      	ldrb	r3, [r7, #3]
  40188e:	2b00      	cmp	r3, #0
  401890:	d004      	beq.n	40189c <adc_set_writeprotect+0x1c>
		adc->ADC_WPMR = ADC_WPMR_WPEN | ADC_WPMR_WPKEY_PASSWD;
  401892:	687b      	ldr	r3, [r7, #4]
  401894:	4a06      	ldr	r2, [pc, #24]	; (4018b0 <adc_set_writeprotect+0x30>)
  401896:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		adc->ADC_WPMR = ADC_WPMR_WPKEY_PASSWD;
	}
}
  40189a:	e003      	b.n	4018a4 <adc_set_writeprotect+0x24>
		adc->ADC_WPMR = ADC_WPMR_WPKEY_PASSWD;
  40189c:	687b      	ldr	r3, [r7, #4]
  40189e:	4a05      	ldr	r2, [pc, #20]	; (4018b4 <adc_set_writeprotect+0x34>)
  4018a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4018a4:	bf00      	nop
  4018a6:	370c      	adds	r7, #12
  4018a8:	46bd      	mov	sp, r7
  4018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018ae:	4770      	bx	lr
  4018b0:	41444301 	.word	0x41444301
  4018b4:	41444300 	.word	0x41444300

004018b8 <adc_channel_enable>:
 * \param adc  Base address of the ADC.
 * \param adc_ch Adc channel number.
 */
static inline void adc_channel_enable(Adc *const adc,
		const enum adc_channel_num adc_ch)
{
  4018b8:	b580      	push	{r7, lr}
  4018ba:	b082      	sub	sp, #8
  4018bc:	af00      	add	r7, sp, #0
  4018be:	6078      	str	r0, [r7, #4]
  4018c0:	460b      	mov	r3, r1
  4018c2:	807b      	strh	r3, [r7, #2]
	if (adc_ch != ADC_CHANNEL_ALL) {
  4018c4:	887b      	ldrh	r3, [r7, #2]
  4018c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4018ca:	4293      	cmp	r3, r2
  4018cc:	d004      	beq.n	4018d8 <adc_channel_enable+0x20>
		adc_ch_sanity_check(adc, adc_ch);
  4018ce:	887b      	ldrh	r3, [r7, #2]
  4018d0:	4619      	mov	r1, r3
  4018d2:	6878      	ldr	r0, [r7, #4]
  4018d4:	4b0a      	ldr	r3, [pc, #40]	; (401900 <adc_channel_enable+0x48>)
  4018d6:	4798      	blx	r3
	}

	adc->ADC_CHER = (adc_ch == ADC_CHANNEL_ALL) ?
			ADC_CHANNEL_ALL : 1 << adc_ch;
  4018d8:	887b      	ldrh	r3, [r7, #2]
  4018da:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4018de:	4293      	cmp	r3, r2
  4018e0:	d005      	beq.n	4018ee <adc_channel_enable+0x36>
  4018e2:	887b      	ldrh	r3, [r7, #2]
  4018e4:	2201      	movs	r2, #1
  4018e6:	fa02 f303 	lsl.w	r3, r2, r3
  4018ea:	461a      	mov	r2, r3
  4018ec:	e001      	b.n	4018f2 <adc_channel_enable+0x3a>
  4018ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
	adc->ADC_CHER = (adc_ch == ADC_CHANNEL_ALL) ?
  4018f2:	687b      	ldr	r3, [r7, #4]
  4018f4:	611a      	str	r2, [r3, #16]
}
  4018f6:	bf00      	nop
  4018f8:	3708      	adds	r7, #8
  4018fa:	46bd      	mov	sp, r7
  4018fc:	bd80      	pop	{r7, pc}
  4018fe:	bf00      	nop
  401900:	004017fd 	.word	0x004017fd

00401904 <adc_channel_get_value>:
 *
 * \return ADC converted value of the selected channel.
 */
static inline uint32_t adc_channel_get_value(Adc *const adc,
		enum adc_channel_num adc_ch)
{
  401904:	b580      	push	{r7, lr}
  401906:	b082      	sub	sp, #8
  401908:	af00      	add	r7, sp, #0
  40190a:	6078      	str	r0, [r7, #4]
  40190c:	460b      	mov	r3, r1
  40190e:	807b      	strh	r3, [r7, #2]
	adc_ch_sanity_check(adc, adc_ch);
  401910:	887b      	ldrh	r3, [r7, #2]
  401912:	4619      	mov	r1, r3
  401914:	6878      	ldr	r0, [r7, #4]
  401916:	4b05      	ldr	r3, [pc, #20]	; (40192c <adc_channel_get_value+0x28>)
  401918:	4798      	blx	r3

	return adc->ADC_CDR[adc_ch];
  40191a:	887a      	ldrh	r2, [r7, #2]
  40191c:	687b      	ldr	r3, [r7, #4]
  40191e:	3214      	adds	r2, #20
  401920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  401924:	4618      	mov	r0, r3
  401926:	3708      	adds	r7, #8
  401928:	46bd      	mov	sp, r7
  40192a:	bd80      	pop	{r7, pc}
  40192c:	004017fd 	.word	0x004017fd

00401930 <find_sensors>:
static void ADC0_init(void);
static void ext_int_init(void);
static void find_sensors(void);
static uint32_t Measure_Idd(unsigned int count);

void find_sensors(void) {
  401930:	b590      	push	{r4, r7, lr}
  401932:	b083      	sub	sp, #12
  401934:	af00      	add	r7, sp, #0
	uint8_t sig_bytes[2];
	
	ioport_set_pin_dir(CHIRP_RST, IOPORT_DIR_OUTPUT); //reset=output
  401936:	2101      	movs	r1, #1
  401938:	200f      	movs	r0, #15
  40193a:	4b5d      	ldr	r3, [pc, #372]	; (401ab0 <find_sensors+0x180>)
  40193c:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_RST, IOPORT_PIN_LEVEL_HIGH); //reset=H
  40193e:	2101      	movs	r1, #1
  401940:	200f      	movs	r0, #15
  401942:	4b5c      	ldr	r3, [pc, #368]	; (401ab4 <find_sensors+0x184>)
  401944:	4798      	blx	r3
	
	/* Drive PROG low on all sensor ports */
	ioport_set_pin_dir(CHIRP_PROG_0, IOPORT_DIR_OUTPUT); //PROG_0=output
  401946:	2101      	movs	r1, #1
  401948:	2010      	movs	r0, #16
  40194a:	4b59      	ldr	r3, [pc, #356]	; (401ab0 <find_sensors+0x180>)
  40194c:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_1, IOPORT_DIR_OUTPUT); //PROG_1=output
  40194e:	2101      	movs	r1, #1
  401950:	2012      	movs	r0, #18
  401952:	4b57      	ldr	r3, [pc, #348]	; (401ab0 <find_sensors+0x180>)
  401954:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_2, IOPORT_DIR_OUTPUT); //PROG_2=output
  401956:	2101      	movs	r1, #1
  401958:	2013      	movs	r0, #19
  40195a:	4b55      	ldr	r3, [pc, #340]	; (401ab0 <find_sensors+0x180>)
  40195c:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_3, IOPORT_DIR_OUTPUT); //PROG_3=output
  40195e:	2101      	movs	r1, #1
  401960:	201f      	movs	r0, #31
  401962:	4b53      	ldr	r3, [pc, #332]	; (401ab0 <find_sensors+0x180>)
  401964:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_0, IOPORT_PIN_LEVEL_LOW); //PROG_0=L
  401966:	2100      	movs	r1, #0
  401968:	2010      	movs	r0, #16
  40196a:	4b52      	ldr	r3, [pc, #328]	; (401ab4 <find_sensors+0x184>)
  40196c:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_1, IOPORT_PIN_LEVEL_LOW); //PROG_1=L
  40196e:	2100      	movs	r1, #0
  401970:	2012      	movs	r0, #18
  401972:	4b50      	ldr	r3, [pc, #320]	; (401ab4 <find_sensors+0x184>)
  401974:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_2, IOPORT_PIN_LEVEL_LOW); //PROG_2=L
  401976:	2100      	movs	r1, #0
  401978:	2013      	movs	r0, #19
  40197a:	4b4e      	ldr	r3, [pc, #312]	; (401ab4 <find_sensors+0x184>)
  40197c:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_3, IOPORT_PIN_LEVEL_LOW); //PROG_3=L
  40197e:	2100      	movs	r1, #0
  401980:	201f      	movs	r0, #31
  401982:	4b4c      	ldr	r3, [pc, #304]	; (401ab4 <find_sensors+0x184>)
  401984:	4798      	blx	r3
	
	/* check sensor 0 (on board chip or J6) */
	ioport_set_pin_level(CHIRP_PROG_0, IOPORT_PIN_LEVEL_HIGH);
  401986:	2101      	movs	r1, #1
  401988:	2010      	movs	r0, #16
  40198a:	4b4a      	ldr	r3, [pc, #296]	; (401ab4 <find_sensors+0x184>)
  40198c:	4798      	blx	r3
	i2c_master_initialize1();
  40198e:	4b4a      	ldr	r3, [pc, #296]	; (401ab8 <find_sensors+0x188>)
  401990:	4798      	blx	r3
	sig_bytes[0] = 0;
  401992:	2300      	movs	r3, #0
  401994:	713b      	strb	r3, [r7, #4]
	sig_bytes[1] = 0;
  401996:	2300      	movs	r3, #0
  401998:	717b      	strb	r3, [r7, #5]
	i2c_master_read_register1(CH_I2C_ADDR_PROG, 0x00, 2, sig_bytes);
  40199a:	1d3b      	adds	r3, r7, #4
  40199c:	2202      	movs	r2, #2
  40199e:	2100      	movs	r1, #0
  4019a0:	2045      	movs	r0, #69	; 0x45
  4019a2:	4c46      	ldr	r4, [pc, #280]	; (401abc <find_sensors+0x18c>)
  4019a4:	47a0      	blx	r4
	printf("Chirp sensor 0 ");
  4019a6:	4846      	ldr	r0, [pc, #280]	; (401ac0 <find_sensors+0x190>)
  4019a8:	4b46      	ldr	r3, [pc, #280]	; (401ac4 <find_sensors+0x194>)
  4019aa:	4798      	blx	r3
	if ((sig_bytes[0] == CH_SIG_BYTE_0) && (sig_bytes[1] == CH_SIG_BYTE_1)) {
  4019ac:	793b      	ldrb	r3, [r7, #4]
  4019ae:	2b0a      	cmp	r3, #10
  4019b0:	d106      	bne.n	4019c0 <find_sensors+0x90>
  4019b2:	797b      	ldrb	r3, [r7, #5]
  4019b4:	2b02      	cmp	r3, #2
  4019b6:	d103      	bne.n	4019c0 <find_sensors+0x90>
		printf("found\n");
  4019b8:	4843      	ldr	r0, [pc, #268]	; (401ac8 <find_sensors+0x198>)
  4019ba:	4b42      	ldr	r3, [pc, #264]	; (401ac4 <find_sensors+0x194>)
  4019bc:	4798      	blx	r3
  4019be:	e002      	b.n	4019c6 <find_sensors+0x96>
		} else {
		printf("not found\n");
  4019c0:	4842      	ldr	r0, [pc, #264]	; (401acc <find_sensors+0x19c>)
  4019c2:	4b40      	ldr	r3, [pc, #256]	; (401ac4 <find_sensors+0x194>)
  4019c4:	4798      	blx	r3
	}
	ioport_set_pin_level(CHIRP_PROG_0, IOPORT_PIN_LEVEL_LOW);
  4019c6:	2100      	movs	r1, #0
  4019c8:	2010      	movs	r0, #16
  4019ca:	4b3a      	ldr	r3, [pc, #232]	; (401ab4 <find_sensors+0x184>)
  4019cc:	4798      	blx	r3

	/* check sensor 1 (J7) */
	ioport_set_pin_level(CHIRP_PROG_1, IOPORT_PIN_LEVEL_HIGH);
  4019ce:	2101      	movs	r1, #1
  4019d0:	2012      	movs	r0, #18
  4019d2:	4b38      	ldr	r3, [pc, #224]	; (401ab4 <find_sensors+0x184>)
  4019d4:	4798      	blx	r3
	i2c_master_initialize1();
  4019d6:	4b38      	ldr	r3, [pc, #224]	; (401ab8 <find_sensors+0x188>)
  4019d8:	4798      	blx	r3
	sig_bytes[0] = 0;
  4019da:	2300      	movs	r3, #0
  4019dc:	713b      	strb	r3, [r7, #4]
	sig_bytes[1] = 0;
  4019de:	2300      	movs	r3, #0
  4019e0:	717b      	strb	r3, [r7, #5]
	i2c_master_read_register1(CH_I2C_ADDR_PROG, 0x00, 2, sig_bytes);
  4019e2:	1d3b      	adds	r3, r7, #4
  4019e4:	2202      	movs	r2, #2
  4019e6:	2100      	movs	r1, #0
  4019e8:	2045      	movs	r0, #69	; 0x45
  4019ea:	4c34      	ldr	r4, [pc, #208]	; (401abc <find_sensors+0x18c>)
  4019ec:	47a0      	blx	r4
	printf("Chirp sensor 1 ");
  4019ee:	4838      	ldr	r0, [pc, #224]	; (401ad0 <find_sensors+0x1a0>)
  4019f0:	4b34      	ldr	r3, [pc, #208]	; (401ac4 <find_sensors+0x194>)
  4019f2:	4798      	blx	r3
	if ((sig_bytes[0] == CH_SIG_BYTE_0) && (sig_bytes[1] == CH_SIG_BYTE_1)) {
  4019f4:	793b      	ldrb	r3, [r7, #4]
  4019f6:	2b0a      	cmp	r3, #10
  4019f8:	d106      	bne.n	401a08 <find_sensors+0xd8>
  4019fa:	797b      	ldrb	r3, [r7, #5]
  4019fc:	2b02      	cmp	r3, #2
  4019fe:	d103      	bne.n	401a08 <find_sensors+0xd8>
		printf("found\n");
  401a00:	4831      	ldr	r0, [pc, #196]	; (401ac8 <find_sensors+0x198>)
  401a02:	4b30      	ldr	r3, [pc, #192]	; (401ac4 <find_sensors+0x194>)
  401a04:	4798      	blx	r3
  401a06:	e002      	b.n	401a0e <find_sensors+0xde>
		} else {
		printf("not found\n");
  401a08:	4830      	ldr	r0, [pc, #192]	; (401acc <find_sensors+0x19c>)
  401a0a:	4b2e      	ldr	r3, [pc, #184]	; (401ac4 <find_sensors+0x194>)
  401a0c:	4798      	blx	r3
	}
	ioport_set_pin_level(CHIRP_PROG_1, IOPORT_PIN_LEVEL_LOW);
  401a0e:	2100      	movs	r1, #0
  401a10:	2012      	movs	r0, #18
  401a12:	4b28      	ldr	r3, [pc, #160]	; (401ab4 <find_sensors+0x184>)
  401a14:	4798      	blx	r3
	
	/* check sensor 2 (J8) */
	ioport_set_pin_level(CHIRP_PROG_2, IOPORT_PIN_LEVEL_HIGH);
  401a16:	2101      	movs	r1, #1
  401a18:	2013      	movs	r0, #19
  401a1a:	4b26      	ldr	r3, [pc, #152]	; (401ab4 <find_sensors+0x184>)
  401a1c:	4798      	blx	r3
	i2c_master_initialize3();
  401a1e:	4b2d      	ldr	r3, [pc, #180]	; (401ad4 <find_sensors+0x1a4>)
  401a20:	4798      	blx	r3
	sig_bytes[0] = 0;
  401a22:	2300      	movs	r3, #0
  401a24:	713b      	strb	r3, [r7, #4]
	sig_bytes[1] = 0;
  401a26:	2300      	movs	r3, #0
  401a28:	717b      	strb	r3, [r7, #5]
	i2c_master_read_register3(CH_I2C_ADDR_PROG, 0x00, 2, sig_bytes);
  401a2a:	1d3b      	adds	r3, r7, #4
  401a2c:	2202      	movs	r2, #2
  401a2e:	2100      	movs	r1, #0
  401a30:	2045      	movs	r0, #69	; 0x45
  401a32:	4c29      	ldr	r4, [pc, #164]	; (401ad8 <find_sensors+0x1a8>)
  401a34:	47a0      	blx	r4
	printf("Chirp sensor 2 ");
  401a36:	4829      	ldr	r0, [pc, #164]	; (401adc <find_sensors+0x1ac>)
  401a38:	4b22      	ldr	r3, [pc, #136]	; (401ac4 <find_sensors+0x194>)
  401a3a:	4798      	blx	r3
	if ((sig_bytes[0] == CH_SIG_BYTE_0) && (sig_bytes[1] == CH_SIG_BYTE_1)) {
  401a3c:	793b      	ldrb	r3, [r7, #4]
  401a3e:	2b0a      	cmp	r3, #10
  401a40:	d106      	bne.n	401a50 <find_sensors+0x120>
  401a42:	797b      	ldrb	r3, [r7, #5]
  401a44:	2b02      	cmp	r3, #2
  401a46:	d103      	bne.n	401a50 <find_sensors+0x120>
		printf("found\n");
  401a48:	481f      	ldr	r0, [pc, #124]	; (401ac8 <find_sensors+0x198>)
  401a4a:	4b1e      	ldr	r3, [pc, #120]	; (401ac4 <find_sensors+0x194>)
  401a4c:	4798      	blx	r3
  401a4e:	e002      	b.n	401a56 <find_sensors+0x126>
		} else {
		printf("not found\n");
  401a50:	481e      	ldr	r0, [pc, #120]	; (401acc <find_sensors+0x19c>)
  401a52:	4b1c      	ldr	r3, [pc, #112]	; (401ac4 <find_sensors+0x194>)
  401a54:	4798      	blx	r3
	}
	ioport_set_pin_level(CHIRP_PROG_2, IOPORT_PIN_LEVEL_LOW);
  401a56:	2100      	movs	r1, #0
  401a58:	2013      	movs	r0, #19
  401a5a:	4b16      	ldr	r3, [pc, #88]	; (401ab4 <find_sensors+0x184>)
  401a5c:	4798      	blx	r3
	
	/* check sensor 3 (J9) */
	ioport_set_pin_level(CHIRP_PROG_3, IOPORT_PIN_LEVEL_HIGH);
  401a5e:	2101      	movs	r1, #1
  401a60:	201f      	movs	r0, #31
  401a62:	4b14      	ldr	r3, [pc, #80]	; (401ab4 <find_sensors+0x184>)
  401a64:	4798      	blx	r3
	i2c_master_initialize3();
  401a66:	4b1b      	ldr	r3, [pc, #108]	; (401ad4 <find_sensors+0x1a4>)
  401a68:	4798      	blx	r3
	sig_bytes[0] = 0;
  401a6a:	2300      	movs	r3, #0
  401a6c:	713b      	strb	r3, [r7, #4]
	sig_bytes[1] = 0;
  401a6e:	2300      	movs	r3, #0
  401a70:	717b      	strb	r3, [r7, #5]
	i2c_master_read_register3(CH_I2C_ADDR_PROG, 0x00, 2, sig_bytes);
  401a72:	1d3b      	adds	r3, r7, #4
  401a74:	2202      	movs	r2, #2
  401a76:	2100      	movs	r1, #0
  401a78:	2045      	movs	r0, #69	; 0x45
  401a7a:	4c17      	ldr	r4, [pc, #92]	; (401ad8 <find_sensors+0x1a8>)
  401a7c:	47a0      	blx	r4
	printf("Chirp sensor 3 ");
  401a7e:	4818      	ldr	r0, [pc, #96]	; (401ae0 <find_sensors+0x1b0>)
  401a80:	4b10      	ldr	r3, [pc, #64]	; (401ac4 <find_sensors+0x194>)
  401a82:	4798      	blx	r3
	if ((sig_bytes[0] == CH_SIG_BYTE_0) && (sig_bytes[1] == CH_SIG_BYTE_1)) {
  401a84:	793b      	ldrb	r3, [r7, #4]
  401a86:	2b0a      	cmp	r3, #10
  401a88:	d106      	bne.n	401a98 <find_sensors+0x168>
  401a8a:	797b      	ldrb	r3, [r7, #5]
  401a8c:	2b02      	cmp	r3, #2
  401a8e:	d103      	bne.n	401a98 <find_sensors+0x168>
		printf("found\n");
  401a90:	480d      	ldr	r0, [pc, #52]	; (401ac8 <find_sensors+0x198>)
  401a92:	4b0c      	ldr	r3, [pc, #48]	; (401ac4 <find_sensors+0x194>)
  401a94:	4798      	blx	r3
  401a96:	e002      	b.n	401a9e <find_sensors+0x16e>
		} else {
		printf("not found\n");
  401a98:	480c      	ldr	r0, [pc, #48]	; (401acc <find_sensors+0x19c>)
  401a9a:	4b0a      	ldr	r3, [pc, #40]	; (401ac4 <find_sensors+0x194>)
  401a9c:	4798      	blx	r3
	}
	ioport_set_pin_level(CHIRP_PROG_3, IOPORT_PIN_LEVEL_LOW);
  401a9e:	2100      	movs	r1, #0
  401aa0:	201f      	movs	r0, #31
  401aa2:	4b04      	ldr	r3, [pc, #16]	; (401ab4 <find_sensors+0x184>)
  401aa4:	4798      	blx	r3
}
  401aa6:	bf00      	nop
  401aa8:	370c      	adds	r7, #12
  401aaa:	46bd      	mov	sp, r7
  401aac:	bd90      	pop	{r4, r7, pc}
  401aae:	bf00      	nop
  401ab0:	00401697 	.word	0x00401697
  401ab4:	0040171f 	.word	0x0040171f
  401ab8:	00407e75 	.word	0x00407e75
  401abc:	00407fb5 	.word	0x00407fb5
  401ac0:	0040c394 	.word	0x0040c394
  401ac4:	00409431 	.word	0x00409431
  401ac8:	0040c3a4 	.word	0x0040c3a4
  401acc:	0040c3ac 	.word	0x0040c3ac
  401ad0:	0040c3b8 	.word	0x0040c3b8
  401ad4:	00407eed 	.word	0x00407eed
  401ad8:	0040804d 	.word	0x0040804d
  401adc:	0040c3c8 	.word	0x0040c3c8
  401ae0:	0040c3d8 	.word	0x0040c3d8

00401ae4 <ADC0_init>:

void ADC0_init(void) {
  401ae4:	b580      	push	{r7, lr}
  401ae6:	af00      	add	r7, sp, #0
	adc_enable();
  401ae8:	4b14      	ldr	r3, [pc, #80]	; (401b3c <ADC0_init+0x58>)
  401aea:	4798      	blx	r3
	adc_select_clock_source_mck(ADC);
  401aec:	4814      	ldr	r0, [pc, #80]	; (401b40 <ADC0_init+0x5c>)
  401aee:	4b15      	ldr	r3, [pc, #84]	; (401b44 <ADC0_init+0x60>)
  401af0:	4798      	blx	r3
	adc_get_config_defaults(&adc_cfg);
  401af2:	4815      	ldr	r0, [pc, #84]	; (401b48 <ADC0_init+0x64>)
  401af4:	4b15      	ldr	r3, [pc, #84]	; (401b4c <ADC0_init+0x68>)
  401af6:	4798      	blx	r3
	adc_init(ADC, &adc_cfg);
  401af8:	4913      	ldr	r1, [pc, #76]	; (401b48 <ADC0_init+0x64>)
  401afa:	4811      	ldr	r0, [pc, #68]	; (401b40 <ADC0_init+0x5c>)
  401afc:	4b14      	ldr	r3, [pc, #80]	; (401b50 <ADC0_init+0x6c>)
  401afe:	4798      	blx	r3
	adc_channel_enable(ADC, ADC_CHANNEL_0);
  401b00:	2100      	movs	r1, #0
  401b02:	480f      	ldr	r0, [pc, #60]	; (401b40 <ADC0_init+0x5c>)
  401b04:	4b13      	ldr	r3, [pc, #76]	; (401b54 <ADC0_init+0x70>)
  401b06:	4798      	blx	r3
	adc_set_trigger(ADC, ADC_TRIG_FREERUN);
  401b08:	21ff      	movs	r1, #255	; 0xff
  401b0a:	480d      	ldr	r0, [pc, #52]	; (401b40 <ADC0_init+0x5c>)
  401b0c:	4b12      	ldr	r3, [pc, #72]	; (401b58 <ADC0_init+0x74>)
  401b0e:	4798      	blx	r3

	g_max_digital = MAX_DIGITAL_12_BIT;
  401b10:	4b12      	ldr	r3, [pc, #72]	; (401b5c <ADC0_init+0x78>)
  401b12:	f640 72ff 	movw	r2, #4095	; 0xfff
  401b16:	601a      	str	r2, [r3, #0]
	adc_set_resolution(ADC, ADC_12_BITS);
  401b18:	2100      	movs	r1, #0
  401b1a:	4809      	ldr	r0, [pc, #36]	; (401b40 <ADC0_init+0x5c>)
  401b1c:	4b10      	ldr	r3, [pc, #64]	; (401b60 <ADC0_init+0x7c>)
  401b1e:	4798      	blx	r3
	
	adc_set_writeprotect(ADC, 0);
  401b20:	2100      	movs	r1, #0
  401b22:	4807      	ldr	r0, [pc, #28]	; (401b40 <ADC0_init+0x5c>)
  401b24:	4b0f      	ldr	r3, [pc, #60]	; (401b64 <ADC0_init+0x80>)
  401b26:	4798      	blx	r3
	*adc_reg = ADC_MODE_NO_AUTOTEST;// Set ADC converter to normal operation
  401b28:	4b0f      	ldr	r3, [pc, #60]	; (401b68 <ADC0_init+0x84>)
  401b2a:	681b      	ldr	r3, [r3, #0]
  401b2c:	2200      	movs	r2, #0
  401b2e:	601a      	str	r2, [r3, #0]
	adc_set_writeprotect(ADC, 1);
  401b30:	2101      	movs	r1, #1
  401b32:	4803      	ldr	r0, [pc, #12]	; (401b40 <ADC0_init+0x5c>)
  401b34:	4b0b      	ldr	r3, [pc, #44]	; (401b64 <ADC0_init+0x80>)
  401b36:	4798      	blx	r3
}
  401b38:	bf00      	nop
  401b3a:	bd80      	pop	{r7, pc}
  401b3c:	004036cd 	.word	0x004036cd
  401b40:	40038000 	.word	0x40038000
  401b44:	00401815 	.word	0x00401815
  401b48:	2000038c 	.word	0x2000038c
  401b4c:	004034c9 	.word	0x004034c9
  401b50:	004035b5 	.word	0x004035b5
  401b54:	004018b9 	.word	0x004018b9
  401b58:	0040183d 	.word	0x0040183d
  401b5c:	20000388 	.word	0x20000388
  401b60:	00403615 	.word	0x00403615
  401b64:	00401881 	.word	0x00401881
  401b68:	20000168 	.word	0x20000168
  401b6c:	00000000 	.word	0x00000000

00401b70 <Measure_Idd>:

uint32_t Measure_Idd(unsigned int count) {
  401b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b74:	b08f      	sub	sp, #60	; 0x3c
  401b76:	af00      	add	r7, sp, #0
  401b78:	6178      	str	r0, [r7, #20]
	uint32_t i;
	uint64_t Sum_Idd = 0;
  401b7a:	f04f 0300 	mov.w	r3, #0
  401b7e:	f04f 0400 	mov.w	r4, #0
  401b82:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	unsigned int Average_Idd, WaitTime, ODR = 100;
  401b86:	2364      	movs	r3, #100	; 0x64
  401b88:	627b      	str	r3, [r7, #36]	; 0x24
	
	for (i=0; i < count; ++i) {
  401b8a:	2300      	movs	r3, #0
  401b8c:	637b      	str	r3, [r7, #52]	; 0x34
  401b8e:	e088      	b.n	401ca2 <Measure_Idd+0x132>
		WaitTime = (1000000/ODR/10)-30; //10 samples per ODR cycle, it was for motion sensor
  401b90:	4a79      	ldr	r2, [pc, #484]	; (401d78 <Measure_Idd+0x208>)
  401b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b94:	fbb2 f3f3 	udiv	r3, r2, r3
  401b98:	3b1e      	subs	r3, #30
  401b9a:	623b      	str	r3, [r7, #32]
		delay_us(WaitTime);
  401b9c:	6a3b      	ldr	r3, [r7, #32]
  401b9e:	2b00      	cmp	r3, #0
  401ba0:	d025      	beq.n	401bee <Measure_Idd+0x7e>
  401ba2:	6a3b      	ldr	r3, [r7, #32]
  401ba4:	4698      	mov	r8, r3
  401ba6:	f04f 0900 	mov.w	r9, #0
  401baa:	4b74      	ldr	r3, [pc, #464]	; (401d7c <Measure_Idd+0x20c>)
  401bac:	4798      	blx	r3
  401bae:	4603      	mov	r3, r0
  401bb0:	f04f 0400 	mov.w	r4, #0
  401bb4:	fb03 f109 	mul.w	r1, r3, r9
  401bb8:	fb08 f204 	mul.w	r2, r8, r4
  401bbc:	440a      	add	r2, r1
  401bbe:	fba8 3403 	umull	r3, r4, r8, r3
  401bc2:	4422      	add	r2, r4
  401bc4:	4614      	mov	r4, r2
  401bc6:	a268      	add	r2, pc, #416	; (adr r2, 401d68 <Measure_Idd+0x1f8>)
  401bc8:	e9d2 1200 	ldrd	r1, r2, [r2]
  401bcc:	eb13 0801 	adds.w	r8, r3, r1
  401bd0:	eb44 0902 	adc.w	r9, r4, r2
  401bd4:	4640      	mov	r0, r8
  401bd6:	4649      	mov	r1, r9
  401bd8:	4c69      	ldr	r4, [pc, #420]	; (401d80 <Measure_Idd+0x210>)
  401bda:	4a6a      	ldr	r2, [pc, #424]	; (401d84 <Measure_Idd+0x214>)
  401bdc:	f04f 0300 	mov.w	r3, #0
  401be0:	47a0      	blx	r4
  401be2:	4603      	mov	r3, r0
  401be4:	460c      	mov	r4, r1
  401be6:	4618      	mov	r0, r3
  401be8:	4b67      	ldr	r3, [pc, #412]	; (401d88 <Measure_Idd+0x218>)
  401bea:	4798      	blx	r3
  401bec:	e017      	b.n	401c1e <Measure_Idd+0xae>
  401bee:	4b63      	ldr	r3, [pc, #396]	; (401d7c <Measure_Idd+0x20c>)
  401bf0:	4798      	blx	r3
  401bf2:	4603      	mov	r3, r0
  401bf4:	f04f 0400 	mov.w	r4, #0
  401bf8:	a25b      	add	r2, pc, #364	; (adr r2, 401d68 <Measure_Idd+0x1f8>)
  401bfa:	e9d2 1200 	ldrd	r1, r2, [r2]
  401bfe:	eb13 0801 	adds.w	r8, r3, r1
  401c02:	eb44 0902 	adc.w	r9, r4, r2
  401c06:	4640      	mov	r0, r8
  401c08:	4649      	mov	r1, r9
  401c0a:	4c5d      	ldr	r4, [pc, #372]	; (401d80 <Measure_Idd+0x210>)
  401c0c:	4a5d      	ldr	r2, [pc, #372]	; (401d84 <Measure_Idd+0x214>)
  401c0e:	f04f 0300 	mov.w	r3, #0
  401c12:	47a0      	blx	r4
  401c14:	4603      	mov	r3, r0
  401c16:	460c      	mov	r4, r1
  401c18:	4618      	mov	r0, r3
  401c1a:	4b5b      	ldr	r3, [pc, #364]	; (401d88 <Measure_Idd+0x218>)
  401c1c:	4798      	blx	r3
		adc_local->ADC_CR = ADC_CR_START; //start ADC conversion
  401c1e:	4b5b      	ldr	r3, [pc, #364]	; (401d8c <Measure_Idd+0x21c>)
  401c20:	681b      	ldr	r3, [r3, #0]
  401c22:	2202      	movs	r2, #2
  401c24:	601a      	str	r2, [r3, #0]
		delay_us(30); //wait for ADC conversion time
  401c26:	4b55      	ldr	r3, [pc, #340]	; (401d7c <Measure_Idd+0x20c>)
  401c28:	4798      	blx	r3
  401c2a:	4603      	mov	r3, r0
  401c2c:	4619      	mov	r1, r3
  401c2e:	f04f 0200 	mov.w	r2, #0
  401c32:	460b      	mov	r3, r1
  401c34:	4614      	mov	r4, r2
  401c36:	0120      	lsls	r0, r4, #4
  401c38:	60f8      	str	r0, [r7, #12]
  401c3a:	68f8      	ldr	r0, [r7, #12]
  401c3c:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  401c40:	60f8      	str	r0, [r7, #12]
  401c42:	011b      	lsls	r3, r3, #4
  401c44:	60bb      	str	r3, [r7, #8]
  401c46:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  401c4a:	1a5b      	subs	r3, r3, r1
  401c4c:	eb64 0402 	sbc.w	r4, r4, r2
  401c50:	18db      	adds	r3, r3, r3
  401c52:	eb44 0404 	adc.w	r4, r4, r4
  401c56:	4619      	mov	r1, r3
  401c58:	4622      	mov	r2, r4
  401c5a:	a443      	add	r4, pc, #268	; (adr r4, 401d68 <Measure_Idd+0x1f8>)
  401c5c:	e9d4 3400 	ldrd	r3, r4, [r4]
  401c60:	eb11 0803 	adds.w	r8, r1, r3
  401c64:	eb42 0904 	adc.w	r9, r2, r4
  401c68:	4640      	mov	r0, r8
  401c6a:	4649      	mov	r1, r9
  401c6c:	4c44      	ldr	r4, [pc, #272]	; (401d80 <Measure_Idd+0x210>)
  401c6e:	4a45      	ldr	r2, [pc, #276]	; (401d84 <Measure_Idd+0x214>)
  401c70:	f04f 0300 	mov.w	r3, #0
  401c74:	47a0      	blx	r4
  401c76:	4603      	mov	r3, r0
  401c78:	460c      	mov	r4, r1
  401c7a:	4618      	mov	r0, r3
  401c7c:	4b42      	ldr	r3, [pc, #264]	; (401d88 <Measure_Idd+0x218>)
  401c7e:	4798      	blx	r3
		Sum_Idd += adc_channel_get_value(ADC, ADC_CHANNEL_0);
  401c80:	2100      	movs	r1, #0
  401c82:	4843      	ldr	r0, [pc, #268]	; (401d90 <Measure_Idd+0x220>)
  401c84:	4b43      	ldr	r3, [pc, #268]	; (401d94 <Measure_Idd+0x224>)
  401c86:	4798      	blx	r3
  401c88:	4603      	mov	r3, r0
  401c8a:	f04f 0400 	mov.w	r4, #0
  401c8e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
  401c92:	185b      	adds	r3, r3, r1
  401c94:	eb44 0402 	adc.w	r4, r4, r2
  401c98:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	for (i=0; i < count; ++i) {
  401c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401c9e:	3301      	adds	r3, #1
  401ca0:	637b      	str	r3, [r7, #52]	; 0x34
  401ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  401ca4:	697b      	ldr	r3, [r7, #20]
  401ca6:	429a      	cmp	r2, r3
  401ca8:	f4ff af72 	bcc.w	401b90 <Measure_Idd+0x20>
	}

	Average_Idd = (Sum_Idd / count)* VOLT_REF / g_max_digital/0.6171; //5.1R sense, x100 and 1.21 Op-amp gain. mA to uA
  401cac:	697b      	ldr	r3, [r7, #20]
  401cae:	f04f 0400 	mov.w	r4, #0
  401cb2:	4a33      	ldr	r2, [pc, #204]	; (401d80 <Measure_Idd+0x210>)
  401cb4:	60ba      	str	r2, [r7, #8]
  401cb6:	461a      	mov	r2, r3
  401cb8:	4623      	mov	r3, r4
  401cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
  401cbe:	68bc      	ldr	r4, [r7, #8]
  401cc0:	47a0      	blx	r4
  401cc2:	4603      	mov	r3, r0
  401cc4:	460c      	mov	r4, r1
  401cc6:	4619      	mov	r1, r3
  401cc8:	4622      	mov	r2, r4
  401cca:	460b      	mov	r3, r1
  401ccc:	4614      	mov	r4, r2
  401cce:	18db      	adds	r3, r3, r3
  401cd0:	eb44 0404 	adc.w	r4, r4, r4
  401cd4:	185b      	adds	r3, r3, r1
  401cd6:	eb44 0402 	adc.w	r4, r4, r2
  401cda:	00a0      	lsls	r0, r4, #2
  401cdc:	6078      	str	r0, [r7, #4]
  401cde:	6878      	ldr	r0, [r7, #4]
  401ce0:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  401ce4:	6078      	str	r0, [r7, #4]
  401ce6:	009b      	lsls	r3, r3, #2
  401ce8:	603b      	str	r3, [r7, #0]
  401cea:	e9d7 3400 	ldrd	r3, r4, [r7]
  401cee:	185b      	adds	r3, r3, r1
  401cf0:	eb44 0402 	adc.w	r4, r4, r2
  401cf4:	01a6      	lsls	r6, r4, #6
  401cf6:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
  401cfa:	019d      	lsls	r5, r3, #6
  401cfc:	1aed      	subs	r5, r5, r3
  401cfe:	eb66 0604 	sbc.w	r6, r6, r4
  401d02:	ea4f 0b86 	mov.w	fp, r6, lsl #2
  401d06:	ea4b 7b95 	orr.w	fp, fp, r5, lsr #30
  401d0a:	ea4f 0a85 	mov.w	sl, r5, lsl #2
  401d0e:	4655      	mov	r5, sl
  401d10:	465e      	mov	r6, fp
  401d12:	186b      	adds	r3, r5, r1
  401d14:	eb46 0402 	adc.w	r4, r6, r2
  401d18:	4618      	mov	r0, r3
  401d1a:	4621      	mov	r1, r4
  401d1c:	4b1e      	ldr	r3, [pc, #120]	; (401d98 <Measure_Idd+0x228>)
  401d1e:	681b      	ldr	r3, [r3, #0]
  401d20:	f04f 0400 	mov.w	r4, #0
  401d24:	4d16      	ldr	r5, [pc, #88]	; (401d80 <Measure_Idd+0x210>)
  401d26:	461a      	mov	r2, r3
  401d28:	4623      	mov	r3, r4
  401d2a:	47a8      	blx	r5
  401d2c:	4603      	mov	r3, r0
  401d2e:	460c      	mov	r4, r1
  401d30:	4619      	mov	r1, r3
  401d32:	4622      	mov	r2, r4
  401d34:	4b19      	ldr	r3, [pc, #100]	; (401d9c <Measure_Idd+0x22c>)
  401d36:	4608      	mov	r0, r1
  401d38:	4611      	mov	r1, r2
  401d3a:	4798      	blx	r3
  401d3c:	4c18      	ldr	r4, [pc, #96]	; (401da0 <Measure_Idd+0x230>)
  401d3e:	a30c      	add	r3, pc, #48	; (adr r3, 401d70 <Measure_Idd+0x200>)
  401d40:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d44:	47a0      	blx	r4
  401d46:	4603      	mov	r3, r0
  401d48:	460c      	mov	r4, r1
  401d4a:	4619      	mov	r1, r3
  401d4c:	4622      	mov	r2, r4
  401d4e:	4b15      	ldr	r3, [pc, #84]	; (401da4 <Measure_Idd+0x234>)
  401d50:	4608      	mov	r0, r1
  401d52:	4611      	mov	r1, r2
  401d54:	4798      	blx	r3
  401d56:	4603      	mov	r3, r0
  401d58:	61fb      	str	r3, [r7, #28]
	
	return Average_Idd;
  401d5a:	69fb      	ldr	r3, [r7, #28]
}
  401d5c:	4618      	mov	r0, r3
  401d5e:	373c      	adds	r7, #60	; 0x3c
  401d60:	46bd      	mov	sp, r7
  401d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d66:	bf00      	nop
  401d68:	00d59f7f 	.word	0x00d59f7f
  401d6c:	00000000 	.word	0x00000000
  401d70:	7fcb923a 	.word	0x7fcb923a
  401d74:	3fe3bf48 	.word	0x3fe3bf48
  401d78:	000186a0 	.word	0x000186a0
  401d7c:	0040160d 	.word	0x0040160d
  401d80:	0040bd5d 	.word	0x0040bd5d
  401d84:	00d59f80 	.word	0x00d59f80
  401d88:	20000001 	.word	0x20000001
  401d8c:	20000164 	.word	0x20000164
  401d90:	40038000 	.word	0x40038000
  401d94:	00401905 	.word	0x00401905
  401d98:	20000388 	.word	0x20000388
  401d9c:	0040b701 	.word	0x0040b701
  401da0:	0040b9c1 	.word	0x0040b9c1
  401da4:	0040bd1d 	.word	0x0040bd1d

00401da8 <Measure_power>:

void Measure_power(void) {
  401da8:	b580      	push	{r7, lr}
  401daa:	b082      	sub	sp, #8
  401dac:	af00      	add	r7, sp, #0
	uint32_t ul_vol;
	
	ul_vol = Measure_Idd(100);  //300 averaging
  401dae:	2064      	movs	r0, #100	; 0x64
  401db0:	4b05      	ldr	r3, [pc, #20]	; (401dc8 <Measure_power+0x20>)
  401db2:	4798      	blx	r3
  401db4:	6078      	str	r0, [r7, #4]
	printf("Chirp sensor Idd: %ld uA\n\n", ul_vol);
  401db6:	6879      	ldr	r1, [r7, #4]
  401db8:	4804      	ldr	r0, [pc, #16]	; (401dcc <Measure_power+0x24>)
  401dba:	4b05      	ldr	r3, [pc, #20]	; (401dd0 <Measure_power+0x28>)
  401dbc:	4798      	blx	r3
}
  401dbe:	bf00      	nop
  401dc0:	3708      	adds	r7, #8
  401dc2:	46bd      	mov	sp, r7
  401dc4:	bd80      	pop	{r7, pc}
  401dc6:	bf00      	nop
  401dc8:	00401b71 	.word	0x00401b71
  401dcc:	0040c3e8 	.word	0x0040c3e8
  401dd0:	00409431 	.word	0x00409431

00401dd4 <ext_int_init>:

void ext_int_init(void)
{
  401dd4:	b590      	push	{r4, r7, lr}
  401dd6:	b083      	sub	sp, #12
  401dd8:	af02      	add	r7, sp, #8
	/* Enable the peripheral clock for the MAG extension board interrupt pin. */
	pmc_enable_periph_clk(PIN_EXT_INTERRUPT_ID);
  401dda:	200b      	movs	r0, #11
  401ddc:	4b41      	ldr	r3, [pc, #260]	; (401ee4 <ext_int_init+0x110>)
  401dde:	4798      	blx	r3

	// Enable pull-downs on the INT pins
	pio_pull_up(PIN_EXT_INTERRUPT_PIO, 1 << CHIRP_INT_0 | 1 << CHIRP_INT_1 | 1 << CHIRP_INT_2 | 1 << CHIRP_INT_3, 0);
  401de0:	2200      	movs	r2, #0
  401de2:	4941      	ldr	r1, [pc, #260]	; (401ee8 <ext_int_init+0x114>)
  401de4:	4841      	ldr	r0, [pc, #260]	; (401eec <ext_int_init+0x118>)
  401de6:	4b42      	ldr	r3, [pc, #264]	; (401ef0 <ext_int_init+0x11c>)
  401de8:	4798      	blx	r3
	pio_pull_down(PIN_EXT_INTERRUPT_PIO, 1 << CHIRP_INT_0 | 1 << CHIRP_INT_1 | 1 << CHIRP_INT_2 | 1 << CHIRP_INT_3, 1);
  401dea:	2201      	movs	r2, #1
  401dec:	493e      	ldr	r1, [pc, #248]	; (401ee8 <ext_int_init+0x114>)
  401dee:	483f      	ldr	r0, [pc, #252]	; (401eec <ext_int_init+0x118>)
  401df0:	4b40      	ldr	r3, [pc, #256]	; (401ef4 <ext_int_init+0x120>)
  401df2:	4798      	blx	r3

	/* Configure PIOs as input pins. */
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_MotionINT_MASK, PIN_EXT_INTERRUPT_ATTR);
  401df4:	2370      	movs	r3, #112	; 0x70
  401df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401dfa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401dfe:	483b      	ldr	r0, [pc, #236]	; (401eec <ext_int_init+0x118>)
  401e00:	4c3d      	ldr	r4, [pc, #244]	; (401ef8 <ext_int_init+0x124>)
  401e02:	47a0      	blx	r4
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_ChirpINT0_MASK, PIN_EXT_INTERRUPT_ATTR);
  401e04:	2370      	movs	r3, #112	; 0x70
  401e06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401e0a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401e0e:	4837      	ldr	r0, [pc, #220]	; (401eec <ext_int_init+0x118>)
  401e10:	4c39      	ldr	r4, [pc, #228]	; (401ef8 <ext_int_init+0x124>)
  401e12:	47a0      	blx	r4
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_ChirpINT1_MASK, PIN_EXT_INTERRUPT_ATTR);
  401e14:	2370      	movs	r3, #112	; 0x70
  401e16:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401e1a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401e1e:	4833      	ldr	r0, [pc, #204]	; (401eec <ext_int_init+0x118>)
  401e20:	4c35      	ldr	r4, [pc, #212]	; (401ef8 <ext_int_init+0x124>)
  401e22:	47a0      	blx	r4
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_ChirpINT2_MASK, PIN_EXT_INTERRUPT_ATTR);
  401e24:	2370      	movs	r3, #112	; 0x70
  401e26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401e2a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401e2e:	482f      	ldr	r0, [pc, #188]	; (401eec <ext_int_init+0x118>)
  401e30:	4c31      	ldr	r4, [pc, #196]	; (401ef8 <ext_int_init+0x124>)
  401e32:	47a0      	blx	r4
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_ChirpINT3_MASK, PIN_EXT_INTERRUPT_ATTR);
  401e34:	2370      	movs	r3, #112	; 0x70
  401e36:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401e3a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401e3e:	482b      	ldr	r0, [pc, #172]	; (401eec <ext_int_init+0x118>)
  401e40:	4c2d      	ldr	r4, [pc, #180]	; (401ef8 <ext_int_init+0x124>)
  401e42:	47a0      	blx	r4

	/* Initialize PIO interrupt handler, interrupt on rising edge. */
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_MotionINT_MASK,
  401e44:	2300      	movs	r3, #0
  401e46:	9300      	str	r3, [sp, #0]
  401e48:	2370      	movs	r3, #112	; 0x70
  401e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401e4e:	210b      	movs	r1, #11
  401e50:	4826      	ldr	r0, [pc, #152]	; (401eec <ext_int_init+0x118>)
  401e52:	4c2a      	ldr	r4, [pc, #168]	; (401efc <ext_int_init+0x128>)
  401e54:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_ChirpINT0_MASK,
  401e56:	2300      	movs	r3, #0
  401e58:	9300      	str	r3, [sp, #0]
  401e5a:	2370      	movs	r3, #112	; 0x70
  401e5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401e60:	210b      	movs	r1, #11
  401e62:	4822      	ldr	r0, [pc, #136]	; (401eec <ext_int_init+0x118>)
  401e64:	4c25      	ldr	r4, [pc, #148]	; (401efc <ext_int_init+0x128>)
  401e66:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_ChirpINT1_MASK,
  401e68:	2300      	movs	r3, #0
  401e6a:	9300      	str	r3, [sp, #0]
  401e6c:	2370      	movs	r3, #112	; 0x70
  401e6e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401e72:	210b      	movs	r1, #11
  401e74:	481d      	ldr	r0, [pc, #116]	; (401eec <ext_int_init+0x118>)
  401e76:	4c21      	ldr	r4, [pc, #132]	; (401efc <ext_int_init+0x128>)
  401e78:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_ChirpINT2_MASK,
  401e7a:	2300      	movs	r3, #0
  401e7c:	9300      	str	r3, [sp, #0]
  401e7e:	2370      	movs	r3, #112	; 0x70
  401e80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401e84:	210b      	movs	r1, #11
  401e86:	4819      	ldr	r0, [pc, #100]	; (401eec <ext_int_init+0x118>)
  401e88:	4c1c      	ldr	r4, [pc, #112]	; (401efc <ext_int_init+0x128>)
  401e8a:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_ChirpINT3_MASK,
  401e8c:	2300      	movs	r3, #0
  401e8e:	9300      	str	r3, [sp, #0]
  401e90:	2370      	movs	r3, #112	; 0x70
  401e92:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401e96:	210b      	movs	r1, #11
  401e98:	4814      	ldr	r0, [pc, #80]	; (401eec <ext_int_init+0x118>)
  401e9a:	4c18      	ldr	r4, [pc, #96]	; (401efc <ext_int_init+0x128>)
  401e9c:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);

	/* Initialize and enable push button (PIO) interrupt. */
	pio_handler_set_priority(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_IRQn, 0);
  401e9e:	2200      	movs	r2, #0
  401ea0:	210b      	movs	r1, #11
  401ea2:	4812      	ldr	r0, [pc, #72]	; (401eec <ext_int_init+0x118>)
  401ea4:	4b16      	ldr	r3, [pc, #88]	; (401f00 <ext_int_init+0x12c>)
  401ea6:	4798      	blx	r3

	/* Disable Motion interrupt before IMU initialization */
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_MotionINT_MASK);
  401ea8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401eac:	480f      	ldr	r0, [pc, #60]	; (401eec <ext_int_init+0x118>)
  401eae:	4b15      	ldr	r3, [pc, #84]	; (401f04 <ext_int_init+0x130>)
  401eb0:	4798      	blx	r3
	/* Disable all CHx01 interrupts */
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_ChirpINT0_MASK);
  401eb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401eb6:	480d      	ldr	r0, [pc, #52]	; (401eec <ext_int_init+0x118>)
  401eb8:	4b12      	ldr	r3, [pc, #72]	; (401f04 <ext_int_init+0x130>)
  401eba:	4798      	blx	r3
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_ChirpINT1_MASK);
  401ebc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  401ec0:	480a      	ldr	r0, [pc, #40]	; (401eec <ext_int_init+0x118>)
  401ec2:	4b10      	ldr	r3, [pc, #64]	; (401f04 <ext_int_init+0x130>)
  401ec4:	4798      	blx	r3
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_ChirpINT2_MASK);
  401ec6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  401eca:	4808      	ldr	r0, [pc, #32]	; (401eec <ext_int_init+0x118>)
  401ecc:	4b0d      	ldr	r3, [pc, #52]	; (401f04 <ext_int_init+0x130>)
  401ece:	4798      	blx	r3
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_ChirpINT3_MASK);
  401ed0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401ed4:	4805      	ldr	r0, [pc, #20]	; (401eec <ext_int_init+0x118>)
  401ed6:	4b0b      	ldr	r3, [pc, #44]	; (401f04 <ext_int_init+0x130>)
  401ed8:	4798      	blx	r3
}
  401eda:	bf00      	nop
  401edc:	3704      	adds	r7, #4
  401ede:	46bd      	mov	sp, r7
  401ee0:	bd90      	pop	{r4, r7, pc}
  401ee2:	bf00      	nop
  401ee4:	00404305 	.word	0x00404305
  401ee8:	20e00000 	.word	0x20e00000
  401eec:	400e0e00 	.word	0x400e0e00
  401ef0:	004039df 	.word	0x004039df
  401ef4:	00403c4d 	.word	0x00403c4d
  401ef8:	00403b8d 	.word	0x00403b8d
  401efc:	00403ef5 	.word	0x00403ef5
  401f00:	00403fb1 	.word	0x00403fb1
  401f04:	00403d05 	.word	0x00403d05

00401f08 <chbsp_board_init>:
/*!
 * \brief Initialize board hardware
 *
 * \note This function performs all necessary initialization on the board.
 */
void chbsp_board_init(ch_group_t *grp_ptr) {
  401f08:	b580      	push	{r7, lr}
  401f0a:	b082      	sub	sp, #8
  401f0c:	af00      	add	r7, sp, #0
  401f0e:	6078      	str	r0, [r7, #4]

	/* Make local copy of group pointer */
	sensor_group_ptr = grp_ptr;
  401f10:	4a0f      	ldr	r2, [pc, #60]	; (401f50 <chbsp_board_init+0x48>)
  401f12:	687b      	ldr	r3, [r7, #4]
  401f14:	6013      	str	r3, [r2, #0]

	/* Initialize group descriptor */
	grp_ptr->num_ports = CHBSP_MAX_DEVICES;
  401f16:	687b      	ldr	r3, [r7, #4]
  401f18:	2204      	movs	r2, #4
  401f1a:	701a      	strb	r2, [r3, #0]
	grp_ptr->num_i2c_buses = CHBSP_NUM_I2C_BUSES;
  401f1c:	687b      	ldr	r3, [r7, #4]
  401f1e:	2202      	movs	r2, #2
  401f20:	705a      	strb	r2, [r3, #1]
	grp_ptr->rtc_cal_pulse_ms = CHBSP_RTC_CAL_PULSE_MS;
  401f22:	687b      	ldr	r3, [r7, #4]
  401f24:	2264      	movs	r2, #100	; 0x64
  401f26:	80da      	strh	r2, [r3, #6]
	
	/* Initialize the SAM system. */
	sysclk_init();
  401f28:	4b0a      	ldr	r3, [pc, #40]	; (401f54 <chbsp_board_init+0x4c>)
  401f2a:	4798      	blx	r3
	board_init_I2C();
  401f2c:	4b0a      	ldr	r3, [pc, #40]	; (401f58 <chbsp_board_init+0x50>)
  401f2e:	4798      	blx	r3

	configure_console();	
  401f30:	4b0a      	ldr	r3, [pc, #40]	; (401f5c <chbsp_board_init+0x54>)
  401f32:	4798      	blx	r3
	
	ADC0_init();	
  401f34:	4b0a      	ldr	r3, [pc, #40]	; (401f60 <chbsp_board_init+0x58>)
  401f36:	4798      	blx	r3
	ext_int_init();
  401f38:	4b0a      	ldr	r3, [pc, #40]	; (401f64 <chbsp_board_init+0x5c>)
  401f3a:	4798      	blx	r3

	/* Probe I2C bus to find connected sensor(s) */
	find_sensors();
  401f3c:	4b0a      	ldr	r3, [pc, #40]	; (401f68 <chbsp_board_init+0x60>)
  401f3e:	4798      	blx	r3
	Measure_power();
  401f40:	4b0a      	ldr	r3, [pc, #40]	; (401f6c <chbsp_board_init+0x64>)
  401f42:	4798      	blx	r3

	indicate_alive();
  401f44:	4b0a      	ldr	r3, [pc, #40]	; (401f70 <chbsp_board_init+0x68>)
  401f46:	4798      	blx	r3
}
  401f48:	bf00      	nop
  401f4a:	3708      	adds	r7, #8
  401f4c:	46bd      	mov	sp, r7
  401f4e:	bd80      	pop	{r7, pc}
  401f50:	20000894 	.word	0x20000894
  401f54:	00400ca1 	.word	0x00400ca1
  401f58:	0040321d 	.word	0x0040321d
  401f5c:	00408a69 	.word	0x00408a69
  401f60:	00401ae5 	.word	0x00401ae5
  401f64:	00401dd5 	.word	0x00401dd5
  401f68:	00401931 	.word	0x00401931
  401f6c:	00401da9 	.word	0x00401da9
  401f70:	00401399 	.word	0x00401399

00401f74 <chbsp_reset_assert>:
/*!
 * \brief Assert the reset pin
 *
 * This function drives the sensor reset pin low.
 */
void chbsp_reset_assert(void) {
  401f74:	b580      	push	{r7, lr}
  401f76:	af00      	add	r7, sp, #0

	ioport_set_pin_level(CHIRP_RST, IOPORT_PIN_LEVEL_LOW); //reset=L 
  401f78:	2100      	movs	r1, #0
  401f7a:	200f      	movs	r0, #15
  401f7c:	4b01      	ldr	r3, [pc, #4]	; (401f84 <chbsp_reset_assert+0x10>)
  401f7e:	4798      	blx	r3
}
  401f80:	bf00      	nop
  401f82:	bd80      	pop	{r7, pc}
  401f84:	0040171f 	.word	0x0040171f

00401f88 <chbsp_reset_release>:
/*!
 * \brief Deassert the reset pin
 *
 * This function drives the sensor reset pin high.
 */
void chbsp_reset_release(void) {
  401f88:	b580      	push	{r7, lr}
  401f8a:	af00      	add	r7, sp, #0

	ioport_set_pin_level(CHIRP_RST, IOPORT_PIN_LEVEL_HIGH); //reset=H
  401f8c:	2101      	movs	r1, #1
  401f8e:	200f      	movs	r0, #15
  401f90:	4b01      	ldr	r3, [pc, #4]	; (401f98 <chbsp_reset_release+0x10>)
  401f92:	4798      	blx	r3
}
  401f94:	bf00      	nop
  401f96:	bd80      	pop	{r7, pc}
  401f98:	0040171f 	.word	0x0040171f

00401f9c <chbsp_program_enable>:
 *
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function drives the sensor PROG pin high on the specified port.
 */
void chbsp_program_enable(ch_dev_t *dev_ptr) {
  401f9c:	b580      	push	{r7, lr}
  401f9e:	b084      	sub	sp, #16
  401fa0:	af00      	add	r7, sp, #0
  401fa2:	6078      	str	r0, [r7, #4]
	uint8_t dev_num = ch_get_dev_num(dev_ptr);
  401fa4:	6878      	ldr	r0, [r7, #4]
  401fa6:	4b08      	ldr	r3, [pc, #32]	; (401fc8 <chbsp_program_enable+0x2c>)
  401fa8:	4798      	blx	r3
  401faa:	4603      	mov	r3, r0
  401fac:	73fb      	strb	r3, [r7, #15]
	
	// select Chirp chip PROGRAM line on Atmel board according to chip number
	ioport_set_pin_level(chirp_pin_prog[dev_num], IOPORT_PIN_LEVEL_HIGH); //PROG_0=H
  401fae:	7bfb      	ldrb	r3, [r7, #15]
  401fb0:	4a06      	ldr	r2, [pc, #24]	; (401fcc <chbsp_program_enable+0x30>)
  401fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401fb6:	2101      	movs	r1, #1
  401fb8:	4618      	mov	r0, r3
  401fba:	4b05      	ldr	r3, [pc, #20]	; (401fd0 <chbsp_program_enable+0x34>)
  401fbc:	4798      	blx	r3
}
  401fbe:	bf00      	nop
  401fc0:	3710      	adds	r7, #16
  401fc2:	46bd      	mov	sp, r7
  401fc4:	bd80      	pop	{r7, pc}
  401fc6:	bf00      	nop
  401fc8:	0040591d 	.word	0x0040591d
  401fcc:	20000120 	.word	0x20000120
  401fd0:	0040171f 	.word	0x0040171f

00401fd4 <chbsp_program_disable>:
 *
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function drives the sensor PROG pin low on the specified port.
 */
void chbsp_program_disable(ch_dev_t *dev_ptr) {
  401fd4:	b580      	push	{r7, lr}
  401fd6:	b084      	sub	sp, #16
  401fd8:	af00      	add	r7, sp, #0
  401fda:	6078      	str	r0, [r7, #4]
	uint8_t dev_num = ch_get_dev_num(dev_ptr);
  401fdc:	6878      	ldr	r0, [r7, #4]
  401fde:	4b08      	ldr	r3, [pc, #32]	; (402000 <chbsp_program_disable+0x2c>)
  401fe0:	4798      	blx	r3
  401fe2:	4603      	mov	r3, r0
  401fe4:	73fb      	strb	r3, [r7, #15]

	// select Chirp chip PROGRAM line on Atmel board according to chip number
	ioport_set_pin_level(chirp_pin_prog[dev_num], IOPORT_PIN_LEVEL_LOW); //PROG_0=L
  401fe6:	7bfb      	ldrb	r3, [r7, #15]
  401fe8:	4a06      	ldr	r2, [pc, #24]	; (402004 <chbsp_program_disable+0x30>)
  401fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401fee:	2100      	movs	r1, #0
  401ff0:	4618      	mov	r0, r3
  401ff2:	4b05      	ldr	r3, [pc, #20]	; (402008 <chbsp_program_disable+0x34>)
  401ff4:	4798      	blx	r3
}
  401ff6:	bf00      	nop
  401ff8:	3710      	adds	r7, #16
  401ffa:	46bd      	mov	sp, r7
  401ffc:	bd80      	pop	{r7, pc}
  401ffe:	bf00      	nop
  402000:	0040591d 	.word	0x0040591d
  402004:	20000120 	.word	0x20000120
  402008:	0040171f 	.word	0x0040171f

0040200c <chbsp_set_io_dir_in>:
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function configures the Chirp sensor INT pin as an input (from the perspective of 
 * the host system).
 */
void chbsp_set_io_dir_in(ch_dev_t *dev_ptr) {
  40200c:	b580      	push	{r7, lr}
  40200e:	b084      	sub	sp, #16
  402010:	af00      	add	r7, sp, #0
  402012:	6078      	str	r0, [r7, #4]
	uint8_t dev_num = ch_get_dev_num(dev_ptr);
  402014:	6878      	ldr	r0, [r7, #4]
  402016:	4b08      	ldr	r3, [pc, #32]	; (402038 <chbsp_set_io_dir_in+0x2c>)
  402018:	4798      	blx	r3
  40201a:	4603      	mov	r3, r0
  40201c:	73fb      	strb	r3, [r7, #15]

	ioport_set_pin_dir(chirp_pin_io[dev_num], IOPORT_DIR_INPUT);
  40201e:	7bfb      	ldrb	r3, [r7, #15]
  402020:	4a06      	ldr	r2, [pc, #24]	; (40203c <chbsp_set_io_dir_in+0x30>)
  402022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402026:	2100      	movs	r1, #0
  402028:	4618      	mov	r0, r3
  40202a:	4b05      	ldr	r3, [pc, #20]	; (402040 <chbsp_set_io_dir_in+0x34>)
  40202c:	4798      	blx	r3
}
  40202e:	bf00      	nop
  402030:	3710      	adds	r7, #16
  402032:	46bd      	mov	sp, r7
  402034:	bd80      	pop	{r7, pc}
  402036:	bf00      	nop
  402038:	0040591d 	.word	0x0040591d
  40203c:	20000130 	.word	0x20000130
  402040:	00401697 	.word	0x00401697

00402044 <chbsp_group_set_io_dir_out>:
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 *
 * This function configures each Chirp sensor's INT pin as an output (from the perspective 
 * of the host system).
 */
void chbsp_group_set_io_dir_out(ch_group_t *grp_ptr) {
  402044:	b580      	push	{r7, lr}
  402046:	b086      	sub	sp, #24
  402048:	af00      	add	r7, sp, #0
  40204a:	6078      	str	r0, [r7, #4]
	ioport_port_mask_t mask = 0;
  40204c:	2300      	movs	r3, #0
  40204e:	617b      	str	r3, [r7, #20]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++)
  402050:	2300      	movs	r3, #0
  402052:	74fb      	strb	r3, [r7, #19]
  402054:	e019      	b.n	40208a <chbsp_group_set_io_dir_out+0x46>
	{
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  402056:	7cfb      	ldrb	r3, [r7, #19]
  402058:	4619      	mov	r1, r3
  40205a:	6878      	ldr	r0, [r7, #4]
  40205c:	4b13      	ldr	r3, [pc, #76]	; (4020ac <chbsp_group_set_io_dir_out+0x68>)
  40205e:	4798      	blx	r3
  402060:	60f8      	str	r0, [r7, #12]

		if (ch_sensor_is_connected(dev_ptr))
  402062:	68f8      	ldr	r0, [r7, #12]
  402064:	4b12      	ldr	r3, [pc, #72]	; (4020b0 <chbsp_group_set_io_dir_out+0x6c>)
  402066:	4798      	blx	r3
  402068:	4603      	mov	r3, r0
  40206a:	2b00      	cmp	r3, #0
  40206c:	d00a      	beq.n	402084 <chbsp_group_set_io_dir_out+0x40>
			mask |= ioport_pin_to_mask(chirp_pin_io[dev_num]);
  40206e:	7cfb      	ldrb	r3, [r7, #19]
  402070:	4a10      	ldr	r2, [pc, #64]	; (4020b4 <chbsp_group_set_io_dir_out+0x70>)
  402072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402076:	4618      	mov	r0, r3
  402078:	4b0f      	ldr	r3, [pc, #60]	; (4020b8 <chbsp_group_set_io_dir_out+0x74>)
  40207a:	4798      	blx	r3
  40207c:	4602      	mov	r2, r0
  40207e:	697b      	ldr	r3, [r7, #20]
  402080:	4313      	orrs	r3, r2
  402082:	617b      	str	r3, [r7, #20]
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++)
  402084:	7cfb      	ldrb	r3, [r7, #19]
  402086:	3301      	adds	r3, #1
  402088:	74fb      	strb	r3, [r7, #19]
  40208a:	6878      	ldr	r0, [r7, #4]
  40208c:	4b0b      	ldr	r3, [pc, #44]	; (4020bc <chbsp_group_set_io_dir_out+0x78>)
  40208e:	4798      	blx	r3
  402090:	4603      	mov	r3, r0
  402092:	461a      	mov	r2, r3
  402094:	7cfb      	ldrb	r3, [r7, #19]
  402096:	4293      	cmp	r3, r2
  402098:	d3dd      	bcc.n	402056 <chbsp_group_set_io_dir_out+0x12>
	}

	ioport_set_port_dir(IOPORT_PIOA, mask, IOPORT_DIR_OUTPUT);
  40209a:	2201      	movs	r2, #1
  40209c:	6979      	ldr	r1, [r7, #20]
  40209e:	2000      	movs	r0, #0
  4020a0:	4b07      	ldr	r3, [pc, #28]	; (4020c0 <chbsp_group_set_io_dir_out+0x7c>)
  4020a2:	4798      	blx	r3
}
  4020a4:	bf00      	nop
  4020a6:	3718      	adds	r7, #24
  4020a8:	46bd      	mov	sp, r7
  4020aa:	bd80      	pop	{r7, pc}
  4020ac:	00405937 	.word	0x00405937
  4020b0:	004058ed 	.word	0x004058ed
  4020b4:	20000130 	.word	0x20000130
  4020b8:	004017d7 	.word	0x004017d7
  4020bc:	0040598b 	.word	0x0040598b
  4020c0:	0040163d 	.word	0x0040163d

004020c4 <chbsp_group_set_io_dir_in>:
 *
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 * 
 * \note This function assumes a bidirectional level shifter is interfacing the ICs.
 */
void chbsp_group_set_io_dir_in(ch_group_t *grp_ptr) {
  4020c4:	b580      	push	{r7, lr}
  4020c6:	b086      	sub	sp, #24
  4020c8:	af00      	add	r7, sp, #0
  4020ca:	6078      	str	r0, [r7, #4]
	ioport_port_mask_t mask = 0;
  4020cc:	2300      	movs	r3, #0
  4020ce:	617b      	str	r3, [r7, #20]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  4020d0:	2300      	movs	r3, #0
  4020d2:	74fb      	strb	r3, [r7, #19]
  4020d4:	e019      	b.n	40210a <chbsp_group_set_io_dir_in+0x46>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  4020d6:	7cfb      	ldrb	r3, [r7, #19]
  4020d8:	4619      	mov	r1, r3
  4020da:	6878      	ldr	r0, [r7, #4]
  4020dc:	4b13      	ldr	r3, [pc, #76]	; (40212c <chbsp_group_set_io_dir_in+0x68>)
  4020de:	4798      	blx	r3
  4020e0:	60f8      	str	r0, [r7, #12]

		if (ch_sensor_is_connected(dev_ptr)) {
  4020e2:	68f8      	ldr	r0, [r7, #12]
  4020e4:	4b12      	ldr	r3, [pc, #72]	; (402130 <chbsp_group_set_io_dir_in+0x6c>)
  4020e6:	4798      	blx	r3
  4020e8:	4603      	mov	r3, r0
  4020ea:	2b00      	cmp	r3, #0
  4020ec:	d00a      	beq.n	402104 <chbsp_group_set_io_dir_in+0x40>
			mask |= ioport_pin_to_mask(chirp_pin_io[dev_num]);
  4020ee:	7cfb      	ldrb	r3, [r7, #19]
  4020f0:	4a10      	ldr	r2, [pc, #64]	; (402134 <chbsp_group_set_io_dir_in+0x70>)
  4020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4020f6:	4618      	mov	r0, r3
  4020f8:	4b0f      	ldr	r3, [pc, #60]	; (402138 <chbsp_group_set_io_dir_in+0x74>)
  4020fa:	4798      	blx	r3
  4020fc:	4602      	mov	r2, r0
  4020fe:	697b      	ldr	r3, [r7, #20]
  402100:	4313      	orrs	r3, r2
  402102:	617b      	str	r3, [r7, #20]
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402104:	7cfb      	ldrb	r3, [r7, #19]
  402106:	3301      	adds	r3, #1
  402108:	74fb      	strb	r3, [r7, #19]
  40210a:	6878      	ldr	r0, [r7, #4]
  40210c:	4b0b      	ldr	r3, [pc, #44]	; (40213c <chbsp_group_set_io_dir_in+0x78>)
  40210e:	4798      	blx	r3
  402110:	4603      	mov	r3, r0
  402112:	461a      	mov	r2, r3
  402114:	7cfb      	ldrb	r3, [r7, #19]
  402116:	4293      	cmp	r3, r2
  402118:	d3dd      	bcc.n	4020d6 <chbsp_group_set_io_dir_in+0x12>
		}
	}

	ioport_set_port_dir(IOPORT_PIOA, mask, IOPORT_DIR_INPUT);
  40211a:	2200      	movs	r2, #0
  40211c:	6979      	ldr	r1, [r7, #20]
  40211e:	2000      	movs	r0, #0
  402120:	4b07      	ldr	r3, [pc, #28]	; (402140 <chbsp_group_set_io_dir_in+0x7c>)
  402122:	4798      	blx	r3
}
  402124:	bf00      	nop
  402126:	3718      	adds	r7, #24
  402128:	46bd      	mov	sp, r7
  40212a:	bd80      	pop	{r7, pc}
  40212c:	00405937 	.word	0x00405937
  402130:	004058ed 	.word	0x004058ed
  402134:	20000130 	.word	0x20000130
  402138:	004017d7 	.word	0x004017d7
  40213c:	0040598b 	.word	0x0040598b
  402140:	0040163d 	.word	0x0040163d

00402144 <chbsp_group_pin_init>:
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 * 
 * Configure reset and program pins as outputs. Assert reset and program. Configure 
 * sensor INT pin as input.
 */
void chbsp_group_pin_init(ch_group_t *grp_ptr) {
  402144:	b590      	push	{r4, r7, lr}
  402146:	b087      	sub	sp, #28
  402148:	af02      	add	r7, sp, #8
  40214a:	6078      	str	r0, [r7, #4]
	uint8_t dev_num;
	uint8_t port_num;

	ioport_set_pin_dir(CHIRP_PROG_0, IOPORT_DIR_OUTPUT); //PROG_0=output
  40214c:	2101      	movs	r1, #1
  40214e:	2010      	movs	r0, #16
  402150:	4b3a      	ldr	r3, [pc, #232]	; (40223c <chbsp_group_pin_init+0xf8>)
  402152:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_1, IOPORT_DIR_OUTPUT); //PROG_1=output
  402154:	2101      	movs	r1, #1
  402156:	2012      	movs	r0, #18
  402158:	4b38      	ldr	r3, [pc, #224]	; (40223c <chbsp_group_pin_init+0xf8>)
  40215a:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_2, IOPORT_DIR_OUTPUT); //PROG_2=output
  40215c:	2101      	movs	r1, #1
  40215e:	2013      	movs	r0, #19
  402160:	4b36      	ldr	r3, [pc, #216]	; (40223c <chbsp_group_pin_init+0xf8>)
  402162:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_3, IOPORT_DIR_OUTPUT); //PROG_3=output
  402164:	2101      	movs	r1, #1
  402166:	201f      	movs	r0, #31
  402168:	4b34      	ldr	r3, [pc, #208]	; (40223c <chbsp_group_pin_init+0xf8>)
  40216a:	4798      	blx	r3

	ioport_set_pin_level(CHIRP_PROG_0, IOPORT_PIN_LEVEL_LOW); //PROG_0=L
  40216c:	2100      	movs	r1, #0
  40216e:	2010      	movs	r0, #16
  402170:	4b33      	ldr	r3, [pc, #204]	; (402240 <chbsp_group_pin_init+0xfc>)
  402172:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_1, IOPORT_PIN_LEVEL_LOW); //PROG_1=L
  402174:	2100      	movs	r1, #0
  402176:	2012      	movs	r0, #18
  402178:	4b31      	ldr	r3, [pc, #196]	; (402240 <chbsp_group_pin_init+0xfc>)
  40217a:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_2, IOPORT_PIN_LEVEL_LOW); //PROG_2=L
  40217c:	2100      	movs	r1, #0
  40217e:	2013      	movs	r0, #19
  402180:	4b2f      	ldr	r3, [pc, #188]	; (402240 <chbsp_group_pin_init+0xfc>)
  402182:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_3, IOPORT_PIN_LEVEL_LOW); //PROG_3=L	
  402184:	2100      	movs	r1, #0
  402186:	201f      	movs	r0, #31
  402188:	4b2d      	ldr	r3, [pc, #180]	; (402240 <chbsp_group_pin_init+0xfc>)
  40218a:	4798      	blx	r3

	ioport_set_pin_dir(CHIRP_RST, IOPORT_DIR_OUTPUT); //reset=output
  40218c:	2101      	movs	r1, #1
  40218e:	200f      	movs	r0, #15
  402190:	4b2a      	ldr	r3, [pc, #168]	; (40223c <chbsp_group_pin_init+0xf8>)
  402192:	4798      	blx	r3
	chbsp_reset_assert();
  402194:	4b2b      	ldr	r3, [pc, #172]	; (402244 <chbsp_group_pin_init+0x100>)
  402196:	4798      	blx	r3


	for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  402198:	2300      	movs	r3, #0
  40219a:	73fb      	strb	r3, [r7, #15]
  40219c:	e00b      	b.n	4021b6 <chbsp_group_pin_init+0x72>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  40219e:	7bfb      	ldrb	r3, [r7, #15]
  4021a0:	4619      	mov	r1, r3
  4021a2:	6878      	ldr	r0, [r7, #4]
  4021a4:	4b28      	ldr	r3, [pc, #160]	; (402248 <chbsp_group_pin_init+0x104>)
  4021a6:	4798      	blx	r3
  4021a8:	60b8      	str	r0, [r7, #8]

		chbsp_program_enable(dev_ptr);
  4021aa:	68b8      	ldr	r0, [r7, #8]
  4021ac:	4b27      	ldr	r3, [pc, #156]	; (40224c <chbsp_group_pin_init+0x108>)
  4021ae:	4798      	blx	r3
	for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  4021b0:	7bfb      	ldrb	r3, [r7, #15]
  4021b2:	3301      	adds	r3, #1
  4021b4:	73fb      	strb	r3, [r7, #15]
  4021b6:	687b      	ldr	r3, [r7, #4]
  4021b8:	781b      	ldrb	r3, [r3, #0]
  4021ba:	7bfa      	ldrb	r2, [r7, #15]
  4021bc:	429a      	cmp	r2, r3
  4021be:	d3ee      	bcc.n	40219e <chbsp_group_pin_init+0x5a>
	}

	/* Initialize IO pins */
	chbsp_group_set_io_dir_in(grp_ptr);  
  4021c0:	6878      	ldr	r0, [r7, #4]
  4021c2:	4b23      	ldr	r3, [pc, #140]	; (402250 <chbsp_group_pin_init+0x10c>)
  4021c4:	4798      	blx	r3

	/* Enable the peripheral clock for the MAG extension board interrupt pin. */
	pmc_enable_periph_clk(PIN_EXT_INTERRUPT_ID);
  4021c6:	200b      	movs	r0, #11
  4021c8:	4b22      	ldr	r3, [pc, #136]	; (402254 <chbsp_group_pin_init+0x110>)
  4021ca:	4798      	blx	r3
	
	/* Configure PIOs as input pins. */
	for(port_num = 0; port_num < grp_ptr->num_ports; port_num++ ) {
  4021cc:	2300      	movs	r3, #0
  4021ce:	73bb      	strb	r3, [r7, #14]
  4021d0:	e00c      	b.n	4021ec <chbsp_group_pin_init+0xa8>
		pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, chirp_pin_io_irq[port_num], 
  4021d2:	7bbb      	ldrb	r3, [r7, #14]
  4021d4:	4a20      	ldr	r2, [pc, #128]	; (402258 <chbsp_group_pin_init+0x114>)
  4021d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4021da:	2370      	movs	r3, #112	; 0x70
  4021dc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4021e0:	481e      	ldr	r0, [pc, #120]	; (40225c <chbsp_group_pin_init+0x118>)
  4021e2:	4c1f      	ldr	r4, [pc, #124]	; (402260 <chbsp_group_pin_init+0x11c>)
  4021e4:	47a0      	blx	r4
	for(port_num = 0; port_num < grp_ptr->num_ports; port_num++ ) {
  4021e6:	7bbb      	ldrb	r3, [r7, #14]
  4021e8:	3301      	adds	r3, #1
  4021ea:	73bb      	strb	r3, [r7, #14]
  4021ec:	687b      	ldr	r3, [r7, #4]
  4021ee:	781b      	ldrb	r3, [r3, #0]
  4021f0:	7bba      	ldrb	r2, [r7, #14]
  4021f2:	429a      	cmp	r2, r3
  4021f4:	d3ed      	bcc.n	4021d2 <chbsp_group_pin_init+0x8e>
				      PIN_EXT_INTERRUPT_ATTR);
	}

	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_MotionINT_MASK, 
  4021f6:	2370      	movs	r3, #112	; 0x70
  4021f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4021fc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402200:	4816      	ldr	r0, [pc, #88]	; (40225c <chbsp_group_pin_init+0x118>)
  402202:	4c17      	ldr	r4, [pc, #92]	; (402260 <chbsp_group_pin_init+0x11c>)
  402204:	47a0      	blx	r4
			      PIN_EXT_INTERRUPT_ATTR);		//configure motionINT pin (although not used)
	
	/* Initialize PIO interrupt handler, interrupt on rising edge. */
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, chirp_pin_io_irq[0],
  402206:	4b14      	ldr	r3, [pc, #80]	; (402258 <chbsp_group_pin_init+0x114>)
  402208:	681a      	ldr	r2, [r3, #0]
  40220a:	2300      	movs	r3, #0
  40220c:	9300      	str	r3, [sp, #0]
  40220e:	2370      	movs	r3, #112	; 0x70
  402210:	210b      	movs	r1, #11
  402212:	4812      	ldr	r0, [pc, #72]	; (40225c <chbsp_group_pin_init+0x118>)
  402214:	4c13      	ldr	r4, [pc, #76]	; (402264 <chbsp_group_pin_init+0x120>)
  402216:	47a0      	blx	r4
						PIN_EXT_INTERRUPT_ATTR, NULL);
								
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_MotionINT_MASK,
  402218:	4b13      	ldr	r3, [pc, #76]	; (402268 <chbsp_group_pin_init+0x124>)
  40221a:	9300      	str	r3, [sp, #0]
  40221c:	2370      	movs	r3, #112	; 0x70
  40221e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402222:	210b      	movs	r1, #11
  402224:	480d      	ldr	r0, [pc, #52]	; (40225c <chbsp_group_pin_init+0x118>)
  402226:	4c0f      	ldr	r4, [pc, #60]	; (402264 <chbsp_group_pin_init+0x120>)
  402228:	47a0      	blx	r4
						PIN_EXT_INTERRUPT_ATTR, (void (*) (uint32_t, uint32_t))ext_MotionINT_handler);

	/* Initialize and enable push button (PIO) interrupt. */
	pio_handler_set_priority(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_IRQn, 0);		
  40222a:	2200      	movs	r2, #0
  40222c:	210b      	movs	r1, #11
  40222e:	480b      	ldr	r0, [pc, #44]	; (40225c <chbsp_group_pin_init+0x118>)
  402230:	4b0e      	ldr	r3, [pc, #56]	; (40226c <chbsp_group_pin_init+0x128>)
  402232:	4798      	blx	r3
	
}
  402234:	bf00      	nop
  402236:	3714      	adds	r7, #20
  402238:	46bd      	mov	sp, r7
  40223a:	bd90      	pop	{r4, r7, pc}
  40223c:	00401697 	.word	0x00401697
  402240:	0040171f 	.word	0x0040171f
  402244:	00401f75 	.word	0x00401f75
  402248:	00405937 	.word	0x00405937
  40224c:	00401f9d 	.word	0x00401f9d
  402250:	004020c5 	.word	0x004020c5
  402254:	00404305 	.word	0x00404305
  402258:	20000140 	.word	0x20000140
  40225c:	400e0e00 	.word	0x400e0e00
  402260:	00403b8d 	.word	0x00403b8d
  402264:	00403ef5 	.word	0x00403ef5
  402268:	004010e5 	.word	0x004010e5
  40226c:	00403fb1 	.word	0x00403fb1

00402270 <chbsp_group_io_clear>:
 *
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 * 
 * This function drives the INT line low for each sensor in the group.
 */
void chbsp_group_io_clear(ch_group_t *grp_ptr) {
  402270:	b580      	push	{r7, lr}
  402272:	b086      	sub	sp, #24
  402274:	af00      	add	r7, sp, #0
  402276:	6078      	str	r0, [r7, #4]
	ioport_port_mask_t mask = 0;
  402278:	2300      	movs	r3, #0
  40227a:	617b      	str	r3, [r7, #20]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  40227c:	2300      	movs	r3, #0
  40227e:	74fb      	strb	r3, [r7, #19]
  402280:	e019      	b.n	4022b6 <chbsp_group_io_clear+0x46>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  402282:	7cfb      	ldrb	r3, [r7, #19]
  402284:	4619      	mov	r1, r3
  402286:	6878      	ldr	r0, [r7, #4]
  402288:	4b13      	ldr	r3, [pc, #76]	; (4022d8 <chbsp_group_io_clear+0x68>)
  40228a:	4798      	blx	r3
  40228c:	60f8      	str	r0, [r7, #12]

		if (ch_sensor_is_connected(dev_ptr)) {
  40228e:	68f8      	ldr	r0, [r7, #12]
  402290:	4b12      	ldr	r3, [pc, #72]	; (4022dc <chbsp_group_io_clear+0x6c>)
  402292:	4798      	blx	r3
  402294:	4603      	mov	r3, r0
  402296:	2b00      	cmp	r3, #0
  402298:	d00a      	beq.n	4022b0 <chbsp_group_io_clear+0x40>
			mask |= ioport_pin_to_mask(chirp_pin_io[dev_num]);
  40229a:	7cfb      	ldrb	r3, [r7, #19]
  40229c:	4a10      	ldr	r2, [pc, #64]	; (4022e0 <chbsp_group_io_clear+0x70>)
  40229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4022a2:	4618      	mov	r0, r3
  4022a4:	4b0f      	ldr	r3, [pc, #60]	; (4022e4 <chbsp_group_io_clear+0x74>)
  4022a6:	4798      	blx	r3
  4022a8:	4602      	mov	r2, r0
  4022aa:	697b      	ldr	r3, [r7, #20]
  4022ac:	4313      	orrs	r3, r2
  4022ae:	617b      	str	r3, [r7, #20]
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  4022b0:	7cfb      	ldrb	r3, [r7, #19]
  4022b2:	3301      	adds	r3, #1
  4022b4:	74fb      	strb	r3, [r7, #19]
  4022b6:	6878      	ldr	r0, [r7, #4]
  4022b8:	4b0b      	ldr	r3, [pc, #44]	; (4022e8 <chbsp_group_io_clear+0x78>)
  4022ba:	4798      	blx	r3
  4022bc:	4603      	mov	r3, r0
  4022be:	461a      	mov	r2, r3
  4022c0:	7cfb      	ldrb	r3, [r7, #19]
  4022c2:	4293      	cmp	r3, r2
  4022c4:	d3dd      	bcc.n	402282 <chbsp_group_io_clear+0x12>
		}
	}

	ioport_set_port_level(IOPORT_PIOA, mask, IOPORT_PIN_LEVEL_LOW);
  4022c6:	2200      	movs	r2, #0
  4022c8:	6979      	ldr	r1, [r7, #20]
  4022ca:	2000      	movs	r0, #0
  4022cc:	4b07      	ldr	r3, [pc, #28]	; (4022ec <chbsp_group_io_clear+0x7c>)
  4022ce:	4798      	blx	r3
}
  4022d0:	bf00      	nop
  4022d2:	3718      	adds	r7, #24
  4022d4:	46bd      	mov	sp, r7
  4022d6:	bd80      	pop	{r7, pc}
  4022d8:	00405937 	.word	0x00405937
  4022dc:	004058ed 	.word	0x004058ed
  4022e0:	20000130 	.word	0x20000130
  4022e4:	004017d7 	.word	0x004017d7
  4022e8:	0040598b 	.word	0x0040598b
  4022ec:	0040178b 	.word	0x0040178b

004022f0 <chbsp_group_io_set>:
 * 
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 *
 * This function drives the INT line high for each sensor in the group.
 */
void chbsp_group_io_set(ch_group_t *grp_ptr) {
  4022f0:	b580      	push	{r7, lr}
  4022f2:	b086      	sub	sp, #24
  4022f4:	af00      	add	r7, sp, #0
  4022f6:	6078      	str	r0, [r7, #4]
	uint8_t dev_num;
	ioport_port_mask_t mask = 0;
  4022f8:	2300      	movs	r3, #0
  4022fa:	613b      	str	r3, [r7, #16]

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  4022fc:	2300      	movs	r3, #0
  4022fe:	75fb      	strb	r3, [r7, #23]
  402300:	e019      	b.n	402336 <chbsp_group_io_set+0x46>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  402302:	7dfb      	ldrb	r3, [r7, #23]
  402304:	4619      	mov	r1, r3
  402306:	6878      	ldr	r0, [r7, #4]
  402308:	4b13      	ldr	r3, [pc, #76]	; (402358 <chbsp_group_io_set+0x68>)
  40230a:	4798      	blx	r3
  40230c:	60f8      	str	r0, [r7, #12]

		if (ch_sensor_is_connected(dev_ptr)) {
  40230e:	68f8      	ldr	r0, [r7, #12]
  402310:	4b12      	ldr	r3, [pc, #72]	; (40235c <chbsp_group_io_set+0x6c>)
  402312:	4798      	blx	r3
  402314:	4603      	mov	r3, r0
  402316:	2b00      	cmp	r3, #0
  402318:	d00a      	beq.n	402330 <chbsp_group_io_set+0x40>
			mask |= ioport_pin_to_mask(chirp_pin_io[dev_num]);
  40231a:	7dfb      	ldrb	r3, [r7, #23]
  40231c:	4a10      	ldr	r2, [pc, #64]	; (402360 <chbsp_group_io_set+0x70>)
  40231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402322:	4618      	mov	r0, r3
  402324:	4b0f      	ldr	r3, [pc, #60]	; (402364 <chbsp_group_io_set+0x74>)
  402326:	4798      	blx	r3
  402328:	4602      	mov	r2, r0
  40232a:	693b      	ldr	r3, [r7, #16]
  40232c:	4313      	orrs	r3, r2
  40232e:	613b      	str	r3, [r7, #16]
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402330:	7dfb      	ldrb	r3, [r7, #23]
  402332:	3301      	adds	r3, #1
  402334:	75fb      	strb	r3, [r7, #23]
  402336:	6878      	ldr	r0, [r7, #4]
  402338:	4b0b      	ldr	r3, [pc, #44]	; (402368 <chbsp_group_io_set+0x78>)
  40233a:	4798      	blx	r3
  40233c:	4603      	mov	r3, r0
  40233e:	461a      	mov	r2, r3
  402340:	7dfb      	ldrb	r3, [r7, #23]
  402342:	4293      	cmp	r3, r2
  402344:	d3dd      	bcc.n	402302 <chbsp_group_io_set+0x12>
		}
	}

	ioport_set_port_level(IOPORT_PIOA, mask, IOPORT_PIN_LEVEL_HIGH);
  402346:	2201      	movs	r2, #1
  402348:	6939      	ldr	r1, [r7, #16]
  40234a:	2000      	movs	r0, #0
  40234c:	4b07      	ldr	r3, [pc, #28]	; (40236c <chbsp_group_io_set+0x7c>)
  40234e:	4798      	blx	r3
}
  402350:	bf00      	nop
  402352:	3718      	adds	r7, #24
  402354:	46bd      	mov	sp, r7
  402356:	bd80      	pop	{r7, pc}
  402358:	00405937 	.word	0x00405937
  40235c:	004058ed 	.word	0x004058ed
  402360:	20000130 	.word	0x20000130
  402364:	004017d7 	.word	0x004017d7
  402368:	0040598b 	.word	0x0040598b
  40236c:	0040178b 	.word	0x0040178b

00402370 <chbsp_group_io_interrupt_enable>:
 * \param grp_ptr 	pointer to the ch_group_t config structure for a group of sensors
 *
 * For each sensor in the group, this function disables the host interrupt associated 
 * with the Chirp sensor device's INT line.
 */
void chbsp_group_io_interrupt_enable(ch_group_t *grp_ptr) {
  402370:	b580      	push	{r7, lr}
  402372:	b084      	sub	sp, #16
  402374:	af00      	add	r7, sp, #0
  402376:	6078      	str	r0, [r7, #4]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402378:	2300      	movs	r3, #0
  40237a:	73fb      	strb	r3, [r7, #15]
  40237c:	e00b      	b.n	402396 <chbsp_group_io_interrupt_enable+0x26>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  40237e:	7bfb      	ldrb	r3, [r7, #15]
  402380:	4619      	mov	r1, r3
  402382:	6878      	ldr	r0, [r7, #4]
  402384:	4b0a      	ldr	r3, [pc, #40]	; (4023b0 <chbsp_group_io_interrupt_enable+0x40>)
  402386:	4798      	blx	r3
  402388:	60b8      	str	r0, [r7, #8]

		chbsp_io_interrupt_enable(dev_ptr);
  40238a:	68b8      	ldr	r0, [r7, #8]
  40238c:	4b09      	ldr	r3, [pc, #36]	; (4023b4 <chbsp_group_io_interrupt_enable+0x44>)
  40238e:	4798      	blx	r3
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402390:	7bfb      	ldrb	r3, [r7, #15]
  402392:	3301      	adds	r3, #1
  402394:	73fb      	strb	r3, [r7, #15]
  402396:	6878      	ldr	r0, [r7, #4]
  402398:	4b07      	ldr	r3, [pc, #28]	; (4023b8 <chbsp_group_io_interrupt_enable+0x48>)
  40239a:	4798      	blx	r3
  40239c:	4603      	mov	r3, r0
  40239e:	461a      	mov	r2, r3
  4023a0:	7bfb      	ldrb	r3, [r7, #15]
  4023a2:	4293      	cmp	r3, r2
  4023a4:	d3eb      	bcc.n	40237e <chbsp_group_io_interrupt_enable+0xe>
	}
}
  4023a6:	bf00      	nop
  4023a8:	3710      	adds	r7, #16
  4023aa:	46bd      	mov	sp, r7
  4023ac:	bd80      	pop	{r7, pc}
  4023ae:	bf00      	nop
  4023b0:	00405937 	.word	0x00405937
  4023b4:	004023bd 	.word	0x004023bd
  4023b8:	0040598b 	.word	0x0040598b

004023bc <chbsp_io_interrupt_enable>:
 * \param dev_ptr	pointer to the ch_dev_t config structure for a sensor
 *
 * This function enables the host interrupt associated with the Chirp sensor device's 
 * INT line.
 */
void chbsp_io_interrupt_enable(ch_dev_t *dev_ptr) {
  4023bc:	b580      	push	{r7, lr}
  4023be:	b084      	sub	sp, #16
  4023c0:	af00      	add	r7, sp, #0
  4023c2:	6078      	str	r0, [r7, #4]
	uint8_t dev_num = ch_get_dev_num(dev_ptr);
  4023c4:	6878      	ldr	r0, [r7, #4]
  4023c6:	4b0f      	ldr	r3, [pc, #60]	; (402404 <chbsp_io_interrupt_enable+0x48>)
  4023c8:	4798      	blx	r3
  4023ca:	4603      	mov	r3, r0
  4023cc:	73fb      	strb	r3, [r7, #15]

	if (ch_sensor_is_connected(dev_ptr)) {
  4023ce:	6878      	ldr	r0, [r7, #4]
  4023d0:	4b0d      	ldr	r3, [pc, #52]	; (402408 <chbsp_io_interrupt_enable+0x4c>)
  4023d2:	4798      	blx	r3
  4023d4:	4603      	mov	r3, r0
  4023d6:	2b00      	cmp	r3, #0
  4023d8:	d010      	beq.n	4023fc <chbsp_io_interrupt_enable+0x40>
		pio_handler_clear_pending_IRQ(PIN_EXT_INTERRUPT_PIO, chirp_pin_io_irq[dev_num]);
  4023da:	7bfb      	ldrb	r3, [r7, #15]
  4023dc:	4a0b      	ldr	r2, [pc, #44]	; (40240c <chbsp_io_interrupt_enable+0x50>)
  4023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4023e2:	b25b      	sxtb	r3, r3
  4023e4:	4619      	mov	r1, r3
  4023e6:	480a      	ldr	r0, [pc, #40]	; (402410 <chbsp_io_interrupt_enable+0x54>)
  4023e8:	4b0a      	ldr	r3, [pc, #40]	; (402414 <chbsp_io_interrupt_enable+0x58>)
  4023ea:	4798      	blx	r3
		pio_enable_interrupt(PIN_EXT_INTERRUPT_PIO, chirp_pin_io_irq[dev_num]);
  4023ec:	7bfb      	ldrb	r3, [r7, #15]
  4023ee:	4a07      	ldr	r2, [pc, #28]	; (40240c <chbsp_io_interrupt_enable+0x50>)
  4023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4023f4:	4619      	mov	r1, r3
  4023f6:	4806      	ldr	r0, [pc, #24]	; (402410 <chbsp_io_interrupt_enable+0x54>)
  4023f8:	4b07      	ldr	r3, [pc, #28]	; (402418 <chbsp_io_interrupt_enable+0x5c>)
  4023fa:	4798      	blx	r3
	}
}
  4023fc:	bf00      	nop
  4023fe:	3710      	adds	r7, #16
  402400:	46bd      	mov	sp, r7
  402402:	bd80      	pop	{r7, pc}
  402404:	0040591d 	.word	0x0040591d
  402408:	004058ed 	.word	0x004058ed
  40240c:	20000140 	.word	0x20000140
  402410:	400e0e00 	.word	0x400e0e00
  402414:	00404035 	.word	0x00404035
  402418:	00403ce9 	.word	0x00403ce9

0040241c <chbsp_group_io_interrupt_disable>:
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 *
 * For each sensor in the group, this function disables the host interrupt associated 
 * with the Chirp sensor device's INT line.
 */
void chbsp_group_io_interrupt_disable(ch_group_t *grp_ptr) {
  40241c:	b580      	push	{r7, lr}
  40241e:	b084      	sub	sp, #16
  402420:	af00      	add	r7, sp, #0
  402422:	6078      	str	r0, [r7, #4]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402424:	2300      	movs	r3, #0
  402426:	73fb      	strb	r3, [r7, #15]
  402428:	e00b      	b.n	402442 <chbsp_group_io_interrupt_disable+0x26>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  40242a:	7bfb      	ldrb	r3, [r7, #15]
  40242c:	4619      	mov	r1, r3
  40242e:	6878      	ldr	r0, [r7, #4]
  402430:	4b0a      	ldr	r3, [pc, #40]	; (40245c <chbsp_group_io_interrupt_disable+0x40>)
  402432:	4798      	blx	r3
  402434:	60b8      	str	r0, [r7, #8]

		chbsp_io_interrupt_disable(dev_ptr);
  402436:	68b8      	ldr	r0, [r7, #8]
  402438:	4b09      	ldr	r3, [pc, #36]	; (402460 <chbsp_group_io_interrupt_disable+0x44>)
  40243a:	4798      	blx	r3
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  40243c:	7bfb      	ldrb	r3, [r7, #15]
  40243e:	3301      	adds	r3, #1
  402440:	73fb      	strb	r3, [r7, #15]
  402442:	6878      	ldr	r0, [r7, #4]
  402444:	4b07      	ldr	r3, [pc, #28]	; (402464 <chbsp_group_io_interrupt_disable+0x48>)
  402446:	4798      	blx	r3
  402448:	4603      	mov	r3, r0
  40244a:	461a      	mov	r2, r3
  40244c:	7bfb      	ldrb	r3, [r7, #15]
  40244e:	4293      	cmp	r3, r2
  402450:	d3eb      	bcc.n	40242a <chbsp_group_io_interrupt_disable+0xe>
	}
}
  402452:	bf00      	nop
  402454:	3710      	adds	r7, #16
  402456:	46bd      	mov	sp, r7
  402458:	bd80      	pop	{r7, pc}
  40245a:	bf00      	nop
  40245c:	00405937 	.word	0x00405937
  402460:	00402469 	.word	0x00402469
  402464:	0040598b 	.word	0x0040598b

00402468 <chbsp_io_interrupt_disable>:
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function disables the host interrupt associated with the Chirp sensor device's 
 * INT line.
 */
void chbsp_io_interrupt_disable(ch_dev_t *dev_ptr) {
  402468:	b580      	push	{r7, lr}
  40246a:	b082      	sub	sp, #8
  40246c:	af00      	add	r7, sp, #0
  40246e:	6078      	str	r0, [r7, #4]

	if (dev_ptr->sensor_connected) {
  402470:	687b      	ldr	r3, [r7, #4]
  402472:	7fdb      	ldrb	r3, [r3, #31]
  402474:	2b00      	cmp	r3, #0
  402476:	d00a      	beq.n	40248e <chbsp_io_interrupt_disable+0x26>
		pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, chirp_pin_io_irq[dev_ptr->io_index]);
  402478:	687b      	ldr	r3, [r7, #4]
  40247a:	f893 3020 	ldrb.w	r3, [r3, #32]
  40247e:	461a      	mov	r2, r3
  402480:	4b05      	ldr	r3, [pc, #20]	; (402498 <chbsp_io_interrupt_disable+0x30>)
  402482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402486:	4619      	mov	r1, r3
  402488:	4804      	ldr	r0, [pc, #16]	; (40249c <chbsp_io_interrupt_disable+0x34>)
  40248a:	4b05      	ldr	r3, [pc, #20]	; (4024a0 <chbsp_io_interrupt_disable+0x38>)
  40248c:	4798      	blx	r3
	}
}
  40248e:	bf00      	nop
  402490:	3708      	adds	r7, #8
  402492:	46bd      	mov	sp, r7
  402494:	bd80      	pop	{r7, pc}
  402496:	bf00      	nop
  402498:	20000140 	.word	0x20000140
  40249c:	400e0e00 	.word	0x400e0e00
  4024a0:	00403d05 	.word	0x00403d05

004024a4 <chbsp_io_set>:
 * 
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function drives the INT line high for one sensor.
 */
void chbsp_io_set(ch_dev_t *dev_ptr) {
  4024a4:	b580      	push	{r7, lr}
  4024a6:	b082      	sub	sp, #8
  4024a8:	af00      	add	r7, sp, #0
  4024aa:	6078      	str	r0, [r7, #4]
	ioport_set_pin_level(chirp_pin_io[dev_ptr->io_index], IOPORT_PIN_LEVEL_HIGH);
  4024ac:	687b      	ldr	r3, [r7, #4]
  4024ae:	f893 3020 	ldrb.w	r3, [r3, #32]
  4024b2:	461a      	mov	r2, r3
  4024b4:	4b05      	ldr	r3, [pc, #20]	; (4024cc <chbsp_io_set+0x28>)
  4024b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4024ba:	2101      	movs	r1, #1
  4024bc:	4618      	mov	r0, r3
  4024be:	4b04      	ldr	r3, [pc, #16]	; (4024d0 <chbsp_io_set+0x2c>)
  4024c0:	4798      	blx	r3
}
  4024c2:	bf00      	nop
  4024c4:	3708      	adds	r7, #8
  4024c6:	46bd      	mov	sp, r7
  4024c8:	bd80      	pop	{r7, pc}
  4024ca:	bf00      	nop
  4024cc:	20000130 	.word	0x20000130
  4024d0:	0040171f 	.word	0x0040171f
  4024d4:	00000000 	.word	0x00000000

004024d8 <chbsp_delay_us>:
 * \param us  	number of microseconds to delay before returning
 *
 * This function waits for the specified number of microseconds before returning to 
 * the caller.
 */
void chbsp_delay_us(uint32_t us) {
  4024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024da:	b083      	sub	sp, #12
  4024dc:	af00      	add	r7, sp, #0
  4024de:	6078      	str	r0, [r7, #4]

	delay_us(us);
  4024e0:	687b      	ldr	r3, [r7, #4]
  4024e2:	2b00      	cmp	r3, #0
  4024e4:	d024      	beq.n	402530 <chbsp_delay_us+0x58>
  4024e6:	687b      	ldr	r3, [r7, #4]
  4024e8:	461d      	mov	r5, r3
  4024ea:	f04f 0600 	mov.w	r6, #0
  4024ee:	4b20      	ldr	r3, [pc, #128]	; (402570 <chbsp_delay_us+0x98>)
  4024f0:	4798      	blx	r3
  4024f2:	4603      	mov	r3, r0
  4024f4:	f04f 0400 	mov.w	r4, #0
  4024f8:	fb03 f106 	mul.w	r1, r3, r6
  4024fc:	fb05 f204 	mul.w	r2, r5, r4
  402500:	440a      	add	r2, r1
  402502:	fba5 3403 	umull	r3, r4, r5, r3
  402506:	4422      	add	r2, r4
  402508:	4614      	mov	r4, r2
  40250a:	a217      	add	r2, pc, #92	; (adr r2, 402568 <chbsp_delay_us+0x90>)
  40250c:	e9d2 1200 	ldrd	r1, r2, [r2]
  402510:	185d      	adds	r5, r3, r1
  402512:	eb44 0602 	adc.w	r6, r4, r2
  402516:	4628      	mov	r0, r5
  402518:	4631      	mov	r1, r6
  40251a:	4c16      	ldr	r4, [pc, #88]	; (402574 <chbsp_delay_us+0x9c>)
  40251c:	4a16      	ldr	r2, [pc, #88]	; (402578 <chbsp_delay_us+0xa0>)
  40251e:	f04f 0300 	mov.w	r3, #0
  402522:	47a0      	blx	r4
  402524:	4603      	mov	r3, r0
  402526:	460c      	mov	r4, r1
  402528:	4618      	mov	r0, r3
  40252a:	4b14      	ldr	r3, [pc, #80]	; (40257c <chbsp_delay_us+0xa4>)
  40252c:	4798      	blx	r3
}
  40252e:	e016      	b.n	40255e <chbsp_delay_us+0x86>
	delay_us(us);
  402530:	4b0f      	ldr	r3, [pc, #60]	; (402570 <chbsp_delay_us+0x98>)
  402532:	4798      	blx	r3
  402534:	4603      	mov	r3, r0
  402536:	f04f 0400 	mov.w	r4, #0
  40253a:	a20b      	add	r2, pc, #44	; (adr r2, 402568 <chbsp_delay_us+0x90>)
  40253c:	e9d2 1200 	ldrd	r1, r2, [r2]
  402540:	185d      	adds	r5, r3, r1
  402542:	eb44 0602 	adc.w	r6, r4, r2
  402546:	4628      	mov	r0, r5
  402548:	4631      	mov	r1, r6
  40254a:	4c0a      	ldr	r4, [pc, #40]	; (402574 <chbsp_delay_us+0x9c>)
  40254c:	4a0a      	ldr	r2, [pc, #40]	; (402578 <chbsp_delay_us+0xa0>)
  40254e:	f04f 0300 	mov.w	r3, #0
  402552:	47a0      	blx	r4
  402554:	4603      	mov	r3, r0
  402556:	460c      	mov	r4, r1
  402558:	4618      	mov	r0, r3
  40255a:	4b08      	ldr	r3, [pc, #32]	; (40257c <chbsp_delay_us+0xa4>)
  40255c:	4798      	blx	r3
}
  40255e:	bf00      	nop
  402560:	370c      	adds	r7, #12
  402562:	46bd      	mov	sp, r7
  402564:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402566:	bf00      	nop
  402568:	00d59f7f 	.word	0x00d59f7f
  40256c:	00000000 	.word	0x00000000
  402570:	0040160d 	.word	0x0040160d
  402574:	0040bd5d 	.word	0x0040bd5d
  402578:	00d59f80 	.word	0x00d59f80
  40257c:	20000001 	.word	0x20000001

00402580 <chbsp_delay_ms>:
 * \param ms 	number of milliseconds to delay before returning
 *
 * This function waits for the specified number of milliseconds before returning to 
 * the caller.
 */
void chbsp_delay_ms(uint32_t ms) {
  402580:	b5f0      	push	{r4, r5, r6, r7, lr}
  402582:	b083      	sub	sp, #12
  402584:	af00      	add	r7, sp, #0
  402586:	6078      	str	r0, [r7, #4]

	delay_us(ms*1000);
  402588:	687b      	ldr	r3, [r7, #4]
  40258a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40258e:	fb02 f303 	mul.w	r3, r2, r3
  402592:	2b00      	cmp	r3, #0
  402594:	d028      	beq.n	4025e8 <chbsp_delay_ms+0x68>
  402596:	687b      	ldr	r3, [r7, #4]
  402598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40259c:	fb02 f303 	mul.w	r3, r2, r3
  4025a0:	461d      	mov	r5, r3
  4025a2:	f04f 0600 	mov.w	r6, #0
  4025a6:	4b20      	ldr	r3, [pc, #128]	; (402628 <chbsp_delay_ms+0xa8>)
  4025a8:	4798      	blx	r3
  4025aa:	4603      	mov	r3, r0
  4025ac:	f04f 0400 	mov.w	r4, #0
  4025b0:	fb03 f106 	mul.w	r1, r3, r6
  4025b4:	fb05 f204 	mul.w	r2, r5, r4
  4025b8:	440a      	add	r2, r1
  4025ba:	fba5 3403 	umull	r3, r4, r5, r3
  4025be:	4422      	add	r2, r4
  4025c0:	4614      	mov	r4, r2
  4025c2:	a217      	add	r2, pc, #92	; (adr r2, 402620 <chbsp_delay_ms+0xa0>)
  4025c4:	e9d2 1200 	ldrd	r1, r2, [r2]
  4025c8:	185d      	adds	r5, r3, r1
  4025ca:	eb44 0602 	adc.w	r6, r4, r2
  4025ce:	4628      	mov	r0, r5
  4025d0:	4631      	mov	r1, r6
  4025d2:	4c16      	ldr	r4, [pc, #88]	; (40262c <chbsp_delay_ms+0xac>)
  4025d4:	4a16      	ldr	r2, [pc, #88]	; (402630 <chbsp_delay_ms+0xb0>)
  4025d6:	f04f 0300 	mov.w	r3, #0
  4025da:	47a0      	blx	r4
  4025dc:	4603      	mov	r3, r0
  4025de:	460c      	mov	r4, r1
  4025e0:	4618      	mov	r0, r3
  4025e2:	4b14      	ldr	r3, [pc, #80]	; (402634 <chbsp_delay_ms+0xb4>)
  4025e4:	4798      	blx	r3
}
  4025e6:	e016      	b.n	402616 <chbsp_delay_ms+0x96>
	delay_us(ms*1000);
  4025e8:	4b0f      	ldr	r3, [pc, #60]	; (402628 <chbsp_delay_ms+0xa8>)
  4025ea:	4798      	blx	r3
  4025ec:	4603      	mov	r3, r0
  4025ee:	f04f 0400 	mov.w	r4, #0
  4025f2:	a20b      	add	r2, pc, #44	; (adr r2, 402620 <chbsp_delay_ms+0xa0>)
  4025f4:	e9d2 1200 	ldrd	r1, r2, [r2]
  4025f8:	185d      	adds	r5, r3, r1
  4025fa:	eb44 0602 	adc.w	r6, r4, r2
  4025fe:	4628      	mov	r0, r5
  402600:	4631      	mov	r1, r6
  402602:	4c0a      	ldr	r4, [pc, #40]	; (40262c <chbsp_delay_ms+0xac>)
  402604:	4a0a      	ldr	r2, [pc, #40]	; (402630 <chbsp_delay_ms+0xb0>)
  402606:	f04f 0300 	mov.w	r3, #0
  40260a:	47a0      	blx	r4
  40260c:	4603      	mov	r3, r0
  40260e:	460c      	mov	r4, r1
  402610:	4618      	mov	r0, r3
  402612:	4b08      	ldr	r3, [pc, #32]	; (402634 <chbsp_delay_ms+0xb4>)
  402614:	4798      	blx	r3
}
  402616:	bf00      	nop
  402618:	370c      	adds	r7, #12
  40261a:	46bd      	mov	sp, r7
  40261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40261e:	bf00      	nop
  402620:	00d59f7f 	.word	0x00d59f7f
  402624:	00000000 	.word	0x00000000
  402628:	0040160d 	.word	0x0040160d
  40262c:	0040bd5d 	.word	0x0040bd5d
  402630:	00d59f80 	.word	0x00d59f80
  402634:	20000001 	.word	0x20000001

00402638 <chbsp_i2c_init>:
 *
 * \return 0 if successful, 1 on error
 *
 * This function performs general I2C initialization on the host system.
 */
int chbsp_i2c_init(void) {
  402638:	b580      	push	{r7, lr}
  40263a:	af00      	add	r7, sp, #0

	i2c_master_init(); 
  40263c:	4b02      	ldr	r3, [pc, #8]	; (402648 <chbsp_i2c_init+0x10>)
  40263e:	4798      	blx	r3
	return 0;
  402640:	2300      	movs	r3, #0

}
  402642:	4618      	mov	r0, r3
  402644:	bd80      	pop	{r7, pc}
  402646:	bf00      	nop
  402648:	00407f65 	.word	0x00407f65

0040264c <chbsp_i2c_get_info>:
 *  - The \a address field contains the I2C address for the sensor.  
 *  - The \a bus_num field contains the I2C bus number (index).  
 *  - The \a drv_flags field contains various bit flags through which the BSP can inform 
 *  SonicLib driver functions to perform specific actions during I2C I/O operations.
 */
uint8_t chbsp_i2c_get_info(ch_group_t __attribute__((unused)) *grp_ptr, uint8_t io_index, ch_i2c_info_t *info_ptr) {
  40264c:	b480      	push	{r7}
  40264e:	b087      	sub	sp, #28
  402650:	af00      	add	r7, sp, #0
  402652:	60f8      	str	r0, [r7, #12]
  402654:	460b      	mov	r3, r1
  402656:	607a      	str	r2, [r7, #4]
  402658:	72fb      	strb	r3, [r7, #11]
	uint8_t ret_val = 1;
  40265a:	2301      	movs	r3, #1
  40265c:	75fb      	strb	r3, [r7, #23]

	if (io_index <= CHBSP_MAX_DEVICES) {
  40265e:	7afb      	ldrb	r3, [r7, #11]
  402660:	2b04      	cmp	r3, #4
  402662:	d80e      	bhi.n	402682 <chbsp_i2c_get_info+0x36>
		info_ptr->address = chirp_i2c_addrs[io_index];
  402664:	7afb      	ldrb	r3, [r7, #11]
  402666:	4a0a      	ldr	r2, [pc, #40]	; (402690 <chbsp_i2c_get_info+0x44>)
  402668:	5cd2      	ldrb	r2, [r2, r3]
  40266a:	687b      	ldr	r3, [r7, #4]
  40266c:	701a      	strb	r2, [r3, #0]
		info_ptr->bus_num = chirp_i2c_buses[io_index];
  40266e:	7afb      	ldrb	r3, [r7, #11]
  402670:	4a08      	ldr	r2, [pc, #32]	; (402694 <chbsp_i2c_get_info+0x48>)
  402672:	5cd2      	ldrb	r2, [r2, r3]
  402674:	687b      	ldr	r3, [r7, #4]
  402676:	705a      	strb	r2, [r3, #1]

		info_ptr->drv_flags = 0;	// no special I2C handling by SonicLib driver is needed
  402678:	687b      	ldr	r3, [r7, #4]
  40267a:	2200      	movs	r2, #0
  40267c:	805a      	strh	r2, [r3, #2]

		ret_val = 0;
  40267e:	2300      	movs	r3, #0
  402680:	75fb      	strb	r3, [r7, #23]
	}

	return ret_val;
  402682:	7dfb      	ldrb	r3, [r7, #23]
}
  402684:	4618      	mov	r0, r3
  402686:	371c      	adds	r7, #28
  402688:	46bd      	mov	sp, r7
  40268a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40268e:	4770      	bx	lr
  402690:	20000118 	.word	0x20000118
  402694:	2000011c 	.word	0x2000011c

00402698 <chbsp_i2c_write>:
 * \return 0 if successful, 1 on error or NACK
 *
 * This function writes one or more bytes of data to an I2C slave device.
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_write(ch_dev_t *dev_ptr, uint8_t *data, uint16_t num_bytes) {
  402698:	b580      	push	{r7, lr}
  40269a:	b086      	sub	sp, #24
  40269c:	af00      	add	r7, sp, #0
  40269e:	60f8      	str	r0, [r7, #12]
  4026a0:	60b9      	str	r1, [r7, #8]
  4026a2:	4613      	mov	r3, r2
  4026a4:	80fb      	strh	r3, [r7, #6]
	int error = 0;
  4026a6:	2300      	movs	r3, #0
  4026a8:	617b      	str	r3, [r7, #20]

	if (dev_ptr->i2c_bus_index == 0) {
  4026aa:	68fb      	ldr	r3, [r7, #12]
  4026ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  4026b0:	2b00      	cmp	r3, #0
  4026b2:	d109      	bne.n	4026c8 <chbsp_i2c_write+0x30>
		error = i2c_master_write_register1_raw(dev_ptr->i2c_address, num_bytes, data); //I2C bus 0 (TWI1)
  4026b4:	68fb      	ldr	r3, [r7, #12]
  4026b6:	7e1b      	ldrb	r3, [r3, #24]
  4026b8:	88f9      	ldrh	r1, [r7, #6]
  4026ba:	68ba      	ldr	r2, [r7, #8]
  4026bc:	4618      	mov	r0, r3
  4026be:	4b0c      	ldr	r3, [pc, #48]	; (4026f0 <chbsp_i2c_write+0x58>)
  4026c0:	4798      	blx	r3
  4026c2:	4603      	mov	r3, r0
  4026c4:	617b      	str	r3, [r7, #20]
  4026c6:	e00d      	b.n	4026e4 <chbsp_i2c_write+0x4c>
		
	} else if (dev_ptr->i2c_bus_index == 1) {
  4026c8:	68fb      	ldr	r3, [r7, #12]
  4026ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  4026ce:	2b01      	cmp	r3, #1
  4026d0:	d108      	bne.n	4026e4 <chbsp_i2c_write+0x4c>
		error = i2c_master_write_register3_raw(dev_ptr->i2c_address, num_bytes, data); //I2C bus 1 (TWI3)
  4026d2:	68fb      	ldr	r3, [r7, #12]
  4026d4:	7e1b      	ldrb	r3, [r3, #24]
  4026d6:	88f9      	ldrh	r1, [r7, #6]
  4026d8:	68ba      	ldr	r2, [r7, #8]
  4026da:	4618      	mov	r0, r3
  4026dc:	4b05      	ldr	r3, [pc, #20]	; (4026f4 <chbsp_i2c_write+0x5c>)
  4026de:	4798      	blx	r3
  4026e0:	4603      	mov	r3, r0
  4026e2:	617b      	str	r3, [r7, #20]
	}

	return error;
  4026e4:	697b      	ldr	r3, [r7, #20]
}
  4026e6:	4618      	mov	r0, r3
  4026e8:	3718      	adds	r7, #24
  4026ea:	46bd      	mov	sp, r7
  4026ec:	bd80      	pop	{r7, pc}
  4026ee:	bf00      	nop
  4026f0:	0040812d 	.word	0x0040812d
  4026f4:	004081b5 	.word	0x004081b5

004026f8 <chbsp_i2c_mem_write>:
 * This function writes one or more bytes of data to an I2C slave device using an internal 
 * memory or register address.  The remote device will write \a num_bytes bytes of
 * data starting at internal memory/register address \a mem_addr.
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_mem_write(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data, uint16_t num_bytes) {
  4026f8:	b590      	push	{r4, r7, lr}
  4026fa:	b087      	sub	sp, #28
  4026fc:	af00      	add	r7, sp, #0
  4026fe:	60f8      	str	r0, [r7, #12]
  402700:	607a      	str	r2, [r7, #4]
  402702:	461a      	mov	r2, r3
  402704:	460b      	mov	r3, r1
  402706:	817b      	strh	r3, [r7, #10]
  402708:	4613      	mov	r3, r2
  40270a:	813b      	strh	r3, [r7, #8]
	int error=0;
  40270c:	2300      	movs	r3, #0
  40270e:	617b      	str	r3, [r7, #20]
	if (dev_ptr->i2c_bus_index == 0) {
  402710:	68fb      	ldr	r3, [r7, #12]
  402712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  402716:	2b00      	cmp	r3, #0
  402718:	d10a      	bne.n	402730 <chbsp_i2c_mem_write+0x38>
		// I2C bus 0 (TWI1)
		error = i2c_master_write_register1(dev_ptr->i2c_address, mem_addr, num_bytes, data); 
  40271a:	68fb      	ldr	r3, [r7, #12]
  40271c:	7e18      	ldrb	r0, [r3, #24]
  40271e:	897b      	ldrh	r3, [r7, #10]
  402720:	b2d9      	uxtb	r1, r3
  402722:	893a      	ldrh	r2, [r7, #8]
  402724:	687b      	ldr	r3, [r7, #4]
  402726:	4c0c      	ldr	r4, [pc, #48]	; (402758 <chbsp_i2c_mem_write+0x60>)
  402728:	47a0      	blx	r4
  40272a:	4603      	mov	r3, r0
  40272c:	617b      	str	r3, [r7, #20]
  40272e:	e00e      	b.n	40274e <chbsp_i2c_mem_write+0x56>
		
		} else if (dev_ptr->i2c_bus_index == 1) {
  402730:	68fb      	ldr	r3, [r7, #12]
  402732:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  402736:	2b01      	cmp	r3, #1
  402738:	d109      	bne.n	40274e <chbsp_i2c_mem_write+0x56>
		// I2C bus 1 (TWI3)
		error = i2c_master_write_register3(dev_ptr->i2c_address, mem_addr, num_bytes, data); 
  40273a:	68fb      	ldr	r3, [r7, #12]
  40273c:	7e18      	ldrb	r0, [r3, #24]
  40273e:	897b      	ldrh	r3, [r7, #10]
  402740:	b2d9      	uxtb	r1, r3
  402742:	893a      	ldrh	r2, [r7, #8]
  402744:	687b      	ldr	r3, [r7, #4]
  402746:	4c05      	ldr	r4, [pc, #20]	; (40275c <chbsp_i2c_mem_write+0x64>)
  402748:	47a0      	blx	r4
  40274a:	4603      	mov	r3, r0
  40274c:	617b      	str	r3, [r7, #20]
	}
	return error;
  40274e:	697b      	ldr	r3, [r7, #20]
}
  402750:	4618      	mov	r0, r3
  402752:	371c      	adds	r7, #28
  402754:	46bd      	mov	sp, r7
  402756:	bd90      	pop	{r4, r7, pc}
  402758:	004080e5 	.word	0x004080e5
  40275c:	0040816d 	.word	0x0040816d

00402760 <chbsp_i2c_mem_write_nb>:
 * I2C slave device, using an internal memory or register address.  The remote device will write 
 * \a num_bytes bytes of data starting at internal memory/register address \a mem_addr.
 *
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_mem_write_nb(ch_dev_t __attribute__((unused)) *dev_ptr, uint16_t __attribute__((unused)) mem_addr, uint8_t __attribute__((unused)) *data, uint16_t __attribute__((unused)) num_bytes) {
  402760:	b480      	push	{r7}
  402762:	b085      	sub	sp, #20
  402764:	af00      	add	r7, sp, #0
  402766:	60f8      	str	r0, [r7, #12]
  402768:	607a      	str	r2, [r7, #4]
  40276a:	461a      	mov	r2, r3
  40276c:	460b      	mov	r3, r1
  40276e:	817b      	strh	r3, [r7, #10]
  402770:	4613      	mov	r3, r2
  402772:	813b      	strh	r3, [r7, #8]

	// XXX not implemented
	return 1;
  402774:	2301      	movs	r3, #1
}
  402776:	4618      	mov	r0, r3
  402778:	3714      	adds	r7, #20
  40277a:	46bd      	mov	sp, r7
  40277c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402780:	4770      	bx	lr
	...

00402784 <chbsp_i2c_read>:
 * \return 0 if successful, 1 on error or NACK
 *
 * This function reads the specified number of bytes from an I2C slave device.
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_read(ch_dev_t *dev_ptr, uint8_t *data, uint16_t num_bytes) {
  402784:	b580      	push	{r7, lr}
  402786:	b086      	sub	sp, #24
  402788:	af00      	add	r7, sp, #0
  40278a:	60f8      	str	r0, [r7, #12]
  40278c:	60b9      	str	r1, [r7, #8]
  40278e:	4613      	mov	r3, r2
  402790:	80fb      	strh	r3, [r7, #6]
	int error = 1;		// default is error return
  402792:	2301      	movs	r3, #1
  402794:	617b      	str	r3, [r7, #20]
	uint8_t i2c_addr = ch_get_i2c_address(dev_ptr);
  402796:	68f8      	ldr	r0, [r7, #12]
  402798:	4b12      	ldr	r3, [pc, #72]	; (4027e4 <chbsp_i2c_read+0x60>)
  40279a:	4798      	blx	r3
  40279c:	4603      	mov	r3, r0
  40279e:	74fb      	strb	r3, [r7, #19]
	uint8_t bus_num  = ch_get_i2c_bus(dev_ptr);
  4027a0:	68f8      	ldr	r0, [r7, #12]
  4027a2:	4b11      	ldr	r3, [pc, #68]	; (4027e8 <chbsp_i2c_read+0x64>)
  4027a4:	4798      	blx	r3
  4027a6:	4603      	mov	r3, r0
  4027a8:	74bb      	strb	r3, [r7, #18]

	if (bus_num == 0) {
  4027aa:	7cbb      	ldrb	r3, [r7, #18]
  4027ac:	2b00      	cmp	r3, #0
  4027ae:	d108      	bne.n	4027c2 <chbsp_i2c_read+0x3e>
		// I2C bus 0 (TWI1)
		error = i2c_master_read_register1_raw(i2c_addr, num_bytes, data); 
  4027b0:	88f9      	ldrh	r1, [r7, #6]
  4027b2:	7cfb      	ldrb	r3, [r7, #19]
  4027b4:	68ba      	ldr	r2, [r7, #8]
  4027b6:	4618      	mov	r0, r3
  4027b8:	4b0c      	ldr	r3, [pc, #48]	; (4027ec <chbsp_i2c_read+0x68>)
  4027ba:	4798      	blx	r3
  4027bc:	4603      	mov	r3, r0
  4027be:	617b      	str	r3, [r7, #20]
  4027c0:	e00a      	b.n	4027d8 <chbsp_i2c_read+0x54>
		
	} else if (bus_num == 1) {
  4027c2:	7cbb      	ldrb	r3, [r7, #18]
  4027c4:	2b01      	cmp	r3, #1
  4027c6:	d107      	bne.n	4027d8 <chbsp_i2c_read+0x54>
		// I2C bus 1 (TWI3)
		error = i2c_master_read_register3_raw(i2c_addr, num_bytes, data); 
  4027c8:	88f9      	ldrh	r1, [r7, #6]
  4027ca:	7cfb      	ldrb	r3, [r7, #19]
  4027cc:	68ba      	ldr	r2, [r7, #8]
  4027ce:	4618      	mov	r0, r3
  4027d0:	4b07      	ldr	r3, [pc, #28]	; (4027f0 <chbsp_i2c_read+0x6c>)
  4027d2:	4798      	blx	r3
  4027d4:	4603      	mov	r3, r0
  4027d6:	617b      	str	r3, [r7, #20]
	}
	return error;
  4027d8:	697b      	ldr	r3, [r7, #20]
}
  4027da:	4618      	mov	r0, r3
  4027dc:	3718      	adds	r7, #24
  4027de:	46bd      	mov	sp, r7
  4027e0:	bd80      	pop	{r7, pc}
  4027e2:	bf00      	nop
  4027e4:	00405959 	.word	0x00405959
  4027e8:	00405971 	.word	0x00405971
  4027ec:	00408005 	.word	0x00408005
  4027f0:	0040809d 	.word	0x0040809d

004027f4 <chbsp_i2c_mem_read>:
 * an internal memory or register address.  The remote device will return \a num_bytes bytes
 * starting at internal memory/register address \a mem_addr.
 *
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_mem_read(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data, uint16_t num_bytes) {
  4027f4:	b590      	push	{r4, r7, lr}
  4027f6:	b087      	sub	sp, #28
  4027f8:	af00      	add	r7, sp, #0
  4027fa:	60f8      	str	r0, [r7, #12]
  4027fc:	607a      	str	r2, [r7, #4]
  4027fe:	461a      	mov	r2, r3
  402800:	460b      	mov	r3, r1
  402802:	817b      	strh	r3, [r7, #10]
  402804:	4613      	mov	r3, r2
  402806:	813b      	strh	r3, [r7, #8]
	int error = 1;		// default is error return
  402808:	2301      	movs	r3, #1
  40280a:	617b      	str	r3, [r7, #20]
	uint8_t i2c_addr = ch_get_i2c_address(dev_ptr);
  40280c:	68f8      	ldr	r0, [r7, #12]
  40280e:	4b13      	ldr	r3, [pc, #76]	; (40285c <chbsp_i2c_mem_read+0x68>)
  402810:	4798      	blx	r3
  402812:	4603      	mov	r3, r0
  402814:	74fb      	strb	r3, [r7, #19]
	uint8_t bus_num  = ch_get_i2c_bus(dev_ptr);
  402816:	68f8      	ldr	r0, [r7, #12]
  402818:	4b11      	ldr	r3, [pc, #68]	; (402860 <chbsp_i2c_mem_read+0x6c>)
  40281a:	4798      	blx	r3
  40281c:	4603      	mov	r3, r0
  40281e:	74bb      	strb	r3, [r7, #18]

	if (bus_num == 0) {
  402820:	7cbb      	ldrb	r3, [r7, #18]
  402822:	2b00      	cmp	r3, #0
  402824:	d109      	bne.n	40283a <chbsp_i2c_mem_read+0x46>
		// I2C bus 0 (TWI1)
		error = i2c_master_read_register1(i2c_addr, mem_addr, num_bytes, data); 
  402826:	897b      	ldrh	r3, [r7, #10]
  402828:	b2d9      	uxtb	r1, r3
  40282a:	893a      	ldrh	r2, [r7, #8]
  40282c:	7cf8      	ldrb	r0, [r7, #19]
  40282e:	687b      	ldr	r3, [r7, #4]
  402830:	4c0c      	ldr	r4, [pc, #48]	; (402864 <chbsp_i2c_mem_read+0x70>)
  402832:	47a0      	blx	r4
  402834:	4603      	mov	r3, r0
  402836:	617b      	str	r3, [r7, #20]
  402838:	e00b      	b.n	402852 <chbsp_i2c_mem_read+0x5e>
		
		} else if (bus_num == 1) {
  40283a:	7cbb      	ldrb	r3, [r7, #18]
  40283c:	2b01      	cmp	r3, #1
  40283e:	d108      	bne.n	402852 <chbsp_i2c_mem_read+0x5e>
		// I2C bus 1 (TWI3)
		error = i2c_master_read_register3(i2c_addr, mem_addr, num_bytes, data); 
  402840:	897b      	ldrh	r3, [r7, #10]
  402842:	b2d9      	uxtb	r1, r3
  402844:	893a      	ldrh	r2, [r7, #8]
  402846:	7cf8      	ldrb	r0, [r7, #19]
  402848:	687b      	ldr	r3, [r7, #4]
  40284a:	4c07      	ldr	r4, [pc, #28]	; (402868 <chbsp_i2c_mem_read+0x74>)
  40284c:	47a0      	blx	r4
  40284e:	4603      	mov	r3, r0
  402850:	617b      	str	r3, [r7, #20]
	}
	return error;
  402852:	697b      	ldr	r3, [r7, #20]
}
  402854:	4618      	mov	r0, r3
  402856:	371c      	adds	r7, #28
  402858:	46bd      	mov	sp, r7
  40285a:	bd90      	pop	{r4, r7, pc}
  40285c:	00405959 	.word	0x00405959
  402860:	00405971 	.word	0x00405971
  402864:	00407fb5 	.word	0x00407fb5
  402868:	0040804d 	.word	0x0040804d

0040286c <chbsp_i2c_read_nb>:
 * This function initiates a non-blocking read of the specified number of bytes from 
 * an I2C slave.
 * 
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_read_nb(ch_dev_t *dev_ptr, uint8_t *data, uint16_t num_bytes) {
  40286c:	b580      	push	{r7, lr}
  40286e:	b090      	sub	sp, #64	; 0x40
  402870:	af00      	add	r7, sp, #0
  402872:	60f8      	str	r0, [r7, #12]
  402874:	60b9      	str	r1, [r7, #8]
  402876:	4613      	mov	r3, r2
  402878:	80fb      	strh	r3, [r7, #6]
	Twi *twi_ptr;		// pointer to Atmel TWI (I2C) control struct
	Pdc *pdc_ptr;		// pointer to Atmel peripheral DMA controller struct
	pdc_packet_t pdc_packet;
	uint8_t  i2c_addr = ch_get_i2c_address(dev_ptr);
  40287a:	68f8      	ldr	r0, [r7, #12]
  40287c:	4b3f      	ldr	r3, [pc, #252]	; (40297c <chbsp_i2c_read_nb+0x110>)
  40287e:	4798      	blx	r3
  402880:	4603      	mov	r3, r0
  402882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bus_num  = ch_get_i2c_bus(dev_ptr);
  402886:	68f8      	ldr	r0, [r7, #12]
  402888:	4b3d      	ldr	r3, [pc, #244]	; (402980 <chbsp_i2c_read_nb+0x114>)
  40288a:	4798      	blx	r3
  40288c:	4603      	mov	r3, r0
  40288e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	int error = 0;
  402892:	2300      	movs	r3, #0
  402894:	637b      	str	r3, [r7, #52]	; 0x34

	if (bus_num == 0) {
  402896:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  40289a:	2b00      	cmp	r3, #0
  40289c:	d106      	bne.n	4028ac <chbsp_i2c_read_nb+0x40>
		twi_ptr = BOARD_BASE_TWI1;
  40289e:	4b39      	ldr	r3, [pc, #228]	; (402984 <chbsp_i2c_read_nb+0x118>)
  4028a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		pdc_ptr = twi_get_pdc_base(BOARD_BASE_TWI1);
  4028a2:	4838      	ldr	r0, [pc, #224]	; (402984 <chbsp_i2c_read_nb+0x118>)
  4028a4:	4b38      	ldr	r3, [pc, #224]	; (402988 <chbsp_i2c_read_nb+0x11c>)
  4028a6:	4798      	blx	r3
  4028a8:	63b8      	str	r0, [r7, #56]	; 0x38
  4028aa:	e00c      	b.n	4028c6 <chbsp_i2c_read_nb+0x5a>
	} else if (bus_num == 1) {
  4028ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  4028b0:	2b01      	cmp	r3, #1
  4028b2:	d106      	bne.n	4028c2 <chbsp_i2c_read_nb+0x56>
		twi_ptr = BOARD_BASE_TWI3;
  4028b4:	4b35      	ldr	r3, [pc, #212]	; (40298c <chbsp_i2c_read_nb+0x120>)
  4028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
		pdc_ptr = twi_get_pdc_base(BOARD_BASE_TWI3);
  4028b8:	4834      	ldr	r0, [pc, #208]	; (40298c <chbsp_i2c_read_nb+0x120>)
  4028ba:	4b33      	ldr	r3, [pc, #204]	; (402988 <chbsp_i2c_read_nb+0x11c>)
  4028bc:	4798      	blx	r3
  4028be:	63b8      	str	r0, [r7, #56]	; 0x38
  4028c0:	e001      	b.n	4028c6 <chbsp_i2c_read_nb+0x5a>
	} else {
		error = 1;
  4028c2:	2301      	movs	r3, #1
  4028c4:	637b      	str	r3, [r7, #52]	; 0x34
	}

	/* Save buffer pointer and transfer length - it will be needed when reading final 2 bytes 
	 * in DMA interrupt handler 
	 */
	if ((!error) && (data != NULL)) {
  4028c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4028c8:	2b00      	cmp	r3, #0
  4028ca:	d110      	bne.n	4028ee <chbsp_i2c_read_nb+0x82>
  4028cc:	68bb      	ldr	r3, [r7, #8]
  4028ce:	2b00      	cmp	r3, #0
  4028d0:	d00d      	beq.n	4028ee <chbsp_i2c_read_nb+0x82>
		i2c_nb_transactions[bus_num].buf_ptr = data;
  4028d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  4028d6:	492e      	ldr	r1, [pc, #184]	; (402990 <chbsp_i2c_read_nb+0x124>)
  4028d8:	68ba      	ldr	r2, [r7, #8]
  4028da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		i2c_nb_transactions[bus_num].num_bytes = num_bytes;
  4028de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  4028e2:	4a2b      	ldr	r2, [pc, #172]	; (402990 <chbsp_i2c_read_nb+0x124>)
  4028e4:	00db      	lsls	r3, r3, #3
  4028e6:	4413      	add	r3, r2
  4028e8:	88fa      	ldrh	r2, [r7, #6]
  4028ea:	809a      	strh	r2, [r3, #4]
  4028ec:	e001      	b.n	4028f2 <chbsp_i2c_read_nb+0x86>
	} else {
		error = 1;
  4028ee:	2301      	movs	r3, #1
  4028f0:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (!error) {
  4028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4028f4:	2b00      	cmp	r3, #0
  4028f6:	d13c      	bne.n	402972 <chbsp_i2c_read_nb+0x106>
		/* Construct transfer packet */
	 	twi_packet_t twi_packet;

	 	twi_packet.chip = i2c_addr;		 	//address of I2C device to be accessed	
  4028f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  4028fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		twi_packet.addr[0] = 0;
  402900:	2300      	movs	r3, #0
  402902:	753b      	strb	r3, [r7, #20]
		twi_packet.addr_length = 0;			// no internal mem/reg address
  402904:	2300      	movs	r3, #0
  402906:	61bb      	str	r3, [r7, #24]
	 	twi_packet.buffer = data;
  402908:	68bb      	ldr	r3, [r7, #8]
  40290a:	61fb      	str	r3, [r7, #28]
	 	twi_packet.length = num_bytes;
  40290c:	88fb      	ldrh	r3, [r7, #6]
  40290e:	623b      	str	r3, [r7, #32]
	 
		pdc_disable_transfer(pdc_ptr, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  402910:	f240 2102 	movw	r1, #514	; 0x202
  402914:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402916:	4b1f      	ldr	r3, [pc, #124]	; (402994 <chbsp_i2c_read_nb+0x128>)
  402918:	4798      	blx	r3

		pdc_packet.ul_addr = (uint32_t) data;
  40291a:	68bb      	ldr	r3, [r7, #8]
  40291c:	62bb      	str	r3, [r7, #40]	; 0x28
    	pdc_packet.ul_size = (num_bytes - 2);	
  40291e:	88fb      	ldrh	r3, [r7, #6]
  402920:	3b02      	subs	r3, #2
  402922:	62fb      	str	r3, [r7, #44]	; 0x2c

		pdc_rx_init(pdc_ptr, &pdc_packet, NULL);
  402924:	f107 0328 	add.w	r3, r7, #40	; 0x28
  402928:	2200      	movs	r2, #0
  40292a:	4619      	mov	r1, r3
  40292c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  40292e:	4b1a      	ldr	r3, [pc, #104]	; (402998 <chbsp_i2c_read_nb+0x12c>)
  402930:	4798      	blx	r3

		/* Set read mode, slave address, and internal address length */
		twi_ptr->TWI_MMR = 0;
  402932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402934:	2200      	movs	r2, #0
  402936:	605a      	str	r2, [r3, #4]
		twi_ptr->TWI_MMR = TWI_MMR_MREAD | 
						   TWI_MMR_DADR(twi_packet.chip) |
  402938:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  40293c:	041b      	lsls	r3, r3, #16
  40293e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
						   ((twi_packet.addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
  402942:	69bb      	ldr	r3, [r7, #24]
  402944:	021b      	lsls	r3, r3, #8
  402946:	f403 7340 	and.w	r3, r3, #768	; 0x300
						   TWI_MMR_DADR(twi_packet.chip) |
  40294a:	4313      	orrs	r3, r2
  40294c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
		twi_ptr->TWI_MMR = TWI_MMR_MREAD | 
  402950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402952:	605a      	str	r2, [r3, #4]

		/* No internal memory (register) address within remote device */
		twi_ptr->TWI_IADR = 0;
  402954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402956:	2200      	movs	r2, #0
  402958:	60da      	str	r2, [r3, #12]
		
		/* Enable the RX PDC transfer requests */
		pdc_enable_transfer(pdc_ptr, PERIPH_PTCR_RXTEN);
  40295a:	2101      	movs	r1, #1
  40295c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  40295e:	4b0f      	ldr	r3, [pc, #60]	; (40299c <chbsp_i2c_read_nb+0x130>)
  402960:	4798      	blx	r3

		/* Start the transfer */
		twi_ptr->TWI_CR = TWI_CR_START;		
  402962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402964:	2201      	movs	r2, #1
  402966:	601a      	str	r2, [r3, #0]
	
		/* Enable end-of-receive interrupt */
		twi_enable_interrupt(twi_ptr, TWI_IER_ENDRX);	
  402968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40296c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  40296e:	4b0c      	ldr	r3, [pc, #48]	; (4029a0 <chbsp_i2c_read_nb+0x134>)
  402970:	4798      	blx	r3
		
	}
	return error;
  402972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
  402974:	4618      	mov	r0, r3
  402976:	3740      	adds	r7, #64	; 0x40
  402978:	46bd      	mov	sp, r7
  40297a:	bd80      	pop	{r7, pc}
  40297c:	00405959 	.word	0x00405959
  402980:	00405971 	.word	0x00405971
  402984:	40020600 	.word	0x40020600
  402988:	00404e51 	.word	0x00404e51
  40298c:	40018600 	.word	0x40018600
  402990:	20000884 	.word	0x20000884
  402994:	004039bd 	.word	0x004039bd
  402998:	00403957 	.word	0x00403957
  40299c:	0040399b 	.word	0x0040399b
  4029a0:	00404dc5 	.word	0x00404dc5

004029a4 <chbsp_i2c_mem_read_nb>:
 *
 * This function initiates a non-blocking read of the specified number of bytes from an I2C slave.
 *
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_mem_read_nb(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data, uint16_t num_bytes) {
  4029a4:	b580      	push	{r7, lr}
  4029a6:	b090      	sub	sp, #64	; 0x40
  4029a8:	af00      	add	r7, sp, #0
  4029aa:	60f8      	str	r0, [r7, #12]
  4029ac:	607a      	str	r2, [r7, #4]
  4029ae:	461a      	mov	r2, r3
  4029b0:	460b      	mov	r3, r1
  4029b2:	817b      	strh	r3, [r7, #10]
  4029b4:	4613      	mov	r3, r2
  4029b6:	813b      	strh	r3, [r7, #8]
	Twi *twi_ptr;		// pointer to Atmel TWI (I2C) control struct
	Pdc *pdc_ptr;		// pointer to Atmel peripheral DMA controller struct
	pdc_packet_t pdc_packet;
	uint8_t  i2c_addr = ch_get_i2c_address(dev_ptr);
  4029b8:	68f8      	ldr	r0, [r7, #12]
  4029ba:	4b46      	ldr	r3, [pc, #280]	; (402ad4 <chbsp_i2c_mem_read_nb+0x130>)
  4029bc:	4798      	blx	r3
  4029be:	4603      	mov	r3, r0
  4029c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bus_num  = ch_get_i2c_bus(dev_ptr);
  4029c4:	68f8      	ldr	r0, [r7, #12]
  4029c6:	4b44      	ldr	r3, [pc, #272]	; (402ad8 <chbsp_i2c_mem_read_nb+0x134>)
  4029c8:	4798      	blx	r3
  4029ca:	4603      	mov	r3, r0
  4029cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	int error=0;;
  4029d0:	2300      	movs	r3, #0
  4029d2:	637b      	str	r3, [r7, #52]	; 0x34

	if (bus_num == 0) {
  4029d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  4029d8:	2b00      	cmp	r3, #0
  4029da:	d106      	bne.n	4029ea <chbsp_i2c_mem_read_nb+0x46>
		twi_ptr = BOARD_BASE_TWI1;
  4029dc:	4b3f      	ldr	r3, [pc, #252]	; (402adc <chbsp_i2c_mem_read_nb+0x138>)
  4029de:	63fb      	str	r3, [r7, #60]	; 0x3c
		pdc_ptr = twi_get_pdc_base(BOARD_BASE_TWI1);
  4029e0:	483e      	ldr	r0, [pc, #248]	; (402adc <chbsp_i2c_mem_read_nb+0x138>)
  4029e2:	4b3f      	ldr	r3, [pc, #252]	; (402ae0 <chbsp_i2c_mem_read_nb+0x13c>)
  4029e4:	4798      	blx	r3
  4029e6:	63b8      	str	r0, [r7, #56]	; 0x38
  4029e8:	e00c      	b.n	402a04 <chbsp_i2c_mem_read_nb+0x60>
	} else if (bus_num == 1) {
  4029ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  4029ee:	2b01      	cmp	r3, #1
  4029f0:	d106      	bne.n	402a00 <chbsp_i2c_mem_read_nb+0x5c>
		twi_ptr = BOARD_BASE_TWI3;
  4029f2:	4b3c      	ldr	r3, [pc, #240]	; (402ae4 <chbsp_i2c_mem_read_nb+0x140>)
  4029f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		pdc_ptr = twi_get_pdc_base(BOARD_BASE_TWI3);
  4029f6:	483b      	ldr	r0, [pc, #236]	; (402ae4 <chbsp_i2c_mem_read_nb+0x140>)
  4029f8:	4b39      	ldr	r3, [pc, #228]	; (402ae0 <chbsp_i2c_mem_read_nb+0x13c>)
  4029fa:	4798      	blx	r3
  4029fc:	63b8      	str	r0, [r7, #56]	; 0x38
  4029fe:	e001      	b.n	402a04 <chbsp_i2c_mem_read_nb+0x60>
	} else {
		error = 1;
  402a00:	2301      	movs	r3, #1
  402a02:	637b      	str	r3, [r7, #52]	; 0x34
	}

	/* Save buffer pointer and transfer length - it will be needed when reading final 2 bytes 
	 * in DMA interrupt handler 
	 */
	if ((!error) && (data != NULL)) {
  402a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402a06:	2b00      	cmp	r3, #0
  402a08:	d110      	bne.n	402a2c <chbsp_i2c_mem_read_nb+0x88>
  402a0a:	687b      	ldr	r3, [r7, #4]
  402a0c:	2b00      	cmp	r3, #0
  402a0e:	d00d      	beq.n	402a2c <chbsp_i2c_mem_read_nb+0x88>
		i2c_nb_transactions[bus_num].buf_ptr = data;
  402a10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  402a14:	4934      	ldr	r1, [pc, #208]	; (402ae8 <chbsp_i2c_mem_read_nb+0x144>)
  402a16:	687a      	ldr	r2, [r7, #4]
  402a18:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		i2c_nb_transactions[bus_num].num_bytes = num_bytes;
  402a1c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  402a20:	4a31      	ldr	r2, [pc, #196]	; (402ae8 <chbsp_i2c_mem_read_nb+0x144>)
  402a22:	00db      	lsls	r3, r3, #3
  402a24:	4413      	add	r3, r2
  402a26:	893a      	ldrh	r2, [r7, #8]
  402a28:	809a      	strh	r2, [r3, #4]
  402a2a:	e001      	b.n	402a30 <chbsp_i2c_mem_read_nb+0x8c>
	} else {
		error = 1;
  402a2c:	2301      	movs	r3, #1
  402a2e:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (!error) {
  402a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402a32:	2b00      	cmp	r3, #0
  402a34:	d148      	bne.n	402ac8 <chbsp_i2c_mem_read_nb+0x124>
		/* Construct transfer packet */
	 	twi_packet_t twi_packet;
	 
	 	twi_packet.chip = i2c_addr; 			// address of I2C device to be accessed	
  402a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  402a3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		twi_packet.addr[0] = mem_addr;			// internal mem address
  402a3e:	897b      	ldrh	r3, [r7, #10]
  402a40:	b2db      	uxtb	r3, r3
  402a42:	753b      	strb	r3, [r7, #20]
		twi_packet.addr_length = 1;				// mem address is single byte
  402a44:	2301      	movs	r3, #1
  402a46:	61bb      	str	r3, [r7, #24]
	 	twi_packet.buffer = data;
  402a48:	687b      	ldr	r3, [r7, #4]
  402a4a:	61fb      	str	r3, [r7, #28]
	 	twi_packet.length = num_bytes;
  402a4c:	893b      	ldrh	r3, [r7, #8]
  402a4e:	623b      	str	r3, [r7, #32]
	 
		pdc_disable_transfer(pdc_ptr, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  402a50:	f240 2102 	movw	r1, #514	; 0x202
  402a54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402a56:	4b25      	ldr	r3, [pc, #148]	; (402aec <chbsp_i2c_mem_read_nb+0x148>)
  402a58:	4798      	blx	r3

		pdc_packet.ul_addr = (uint32_t) data;
  402a5a:	687b      	ldr	r3, [r7, #4]
  402a5c:	62bb      	str	r3, [r7, #40]	; 0x28
		pdc_packet.ul_size = (num_bytes - 2);
  402a5e:	893b      	ldrh	r3, [r7, #8]
  402a60:	3b02      	subs	r3, #2
  402a62:	62fb      	str	r3, [r7, #44]	; 0x2c

		pdc_rx_init(pdc_ptr, &pdc_packet, NULL);
  402a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
  402a68:	2200      	movs	r2, #0
  402a6a:	4619      	mov	r1, r3
  402a6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402a6e:	4b20      	ldr	r3, [pc, #128]	; (402af0 <chbsp_i2c_mem_read_nb+0x14c>)
  402a70:	4798      	blx	r3

		/* Set read mode, slave address, and internal address length */
		twi_ptr->TWI_MMR = 0;
  402a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402a74:	2200      	movs	r2, #0
  402a76:	605a      	str	r2, [r3, #4]
		twi_ptr->TWI_MMR = TWI_MMR_MREAD | 
						   TWI_MMR_DADR(twi_packet.chip) |
  402a78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  402a7c:	041b      	lsls	r3, r3, #16
  402a7e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
						   ((twi_packet.addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
  402a82:	69bb      	ldr	r3, [r7, #24]
  402a84:	021b      	lsls	r3, r3, #8
  402a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
						   TWI_MMR_DADR(twi_packet.chip) |
  402a8a:	4313      	orrs	r3, r2
  402a8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
		twi_ptr->TWI_MMR = TWI_MMR_MREAD | 
  402a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402a92:	605a      	str	r2, [r3, #4]

		/* Set internal memory (register) address within remote device */
		twi_ptr->TWI_IADR = 0;
  402a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402a96:	2200      	movs	r2, #0
  402a98:	60da      	str	r2, [r3, #12]
		twi_ptr->TWI_IADR = twi_mk_addr(twi_packet.addr, twi_packet.addr_length);
  402a9a:	69bb      	ldr	r3, [r7, #24]
  402a9c:	461a      	mov	r2, r3
  402a9e:	f107 0314 	add.w	r3, r7, #20
  402aa2:	4611      	mov	r1, r2
  402aa4:	4618      	mov	r0, r3
  402aa6:	4b13      	ldr	r3, [pc, #76]	; (402af4 <chbsp_i2c_mem_read_nb+0x150>)
  402aa8:	4798      	blx	r3
  402aaa:	4602      	mov	r2, r0
  402aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402aae:	60da      	str	r2, [r3, #12]
		
		/* Enable the RX PDC transfer requests */
		pdc_enable_transfer(pdc_ptr, PERIPH_PTCR_RXTEN);
  402ab0:	2101      	movs	r1, #1
  402ab2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402ab4:	4b10      	ldr	r3, [pc, #64]	; (402af8 <chbsp_i2c_mem_read_nb+0x154>)
  402ab6:	4798      	blx	r3

		/* Start the transfer */
		twi_ptr->TWI_CR = TWI_CR_START;		
  402ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402aba:	2201      	movs	r2, #1
  402abc:	601a      	str	r2, [r3, #0]
	
		/* Enable end-of-receive interrupt */
		twi_enable_interrupt(twi_ptr, TWI_IER_ENDRX);	
  402abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402ac2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  402ac4:	4b0d      	ldr	r3, [pc, #52]	; (402afc <chbsp_i2c_mem_read_nb+0x158>)
  402ac6:	4798      	blx	r3
		
	}
	return error;
  402ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
  402aca:	4618      	mov	r0, r3
  402acc:	3740      	adds	r7, #64	; 0x40
  402ace:	46bd      	mov	sp, r7
  402ad0:	bd80      	pop	{r7, pc}
  402ad2:	bf00      	nop
  402ad4:	00405959 	.word	0x00405959
  402ad8:	00405971 	.word	0x00405971
  402adc:	40020600 	.word	0x40020600
  402ae0:	00404e51 	.word	0x00404e51
  402ae4:	40018600 	.word	0x40018600
  402ae8:	20000884 	.word	0x20000884
  402aec:	004039bd 	.word	0x004039bd
  402af0:	00403957 	.word	0x00403957
  402af4:	00404b81 	.word	0x00404b81
  402af8:	0040399b 	.word	0x0040399b
  402afc:	00404dc5 	.word	0x00404dc5

00402b00 <chbsp_i2c_reset>:
 *
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function performs a reset of the I2C interface for the specified device.
 */
void chbsp_i2c_reset(ch_dev_t * dev_ptr) {
  402b00:	b580      	push	{r7, lr}
  402b02:	b084      	sub	sp, #16
  402b04:	af00      	add	r7, sp, #0
  402b06:	6078      	str	r0, [r7, #4]
	uint8_t  bus_num  = ch_get_i2c_bus(dev_ptr);
  402b08:	6878      	ldr	r0, [r7, #4]
  402b0a:	4b09      	ldr	r3, [pc, #36]	; (402b30 <chbsp_i2c_reset+0x30>)
  402b0c:	4798      	blx	r3
  402b0e:	4603      	mov	r3, r0
  402b10:	73fb      	strb	r3, [r7, #15]

	if (bus_num == 0) {					 // I2C bus 0 (TWI1)
  402b12:	7bfb      	ldrb	r3, [r7, #15]
  402b14:	2b00      	cmp	r3, #0
  402b16:	d102      	bne.n	402b1e <chbsp_i2c_reset+0x1e>
		i2c_master_initialize1();
  402b18:	4b06      	ldr	r3, [pc, #24]	; (402b34 <chbsp_i2c_reset+0x34>)
  402b1a:	4798      	blx	r3
	} else if (bus_num == 1) {			 // I2C bus 1 (TWI3)
		i2c_master_initialize3();
	}
}
  402b1c:	e004      	b.n	402b28 <chbsp_i2c_reset+0x28>
	} else if (bus_num == 1) {			 // I2C bus 1 (TWI3)
  402b1e:	7bfb      	ldrb	r3, [r7, #15]
  402b20:	2b01      	cmp	r3, #1
  402b22:	d101      	bne.n	402b28 <chbsp_i2c_reset+0x28>
		i2c_master_initialize3();
  402b24:	4b04      	ldr	r3, [pc, #16]	; (402b38 <chbsp_i2c_reset+0x38>)
  402b26:	4798      	blx	r3
}
  402b28:	bf00      	nop
  402b2a:	3710      	adds	r7, #16
  402b2c:	46bd      	mov	sp, r7
  402b2e:	bd80      	pop	{r7, pc}
  402b30:	00405971 	.word	0x00405971
  402b34:	00407e75 	.word	0x00407e75
  402b38:	00407eed 	.word	0x00407eed

00402b3c <chbsp_periodic_timer_init>:
 *
 * The \a callback_func_ptr parameter specifies a callback routine that will be called when the 
 * timer expires (and interrupt occurs).  The \a chbsp_periodic_timer_handler function 
 * will call this function.
 */
uint8_t chbsp_periodic_timer_init(uint16_t interval_ms, ch_timer_callback_t callback_func_ptr) {
  402b3c:	b580      	push	{r7, lr}
  402b3e:	b082      	sub	sp, #8
  402b40:	af00      	add	r7, sp, #0
  402b42:	4603      	mov	r3, r0
  402b44:	6039      	str	r1, [r7, #0]
  402b46:	80fb      	strh	r3, [r7, #6]
	static bool is_hw_init_done = false;

	/* Save timer interval and callback function */
	periodic_timer_interval_ms = interval_ms;
  402b48:	4a32      	ldr	r2, [pc, #200]	; (402c14 <chbsp_periodic_timer_init+0xd8>)
  402b4a:	88fb      	ldrh	r3, [r7, #6]
  402b4c:	8013      	strh	r3, [r2, #0]
	periodic_timer_callback_ptr = callback_func_ptr;
  402b4e:	4a32      	ldr	r2, [pc, #200]	; (402c18 <chbsp_periodic_timer_init+0xdc>)
  402b50:	683b      	ldr	r3, [r7, #0]
  402b52:	6013      	str	r3, [r2, #0]

	/* Initialize the HW only 1 time at startup. Skip the init on subsequent calls. */
	if (!is_hw_init_done) {
  402b54:	4b31      	ldr	r3, [pc, #196]	; (402c1c <chbsp_periodic_timer_init+0xe0>)
  402b56:	781b      	ldrb	r3, [r3, #0]
  402b58:	f083 0301 	eor.w	r3, r3, #1
  402b5c:	b2db      	uxtb	r3, r3
  402b5e:	2b00      	cmp	r3, #0
  402b60:	d043      	beq.n	402bea <chbsp_periodic_timer_init+0xae>
		/* Configure the PMC to enable the TC module and channels */
		sysclk_enable_peripheral_clock(ID_TC0);
  402b62:	2017      	movs	r0, #23
  402b64:	4b2e      	ldr	r3, [pc, #184]	; (402c20 <chbsp_periodic_timer_init+0xe4>)
  402b66:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_TC1);
  402b68:	2018      	movs	r0, #24
  402b6a:	4b2d      	ldr	r3, [pc, #180]	; (402c20 <chbsp_periodic_timer_init+0xe4>)
  402b6c:	4798      	blx	r3
		/* Create on PCK3 a 499985 Hz clock from the PLLA clock. */
		pmc_disable_pck(PMC_PCK_3);
  402b6e:	2003      	movs	r0, #3
  402b70:	4b2c      	ldr	r3, [pc, #176]	; (402c24 <chbsp_periodic_timer_init+0xe8>)
  402b72:	4798      	blx	r3
		pmc_switch_pck_to_pllack(PMC_PCK_3, PMC_PCK_PRES(240 - 1));
  402b74:	f44f 616f 	mov.w	r1, #3824	; 0xef0
  402b78:	2003      	movs	r0, #3
  402b7a:	4b2b      	ldr	r3, [pc, #172]	; (402c28 <chbsp_periodic_timer_init+0xec>)
  402b7c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_3);
  402b7e:	2003      	movs	r0, #3
  402b80:	4b2a      	ldr	r3, [pc, #168]	; (402c2c <chbsp_periodic_timer_init+0xf0>)
  402b82:	4798      	blx	r3

		/* Reset all TC0 counters */
		TC0->TC_BCR = TC_BCR_SYNC;
  402b84:	4b2a      	ldr	r3, [pc, #168]	; (402c30 <chbsp_periodic_timer_init+0xf4>)
  402b86:	2201      	movs	r2, #1
  402b88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

		/* Enable TC0 - Channel 0 interrupt */
		NVIC_DisableIRQ(TC0_IRQn);
  402b8c:	2017      	movs	r0, #23
  402b8e:	4b29      	ldr	r3, [pc, #164]	; (402c34 <chbsp_periodic_timer_init+0xf8>)
  402b90:	4798      	blx	r3
		NVIC_ClearPendingIRQ(TC0_IRQn);
  402b92:	2017      	movs	r0, #23
  402b94:	4b28      	ldr	r3, [pc, #160]	; (402c38 <chbsp_periodic_timer_init+0xfc>)
  402b96:	4798      	blx	r3
		NVIC_SetPriority(TC0_IRQn, 1);
  402b98:	2101      	movs	r1, #1
  402b9a:	2017      	movs	r0, #23
  402b9c:	4b27      	ldr	r3, [pc, #156]	; (402c3c <chbsp_periodic_timer_init+0x100>)
  402b9e:	4798      	blx	r3
		NVIC_EnableIRQ(TC0_IRQn);
  402ba0:	2017      	movs	r0, #23
  402ba2:	4b27      	ldr	r3, [pc, #156]	; (402c40 <chbsp_periodic_timer_init+0x104>)
  402ba4:	4798      	blx	r3

		/* Enable TC0 - Channel 1 interrupt */
		NVIC_DisableIRQ(TC1_IRQn);
  402ba6:	2018      	movs	r0, #24
  402ba8:	4b22      	ldr	r3, [pc, #136]	; (402c34 <chbsp_periodic_timer_init+0xf8>)
  402baa:	4798      	blx	r3
		NVIC_ClearPendingIRQ(TC1_IRQn);
  402bac:	2018      	movs	r0, #24
  402bae:	4b22      	ldr	r3, [pc, #136]	; (402c38 <chbsp_periodic_timer_init+0xfc>)
  402bb0:	4798      	blx	r3
		NVIC_SetPriority(TC1_IRQn, 1);
  402bb2:	2101      	movs	r1, #1
  402bb4:	2018      	movs	r0, #24
  402bb6:	4b21      	ldr	r3, [pc, #132]	; (402c3c <chbsp_periodic_timer_init+0x100>)
  402bb8:	4798      	blx	r3
		NVIC_EnableIRQ(TC1_IRQn);
  402bba:	2018      	movs	r0, #24
  402bbc:	4b20      	ldr	r3, [pc, #128]	; (402c40 <chbsp_periodic_timer_init+0x104>)
  402bbe:	4798      	blx	r3

		/* Create the lsepoch timer running on PCK3 and start it immediately */
		tc_init(TC0, TC_CHANNEL_LSEPOCH,
  402bc0:	f248 0204 	movw	r2, #32772	; 0x8004
  402bc4:	2100      	movs	r1, #0
  402bc6:	481a      	ldr	r0, [pc, #104]	; (402c30 <chbsp_periodic_timer_init+0xf4>)
  402bc8:	4b1e      	ldr	r3, [pc, #120]	; (402c44 <chbsp_periodic_timer_init+0x108>)
  402bca:	4798      	blx	r3
			TC_CMR_TCCLKS_TIMER_CLOCK5 | TC_CMR_WAVE | TC_CMR_WAVSEL_UP);
		tc_enable_interrupt(TC0, TC_CHANNEL_LSEPOCH, TC_IER_COVFS);
  402bcc:	2201      	movs	r2, #1
  402bce:	2100      	movs	r1, #0
  402bd0:	4817      	ldr	r0, [pc, #92]	; (402c30 <chbsp_periodic_timer_init+0xf4>)
  402bd2:	4b1d      	ldr	r3, [pc, #116]	; (402c48 <chbsp_periodic_timer_init+0x10c>)
  402bd4:	4798      	blx	r3
		tc_start(TC0, TC_CHANNEL_LSEPOCH);
  402bd6:	2100      	movs	r1, #0
  402bd8:	4815      	ldr	r0, [pc, #84]	; (402c30 <chbsp_periodic_timer_init+0xf4>)
  402bda:	4b1c      	ldr	r3, [pc, #112]	; (402c4c <chbsp_periodic_timer_init+0x110>)
  402bdc:	4798      	blx	r3

		/* Create the ultrasound periodic timer. */
		tc_init(TC0, TC_CHANNEL_US,
  402bde:	f248 0204 	movw	r2, #32772	; 0x8004
  402be2:	2101      	movs	r1, #1
  402be4:	4812      	ldr	r0, [pc, #72]	; (402c30 <chbsp_periodic_timer_init+0xf4>)
  402be6:	4b17      	ldr	r3, [pc, #92]	; (402c44 <chbsp_periodic_timer_init+0x108>)
  402be8:	4798      	blx	r3
			TC_CMR_TCCLKS_TIMER_CLOCK5 | TC_CMR_WAVE | TC_CMR_WAVSEL_UP);
	}

	/* Mark the HW init as done */
	is_hw_init_done = true;
  402bea:	4b0c      	ldr	r3, [pc, #48]	; (402c1c <chbsp_periodic_timer_init+0xe0>)
  402bec:	2201      	movs	r2, #1
  402bee:	701a      	strb	r2, [r3, #0]

	/* Convert the ODR in ms to ticks */
	ultrasound_timer_period_in_tick = get_period_in_tick(interval_ms * 1000);
  402bf0:	88fb      	ldrh	r3, [r7, #6]
  402bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402bf6:	fb02 f303 	mul.w	r3, r2, r3
  402bfa:	4618      	mov	r0, r3
  402bfc:	4b14      	ldr	r3, [pc, #80]	; (402c50 <chbsp_periodic_timer_init+0x114>)
  402bfe:	4798      	blx	r3
  402c00:	4603      	mov	r3, r0
  402c02:	b29a      	uxth	r2, r3
  402c04:	4b13      	ldr	r3, [pc, #76]	; (402c54 <chbsp_periodic_timer_init+0x118>)
  402c06:	801a      	strh	r2, [r3, #0]
	
	return 0;
  402c08:	2300      	movs	r3, #0
}
  402c0a:	4618      	mov	r0, r3
  402c0c:	3708      	adds	r7, #8
  402c0e:	46bd      	mov	sp, r7
  402c10:	bd80      	pop	{r7, pc}
  402c12:	bf00      	nop
  402c14:	20000380 	.word	0x20000380
  402c18:	2000037c 	.word	0x2000037c
  402c1c:	200003a4 	.word	0x200003a4
  402c20:	00401621 	.word	0x00401621
  402c24:	00404461 	.word	0x00404461
  402c28:	00404389 	.word	0x00404389
  402c2c:	00404439 	.word	0x00404439
  402c30:	40010000 	.word	0x40010000
  402c34:	004014c1 	.word	0x004014c1
  402c38:	004014f5 	.word	0x004014f5
  402c3c:	00401529 	.word	0x00401529
  402c40:	0040148d 	.word	0x0040148d
  402c44:	00404911 	.word	0x00404911
  402c48:	00404993 	.word	0x00404993
  402c4c:	0040494b 	.word	0x0040494b
  402c50:	00402c59 	.word	0x00402c59
  402c54:	20000160 	.word	0x20000160

00402c58 <get_period_in_tick>:
    ultrasound_prev_period_end_in_tick = prev_expiration;
	
    program_next_period();
}

uint32_t get_period_in_tick(uint32_t interval_us) {
  402c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c5c:	b087      	sub	sp, #28
  402c5e:	af00      	add	r7, sp, #0
  402c60:	60f8      	str	r0, [r7, #12]
	uint64_t timer_period_in_tick = (uint64_t) ULTRASOUND_TIMER_FREQUENCY * interval_us / 1000000;
  402c62:	68fa      	ldr	r2, [r7, #12]
  402c64:	4615      	mov	r5, r2
  402c66:	f04f 0600 	mov.w	r6, #0
  402c6a:	4629      	mov	r1, r5
  402c6c:	4632      	mov	r2, r6
  402c6e:	0150      	lsls	r0, r2, #5
  402c70:	6078      	str	r0, [r7, #4]
  402c72:	6878      	ldr	r0, [r7, #4]
  402c74:	ea40 60d1 	orr.w	r0, r0, r1, lsr #27
  402c78:	6078      	str	r0, [r7, #4]
  402c7a:	014a      	lsls	r2, r1, #5
  402c7c:	603a      	str	r2, [r7, #0]
  402c7e:	e9d7 1200 	ldrd	r1, r2, [r7]
  402c82:	1b49      	subs	r1, r1, r5
  402c84:	eb62 0206 	sbc.w	r2, r2, r6
  402c88:	0194      	lsls	r4, r2, #6
  402c8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
  402c8e:	018b      	lsls	r3, r1, #6
  402c90:	1a5b      	subs	r3, r3, r1
  402c92:	eb64 0402 	sbc.w	r4, r4, r2
  402c96:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  402c9a:	ea4b 7b13 	orr.w	fp, fp, r3, lsr #28
  402c9e:	ea4f 1a03 	mov.w	sl, r3, lsl #4
  402ca2:	4653      	mov	r3, sl
  402ca4:	465c      	mov	r4, fp
  402ca6:	195b      	adds	r3, r3, r5
  402ca8:	eb44 0406 	adc.w	r4, r4, r6
  402cac:	ea4f 1904 	mov.w	r9, r4, lsl #4
  402cb0:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  402cb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
  402cb8:	4643      	mov	r3, r8
  402cba:	464c      	mov	r4, r9
  402cbc:	1958      	adds	r0, r3, r5
  402cbe:	eb44 0106 	adc.w	r1, r4, r6
  402cc2:	4c1c      	ldr	r4, [pc, #112]	; (402d34 <get_period_in_tick+0xdc>)
  402cc4:	4a1c      	ldr	r2, [pc, #112]	; (402d38 <get_period_in_tick+0xe0>)
  402cc6:	f04f 0300 	mov.w	r3, #0
  402cca:	47a0      	blx	r4
  402ccc:	4603      	mov	r3, r0
  402cce:	460c      	mov	r4, r1
  402cd0:	e9c7 3404 	strd	r3, r4, [r7, #16]

	/* If the ODR is too slow to be handled then program a faster interrupt and decimate it */
	if (timer_period_in_tick > UINT16_MAX)
  402cd4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  402cd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  402cdc:	f04f 0200 	mov.w	r2, #0
  402ce0:	42a2      	cmp	r2, r4
  402ce2:	bf08      	it	eq
  402ce4:	4299      	cmpeq	r1, r3
  402ce6:	d20f      	bcs.n	402d08 <get_period_in_tick+0xb0>
		decimation_factor = timer_period_in_tick / UINT16_MAX + 1;
  402ce8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
  402cec:	4c11      	ldr	r4, [pc, #68]	; (402d34 <get_period_in_tick+0xdc>)
  402cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402cf2:	f04f 0300 	mov.w	r3, #0
  402cf6:	47a0      	blx	r4
  402cf8:	4603      	mov	r3, r0
  402cfa:	460c      	mov	r4, r1
  402cfc:	b2db      	uxtb	r3, r3
  402cfe:	3301      	adds	r3, #1
  402d00:	b2da      	uxtb	r2, r3
  402d02:	4b0e      	ldr	r3, [pc, #56]	; (402d3c <get_period_in_tick+0xe4>)
  402d04:	701a      	strb	r2, [r3, #0]
  402d06:	e002      	b.n	402d0e <get_period_in_tick+0xb6>
	else
		decimation_factor = 1;
  402d08:	4b0c      	ldr	r3, [pc, #48]	; (402d3c <get_period_in_tick+0xe4>)
  402d0a:	2201      	movs	r2, #1
  402d0c:	701a      	strb	r2, [r3, #0]

	/* Calculate the final tick in case a decimation is needed */
	return (uint32_t) (timer_period_in_tick / decimation_factor);	
  402d0e:	4b0b      	ldr	r3, [pc, #44]	; (402d3c <get_period_in_tick+0xe4>)
  402d10:	781b      	ldrb	r3, [r3, #0]
  402d12:	b2db      	uxtb	r3, r3
  402d14:	f04f 0400 	mov.w	r4, #0
  402d18:	4d06      	ldr	r5, [pc, #24]	; (402d34 <get_period_in_tick+0xdc>)
  402d1a:	461a      	mov	r2, r3
  402d1c:	4623      	mov	r3, r4
  402d1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
  402d22:	47a8      	blx	r5
  402d24:	4603      	mov	r3, r0
  402d26:	460c      	mov	r4, r1
}
  402d28:	4618      	mov	r0, r3
  402d2a:	371c      	adds	r7, #28
  402d2c:	46bd      	mov	sp, r7
  402d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d32:	bf00      	nop
  402d34:	0040bd5d 	.word	0x0040bd5d
  402d38:	000f4240 	.word	0x000f4240
  402d3c:	20000385 	.word	0x20000385

00402d40 <program_next_period>:

void program_next_period(void)
{
  402d40:	b580      	push	{r7, lr}
  402d42:	b082      	sub	sp, #8
  402d44:	af00      	add	r7, sp, #0
	uint32_t time = ultrasound_prev_period_end_in_tick + ultrasound_timer_period_in_tick;
  402d46:	4b0b      	ldr	r3, [pc, #44]	; (402d74 <program_next_period+0x34>)
  402d48:	881b      	ldrh	r3, [r3, #0]
  402d4a:	461a      	mov	r2, r3
  402d4c:	4b0a      	ldr	r3, [pc, #40]	; (402d78 <program_next_period+0x38>)
  402d4e:	881b      	ldrh	r3, [r3, #0]
  402d50:	4413      	add	r3, r2
  402d52:	607b      	str	r3, [r7, #4]
	ultrasound_prev_period_end_in_tick = time;
  402d54:	687b      	ldr	r3, [r7, #4]
  402d56:	b29a      	uxth	r2, r3
  402d58:	4b06      	ldr	r3, [pc, #24]	; (402d74 <program_next_period+0x34>)
  402d5a:	801a      	strh	r2, [r3, #0]
	tc_write_rc(TC0, TC_CHANNEL_US, (uint16_t) (time & 0xFFFF));
  402d5c:	687b      	ldr	r3, [r7, #4]
  402d5e:	b29b      	uxth	r3, r3
  402d60:	461a      	mov	r2, r3
  402d62:	2101      	movs	r1, #1
  402d64:	4805      	ldr	r0, [pc, #20]	; (402d7c <program_next_period+0x3c>)
  402d66:	4b06      	ldr	r3, [pc, #24]	; (402d80 <program_next_period+0x40>)
  402d68:	4798      	blx	r3
}
  402d6a:	bf00      	nop
  402d6c:	3708      	adds	r7, #8
  402d6e:	46bd      	mov	sp, r7
  402d70:	bd80      	pop	{r7, pc}
  402d72:	bf00      	nop
  402d74:	20000382 	.word	0x20000382
  402d78:	20000160 	.word	0x20000160
  402d7c:	40010000 	.word	0x40010000
  402d80:	0040496d 	.word	0x0040496d

00402d84 <chbsp_periodic_timer_irq_enable>:
 * \brief Enable periodic timer interrupt.
 *
 * This function enables the interrupt associated with the periodic timer initialized by 
 * \a chbsp_periodic_timer_init().
 */
void chbsp_periodic_timer_irq_enable(void) {
  402d84:	b580      	push	{r7, lr}
  402d86:	af00      	add	r7, sp, #0

	/* Clear any pending CPCS before enabling it */
	tc_get_status(TC0, TC_CHANNEL_US);
  402d88:	2101      	movs	r1, #1
  402d8a:	4805      	ldr	r0, [pc, #20]	; (402da0 <chbsp_periodic_timer_irq_enable+0x1c>)
  402d8c:	4b05      	ldr	r3, [pc, #20]	; (402da4 <chbsp_periodic_timer_irq_enable+0x20>)
  402d8e:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_US, TC_IER_CPCS);
  402d90:	2210      	movs	r2, #16
  402d92:	2101      	movs	r1, #1
  402d94:	4802      	ldr	r0, [pc, #8]	; (402da0 <chbsp_periodic_timer_irq_enable+0x1c>)
  402d96:	4b04      	ldr	r3, [pc, #16]	; (402da8 <chbsp_periodic_timer_irq_enable+0x24>)
  402d98:	4798      	blx	r3
}
  402d9a:	bf00      	nop
  402d9c:	bd80      	pop	{r7, pc}
  402d9e:	bf00      	nop
  402da0:	40010000 	.word	0x40010000
  402da4:	004049df 	.word	0x004049df
  402da8:	00404993 	.word	0x00404993

00402dac <chbsp_periodic_timer_start>:
 *
 * \return 0 if successful, 1 if error
 *
 * This function starts the periodic timer initialized by \a chbsp_periodic_timer_init().
 */
uint8_t chbsp_periodic_timer_start(void) {
  402dac:	b580      	push	{r7, lr}
  402dae:	af00      	add	r7, sp, #0

	decimation_counter = 0;
  402db0:	4b07      	ldr	r3, [pc, #28]	; (402dd0 <chbsp_periodic_timer_start+0x24>)
  402db2:	2200      	movs	r2, #0
  402db4:	701a      	strb	r2, [r3, #0]
	/* The timer start done at the very end is resetting the counter */
	ultrasound_prev_period_end_in_tick = 0;
  402db6:	4b07      	ldr	r3, [pc, #28]	; (402dd4 <chbsp_periodic_timer_start+0x28>)
  402db8:	2200      	movs	r2, #0
  402dba:	801a      	strh	r2, [r3, #0]
	program_next_period();
  402dbc:	4b06      	ldr	r3, [pc, #24]	; (402dd8 <chbsp_periodic_timer_start+0x2c>)
  402dbe:	4798      	blx	r3

	/* Start the HW counter (this resets the counter */
	tc_start(TC0, TC_CHANNEL_US);
  402dc0:	2101      	movs	r1, #1
  402dc2:	4806      	ldr	r0, [pc, #24]	; (402ddc <chbsp_periodic_timer_start+0x30>)
  402dc4:	4b06      	ldr	r3, [pc, #24]	; (402de0 <chbsp_periodic_timer_start+0x34>)
  402dc6:	4798      	blx	r3

	return 0;
  402dc8:	2300      	movs	r3, #0
}
  402dca:	4618      	mov	r0, r3
  402dcc:	bd80      	pop	{r7, pc}
  402dce:	bf00      	nop
  402dd0:	20000384 	.word	0x20000384
  402dd4:	20000382 	.word	0x20000382
  402dd8:	00402d41 	.word	0x00402d41
  402ddc:	40010000 	.word	0x40010000
  402de0:	0040494b 	.word	0x0040494b

00402de4 <chbsp_periodic_timer_handler>:
 *
 * This function handles the expiration of the periodic timer, re-arms it and any associated 
 * interrupts for the next interval, and calls the callback routine that was registered using 
 * \a chbsp_periodic_timer_init().
 */
void chbsp_periodic_timer_handler(void) {
  402de4:	b580      	push	{r7, lr}
  402de6:	b082      	sub	sp, #8
  402de8:	af00      	add	r7, sp, #0
	ch_timer_callback_t func_ptr = periodic_timer_callback_ptr;
  402dea:	4b0e      	ldr	r3, [pc, #56]	; (402e24 <chbsp_periodic_timer_handler+0x40>)
  402dec:	681b      	ldr	r3, [r3, #0]
  402dee:	607b      	str	r3, [r7, #4]

	decimation_counter++;
  402df0:	4b0d      	ldr	r3, [pc, #52]	; (402e28 <chbsp_periodic_timer_handler+0x44>)
  402df2:	781b      	ldrb	r3, [r3, #0]
  402df4:	3301      	adds	r3, #1
  402df6:	b2da      	uxtb	r2, r3
  402df8:	4b0b      	ldr	r3, [pc, #44]	; (402e28 <chbsp_periodic_timer_handler+0x44>)
  402dfa:	701a      	strb	r2, [r3, #0]
	program_next_period();
  402dfc:	4b0b      	ldr	r3, [pc, #44]	; (402e2c <chbsp_periodic_timer_handler+0x48>)
  402dfe:	4798      	blx	r3
	if (decimation_counter >= decimation_factor) {
  402e00:	4b09      	ldr	r3, [pc, #36]	; (402e28 <chbsp_periodic_timer_handler+0x44>)
  402e02:	781a      	ldrb	r2, [r3, #0]
  402e04:	4b0a      	ldr	r3, [pc, #40]	; (402e30 <chbsp_periodic_timer_handler+0x4c>)
  402e06:	781b      	ldrb	r3, [r3, #0]
  402e08:	429a      	cmp	r2, r3
  402e0a:	d307      	bcc.n	402e1c <chbsp_periodic_timer_handler+0x38>
		decimation_counter = 0;
  402e0c:	4b06      	ldr	r3, [pc, #24]	; (402e28 <chbsp_periodic_timer_handler+0x44>)
  402e0e:	2200      	movs	r2, #0
  402e10:	701a      	strb	r2, [r3, #0]
		if (func_ptr != NULL) {
  402e12:	687b      	ldr	r3, [r7, #4]
  402e14:	2b00      	cmp	r3, #0
  402e16:	d001      	beq.n	402e1c <chbsp_periodic_timer_handler+0x38>
			(*func_ptr)();			// call application timer callback routine
  402e18:	687b      	ldr	r3, [r7, #4]
  402e1a:	4798      	blx	r3
		}
	}
}
  402e1c:	bf00      	nop
  402e1e:	3708      	adds	r7, #8
  402e20:	46bd      	mov	sp, r7
  402e22:	bd80      	pop	{r7, pc}
  402e24:	2000037c 	.word	0x2000037c
  402e28:	20000384 	.word	0x20000384
  402e2c:	00402d41 	.word	0x00402d41
  402e30:	20000385 	.word	0x20000385

00402e34 <chbsp_proc_sleep>:
 *
 * This function puts the host processor (MCU) into a low-power sleep mode, to conserve energy. 
 * The sleep state should be selected such that interrupts associated with the I2C, external 
 * GPIO pins, and the periodic timer (if used) are able to wake up the device.
 */
void chbsp_proc_sleep(void) {
  402e34:	b580      	push	{r7, lr}
  402e36:	af00      	add	r7, sp, #0

	pmc_sleep(PROC_SLEEP_MODE);			// use sleep mode defined in chirp_smartsonic.h
  402e38:	2002      	movs	r0, #2
  402e3a:	4b02      	ldr	r3, [pc, #8]	; (402e44 <chbsp_proc_sleep+0x10>)
  402e3c:	4798      	blx	r3
}	
  402e3e:	bf00      	nop
  402e40:	bd80      	pop	{r7, pc}
  402e42:	bf00      	nop
  402e44:	00404525 	.word	0x00404525

00402e48 <chbsp_led_on>:
 *
 * The \a dev_num parameter contains the device number of a specific sensor.  This routine
 * will turn on the LED on the Chirp sensor daughterboard that is next to the specified
 * sensor.
 */
void chbsp_led_on(uint8_t led_num) {
  402e48:	b580      	push	{r7, lr}
  402e4a:	b082      	sub	sp, #8
  402e4c:	af00      	add	r7, sp, #0
  402e4e:	4603      	mov	r3, r0
  402e50:	71fb      	strb	r3, [r7, #7]

	sensor_led_on(chirp_led_pins[led_num]);
  402e52:	79fb      	ldrb	r3, [r7, #7]
  402e54:	4a04      	ldr	r2, [pc, #16]	; (402e68 <chbsp_led_on+0x20>)
  402e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402e5a:	4618      	mov	r0, r3
  402e5c:	4b03      	ldr	r3, [pc, #12]	; (402e6c <chbsp_led_on+0x24>)
  402e5e:	4798      	blx	r3
}
  402e60:	bf00      	nop
  402e62:	3708      	adds	r7, #8
  402e64:	46bd      	mov	sp, r7
  402e66:	bd80      	pop	{r7, pc}
  402e68:	20000150 	.word	0x20000150
  402e6c:	00401371 	.word	0x00401371

00402e70 <chbsp_timestamp_ms>:
/*!
 * \brief Return the current time in ms
 *
 * This function returns the system current time in ms.
 */
uint32_t chbsp_timestamp_ms(void) {
  402e70:	b590      	push	{r4, r7, lr}
  402e72:	b083      	sub	sp, #12
  402e74:	af00      	add	r7, sp, #0
	uint32_t time = time_get_in_us();
  402e76:	4b07      	ldr	r3, [pc, #28]	; (402e94 <chbsp_timestamp_ms+0x24>)
  402e78:	4798      	blx	r3
  402e7a:	4603      	mov	r3, r0
  402e7c:	460c      	mov	r4, r1
  402e7e:	607b      	str	r3, [r7, #4]
	return (time / 1000);
  402e80:	687b      	ldr	r3, [r7, #4]
  402e82:	4a05      	ldr	r2, [pc, #20]	; (402e98 <chbsp_timestamp_ms+0x28>)
  402e84:	fba2 2303 	umull	r2, r3, r2, r3
  402e88:	099b      	lsrs	r3, r3, #6
}
  402e8a:	4618      	mov	r0, r3
  402e8c:	370c      	adds	r7, #12
  402e8e:	46bd      	mov	sp, r7
  402e90:	bd90      	pop	{r4, r7, pc}
  402e92:	bf00      	nop
  402e94:	00400999 	.word	0x00400999
  402e98:	10624dd3 	.word	0x10624dd3

00402e9c <time_hal_get_in_us>:
#include "time_hal.h"
#include "tc.h"
#include "chirp_smartsonic.h"

uint64_t time_hal_get_in_us(void)
{
  402e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ea0:	b085      	sub	sp, #20
  402ea2:	af00      	add	r7, sp, #0
	static uint64_t lsepoch_overflow_counter_in_tick = 0;

	cpu_irq_enter_critical();
  402ea4:	4b33      	ldr	r3, [pc, #204]	; (402f74 <time_hal_get_in_us+0xd8>)
  402ea6:	4798      	blx	r3
	/* Check if a counter overflow occurs since last call and ensure no ovf occurs during the read */
	if (TC0->TC_CHANNEL[TC_CHANNEL_LSEPOCH].TC_SR & TC_SR_COVFS)
  402ea8:	4b33      	ldr	r3, [pc, #204]	; (402f78 <time_hal_get_in_us+0xdc>)
  402eaa:	6a1b      	ldr	r3, [r3, #32]
  402eac:	f003 0301 	and.w	r3, r3, #1
  402eb0:	2b00      	cmp	r3, #0
  402eb2:	d009      	beq.n	402ec8 <time_hal_get_in_us+0x2c>
		lsepoch_overflow_counter_in_tick += 65536;
  402eb4:	4b31      	ldr	r3, [pc, #196]	; (402f7c <time_hal_get_in_us+0xe0>)
  402eb6:	e9d3 3400 	ldrd	r3, r4, [r3]
  402eba:	f513 3380 	adds.w	r3, r3, #65536	; 0x10000
  402ebe:	f144 0400 	adc.w	r4, r4, #0
  402ec2:	4a2e      	ldr	r2, [pc, #184]	; (402f7c <time_hal_get_in_us+0xe0>)
  402ec4:	e9c2 3400 	strd	r3, r4, [r2]

	uint16_t timer_counter = TC0->TC_CHANNEL[TC_CHANNEL_LSEPOCH].TC_CV;
  402ec8:	4b2b      	ldr	r3, [pc, #172]	; (402f78 <time_hal_get_in_us+0xdc>)
  402eca:	691b      	ldr	r3, [r3, #16]
  402ecc:	81fb      	strh	r3, [r7, #14]

	if (TC0->TC_CHANNEL[TC_CHANNEL_LSEPOCH].TC_SR & TC_SR_COVFS) {
  402ece:	4b2a      	ldr	r3, [pc, #168]	; (402f78 <time_hal_get_in_us+0xdc>)
  402ed0:	6a1b      	ldr	r3, [r3, #32]
  402ed2:	f003 0301 	and.w	r3, r3, #1
  402ed6:	2b00      	cmp	r3, #0
  402ed8:	d00b      	beq.n	402ef2 <time_hal_get_in_us+0x56>
		lsepoch_overflow_counter_in_tick += 65536;
  402eda:	4b28      	ldr	r3, [pc, #160]	; (402f7c <time_hal_get_in_us+0xe0>)
  402edc:	e9d3 3400 	ldrd	r3, r4, [r3]
  402ee0:	f513 3380 	adds.w	r3, r3, #65536	; 0x10000
  402ee4:	f144 0400 	adc.w	r4, r4, #0
  402ee8:	4a24      	ldr	r2, [pc, #144]	; (402f7c <time_hal_get_in_us+0xe0>)
  402eea:	e9c2 3400 	strd	r3, r4, [r2]
		/* Overflow occurred during the reading */
		timer_counter = 0;
  402eee:	2300      	movs	r3, #0
  402ef0:	81fb      	strh	r3, [r7, #14]
	}

	cpu_irq_leave_critical();
  402ef2:	4b23      	ldr	r3, [pc, #140]	; (402f80 <time_hal_get_in_us+0xe4>)
  402ef4:	4798      	blx	r3

	/* Convert to us */
	uint64_t curr_time = ((lsepoch_overflow_counter_in_tick + timer_counter) * 1000000)
  402ef6:	89f9      	ldrh	r1, [r7, #14]
  402ef8:	f04f 0200 	mov.w	r2, #0
  402efc:	4b1f      	ldr	r3, [pc, #124]	; (402f7c <time_hal_get_in_us+0xe0>)
  402efe:	e9d3 3400 	ldrd	r3, r4, [r3]
  402f02:	18c9      	adds	r1, r1, r3
  402f04:	eb42 0204 	adc.w	r2, r2, r4
  402f08:	460b      	mov	r3, r1
  402f0a:	4614      	mov	r4, r2
  402f0c:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  402f10:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  402f14:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  402f18:	4653      	mov	r3, sl
  402f1a:	465c      	mov	r4, fp
  402f1c:	1a5b      	subs	r3, r3, r1
  402f1e:	eb64 0402 	sbc.w	r4, r4, r2
  402f22:	ea4f 2944 	mov.w	r9, r4, lsl #9
  402f26:	ea49 59d3 	orr.w	r9, r9, r3, lsr #23
  402f2a:	ea4f 2843 	mov.w	r8, r3, lsl #9
  402f2e:	4643      	mov	r3, r8
  402f30:	464c      	mov	r4, r9
  402f32:	185b      	adds	r3, r3, r1
  402f34:	eb44 0402 	adc.w	r4, r4, r2
  402f38:	01a6      	lsls	r6, r4, #6
  402f3a:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
  402f3e:	019d      	lsls	r5, r3, #6
  402f40:	1aed      	subs	r5, r5, r3
  402f42:	eb66 0604 	sbc.w	r6, r6, r4
  402f46:	186b      	adds	r3, r5, r1
  402f48:	eb46 0402 	adc.w	r4, r6, r2
  402f4c:	4618      	mov	r0, r3
  402f4e:	4621      	mov	r1, r4
  402f50:	4c0c      	ldr	r4, [pc, #48]	; (402f84 <time_hal_get_in_us+0xe8>)
  402f52:	4a0d      	ldr	r2, [pc, #52]	; (402f88 <time_hal_get_in_us+0xec>)
  402f54:	f04f 0300 	mov.w	r3, #0
  402f58:	47a0      	blx	r4
  402f5a:	4603      	mov	r3, r0
  402f5c:	460c      	mov	r4, r1
  402f5e:	e9c7 3400 	strd	r3, r4, [r7]
		/ ULTRASOUND_TIMER_FREQUENCY;

	return (curr_time);
  402f62:	e9d7 3400 	ldrd	r3, r4, [r7]
  402f66:	4618      	mov	r0, r3
  402f68:	4621      	mov	r1, r4
  402f6a:	3714      	adds	r7, #20
  402f6c:	46bd      	mov	sp, r7
  402f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f72:	bf00      	nop
  402f74:	00400d69 	.word	0x00400d69
  402f78:	40010000 	.word	0x40010000
  402f7c:	200003a8 	.word	0x200003a8
  402f80:	00400dc1 	.word	0x00400dc1
  402f84:	0040bd5d 	.word	0x0040bd5d
  402f88:	0007a111 	.word	0x0007a111

00402f8c <sysclk_enable_peripheral_clock>:
  402f8c:	b580      	push	{r7, lr}
  402f8e:	b082      	sub	sp, #8
  402f90:	af00      	add	r7, sp, #0
  402f92:	6078      	str	r0, [r7, #4]
  402f94:	6878      	ldr	r0, [r7, #4]
  402f96:	4b03      	ldr	r3, [pc, #12]	; (402fa4 <sysclk_enable_peripheral_clock+0x18>)
  402f98:	4798      	blx	r3
  402f9a:	bf00      	nop
  402f9c:	3708      	adds	r7, #8
  402f9e:	46bd      	mov	sp, r7
  402fa0:	bd80      	pop	{r7, pc}
  402fa2:	bf00      	nop
  402fa4:	00404305 	.word	0x00404305

00402fa8 <ioport_init>:
  402fa8:	b580      	push	{r7, lr}
  402faa:	af00      	add	r7, sp, #0
  402fac:	200b      	movs	r0, #11
  402fae:	4b03      	ldr	r3, [pc, #12]	; (402fbc <ioport_init+0x14>)
  402fb0:	4798      	blx	r3
  402fb2:	200c      	movs	r0, #12
  402fb4:	4b01      	ldr	r3, [pc, #4]	; (402fbc <ioport_init+0x14>)
  402fb6:	4798      	blx	r3
  402fb8:	bf00      	nop
  402fba:	bd80      	pop	{r7, pc}
  402fbc:	00402f8d 	.word	0x00402f8d

00402fc0 <ioport_disable_pin>:
  402fc0:	b480      	push	{r7}
  402fc2:	b089      	sub	sp, #36	; 0x24
  402fc4:	af00      	add	r7, sp, #0
  402fc6:	6078      	str	r0, [r7, #4]
  402fc8:	687b      	ldr	r3, [r7, #4]
  402fca:	61fb      	str	r3, [r7, #28]
  402fcc:	69fb      	ldr	r3, [r7, #28]
  402fce:	61bb      	str	r3, [r7, #24]
  402fd0:	69bb      	ldr	r3, [r7, #24]
  402fd2:	095a      	lsrs	r2, r3, #5
  402fd4:	69fb      	ldr	r3, [r7, #28]
  402fd6:	617b      	str	r3, [r7, #20]
  402fd8:	697b      	ldr	r3, [r7, #20]
  402fda:	f003 031f 	and.w	r3, r3, #31
  402fde:	2101      	movs	r1, #1
  402fe0:	fa01 f303 	lsl.w	r3, r1, r3
  402fe4:	613a      	str	r2, [r7, #16]
  402fe6:	60fb      	str	r3, [r7, #12]
  402fe8:	693b      	ldr	r3, [r7, #16]
  402fea:	60bb      	str	r3, [r7, #8]
  402fec:	68bb      	ldr	r3, [r7, #8]
  402fee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402ff2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402ff6:	025b      	lsls	r3, r3, #9
  402ff8:	461a      	mov	r2, r3
  402ffa:	68fb      	ldr	r3, [r7, #12]
  402ffc:	6053      	str	r3, [r2, #4]
  402ffe:	bf00      	nop
  403000:	3724      	adds	r7, #36	; 0x24
  403002:	46bd      	mov	sp, r7
  403004:	f85d 7b04 	ldr.w	r7, [sp], #4
  403008:	4770      	bx	lr

0040300a <ioport_set_pin_mode>:
  40300a:	b480      	push	{r7}
  40300c:	b08d      	sub	sp, #52	; 0x34
  40300e:	af00      	add	r7, sp, #0
  403010:	6078      	str	r0, [r7, #4]
  403012:	6039      	str	r1, [r7, #0]
  403014:	687b      	ldr	r3, [r7, #4]
  403016:	62fb      	str	r3, [r7, #44]	; 0x2c
  403018:	683b      	ldr	r3, [r7, #0]
  40301a:	62bb      	str	r3, [r7, #40]	; 0x28
  40301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40301e:	627b      	str	r3, [r7, #36]	; 0x24
  403020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403022:	095a      	lsrs	r2, r3, #5
  403024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403026:	623b      	str	r3, [r7, #32]
  403028:	6a3b      	ldr	r3, [r7, #32]
  40302a:	f003 031f 	and.w	r3, r3, #31
  40302e:	2101      	movs	r1, #1
  403030:	fa01 f303 	lsl.w	r3, r1, r3
  403034:	61fa      	str	r2, [r7, #28]
  403036:	61bb      	str	r3, [r7, #24]
  403038:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40303a:	617b      	str	r3, [r7, #20]
  40303c:	69fb      	ldr	r3, [r7, #28]
  40303e:	613b      	str	r3, [r7, #16]
  403040:	693b      	ldr	r3, [r7, #16]
  403042:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403046:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40304a:	025b      	lsls	r3, r3, #9
  40304c:	60fb      	str	r3, [r7, #12]
  40304e:	697b      	ldr	r3, [r7, #20]
  403050:	f003 0308 	and.w	r3, r3, #8
  403054:	2b00      	cmp	r3, #0
  403056:	d003      	beq.n	403060 <ioport_set_pin_mode+0x56>
  403058:	68fb      	ldr	r3, [r7, #12]
  40305a:	69ba      	ldr	r2, [r7, #24]
  40305c:	665a      	str	r2, [r3, #100]	; 0x64
  40305e:	e002      	b.n	403066 <ioport_set_pin_mode+0x5c>
  403060:	68fb      	ldr	r3, [r7, #12]
  403062:	69ba      	ldr	r2, [r7, #24]
  403064:	661a      	str	r2, [r3, #96]	; 0x60
  403066:	697b      	ldr	r3, [r7, #20]
  403068:	f003 0310 	and.w	r3, r3, #16
  40306c:	2b00      	cmp	r3, #0
  40306e:	d004      	beq.n	40307a <ioport_set_pin_mode+0x70>
  403070:	68fb      	ldr	r3, [r7, #12]
  403072:	69ba      	ldr	r2, [r7, #24]
  403074:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  403078:	e003      	b.n	403082 <ioport_set_pin_mode+0x78>
  40307a:	68fb      	ldr	r3, [r7, #12]
  40307c:	69ba      	ldr	r2, [r7, #24]
  40307e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  403082:	697b      	ldr	r3, [r7, #20]
  403084:	f003 0320 	and.w	r3, r3, #32
  403088:	2b00      	cmp	r3, #0
  40308a:	d003      	beq.n	403094 <ioport_set_pin_mode+0x8a>
  40308c:	68fb      	ldr	r3, [r7, #12]
  40308e:	69ba      	ldr	r2, [r7, #24]
  403090:	651a      	str	r2, [r3, #80]	; 0x50
  403092:	e002      	b.n	40309a <ioport_set_pin_mode+0x90>
  403094:	68fb      	ldr	r3, [r7, #12]
  403096:	69ba      	ldr	r2, [r7, #24]
  403098:	655a      	str	r2, [r3, #84]	; 0x54
  40309a:	697b      	ldr	r3, [r7, #20]
  40309c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4030a0:	2b00      	cmp	r3, #0
  4030a2:	d003      	beq.n	4030ac <ioport_set_pin_mode+0xa2>
  4030a4:	68fb      	ldr	r3, [r7, #12]
  4030a6:	69ba      	ldr	r2, [r7, #24]
  4030a8:	621a      	str	r2, [r3, #32]
  4030aa:	e002      	b.n	4030b2 <ioport_set_pin_mode+0xa8>
  4030ac:	68fb      	ldr	r3, [r7, #12]
  4030ae:	69ba      	ldr	r2, [r7, #24]
  4030b0:	625a      	str	r2, [r3, #36]	; 0x24
  4030b2:	697b      	ldr	r3, [r7, #20]
  4030b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4030b8:	2b00      	cmp	r3, #0
  4030ba:	d004      	beq.n	4030c6 <ioport_set_pin_mode+0xbc>
  4030bc:	68fb      	ldr	r3, [r7, #12]
  4030be:	69ba      	ldr	r2, [r7, #24]
  4030c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4030c4:	e003      	b.n	4030ce <ioport_set_pin_mode+0xc4>
  4030c6:	68fb      	ldr	r3, [r7, #12]
  4030c8:	69ba      	ldr	r2, [r7, #24]
  4030ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4030ce:	697b      	ldr	r3, [r7, #20]
  4030d0:	f003 0301 	and.w	r3, r3, #1
  4030d4:	2b00      	cmp	r3, #0
  4030d6:	d006      	beq.n	4030e6 <ioport_set_pin_mode+0xdc>
  4030d8:	68fb      	ldr	r3, [r7, #12]
  4030da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4030dc:	69bb      	ldr	r3, [r7, #24]
  4030de:	431a      	orrs	r2, r3
  4030e0:	68fb      	ldr	r3, [r7, #12]
  4030e2:	671a      	str	r2, [r3, #112]	; 0x70
  4030e4:	e006      	b.n	4030f4 <ioport_set_pin_mode+0xea>
  4030e6:	68fb      	ldr	r3, [r7, #12]
  4030e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4030ea:	69bb      	ldr	r3, [r7, #24]
  4030ec:	43db      	mvns	r3, r3
  4030ee:	401a      	ands	r2, r3
  4030f0:	68fb      	ldr	r3, [r7, #12]
  4030f2:	671a      	str	r2, [r3, #112]	; 0x70
  4030f4:	697b      	ldr	r3, [r7, #20]
  4030f6:	f003 0302 	and.w	r3, r3, #2
  4030fa:	2b00      	cmp	r3, #0
  4030fc:	d006      	beq.n	40310c <ioport_set_pin_mode+0x102>
  4030fe:	68fb      	ldr	r3, [r7, #12]
  403100:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403102:	69bb      	ldr	r3, [r7, #24]
  403104:	431a      	orrs	r2, r3
  403106:	68fb      	ldr	r3, [r7, #12]
  403108:	675a      	str	r2, [r3, #116]	; 0x74
  40310a:	e006      	b.n	40311a <ioport_set_pin_mode+0x110>
  40310c:	68fb      	ldr	r3, [r7, #12]
  40310e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403110:	69bb      	ldr	r3, [r7, #24]
  403112:	43db      	mvns	r3, r3
  403114:	401a      	ands	r2, r3
  403116:	68fb      	ldr	r3, [r7, #12]
  403118:	675a      	str	r2, [r3, #116]	; 0x74
  40311a:	bf00      	nop
  40311c:	3734      	adds	r7, #52	; 0x34
  40311e:	46bd      	mov	sp, r7
  403120:	f85d 7b04 	ldr.w	r7, [sp], #4
  403124:	4770      	bx	lr

00403126 <ioport_set_pin_dir>:
  403126:	b480      	push	{r7}
  403128:	b08d      	sub	sp, #52	; 0x34
  40312a:	af00      	add	r7, sp, #0
  40312c:	6078      	str	r0, [r7, #4]
  40312e:	460b      	mov	r3, r1
  403130:	70fb      	strb	r3, [r7, #3]
  403132:	687b      	ldr	r3, [r7, #4]
  403134:	62fb      	str	r3, [r7, #44]	; 0x2c
  403136:	78fb      	ldrb	r3, [r7, #3]
  403138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40313e:	627b      	str	r3, [r7, #36]	; 0x24
  403140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403142:	623b      	str	r3, [r7, #32]
  403144:	6a3b      	ldr	r3, [r7, #32]
  403146:	095b      	lsrs	r3, r3, #5
  403148:	61fb      	str	r3, [r7, #28]
  40314a:	69fb      	ldr	r3, [r7, #28]
  40314c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403150:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403154:	025b      	lsls	r3, r3, #9
  403156:	61bb      	str	r3, [r7, #24]
  403158:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40315c:	2b01      	cmp	r3, #1
  40315e:	d109      	bne.n	403174 <ioport_set_pin_dir+0x4e>
  403160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403162:	617b      	str	r3, [r7, #20]
  403164:	697b      	ldr	r3, [r7, #20]
  403166:	f003 031f 	and.w	r3, r3, #31
  40316a:	2201      	movs	r2, #1
  40316c:	409a      	lsls	r2, r3
  40316e:	69bb      	ldr	r3, [r7, #24]
  403170:	611a      	str	r2, [r3, #16]
  403172:	e00c      	b.n	40318e <ioport_set_pin_dir+0x68>
  403174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403178:	2b00      	cmp	r3, #0
  40317a:	d108      	bne.n	40318e <ioport_set_pin_dir+0x68>
  40317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40317e:	613b      	str	r3, [r7, #16]
  403180:	693b      	ldr	r3, [r7, #16]
  403182:	f003 031f 	and.w	r3, r3, #31
  403186:	2201      	movs	r2, #1
  403188:	409a      	lsls	r2, r3
  40318a:	69bb      	ldr	r3, [r7, #24]
  40318c:	615a      	str	r2, [r3, #20]
  40318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403190:	60fb      	str	r3, [r7, #12]
  403192:	68fb      	ldr	r3, [r7, #12]
  403194:	f003 031f 	and.w	r3, r3, #31
  403198:	2201      	movs	r2, #1
  40319a:	409a      	lsls	r2, r3
  40319c:	69bb      	ldr	r3, [r7, #24]
  40319e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4031a2:	bf00      	nop
  4031a4:	3734      	adds	r7, #52	; 0x34
  4031a6:	46bd      	mov	sp, r7
  4031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031ac:	4770      	bx	lr

004031ae <ioport_set_pin_level>:
  4031ae:	b480      	push	{r7}
  4031b0:	b08b      	sub	sp, #44	; 0x2c
  4031b2:	af00      	add	r7, sp, #0
  4031b4:	6078      	str	r0, [r7, #4]
  4031b6:	460b      	mov	r3, r1
  4031b8:	70fb      	strb	r3, [r7, #3]
  4031ba:	687b      	ldr	r3, [r7, #4]
  4031bc:	627b      	str	r3, [r7, #36]	; 0x24
  4031be:	78fb      	ldrb	r3, [r7, #3]
  4031c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4031c6:	61fb      	str	r3, [r7, #28]
  4031c8:	69fb      	ldr	r3, [r7, #28]
  4031ca:	61bb      	str	r3, [r7, #24]
  4031cc:	69bb      	ldr	r3, [r7, #24]
  4031ce:	095b      	lsrs	r3, r3, #5
  4031d0:	617b      	str	r3, [r7, #20]
  4031d2:	697b      	ldr	r3, [r7, #20]
  4031d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4031d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4031dc:	025b      	lsls	r3, r3, #9
  4031de:	613b      	str	r3, [r7, #16]
  4031e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4031e4:	2b00      	cmp	r3, #0
  4031e6:	d009      	beq.n	4031fc <ioport_set_pin_level+0x4e>
  4031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4031ea:	60fb      	str	r3, [r7, #12]
  4031ec:	68fb      	ldr	r3, [r7, #12]
  4031ee:	f003 031f 	and.w	r3, r3, #31
  4031f2:	2201      	movs	r2, #1
  4031f4:	409a      	lsls	r2, r3
  4031f6:	693b      	ldr	r3, [r7, #16]
  4031f8:	631a      	str	r2, [r3, #48]	; 0x30
  4031fa:	e008      	b.n	40320e <ioport_set_pin_level+0x60>
  4031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4031fe:	60bb      	str	r3, [r7, #8]
  403200:	68bb      	ldr	r3, [r7, #8]
  403202:	f003 031f 	and.w	r3, r3, #31
  403206:	2201      	movs	r2, #1
  403208:	409a      	lsls	r2, r3
  40320a:	693b      	ldr	r3, [r7, #16]
  40320c:	635a      	str	r2, [r3, #52]	; 0x34
  40320e:	bf00      	nop
  403210:	372c      	adds	r7, #44	; 0x2c
  403212:	46bd      	mov	sp, r7
  403214:	f85d 7b04 	ldr.w	r7, [sp], #4
  403218:	4770      	bx	lr
	...

0040321c <system_board_init_I2C>:
  40321c:	b580      	push	{r7, lr}
  40321e:	af00      	add	r7, sp, #0
  403220:	4b41      	ldr	r3, [pc, #260]	; (403328 <system_board_init_I2C+0x10c>)
  403222:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403226:	605a      	str	r2, [r3, #4]
  403228:	4b40      	ldr	r3, [pc, #256]	; (40332c <system_board_init_I2C+0x110>)
  40322a:	4798      	blx	r3
  40322c:	2101      	movs	r1, #1
  40322e:	202a      	movs	r0, #42	; 0x2a
  403230:	4b3f      	ldr	r3, [pc, #252]	; (403330 <system_board_init_I2C+0x114>)
  403232:	4798      	blx	r3
  403234:	2101      	movs	r1, #1
  403236:	202a      	movs	r0, #42	; 0x2a
  403238:	4b3e      	ldr	r3, [pc, #248]	; (403334 <system_board_init_I2C+0x118>)
  40323a:	4798      	blx	r3
  40323c:	2100      	movs	r1, #0
  40323e:	2002      	movs	r0, #2
  403240:	4b3b      	ldr	r3, [pc, #236]	; (403330 <system_board_init_I2C+0x114>)
  403242:	4798      	blx	r3
  403244:	2108      	movs	r1, #8
  403246:	2002      	movs	r0, #2
  403248:	4b3b      	ldr	r3, [pc, #236]	; (403338 <system_board_init_I2C+0x11c>)
  40324a:	4798      	blx	r3
  40324c:	2101      	movs	r1, #1
  40324e:	2001      	movs	r0, #1
  403250:	4b38      	ldr	r3, [pc, #224]	; (403334 <system_board_init_I2C+0x118>)
  403252:	4798      	blx	r3
  403254:	2101      	movs	r1, #1
  403256:	2001      	movs	r0, #1
  403258:	4b35      	ldr	r3, [pc, #212]	; (403330 <system_board_init_I2C+0x114>)
  40325a:	4798      	blx	r3
  40325c:	2101      	movs	r1, #1
  40325e:	202d      	movs	r0, #45	; 0x2d
  403260:	4b34      	ldr	r3, [pc, #208]	; (403334 <system_board_init_I2C+0x118>)
  403262:	4798      	blx	r3
  403264:	2101      	movs	r1, #1
  403266:	202d      	movs	r0, #45	; 0x2d
  403268:	4b31      	ldr	r3, [pc, #196]	; (403330 <system_board_init_I2C+0x114>)
  40326a:	4798      	blx	r3
  40326c:	2101      	movs	r1, #1
  40326e:	202f      	movs	r0, #47	; 0x2f
  403270:	4b30      	ldr	r3, [pc, #192]	; (403334 <system_board_init_I2C+0x118>)
  403272:	4798      	blx	r3
  403274:	2101      	movs	r1, #1
  403276:	202f      	movs	r0, #47	; 0x2f
  403278:	4b2d      	ldr	r3, [pc, #180]	; (403330 <system_board_init_I2C+0x114>)
  40327a:	4798      	blx	r3
  40327c:	2100      	movs	r1, #0
  40327e:	200b      	movs	r0, #11
  403280:	4b2d      	ldr	r3, [pc, #180]	; (403338 <system_board_init_I2C+0x11c>)
  403282:	4798      	blx	r3
  403284:	200b      	movs	r0, #11
  403286:	4b2d      	ldr	r3, [pc, #180]	; (40333c <system_board_init_I2C+0x120>)
  403288:	4798      	blx	r3
  40328a:	2100      	movs	r1, #0
  40328c:	2022      	movs	r0, #34	; 0x22
  40328e:	4b2a      	ldr	r3, [pc, #168]	; (403338 <system_board_init_I2C+0x11c>)
  403290:	4798      	blx	r3
  403292:	2022      	movs	r0, #34	; 0x22
  403294:	4b29      	ldr	r3, [pc, #164]	; (40333c <system_board_init_I2C+0x120>)
  403296:	4798      	blx	r3
  403298:	2100      	movs	r1, #0
  40329a:	2023      	movs	r0, #35	; 0x23
  40329c:	4b26      	ldr	r3, [pc, #152]	; (403338 <system_board_init_I2C+0x11c>)
  40329e:	4798      	blx	r3
  4032a0:	2023      	movs	r0, #35	; 0x23
  4032a2:	4b26      	ldr	r3, [pc, #152]	; (40333c <system_board_init_I2C+0x120>)
  4032a4:	4798      	blx	r3
  4032a6:	2100      	movs	r1, #0
  4032a8:	2003      	movs	r0, #3
  4032aa:	4b23      	ldr	r3, [pc, #140]	; (403338 <system_board_init_I2C+0x11c>)
  4032ac:	4798      	blx	r3
  4032ae:	2003      	movs	r0, #3
  4032b0:	4b22      	ldr	r3, [pc, #136]	; (40333c <system_board_init_I2C+0x120>)
  4032b2:	4798      	blx	r3
  4032b4:	2100      	movs	r1, #0
  4032b6:	2004      	movs	r0, #4
  4032b8:	4b1f      	ldr	r3, [pc, #124]	; (403338 <system_board_init_I2C+0x11c>)
  4032ba:	4798      	blx	r3
  4032bc:	2004      	movs	r0, #4
  4032be:	4b1f      	ldr	r3, [pc, #124]	; (40333c <system_board_init_I2C+0x120>)
  4032c0:	4798      	blx	r3
  4032c2:	2100      	movs	r1, #0
  4032c4:	2028      	movs	r0, #40	; 0x28
  4032c6:	4b1c      	ldr	r3, [pc, #112]	; (403338 <system_board_init_I2C+0x11c>)
  4032c8:	4798      	blx	r3
  4032ca:	2028      	movs	r0, #40	; 0x28
  4032cc:	4b1b      	ldr	r3, [pc, #108]	; (40333c <system_board_init_I2C+0x120>)
  4032ce:	4798      	blx	r3
  4032d0:	2100      	movs	r1, #0
  4032d2:	2029      	movs	r0, #41	; 0x29
  4032d4:	4b18      	ldr	r3, [pc, #96]	; (403338 <system_board_init_I2C+0x11c>)
  4032d6:	4798      	blx	r3
  4032d8:	2029      	movs	r0, #41	; 0x29
  4032da:	4b18      	ldr	r3, [pc, #96]	; (40333c <system_board_init_I2C+0x120>)
  4032dc:	4798      	blx	r3
  4032de:	2100      	movs	r1, #0
  4032e0:	2009      	movs	r0, #9
  4032e2:	4b15      	ldr	r3, [pc, #84]	; (403338 <system_board_init_I2C+0x11c>)
  4032e4:	4798      	blx	r3
  4032e6:	2009      	movs	r0, #9
  4032e8:	4b14      	ldr	r3, [pc, #80]	; (40333c <system_board_init_I2C+0x120>)
  4032ea:	4798      	blx	r3
  4032ec:	2100      	movs	r1, #0
  4032ee:	200a      	movs	r0, #10
  4032f0:	4b11      	ldr	r3, [pc, #68]	; (403338 <system_board_init_I2C+0x11c>)
  4032f2:	4798      	blx	r3
  4032f4:	200a      	movs	r0, #10
  4032f6:	4b11      	ldr	r3, [pc, #68]	; (40333c <system_board_init_I2C+0x120>)
  4032f8:	4798      	blx	r3
  4032fa:	2100      	movs	r1, #0
  4032fc:	2020      	movs	r0, #32
  4032fe:	4b0e      	ldr	r3, [pc, #56]	; (403338 <system_board_init_I2C+0x11c>)
  403300:	4798      	blx	r3
  403302:	2020      	movs	r0, #32
  403304:	4b0d      	ldr	r3, [pc, #52]	; (40333c <system_board_init_I2C+0x120>)
  403306:	4798      	blx	r3
  403308:	2100      	movs	r1, #0
  40330a:	2019      	movs	r0, #25
  40330c:	4b0a      	ldr	r3, [pc, #40]	; (403338 <system_board_init_I2C+0x11c>)
  40330e:	4798      	blx	r3
  403310:	2019      	movs	r0, #25
  403312:	4b0a      	ldr	r3, [pc, #40]	; (40333c <system_board_init_I2C+0x120>)
  403314:	4798      	blx	r3
  403316:	2100      	movs	r1, #0
  403318:	201a      	movs	r0, #26
  40331a:	4b07      	ldr	r3, [pc, #28]	; (403338 <system_board_init_I2C+0x11c>)
  40331c:	4798      	blx	r3
  40331e:	201a      	movs	r0, #26
  403320:	4b06      	ldr	r3, [pc, #24]	; (40333c <system_board_init_I2C+0x120>)
  403322:	4798      	blx	r3
  403324:	bf00      	nop
  403326:	bd80      	pop	{r7, pc}
  403328:	400e1450 	.word	0x400e1450
  40332c:	00402fa9 	.word	0x00402fa9
  403330:	00403127 	.word	0x00403127
  403334:	004031af 	.word	0x004031af
  403338:	0040300b 	.word	0x0040300b
  40333c:	00402fc1 	.word	0x00402fc1

00403340 <cpu_irq_save>:
  403340:	b480      	push	{r7}
  403342:	b083      	sub	sp, #12
  403344:	af00      	add	r7, sp, #0
  403346:	f3ef 8310 	mrs	r3, PRIMASK
  40334a:	607b      	str	r3, [r7, #4]
  40334c:	687b      	ldr	r3, [r7, #4]
  40334e:	2b00      	cmp	r3, #0
  403350:	bf0c      	ite	eq
  403352:	2301      	moveq	r3, #1
  403354:	2300      	movne	r3, #0
  403356:	b2db      	uxtb	r3, r3
  403358:	603b      	str	r3, [r7, #0]
  40335a:	b672      	cpsid	i
  40335c:	f3bf 8f5f 	dmb	sy
  403360:	4b04      	ldr	r3, [pc, #16]	; (403374 <cpu_irq_save+0x34>)
  403362:	2200      	movs	r2, #0
  403364:	701a      	strb	r2, [r3, #0]
  403366:	683b      	ldr	r3, [r7, #0]
  403368:	4618      	mov	r0, r3
  40336a:	370c      	adds	r7, #12
  40336c:	46bd      	mov	sp, r7
  40336e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403372:	4770      	bx	lr
  403374:	20000114 	.word	0x20000114

00403378 <cpu_irq_is_enabled_flags>:
  403378:	b480      	push	{r7}
  40337a:	b083      	sub	sp, #12
  40337c:	af00      	add	r7, sp, #0
  40337e:	6078      	str	r0, [r7, #4]
  403380:	687b      	ldr	r3, [r7, #4]
  403382:	2b00      	cmp	r3, #0
  403384:	bf14      	ite	ne
  403386:	2301      	movne	r3, #1
  403388:	2300      	moveq	r3, #0
  40338a:	b2db      	uxtb	r3, r3
  40338c:	4618      	mov	r0, r3
  40338e:	370c      	adds	r7, #12
  403390:	46bd      	mov	sp, r7
  403392:	f85d 7b04 	ldr.w	r7, [sp], #4
  403396:	4770      	bx	lr

00403398 <cpu_irq_restore>:
  403398:	b580      	push	{r7, lr}
  40339a:	b082      	sub	sp, #8
  40339c:	af00      	add	r7, sp, #0
  40339e:	6078      	str	r0, [r7, #4]
  4033a0:	6878      	ldr	r0, [r7, #4]
  4033a2:	4b07      	ldr	r3, [pc, #28]	; (4033c0 <cpu_irq_restore+0x28>)
  4033a4:	4798      	blx	r3
  4033a6:	4603      	mov	r3, r0
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	d005      	beq.n	4033b8 <cpu_irq_restore+0x20>
  4033ac:	4b05      	ldr	r3, [pc, #20]	; (4033c4 <cpu_irq_restore+0x2c>)
  4033ae:	2201      	movs	r2, #1
  4033b0:	701a      	strb	r2, [r3, #0]
  4033b2:	f3bf 8f5f 	dmb	sy
  4033b6:	b662      	cpsie	i
  4033b8:	bf00      	nop
  4033ba:	3708      	adds	r7, #8
  4033bc:	46bd      	mov	sp, r7
  4033be:	bd80      	pop	{r7, pc}
  4033c0:	00403379 	.word	0x00403379
  4033c4:	20000114 	.word	0x20000114

004033c8 <adc_get_interrupt_status>:
  4033c8:	b480      	push	{r7}
  4033ca:	b083      	sub	sp, #12
  4033cc:	af00      	add	r7, sp, #0
  4033ce:	6078      	str	r0, [r7, #4]
  4033d0:	687b      	ldr	r3, [r7, #4]
  4033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4033d4:	4618      	mov	r0, r3
  4033d6:	370c      	adds	r7, #12
  4033d8:	46bd      	mov	sp, r7
  4033da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033de:	4770      	bx	lr

004033e0 <sleepmgr_lock_mode>:
  4033e0:	b580      	push	{r7, lr}
  4033e2:	b084      	sub	sp, #16
  4033e4:	af00      	add	r7, sp, #0
  4033e6:	4603      	mov	r3, r0
  4033e8:	71fb      	strb	r3, [r7, #7]
  4033ea:	79fb      	ldrb	r3, [r7, #7]
  4033ec:	4a0a      	ldr	r2, [pc, #40]	; (403418 <sleepmgr_lock_mode+0x38>)
  4033ee:	5cd3      	ldrb	r3, [r2, r3]
  4033f0:	2bff      	cmp	r3, #255	; 0xff
  4033f2:	d100      	bne.n	4033f6 <sleepmgr_lock_mode+0x16>
  4033f4:	e7fe      	b.n	4033f4 <sleepmgr_lock_mode+0x14>
  4033f6:	4b09      	ldr	r3, [pc, #36]	; (40341c <sleepmgr_lock_mode+0x3c>)
  4033f8:	4798      	blx	r3
  4033fa:	60f8      	str	r0, [r7, #12]
  4033fc:	79fb      	ldrb	r3, [r7, #7]
  4033fe:	4a06      	ldr	r2, [pc, #24]	; (403418 <sleepmgr_lock_mode+0x38>)
  403400:	5cd2      	ldrb	r2, [r2, r3]
  403402:	3201      	adds	r2, #1
  403404:	b2d1      	uxtb	r1, r2
  403406:	4a04      	ldr	r2, [pc, #16]	; (403418 <sleepmgr_lock_mode+0x38>)
  403408:	54d1      	strb	r1, [r2, r3]
  40340a:	68f8      	ldr	r0, [r7, #12]
  40340c:	4b04      	ldr	r3, [pc, #16]	; (403420 <sleepmgr_lock_mode+0x40>)
  40340e:	4798      	blx	r3
  403410:	bf00      	nop
  403412:	3710      	adds	r7, #16
  403414:	46bd      	mov	sp, r7
  403416:	bd80      	pop	{r7, pc}
  403418:	20000870 	.word	0x20000870
  40341c:	00403341 	.word	0x00403341
  403420:	00403399 	.word	0x00403399

00403424 <osc_get_rate>:
  403424:	b480      	push	{r7}
  403426:	b083      	sub	sp, #12
  403428:	af00      	add	r7, sp, #0
  40342a:	6078      	str	r0, [r7, #4]
  40342c:	687b      	ldr	r3, [r7, #4]
  40342e:	2b07      	cmp	r3, #7
  403430:	d825      	bhi.n	40347e <osc_get_rate+0x5a>
  403432:	a201      	add	r2, pc, #4	; (adr r2, 403438 <osc_get_rate+0x14>)
  403434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403438:	00403459 	.word	0x00403459
  40343c:	0040345f 	.word	0x0040345f
  403440:	00403465 	.word	0x00403465
  403444:	0040346b 	.word	0x0040346b
  403448:	0040346f 	.word	0x0040346f
  40344c:	00403473 	.word	0x00403473
  403450:	00403477 	.word	0x00403477
  403454:	0040347b 	.word	0x0040347b
  403458:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40345c:	e010      	b.n	403480 <osc_get_rate+0x5c>
  40345e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403462:	e00d      	b.n	403480 <osc_get_rate+0x5c>
  403464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403468:	e00a      	b.n	403480 <osc_get_rate+0x5c>
  40346a:	4b08      	ldr	r3, [pc, #32]	; (40348c <osc_get_rate+0x68>)
  40346c:	e008      	b.n	403480 <osc_get_rate+0x5c>
  40346e:	4b08      	ldr	r3, [pc, #32]	; (403490 <osc_get_rate+0x6c>)
  403470:	e006      	b.n	403480 <osc_get_rate+0x5c>
  403472:	4b08      	ldr	r3, [pc, #32]	; (403494 <osc_get_rate+0x70>)
  403474:	e004      	b.n	403480 <osc_get_rate+0x5c>
  403476:	2300      	movs	r3, #0
  403478:	e002      	b.n	403480 <osc_get_rate+0x5c>
  40347a:	2300      	movs	r3, #0
  40347c:	e000      	b.n	403480 <osc_get_rate+0x5c>
  40347e:	2300      	movs	r3, #0
  403480:	4618      	mov	r0, r3
  403482:	370c      	adds	r7, #12
  403484:	46bd      	mov	sp, r7
  403486:	f85d 7b04 	ldr.w	r7, [sp], #4
  40348a:	4770      	bx	lr
  40348c:	007a1200 	.word	0x007a1200
  403490:	00f42400 	.word	0x00f42400
  403494:	016e3600 	.word	0x016e3600

00403498 <sysclk_get_main_hz>:
  403498:	b580      	push	{r7, lr}
  40349a:	af00      	add	r7, sp, #0
  40349c:	2001      	movs	r0, #1
  40349e:	4b04      	ldr	r3, [pc, #16]	; (4034b0 <sysclk_get_main_hz+0x18>)
  4034a0:	4798      	blx	r3
  4034a2:	4602      	mov	r2, r0
  4034a4:	f640 634e 	movw	r3, #3662	; 0xe4e
  4034a8:	fb03 f302 	mul.w	r3, r3, r2
  4034ac:	4618      	mov	r0, r3
  4034ae:	bd80      	pop	{r7, pc}
  4034b0:	00403425 	.word	0x00403425

004034b4 <sysclk_get_cpu_hz>:
  4034b4:	b580      	push	{r7, lr}
  4034b6:	af00      	add	r7, sp, #0
  4034b8:	4b02      	ldr	r3, [pc, #8]	; (4034c4 <sysclk_get_cpu_hz+0x10>)
  4034ba:	4798      	blx	r3
  4034bc:	4603      	mov	r3, r0
  4034be:	4618      	mov	r0, r3
  4034c0:	bd80      	pop	{r7, pc}
  4034c2:	bf00      	nop
  4034c4:	00403499 	.word	0x00403499

004034c8 <adc_get_config_defaults>:
  4034c8:	b580      	push	{r7, lr}
  4034ca:	b082      	sub	sp, #8
  4034cc:	af00      	add	r7, sp, #0
  4034ce:	6078      	str	r0, [r7, #4]
  4034d0:	687b      	ldr	r3, [r7, #4]
  4034d2:	2200      	movs	r2, #0
  4034d4:	601a      	str	r2, [r3, #0]
  4034d6:	4b0f      	ldr	r3, [pc, #60]	; (403514 <adc_get_config_defaults+0x4c>)
  4034d8:	4798      	blx	r3
  4034da:	4602      	mov	r2, r0
  4034dc:	687b      	ldr	r3, [r7, #4]
  4034de:	605a      	str	r2, [r3, #4]
  4034e0:	687b      	ldr	r3, [r7, #4]
  4034e2:	4a0d      	ldr	r2, [pc, #52]	; (403518 <adc_get_config_defaults+0x50>)
  4034e4:	609a      	str	r2, [r3, #8]
  4034e6:	687b      	ldr	r3, [r7, #4]
  4034e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4034ec:	60da      	str	r2, [r3, #12]
  4034ee:	687b      	ldr	r3, [r7, #4]
  4034f0:	2202      	movs	r2, #2
  4034f2:	741a      	strb	r2, [r3, #16]
  4034f4:	687b      	ldr	r3, [r7, #4]
  4034f6:	2202      	movs	r2, #2
  4034f8:	745a      	strb	r2, [r3, #17]
  4034fa:	687b      	ldr	r3, [r7, #4]
  4034fc:	2200      	movs	r2, #0
  4034fe:	749a      	strb	r2, [r3, #18]
  403500:	687b      	ldr	r3, [r7, #4]
  403502:	2200      	movs	r2, #0
  403504:	74da      	strb	r2, [r3, #19]
  403506:	687b      	ldr	r3, [r7, #4]
  403508:	2200      	movs	r2, #0
  40350a:	751a      	strb	r2, [r3, #20]
  40350c:	bf00      	nop
  40350e:	3708      	adds	r7, #8
  403510:	46bd      	mov	sp, r7
  403512:	bd80      	pop	{r7, pc}
  403514:	004034b5 	.word	0x004034b5
  403518:	005b8d80 	.word	0x005b8d80

0040351c <adc_set_config>:
  40351c:	b580      	push	{r7, lr}
  40351e:	b084      	sub	sp, #16
  403520:	af00      	add	r7, sp, #0
  403522:	6078      	str	r0, [r7, #4]
  403524:	6039      	str	r1, [r7, #0]
  403526:	2300      	movs	r3, #0
  403528:	60fb      	str	r3, [r7, #12]
  40352a:	683b      	ldr	r3, [r7, #0]
  40352c:	7c9b      	ldrb	r3, [r3, #18]
  40352e:	2b00      	cmp	r3, #0
  403530:	d002      	beq.n	403538 <adc_set_config+0x1c>
  403532:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403536:	e000      	b.n	40353a <adc_set_config+0x1e>
  403538:	2200      	movs	r2, #0
  40353a:	683b      	ldr	r3, [r7, #0]
  40353c:	6859      	ldr	r1, [r3, #4]
  40353e:	683b      	ldr	r3, [r7, #0]
  403540:	689b      	ldr	r3, [r3, #8]
  403542:	005b      	lsls	r3, r3, #1
  403544:	fbb1 f3f3 	udiv	r3, r1, r3
  403548:	3b01      	subs	r3, #1
  40354a:	021b      	lsls	r3, r3, #8
  40354c:	b29b      	uxth	r3, r3
  40354e:	431a      	orrs	r2, r3
  403550:	683b      	ldr	r3, [r7, #0]
  403552:	7c1b      	ldrb	r3, [r3, #16]
  403554:	061b      	lsls	r3, r3, #24
  403556:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  40355a:	431a      	orrs	r2, r3
  40355c:	683b      	ldr	r3, [r7, #0]
  40355e:	7c5b      	ldrb	r3, [r3, #17]
  403560:	071b      	lsls	r3, r3, #28
  403562:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  403566:	431a      	orrs	r2, r3
  403568:	683b      	ldr	r3, [r7, #0]
  40356a:	68db      	ldr	r3, [r3, #12]
  40356c:	4313      	orrs	r3, r2
  40356e:	60fb      	str	r3, [r7, #12]
  403570:	687b      	ldr	r3, [r7, #4]
  403572:	68fa      	ldr	r2, [r7, #12]
  403574:	605a      	str	r2, [r3, #4]
  403576:	683b      	ldr	r3, [r7, #0]
  403578:	7cdb      	ldrb	r3, [r3, #19]
  40357a:	2b00      	cmp	r3, #0
  40357c:	d002      	beq.n	403584 <adc_set_config+0x68>
  40357e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  403582:	e000      	b.n	403586 <adc_set_config+0x6a>
  403584:	2200      	movs	r2, #0
  403586:	683b      	ldr	r3, [r7, #0]
  403588:	7d1b      	ldrb	r3, [r3, #20]
  40358a:	2b00      	cmp	r3, #0
  40358c:	d002      	beq.n	403594 <adc_set_config+0x78>
  40358e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  403592:	e000      	b.n	403596 <adc_set_config+0x7a>
  403594:	2300      	movs	r3, #0
  403596:	431a      	orrs	r2, r3
  403598:	687b      	ldr	r3, [r7, #4]
  40359a:	641a      	str	r2, [r3, #64]	; 0x40
  40359c:	683b      	ldr	r3, [r7, #0]
  40359e:	681b      	ldr	r3, [r3, #0]
  4035a0:	4619      	mov	r1, r3
  4035a2:	6878      	ldr	r0, [r7, #4]
  4035a4:	4b02      	ldr	r3, [pc, #8]	; (4035b0 <adc_set_config+0x94>)
  4035a6:	4798      	blx	r3
  4035a8:	bf00      	nop
  4035aa:	3710      	adds	r7, #16
  4035ac:	46bd      	mov	sp, r7
  4035ae:	bd80      	pop	{r7, pc}
  4035b0:	00403615 	.word	0x00403615

004035b4 <adc_init>:
  4035b4:	b580      	push	{r7, lr}
  4035b6:	b084      	sub	sp, #16
  4035b8:	af00      	add	r7, sp, #0
  4035ba:	6078      	str	r0, [r7, #4]
  4035bc:	6039      	str	r1, [r7, #0]
  4035be:	6878      	ldr	r0, [r7, #4]
  4035c0:	4b11      	ldr	r3, [pc, #68]	; (403608 <adc_init+0x54>)
  4035c2:	4798      	blx	r3
  4035c4:	4603      	mov	r3, r0
  4035c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4035ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4035ce:	d101      	bne.n	4035d4 <adc_init+0x20>
  4035d0:	2319      	movs	r3, #25
  4035d2:	e015      	b.n	403600 <adc_init+0x4c>
  4035d4:	687b      	ldr	r3, [r7, #4]
  4035d6:	2201      	movs	r2, #1
  4035d8:	601a      	str	r2, [r3, #0]
  4035da:	6839      	ldr	r1, [r7, #0]
  4035dc:	6878      	ldr	r0, [r7, #4]
  4035de:	4b0b      	ldr	r3, [pc, #44]	; (40360c <adc_init+0x58>)
  4035e0:	4798      	blx	r3
  4035e2:	2300      	movs	r3, #0
  4035e4:	60fb      	str	r3, [r7, #12]
  4035e6:	e007      	b.n	4035f8 <adc_init+0x44>
  4035e8:	4a09      	ldr	r2, [pc, #36]	; (403610 <adc_init+0x5c>)
  4035ea:	68fb      	ldr	r3, [r7, #12]
  4035ec:	2100      	movs	r1, #0
  4035ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  4035f2:	68fb      	ldr	r3, [r7, #12]
  4035f4:	3301      	adds	r3, #1
  4035f6:	60fb      	str	r3, [r7, #12]
  4035f8:	68fb      	ldr	r3, [r7, #12]
  4035fa:	2b17      	cmp	r3, #23
  4035fc:	d9f4      	bls.n	4035e8 <adc_init+0x34>
  4035fe:	2300      	movs	r3, #0
  403600:	4618      	mov	r0, r3
  403602:	3710      	adds	r7, #16
  403604:	46bd      	mov	sp, r7
  403606:	bd80      	pop	{r7, pc}
  403608:	004033c9 	.word	0x004033c9
  40360c:	0040351d 	.word	0x0040351d
  403610:	20000898 	.word	0x20000898

00403614 <adc_set_resolution>:
  403614:	b480      	push	{r7}
  403616:	b083      	sub	sp, #12
  403618:	af00      	add	r7, sp, #0
  40361a:	6078      	str	r0, [r7, #4]
  40361c:	6039      	str	r1, [r7, #0]
  40361e:	687b      	ldr	r3, [r7, #4]
  403620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  403622:	683b      	ldr	r3, [r7, #0]
  403624:	431a      	orrs	r2, r3
  403626:	687b      	ldr	r3, [r7, #4]
  403628:	641a      	str	r2, [r3, #64]	; 0x40
  40362a:	bf00      	nop
  40362c:	370c      	adds	r7, #12
  40362e:	46bd      	mov	sp, r7
  403630:	f85d 7b04 	ldr.w	r7, [sp], #4
  403634:	4770      	bx	lr
	...

00403638 <adc_interrupt>:
  403638:	b580      	push	{r7, lr}
  40363a:	b082      	sub	sp, #8
  40363c:	af00      	add	r7, sp, #0
  40363e:	6078      	str	r0, [r7, #4]
  403640:	4a07      	ldr	r2, [pc, #28]	; (403660 <adc_interrupt+0x28>)
  403642:	687b      	ldr	r3, [r7, #4]
  403644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403648:	2b00      	cmp	r3, #0
  40364a:	d004      	beq.n	403656 <adc_interrupt+0x1e>
  40364c:	4a04      	ldr	r2, [pc, #16]	; (403660 <adc_interrupt+0x28>)
  40364e:	687b      	ldr	r3, [r7, #4]
  403650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403654:	4798      	blx	r3
  403656:	bf00      	nop
  403658:	3708      	adds	r7, #8
  40365a:	46bd      	mov	sp, r7
  40365c:	bd80      	pop	{r7, pc}
  40365e:	bf00      	nop
  403660:	20000898 	.word	0x20000898

00403664 <adc_process_callback>:
  403664:	b580      	push	{r7, lr}
  403666:	b084      	sub	sp, #16
  403668:	af00      	add	r7, sp, #0
  40366a:	6078      	str	r0, [r7, #4]
  40366c:	6878      	ldr	r0, [r7, #4]
  40366e:	4b0e      	ldr	r3, [pc, #56]	; (4036a8 <adc_process_callback+0x44>)
  403670:	4798      	blx	r3
  403672:	4603      	mov	r3, r0
  403674:	60bb      	str	r3, [r7, #8]
  403676:	2300      	movs	r3, #0
  403678:	60fb      	str	r3, [r7, #12]
  40367a:	e00d      	b.n	403698 <adc_process_callback+0x34>
  40367c:	4a0b      	ldr	r2, [pc, #44]	; (4036ac <adc_process_callback+0x48>)
  40367e:	68fb      	ldr	r3, [r7, #12]
  403680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  403684:	68bb      	ldr	r3, [r7, #8]
  403686:	4013      	ands	r3, r2
  403688:	2b00      	cmp	r3, #0
  40368a:	d002      	beq.n	403692 <adc_process_callback+0x2e>
  40368c:	68f8      	ldr	r0, [r7, #12]
  40368e:	4b08      	ldr	r3, [pc, #32]	; (4036b0 <adc_process_callback+0x4c>)
  403690:	4798      	blx	r3
  403692:	68fb      	ldr	r3, [r7, #12]
  403694:	3301      	adds	r3, #1
  403696:	60fb      	str	r3, [r7, #12]
  403698:	68fb      	ldr	r3, [r7, #12]
  40369a:	2b17      	cmp	r3, #23
  40369c:	d9ee      	bls.n	40367c <adc_process_callback+0x18>
  40369e:	bf00      	nop
  4036a0:	3710      	adds	r7, #16
  4036a2:	46bd      	mov	sp, r7
  4036a4:	bd80      	pop	{r7, pc}
  4036a6:	bf00      	nop
  4036a8:	004033c9 	.word	0x004033c9
  4036ac:	0040c404 	.word	0x0040c404
  4036b0:	00403639 	.word	0x00403639

004036b4 <ADC_Handler>:
  4036b4:	b580      	push	{r7, lr}
  4036b6:	af00      	add	r7, sp, #0
  4036b8:	4802      	ldr	r0, [pc, #8]	; (4036c4 <ADC_Handler+0x10>)
  4036ba:	4b03      	ldr	r3, [pc, #12]	; (4036c8 <ADC_Handler+0x14>)
  4036bc:	4798      	blx	r3
  4036be:	bf00      	nop
  4036c0:	bd80      	pop	{r7, pc}
  4036c2:	bf00      	nop
  4036c4:	40038000 	.word	0x40038000
  4036c8:	00403665 	.word	0x00403665

004036cc <adc_enable>:
  4036cc:	b580      	push	{r7, lr}
  4036ce:	af00      	add	r7, sp, #0
  4036d0:	201d      	movs	r0, #29
  4036d2:	4b03      	ldr	r3, [pc, #12]	; (4036e0 <adc_enable+0x14>)
  4036d4:	4798      	blx	r3
  4036d6:	2000      	movs	r0, #0
  4036d8:	4b02      	ldr	r3, [pc, #8]	; (4036e4 <adc_enable+0x18>)
  4036da:	4798      	blx	r3
  4036dc:	bf00      	nop
  4036de:	bd80      	pop	{r7, pc}
  4036e0:	00404305 	.word	0x00404305
  4036e4:	004033e1 	.word	0x004033e1

004036e8 <cpu_irq_save>:
  4036e8:	b480      	push	{r7}
  4036ea:	b083      	sub	sp, #12
  4036ec:	af00      	add	r7, sp, #0
  4036ee:	f3ef 8310 	mrs	r3, PRIMASK
  4036f2:	607b      	str	r3, [r7, #4]
  4036f4:	687b      	ldr	r3, [r7, #4]
  4036f6:	2b00      	cmp	r3, #0
  4036f8:	bf0c      	ite	eq
  4036fa:	2301      	moveq	r3, #1
  4036fc:	2300      	movne	r3, #0
  4036fe:	b2db      	uxtb	r3, r3
  403700:	603b      	str	r3, [r7, #0]
  403702:	b672      	cpsid	i
  403704:	f3bf 8f5f 	dmb	sy
  403708:	4b04      	ldr	r3, [pc, #16]	; (40371c <cpu_irq_save+0x34>)
  40370a:	2200      	movs	r2, #0
  40370c:	701a      	strb	r2, [r3, #0]
  40370e:	683b      	ldr	r3, [r7, #0]
  403710:	4618      	mov	r0, r3
  403712:	370c      	adds	r7, #12
  403714:	46bd      	mov	sp, r7
  403716:	f85d 7b04 	ldr.w	r7, [sp], #4
  40371a:	4770      	bx	lr
  40371c:	20000114 	.word	0x20000114

00403720 <cpu_irq_is_enabled_flags>:
  403720:	b480      	push	{r7}
  403722:	b083      	sub	sp, #12
  403724:	af00      	add	r7, sp, #0
  403726:	6078      	str	r0, [r7, #4]
  403728:	687b      	ldr	r3, [r7, #4]
  40372a:	2b00      	cmp	r3, #0
  40372c:	bf14      	ite	ne
  40372e:	2301      	movne	r3, #1
  403730:	2300      	moveq	r3, #0
  403732:	b2db      	uxtb	r3, r3
  403734:	4618      	mov	r0, r3
  403736:	370c      	adds	r7, #12
  403738:	46bd      	mov	sp, r7
  40373a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40373e:	4770      	bx	lr

00403740 <cpu_irq_restore>:
  403740:	b580      	push	{r7, lr}
  403742:	b082      	sub	sp, #8
  403744:	af00      	add	r7, sp, #0
  403746:	6078      	str	r0, [r7, #4]
  403748:	6878      	ldr	r0, [r7, #4]
  40374a:	4b07      	ldr	r3, [pc, #28]	; (403768 <cpu_irq_restore+0x28>)
  40374c:	4798      	blx	r3
  40374e:	4603      	mov	r3, r0
  403750:	2b00      	cmp	r3, #0
  403752:	d005      	beq.n	403760 <cpu_irq_restore+0x20>
  403754:	4b05      	ldr	r3, [pc, #20]	; (40376c <cpu_irq_restore+0x2c>)
  403756:	2201      	movs	r2, #1
  403758:	701a      	strb	r2, [r3, #0]
  40375a:	f3bf 8f5f 	dmb	sy
  40375e:	b662      	cpsie	i
  403760:	bf00      	nop
  403762:	3708      	adds	r7, #8
  403764:	46bd      	mov	sp, r7
  403766:	bd80      	pop	{r7, pc}
  403768:	00403721 	.word	0x00403721
  40376c:	20000114 	.word	0x20000114

00403770 <sysclk_enable_peripheral_clock>:
  403770:	b580      	push	{r7, lr}
  403772:	b082      	sub	sp, #8
  403774:	af00      	add	r7, sp, #0
  403776:	6078      	str	r0, [r7, #4]
  403778:	6878      	ldr	r0, [r7, #4]
  40377a:	4b03      	ldr	r3, [pc, #12]	; (403788 <sysclk_enable_peripheral_clock+0x18>)
  40377c:	4798      	blx	r3
  40377e:	bf00      	nop
  403780:	3708      	adds	r7, #8
  403782:	46bd      	mov	sp, r7
  403784:	bd80      	pop	{r7, pc}
  403786:	bf00      	nop
  403788:	00404305 	.word	0x00404305

0040378c <sleepmgr_lock_mode>:
  40378c:	b580      	push	{r7, lr}
  40378e:	b084      	sub	sp, #16
  403790:	af00      	add	r7, sp, #0
  403792:	4603      	mov	r3, r0
  403794:	71fb      	strb	r3, [r7, #7]
  403796:	79fb      	ldrb	r3, [r7, #7]
  403798:	4a0a      	ldr	r2, [pc, #40]	; (4037c4 <sleepmgr_lock_mode+0x38>)
  40379a:	5cd3      	ldrb	r3, [r2, r3]
  40379c:	2bff      	cmp	r3, #255	; 0xff
  40379e:	d100      	bne.n	4037a2 <sleepmgr_lock_mode+0x16>
  4037a0:	e7fe      	b.n	4037a0 <sleepmgr_lock_mode+0x14>
  4037a2:	4b09      	ldr	r3, [pc, #36]	; (4037c8 <sleepmgr_lock_mode+0x3c>)
  4037a4:	4798      	blx	r3
  4037a6:	60f8      	str	r0, [r7, #12]
  4037a8:	79fb      	ldrb	r3, [r7, #7]
  4037aa:	4a06      	ldr	r2, [pc, #24]	; (4037c4 <sleepmgr_lock_mode+0x38>)
  4037ac:	5cd2      	ldrb	r2, [r2, r3]
  4037ae:	3201      	adds	r2, #1
  4037b0:	b2d1      	uxtb	r1, r2
  4037b2:	4a04      	ldr	r2, [pc, #16]	; (4037c4 <sleepmgr_lock_mode+0x38>)
  4037b4:	54d1      	strb	r1, [r2, r3]
  4037b6:	68f8      	ldr	r0, [r7, #12]
  4037b8:	4b04      	ldr	r3, [pc, #16]	; (4037cc <sleepmgr_lock_mode+0x40>)
  4037ba:	4798      	blx	r3
  4037bc:	bf00      	nop
  4037be:	3710      	adds	r7, #16
  4037c0:	46bd      	mov	sp, r7
  4037c2:	bd80      	pop	{r7, pc}
  4037c4:	20000870 	.word	0x20000870
  4037c8:	004036e9 	.word	0x004036e9
  4037cc:	00403741 	.word	0x00403741

004037d0 <flexcom_enable>:
  4037d0:	b580      	push	{r7, lr}
  4037d2:	b082      	sub	sp, #8
  4037d4:	af00      	add	r7, sp, #0
  4037d6:	6078      	str	r0, [r7, #4]
  4037d8:	2000      	movs	r0, #0
  4037da:	4b4a      	ldr	r3, [pc, #296]	; (403904 <flexcom_enable+0x134>)
  4037dc:	4798      	blx	r3
  4037de:	687b      	ldr	r3, [r7, #4]
  4037e0:	4a49      	ldr	r2, [pc, #292]	; (403908 <flexcom_enable+0x138>)
  4037e2:	4293      	cmp	r3, r2
  4037e4:	d10d      	bne.n	403802 <flexcom_enable+0x32>
  4037e6:	2007      	movs	r0, #7
  4037e8:	4b48      	ldr	r3, [pc, #288]	; (40390c <flexcom_enable+0x13c>)
  4037ea:	4798      	blx	r3
  4037ec:	2007      	movs	r0, #7
  4037ee:	4b48      	ldr	r3, [pc, #288]	; (403910 <flexcom_enable+0x140>)
  4037f0:	4798      	blx	r3
  4037f2:	2100      	movs	r1, #0
  4037f4:	2007      	movs	r0, #7
  4037f6:	4b47      	ldr	r3, [pc, #284]	; (403914 <flexcom_enable+0x144>)
  4037f8:	4798      	blx	r3
  4037fa:	2007      	movs	r0, #7
  4037fc:	4b46      	ldr	r3, [pc, #280]	; (403918 <flexcom_enable+0x148>)
  4037fe:	4798      	blx	r3
  403800:	e07c      	b.n	4038fc <flexcom_enable+0x12c>
  403802:	687b      	ldr	r3, [r7, #4]
  403804:	4a45      	ldr	r2, [pc, #276]	; (40391c <flexcom_enable+0x14c>)
  403806:	4293      	cmp	r3, r2
  403808:	d10d      	bne.n	403826 <flexcom_enable+0x56>
  40380a:	2016      	movs	r0, #22
  40380c:	4b3f      	ldr	r3, [pc, #252]	; (40390c <flexcom_enable+0x13c>)
  40380e:	4798      	blx	r3
  403810:	2007      	movs	r0, #7
  403812:	4b3f      	ldr	r3, [pc, #252]	; (403910 <flexcom_enable+0x140>)
  403814:	4798      	blx	r3
  403816:	2100      	movs	r1, #0
  403818:	2007      	movs	r0, #7
  40381a:	4b3e      	ldr	r3, [pc, #248]	; (403914 <flexcom_enable+0x144>)
  40381c:	4798      	blx	r3
  40381e:	2007      	movs	r0, #7
  403820:	4b3d      	ldr	r3, [pc, #244]	; (403918 <flexcom_enable+0x148>)
  403822:	4798      	blx	r3
  403824:	e06a      	b.n	4038fc <flexcom_enable+0x12c>
  403826:	687b      	ldr	r3, [r7, #4]
  403828:	4a3d      	ldr	r2, [pc, #244]	; (403920 <flexcom_enable+0x150>)
  40382a:	4293      	cmp	r3, r2
  40382c:	d10d      	bne.n	40384a <flexcom_enable+0x7a>
  40382e:	2015      	movs	r0, #21
  403830:	4b36      	ldr	r3, [pc, #216]	; (40390c <flexcom_enable+0x13c>)
  403832:	4798      	blx	r3
  403834:	2007      	movs	r0, #7
  403836:	4b36      	ldr	r3, [pc, #216]	; (403910 <flexcom_enable+0x140>)
  403838:	4798      	blx	r3
  40383a:	2100      	movs	r1, #0
  40383c:	2007      	movs	r0, #7
  40383e:	4b35      	ldr	r3, [pc, #212]	; (403914 <flexcom_enable+0x144>)
  403840:	4798      	blx	r3
  403842:	2007      	movs	r0, #7
  403844:	4b34      	ldr	r3, [pc, #208]	; (403918 <flexcom_enable+0x148>)
  403846:	4798      	blx	r3
  403848:	e058      	b.n	4038fc <flexcom_enable+0x12c>
  40384a:	687b      	ldr	r3, [r7, #4]
  40384c:	4a35      	ldr	r2, [pc, #212]	; (403924 <flexcom_enable+0x154>)
  40384e:	4293      	cmp	r3, r2
  403850:	d10d      	bne.n	40386e <flexcom_enable+0x9e>
  403852:	2014      	movs	r0, #20
  403854:	4b2d      	ldr	r3, [pc, #180]	; (40390c <flexcom_enable+0x13c>)
  403856:	4798      	blx	r3
  403858:	2007      	movs	r0, #7
  40385a:	4b2d      	ldr	r3, [pc, #180]	; (403910 <flexcom_enable+0x140>)
  40385c:	4798      	blx	r3
  40385e:	2100      	movs	r1, #0
  403860:	2007      	movs	r0, #7
  403862:	4b2c      	ldr	r3, [pc, #176]	; (403914 <flexcom_enable+0x144>)
  403864:	4798      	blx	r3
  403866:	2007      	movs	r0, #7
  403868:	4b2b      	ldr	r3, [pc, #172]	; (403918 <flexcom_enable+0x148>)
  40386a:	4798      	blx	r3
  40386c:	e046      	b.n	4038fc <flexcom_enable+0x12c>
  40386e:	687b      	ldr	r3, [r7, #4]
  403870:	4a2d      	ldr	r2, [pc, #180]	; (403928 <flexcom_enable+0x158>)
  403872:	4293      	cmp	r3, r2
  403874:	d10d      	bne.n	403892 <flexcom_enable+0xc2>
  403876:	2013      	movs	r0, #19
  403878:	4b24      	ldr	r3, [pc, #144]	; (40390c <flexcom_enable+0x13c>)
  40387a:	4798      	blx	r3
  40387c:	2006      	movs	r0, #6
  40387e:	4b24      	ldr	r3, [pc, #144]	; (403910 <flexcom_enable+0x140>)
  403880:	4798      	blx	r3
  403882:	2100      	movs	r1, #0
  403884:	2006      	movs	r0, #6
  403886:	4b23      	ldr	r3, [pc, #140]	; (403914 <flexcom_enable+0x144>)
  403888:	4798      	blx	r3
  40388a:	2006      	movs	r0, #6
  40388c:	4b22      	ldr	r3, [pc, #136]	; (403918 <flexcom_enable+0x148>)
  40388e:	4798      	blx	r3
  403890:	e034      	b.n	4038fc <flexcom_enable+0x12c>
  403892:	687b      	ldr	r3, [r7, #4]
  403894:	4a25      	ldr	r2, [pc, #148]	; (40392c <flexcom_enable+0x15c>)
  403896:	4293      	cmp	r3, r2
  403898:	d10d      	bne.n	4038b6 <flexcom_enable+0xe6>
  40389a:	200e      	movs	r0, #14
  40389c:	4b1b      	ldr	r3, [pc, #108]	; (40390c <flexcom_enable+0x13c>)
  40389e:	4798      	blx	r3
  4038a0:	2006      	movs	r0, #6
  4038a2:	4b1b      	ldr	r3, [pc, #108]	; (403910 <flexcom_enable+0x140>)
  4038a4:	4798      	blx	r3
  4038a6:	2100      	movs	r1, #0
  4038a8:	2006      	movs	r0, #6
  4038aa:	4b1a      	ldr	r3, [pc, #104]	; (403914 <flexcom_enable+0x144>)
  4038ac:	4798      	blx	r3
  4038ae:	2006      	movs	r0, #6
  4038b0:	4b19      	ldr	r3, [pc, #100]	; (403918 <flexcom_enable+0x148>)
  4038b2:	4798      	blx	r3
  4038b4:	e022      	b.n	4038fc <flexcom_enable+0x12c>
  4038b6:	687b      	ldr	r3, [r7, #4]
  4038b8:	4a1d      	ldr	r2, [pc, #116]	; (403930 <flexcom_enable+0x160>)
  4038ba:	4293      	cmp	r3, r2
  4038bc:	d10d      	bne.n	4038da <flexcom_enable+0x10a>
  4038be:	2009      	movs	r0, #9
  4038c0:	4b12      	ldr	r3, [pc, #72]	; (40390c <flexcom_enable+0x13c>)
  4038c2:	4798      	blx	r3
  4038c4:	2006      	movs	r0, #6
  4038c6:	4b12      	ldr	r3, [pc, #72]	; (403910 <flexcom_enable+0x140>)
  4038c8:	4798      	blx	r3
  4038ca:	2100      	movs	r1, #0
  4038cc:	2006      	movs	r0, #6
  4038ce:	4b11      	ldr	r3, [pc, #68]	; (403914 <flexcom_enable+0x144>)
  4038d0:	4798      	blx	r3
  4038d2:	2006      	movs	r0, #6
  4038d4:	4b10      	ldr	r3, [pc, #64]	; (403918 <flexcom_enable+0x148>)
  4038d6:	4798      	blx	r3
  4038d8:	e010      	b.n	4038fc <flexcom_enable+0x12c>
  4038da:	687b      	ldr	r3, [r7, #4]
  4038dc:	4a15      	ldr	r2, [pc, #84]	; (403934 <flexcom_enable+0x164>)
  4038de:	4293      	cmp	r3, r2
  4038e0:	d10c      	bne.n	4038fc <flexcom_enable+0x12c>
  4038e2:	2008      	movs	r0, #8
  4038e4:	4b09      	ldr	r3, [pc, #36]	; (40390c <flexcom_enable+0x13c>)
  4038e6:	4798      	blx	r3
  4038e8:	2006      	movs	r0, #6
  4038ea:	4b09      	ldr	r3, [pc, #36]	; (403910 <flexcom_enable+0x140>)
  4038ec:	4798      	blx	r3
  4038ee:	2100      	movs	r1, #0
  4038f0:	2006      	movs	r0, #6
  4038f2:	4b08      	ldr	r3, [pc, #32]	; (403914 <flexcom_enable+0x144>)
  4038f4:	4798      	blx	r3
  4038f6:	2006      	movs	r0, #6
  4038f8:	4b07      	ldr	r3, [pc, #28]	; (403918 <flexcom_enable+0x148>)
  4038fa:	4798      	blx	r3
  4038fc:	bf00      	nop
  4038fe:	3708      	adds	r7, #8
  403900:	46bd      	mov	sp, r7
  403902:	bd80      	pop	{r7, pc}
  403904:	0040378d 	.word	0x0040378d
  403908:	40034000 	.word	0x40034000
  40390c:	00403771 	.word	0x00403771
  403910:	00404461 	.word	0x00404461
  403914:	004043e1 	.word	0x004043e1
  403918:	00404439 	.word	0x00404439
  40391c:	40040000 	.word	0x40040000
  403920:	40008000 	.word	0x40008000
  403924:	4001c000 	.word	0x4001c000
  403928:	40018000 	.word	0x40018000
  40392c:	40024000 	.word	0x40024000
  403930:	40020000 	.word	0x40020000
  403934:	4000c000 	.word	0x4000c000

00403938 <flexcom_set_opmode>:
  403938:	b480      	push	{r7}
  40393a:	b083      	sub	sp, #12
  40393c:	af00      	add	r7, sp, #0
  40393e:	6078      	str	r0, [r7, #4]
  403940:	460b      	mov	r3, r1
  403942:	70fb      	strb	r3, [r7, #3]
  403944:	78fa      	ldrb	r2, [r7, #3]
  403946:	687b      	ldr	r3, [r7, #4]
  403948:	601a      	str	r2, [r3, #0]
  40394a:	bf00      	nop
  40394c:	370c      	adds	r7, #12
  40394e:	46bd      	mov	sp, r7
  403950:	f85d 7b04 	ldr.w	r7, [sp], #4
  403954:	4770      	bx	lr

00403956 <pdc_rx_init>:
  403956:	b480      	push	{r7}
  403958:	b085      	sub	sp, #20
  40395a:	af00      	add	r7, sp, #0
  40395c:	60f8      	str	r0, [r7, #12]
  40395e:	60b9      	str	r1, [r7, #8]
  403960:	607a      	str	r2, [r7, #4]
  403962:	68bb      	ldr	r3, [r7, #8]
  403964:	2b00      	cmp	r3, #0
  403966:	d007      	beq.n	403978 <pdc_rx_init+0x22>
  403968:	68bb      	ldr	r3, [r7, #8]
  40396a:	681a      	ldr	r2, [r3, #0]
  40396c:	68fb      	ldr	r3, [r7, #12]
  40396e:	601a      	str	r2, [r3, #0]
  403970:	68bb      	ldr	r3, [r7, #8]
  403972:	685a      	ldr	r2, [r3, #4]
  403974:	68fb      	ldr	r3, [r7, #12]
  403976:	605a      	str	r2, [r3, #4]
  403978:	687b      	ldr	r3, [r7, #4]
  40397a:	2b00      	cmp	r3, #0
  40397c:	d007      	beq.n	40398e <pdc_rx_init+0x38>
  40397e:	687b      	ldr	r3, [r7, #4]
  403980:	681a      	ldr	r2, [r3, #0]
  403982:	68fb      	ldr	r3, [r7, #12]
  403984:	611a      	str	r2, [r3, #16]
  403986:	687b      	ldr	r3, [r7, #4]
  403988:	685a      	ldr	r2, [r3, #4]
  40398a:	68fb      	ldr	r3, [r7, #12]
  40398c:	615a      	str	r2, [r3, #20]
  40398e:	bf00      	nop
  403990:	3714      	adds	r7, #20
  403992:	46bd      	mov	sp, r7
  403994:	f85d 7b04 	ldr.w	r7, [sp], #4
  403998:	4770      	bx	lr

0040399a <pdc_enable_transfer>:
  40399a:	b480      	push	{r7}
  40399c:	b083      	sub	sp, #12
  40399e:	af00      	add	r7, sp, #0
  4039a0:	6078      	str	r0, [r7, #4]
  4039a2:	6039      	str	r1, [r7, #0]
  4039a4:	683a      	ldr	r2, [r7, #0]
  4039a6:	f240 1301 	movw	r3, #257	; 0x101
  4039aa:	4013      	ands	r3, r2
  4039ac:	687a      	ldr	r2, [r7, #4]
  4039ae:	6213      	str	r3, [r2, #32]
  4039b0:	bf00      	nop
  4039b2:	370c      	adds	r7, #12
  4039b4:	46bd      	mov	sp, r7
  4039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039ba:	4770      	bx	lr

004039bc <pdc_disable_transfer>:
  4039bc:	b480      	push	{r7}
  4039be:	b083      	sub	sp, #12
  4039c0:	af00      	add	r7, sp, #0
  4039c2:	6078      	str	r0, [r7, #4]
  4039c4:	6039      	str	r1, [r7, #0]
  4039c6:	683a      	ldr	r2, [r7, #0]
  4039c8:	f240 2302 	movw	r3, #514	; 0x202
  4039cc:	4013      	ands	r3, r2
  4039ce:	687a      	ldr	r2, [r7, #4]
  4039d0:	6213      	str	r3, [r2, #32]
  4039d2:	bf00      	nop
  4039d4:	370c      	adds	r7, #12
  4039d6:	46bd      	mov	sp, r7
  4039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039dc:	4770      	bx	lr

004039de <pio_pull_up>:
  4039de:	b480      	push	{r7}
  4039e0:	b085      	sub	sp, #20
  4039e2:	af00      	add	r7, sp, #0
  4039e4:	60f8      	str	r0, [r7, #12]
  4039e6:	60b9      	str	r1, [r7, #8]
  4039e8:	607a      	str	r2, [r7, #4]
  4039ea:	687b      	ldr	r3, [r7, #4]
  4039ec:	2b00      	cmp	r3, #0
  4039ee:	d003      	beq.n	4039f8 <pio_pull_up+0x1a>
  4039f0:	68fb      	ldr	r3, [r7, #12]
  4039f2:	68ba      	ldr	r2, [r7, #8]
  4039f4:	665a      	str	r2, [r3, #100]	; 0x64
  4039f6:	e002      	b.n	4039fe <pio_pull_up+0x20>
  4039f8:	68fb      	ldr	r3, [r7, #12]
  4039fa:	68ba      	ldr	r2, [r7, #8]
  4039fc:	661a      	str	r2, [r3, #96]	; 0x60
  4039fe:	bf00      	nop
  403a00:	3714      	adds	r7, #20
  403a02:	46bd      	mov	sp, r7
  403a04:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a08:	4770      	bx	lr

00403a0a <pio_set_peripheral>:
  403a0a:	b480      	push	{r7}
  403a0c:	b087      	sub	sp, #28
  403a0e:	af00      	add	r7, sp, #0
  403a10:	60f8      	str	r0, [r7, #12]
  403a12:	60b9      	str	r1, [r7, #8]
  403a14:	607a      	str	r2, [r7, #4]
  403a16:	68fb      	ldr	r3, [r7, #12]
  403a18:	687a      	ldr	r2, [r7, #4]
  403a1a:	645a      	str	r2, [r3, #68]	; 0x44
  403a1c:	68bb      	ldr	r3, [r7, #8]
  403a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403a22:	d02b      	beq.n	403a7c <pio_set_peripheral+0x72>
  403a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403a28:	d805      	bhi.n	403a36 <pio_set_peripheral+0x2c>
  403a2a:	2b00      	cmp	r3, #0
  403a2c:	d03f      	beq.n	403aae <pio_set_peripheral+0xa4>
  403a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403a32:	d00a      	beq.n	403a4a <pio_set_peripheral+0x40>
  403a34:	e037      	b.n	403aa6 <pio_set_peripheral+0x9c>
  403a36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403a3a:	d038      	beq.n	403aae <pio_set_peripheral+0xa4>
  403a3c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403a40:	d035      	beq.n	403aae <pio_set_peripheral+0xa4>
  403a42:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403a46:	d032      	beq.n	403aae <pio_set_peripheral+0xa4>
  403a48:	e02d      	b.n	403aa6 <pio_set_peripheral+0x9c>
  403a4a:	68fb      	ldr	r3, [r7, #12]
  403a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403a4e:	617b      	str	r3, [r7, #20]
  403a50:	68fb      	ldr	r3, [r7, #12]
  403a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403a54:	687b      	ldr	r3, [r7, #4]
  403a56:	43d9      	mvns	r1, r3
  403a58:	697b      	ldr	r3, [r7, #20]
  403a5a:	400b      	ands	r3, r1
  403a5c:	401a      	ands	r2, r3
  403a5e:	68fb      	ldr	r3, [r7, #12]
  403a60:	671a      	str	r2, [r3, #112]	; 0x70
  403a62:	68fb      	ldr	r3, [r7, #12]
  403a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403a66:	617b      	str	r3, [r7, #20]
  403a68:	68fb      	ldr	r3, [r7, #12]
  403a6a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403a6c:	687b      	ldr	r3, [r7, #4]
  403a6e:	43d9      	mvns	r1, r3
  403a70:	697b      	ldr	r3, [r7, #20]
  403a72:	400b      	ands	r3, r1
  403a74:	401a      	ands	r2, r3
  403a76:	68fb      	ldr	r3, [r7, #12]
  403a78:	675a      	str	r2, [r3, #116]	; 0x74
  403a7a:	e014      	b.n	403aa6 <pio_set_peripheral+0x9c>
  403a7c:	68fb      	ldr	r3, [r7, #12]
  403a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403a80:	617b      	str	r3, [r7, #20]
  403a82:	687a      	ldr	r2, [r7, #4]
  403a84:	697b      	ldr	r3, [r7, #20]
  403a86:	431a      	orrs	r2, r3
  403a88:	68fb      	ldr	r3, [r7, #12]
  403a8a:	671a      	str	r2, [r3, #112]	; 0x70
  403a8c:	68fb      	ldr	r3, [r7, #12]
  403a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403a90:	617b      	str	r3, [r7, #20]
  403a92:	68fb      	ldr	r3, [r7, #12]
  403a94:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403a96:	687b      	ldr	r3, [r7, #4]
  403a98:	43d9      	mvns	r1, r3
  403a9a:	697b      	ldr	r3, [r7, #20]
  403a9c:	400b      	ands	r3, r1
  403a9e:	401a      	ands	r2, r3
  403aa0:	68fb      	ldr	r3, [r7, #12]
  403aa2:	675a      	str	r2, [r3, #116]	; 0x74
  403aa4:	bf00      	nop
  403aa6:	68fb      	ldr	r3, [r7, #12]
  403aa8:	687a      	ldr	r2, [r7, #4]
  403aaa:	605a      	str	r2, [r3, #4]
  403aac:	e000      	b.n	403ab0 <pio_set_peripheral+0xa6>
  403aae:	bf00      	nop
  403ab0:	371c      	adds	r7, #28
  403ab2:	46bd      	mov	sp, r7
  403ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ab8:	4770      	bx	lr
	...

00403abc <pio_set_input>:
  403abc:	b580      	push	{r7, lr}
  403abe:	b084      	sub	sp, #16
  403ac0:	af00      	add	r7, sp, #0
  403ac2:	60f8      	str	r0, [r7, #12]
  403ac4:	60b9      	str	r1, [r7, #8]
  403ac6:	607a      	str	r2, [r7, #4]
  403ac8:	68b9      	ldr	r1, [r7, #8]
  403aca:	68f8      	ldr	r0, [r7, #12]
  403acc:	4b15      	ldr	r3, [pc, #84]	; (403b24 <pio_set_input+0x68>)
  403ace:	4798      	blx	r3
  403ad0:	687b      	ldr	r3, [r7, #4]
  403ad2:	f003 030a 	and.w	r3, r3, #10
  403ad6:	2b00      	cmp	r3, #0
  403ad8:	d003      	beq.n	403ae2 <pio_set_input+0x26>
  403ada:	68fb      	ldr	r3, [r7, #12]
  403adc:	68ba      	ldr	r2, [r7, #8]
  403ade:	621a      	str	r2, [r3, #32]
  403ae0:	e002      	b.n	403ae8 <pio_set_input+0x2c>
  403ae2:	68fb      	ldr	r3, [r7, #12]
  403ae4:	68ba      	ldr	r2, [r7, #8]
  403ae6:	625a      	str	r2, [r3, #36]	; 0x24
  403ae8:	687b      	ldr	r3, [r7, #4]
  403aea:	f003 0302 	and.w	r3, r3, #2
  403aee:	2b00      	cmp	r3, #0
  403af0:	d004      	beq.n	403afc <pio_set_input+0x40>
  403af2:	68fb      	ldr	r3, [r7, #12]
  403af4:	68ba      	ldr	r2, [r7, #8]
  403af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403afa:	e008      	b.n	403b0e <pio_set_input+0x52>
  403afc:	687b      	ldr	r3, [r7, #4]
  403afe:	f003 0308 	and.w	r3, r3, #8
  403b02:	2b00      	cmp	r3, #0
  403b04:	d003      	beq.n	403b0e <pio_set_input+0x52>
  403b06:	68fb      	ldr	r3, [r7, #12]
  403b08:	68ba      	ldr	r2, [r7, #8]
  403b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  403b0e:	68fb      	ldr	r3, [r7, #12]
  403b10:	68ba      	ldr	r2, [r7, #8]
  403b12:	615a      	str	r2, [r3, #20]
  403b14:	68fb      	ldr	r3, [r7, #12]
  403b16:	68ba      	ldr	r2, [r7, #8]
  403b18:	601a      	str	r2, [r3, #0]
  403b1a:	bf00      	nop
  403b1c:	3710      	adds	r7, #16
  403b1e:	46bd      	mov	sp, r7
  403b20:	bd80      	pop	{r7, pc}
  403b22:	bf00      	nop
  403b24:	00403d05 	.word	0x00403d05

00403b28 <pio_set_output>:
  403b28:	b580      	push	{r7, lr}
  403b2a:	b084      	sub	sp, #16
  403b2c:	af00      	add	r7, sp, #0
  403b2e:	60f8      	str	r0, [r7, #12]
  403b30:	60b9      	str	r1, [r7, #8]
  403b32:	607a      	str	r2, [r7, #4]
  403b34:	603b      	str	r3, [r7, #0]
  403b36:	68b9      	ldr	r1, [r7, #8]
  403b38:	68f8      	ldr	r0, [r7, #12]
  403b3a:	4b12      	ldr	r3, [pc, #72]	; (403b84 <pio_set_output+0x5c>)
  403b3c:	4798      	blx	r3
  403b3e:	69ba      	ldr	r2, [r7, #24]
  403b40:	68b9      	ldr	r1, [r7, #8]
  403b42:	68f8      	ldr	r0, [r7, #12]
  403b44:	4b10      	ldr	r3, [pc, #64]	; (403b88 <pio_set_output+0x60>)
  403b46:	4798      	blx	r3
  403b48:	683b      	ldr	r3, [r7, #0]
  403b4a:	2b00      	cmp	r3, #0
  403b4c:	d003      	beq.n	403b56 <pio_set_output+0x2e>
  403b4e:	68fb      	ldr	r3, [r7, #12]
  403b50:	68ba      	ldr	r2, [r7, #8]
  403b52:	651a      	str	r2, [r3, #80]	; 0x50
  403b54:	e002      	b.n	403b5c <pio_set_output+0x34>
  403b56:	68fb      	ldr	r3, [r7, #12]
  403b58:	68ba      	ldr	r2, [r7, #8]
  403b5a:	655a      	str	r2, [r3, #84]	; 0x54
  403b5c:	687b      	ldr	r3, [r7, #4]
  403b5e:	2b00      	cmp	r3, #0
  403b60:	d003      	beq.n	403b6a <pio_set_output+0x42>
  403b62:	68fb      	ldr	r3, [r7, #12]
  403b64:	68ba      	ldr	r2, [r7, #8]
  403b66:	631a      	str	r2, [r3, #48]	; 0x30
  403b68:	e002      	b.n	403b70 <pio_set_output+0x48>
  403b6a:	68fb      	ldr	r3, [r7, #12]
  403b6c:	68ba      	ldr	r2, [r7, #8]
  403b6e:	635a      	str	r2, [r3, #52]	; 0x34
  403b70:	68fb      	ldr	r3, [r7, #12]
  403b72:	68ba      	ldr	r2, [r7, #8]
  403b74:	611a      	str	r2, [r3, #16]
  403b76:	68fb      	ldr	r3, [r7, #12]
  403b78:	68ba      	ldr	r2, [r7, #8]
  403b7a:	601a      	str	r2, [r3, #0]
  403b7c:	bf00      	nop
  403b7e:	3710      	adds	r7, #16
  403b80:	46bd      	mov	sp, r7
  403b82:	bd80      	pop	{r7, pc}
  403b84:	00403d05 	.word	0x00403d05
  403b88:	004039df 	.word	0x004039df

00403b8c <pio_configure>:
  403b8c:	b590      	push	{r4, r7, lr}
  403b8e:	b087      	sub	sp, #28
  403b90:	af02      	add	r7, sp, #8
  403b92:	60f8      	str	r0, [r7, #12]
  403b94:	60b9      	str	r1, [r7, #8]
  403b96:	607a      	str	r2, [r7, #4]
  403b98:	603b      	str	r3, [r7, #0]
  403b9a:	68bb      	ldr	r3, [r7, #8]
  403b9c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403ba0:	d01e      	beq.n	403be0 <pio_configure+0x54>
  403ba2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403ba6:	d806      	bhi.n	403bb6 <pio_configure+0x2a>
  403ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403bac:	d00a      	beq.n	403bc4 <pio_configure+0x38>
  403bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403bb2:	d007      	beq.n	403bc4 <pio_configure+0x38>
  403bb4:	e03a      	b.n	403c2c <pio_configure+0xa0>
  403bb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403bba:	d017      	beq.n	403bec <pio_configure+0x60>
  403bbc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403bc0:	d014      	beq.n	403bec <pio_configure+0x60>
  403bc2:	e033      	b.n	403c2c <pio_configure+0xa0>
  403bc4:	687a      	ldr	r2, [r7, #4]
  403bc6:	68b9      	ldr	r1, [r7, #8]
  403bc8:	68f8      	ldr	r0, [r7, #12]
  403bca:	4b1c      	ldr	r3, [pc, #112]	; (403c3c <pio_configure+0xb0>)
  403bcc:	4798      	blx	r3
  403bce:	683b      	ldr	r3, [r7, #0]
  403bd0:	f003 0301 	and.w	r3, r3, #1
  403bd4:	461a      	mov	r2, r3
  403bd6:	6879      	ldr	r1, [r7, #4]
  403bd8:	68f8      	ldr	r0, [r7, #12]
  403bda:	4b19      	ldr	r3, [pc, #100]	; (403c40 <pio_configure+0xb4>)
  403bdc:	4798      	blx	r3
  403bde:	e027      	b.n	403c30 <pio_configure+0xa4>
  403be0:	683a      	ldr	r2, [r7, #0]
  403be2:	6879      	ldr	r1, [r7, #4]
  403be4:	68f8      	ldr	r0, [r7, #12]
  403be6:	4b17      	ldr	r3, [pc, #92]	; (403c44 <pio_configure+0xb8>)
  403be8:	4798      	blx	r3
  403bea:	e021      	b.n	403c30 <pio_configure+0xa4>
  403bec:	68bb      	ldr	r3, [r7, #8]
  403bee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403bf2:	bf0c      	ite	eq
  403bf4:	2301      	moveq	r3, #1
  403bf6:	2300      	movne	r3, #0
  403bf8:	b2db      	uxtb	r3, r3
  403bfa:	461a      	mov	r2, r3
  403bfc:	683b      	ldr	r3, [r7, #0]
  403bfe:	f003 0304 	and.w	r3, r3, #4
  403c02:	2b00      	cmp	r3, #0
  403c04:	bf14      	ite	ne
  403c06:	2301      	movne	r3, #1
  403c08:	2300      	moveq	r3, #0
  403c0a:	b2db      	uxtb	r3, r3
  403c0c:	4619      	mov	r1, r3
  403c0e:	683b      	ldr	r3, [r7, #0]
  403c10:	f003 0301 	and.w	r3, r3, #1
  403c14:	2b00      	cmp	r3, #0
  403c16:	bf14      	ite	ne
  403c18:	2301      	movne	r3, #1
  403c1a:	2300      	moveq	r3, #0
  403c1c:	b2db      	uxtb	r3, r3
  403c1e:	9300      	str	r3, [sp, #0]
  403c20:	460b      	mov	r3, r1
  403c22:	6879      	ldr	r1, [r7, #4]
  403c24:	68f8      	ldr	r0, [r7, #12]
  403c26:	4c08      	ldr	r4, [pc, #32]	; (403c48 <pio_configure+0xbc>)
  403c28:	47a0      	blx	r4
  403c2a:	e001      	b.n	403c30 <pio_configure+0xa4>
  403c2c:	2300      	movs	r3, #0
  403c2e:	e000      	b.n	403c32 <pio_configure+0xa6>
  403c30:	2301      	movs	r3, #1
  403c32:	4618      	mov	r0, r3
  403c34:	3714      	adds	r7, #20
  403c36:	46bd      	mov	sp, r7
  403c38:	bd90      	pop	{r4, r7, pc}
  403c3a:	bf00      	nop
  403c3c:	00403a0b 	.word	0x00403a0b
  403c40:	004039df 	.word	0x004039df
  403c44:	00403abd 	.word	0x00403abd
  403c48:	00403b29 	.word	0x00403b29

00403c4c <pio_pull_down>:
  403c4c:	b480      	push	{r7}
  403c4e:	b085      	sub	sp, #20
  403c50:	af00      	add	r7, sp, #0
  403c52:	60f8      	str	r0, [r7, #12]
  403c54:	60b9      	str	r1, [r7, #8]
  403c56:	607a      	str	r2, [r7, #4]
  403c58:	687b      	ldr	r3, [r7, #4]
  403c5a:	2b00      	cmp	r3, #0
  403c5c:	d004      	beq.n	403c68 <pio_pull_down+0x1c>
  403c5e:	68fb      	ldr	r3, [r7, #12]
  403c60:	68ba      	ldr	r2, [r7, #8]
  403c62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  403c66:	e003      	b.n	403c70 <pio_pull_down+0x24>
  403c68:	68fb      	ldr	r3, [r7, #12]
  403c6a:	68ba      	ldr	r2, [r7, #8]
  403c6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  403c70:	bf00      	nop
  403c72:	3714      	adds	r7, #20
  403c74:	46bd      	mov	sp, r7
  403c76:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c7a:	4770      	bx	lr

00403c7c <pio_configure_interrupt>:
  403c7c:	b480      	push	{r7}
  403c7e:	b085      	sub	sp, #20
  403c80:	af00      	add	r7, sp, #0
  403c82:	60f8      	str	r0, [r7, #12]
  403c84:	60b9      	str	r1, [r7, #8]
  403c86:	607a      	str	r2, [r7, #4]
  403c88:	687b      	ldr	r3, [r7, #4]
  403c8a:	f003 0310 	and.w	r3, r3, #16
  403c8e:	2b00      	cmp	r3, #0
  403c90:	d020      	beq.n	403cd4 <pio_configure_interrupt+0x58>
  403c92:	68fb      	ldr	r3, [r7, #12]
  403c94:	68ba      	ldr	r2, [r7, #8]
  403c96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  403c9a:	687b      	ldr	r3, [r7, #4]
  403c9c:	f003 0320 	and.w	r3, r3, #32
  403ca0:	2b00      	cmp	r3, #0
  403ca2:	d004      	beq.n	403cae <pio_configure_interrupt+0x32>
  403ca4:	68fb      	ldr	r3, [r7, #12]
  403ca6:	68ba      	ldr	r2, [r7, #8]
  403ca8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  403cac:	e003      	b.n	403cb6 <pio_configure_interrupt+0x3a>
  403cae:	68fb      	ldr	r3, [r7, #12]
  403cb0:	68ba      	ldr	r2, [r7, #8]
  403cb2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  403cb6:	687b      	ldr	r3, [r7, #4]
  403cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  403cbc:	2b00      	cmp	r3, #0
  403cbe:	d004      	beq.n	403cca <pio_configure_interrupt+0x4e>
  403cc0:	68fb      	ldr	r3, [r7, #12]
  403cc2:	68ba      	ldr	r2, [r7, #8]
  403cc4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  403cc8:	e008      	b.n	403cdc <pio_configure_interrupt+0x60>
  403cca:	68fb      	ldr	r3, [r7, #12]
  403ccc:	68ba      	ldr	r2, [r7, #8]
  403cce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  403cd2:	e003      	b.n	403cdc <pio_configure_interrupt+0x60>
  403cd4:	68fb      	ldr	r3, [r7, #12]
  403cd6:	68ba      	ldr	r2, [r7, #8]
  403cd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  403cdc:	bf00      	nop
  403cde:	3714      	adds	r7, #20
  403ce0:	46bd      	mov	sp, r7
  403ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ce6:	4770      	bx	lr

00403ce8 <pio_enable_interrupt>:
  403ce8:	b480      	push	{r7}
  403cea:	b083      	sub	sp, #12
  403cec:	af00      	add	r7, sp, #0
  403cee:	6078      	str	r0, [r7, #4]
  403cf0:	6039      	str	r1, [r7, #0]
  403cf2:	687b      	ldr	r3, [r7, #4]
  403cf4:	683a      	ldr	r2, [r7, #0]
  403cf6:	641a      	str	r2, [r3, #64]	; 0x40
  403cf8:	bf00      	nop
  403cfa:	370c      	adds	r7, #12
  403cfc:	46bd      	mov	sp, r7
  403cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d02:	4770      	bx	lr

00403d04 <pio_disable_interrupt>:
  403d04:	b480      	push	{r7}
  403d06:	b083      	sub	sp, #12
  403d08:	af00      	add	r7, sp, #0
  403d0a:	6078      	str	r0, [r7, #4]
  403d0c:	6039      	str	r1, [r7, #0]
  403d0e:	687b      	ldr	r3, [r7, #4]
  403d10:	683a      	ldr	r2, [r7, #0]
  403d12:	645a      	str	r2, [r3, #68]	; 0x44
  403d14:	bf00      	nop
  403d16:	370c      	adds	r7, #12
  403d18:	46bd      	mov	sp, r7
  403d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d1e:	4770      	bx	lr

00403d20 <pio_get_interrupt_status>:
  403d20:	b480      	push	{r7}
  403d22:	b083      	sub	sp, #12
  403d24:	af00      	add	r7, sp, #0
  403d26:	6078      	str	r0, [r7, #4]
  403d28:	687b      	ldr	r3, [r7, #4]
  403d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  403d2c:	4618      	mov	r0, r3
  403d2e:	370c      	adds	r7, #12
  403d30:	46bd      	mov	sp, r7
  403d32:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d36:	4770      	bx	lr

00403d38 <pio_get_interrupt_mask>:
  403d38:	b480      	push	{r7}
  403d3a:	b083      	sub	sp, #12
  403d3c:	af00      	add	r7, sp, #0
  403d3e:	6078      	str	r0, [r7, #4]
  403d40:	687b      	ldr	r3, [r7, #4]
  403d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  403d44:	4618      	mov	r0, r3
  403d46:	370c      	adds	r7, #12
  403d48:	46bd      	mov	sp, r7
  403d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d4e:	4770      	bx	lr

00403d50 <NVIC_EnableIRQ>:
  403d50:	b480      	push	{r7}
  403d52:	b083      	sub	sp, #12
  403d54:	af00      	add	r7, sp, #0
  403d56:	4603      	mov	r3, r0
  403d58:	71fb      	strb	r3, [r7, #7]
  403d5a:	4909      	ldr	r1, [pc, #36]	; (403d80 <NVIC_EnableIRQ+0x30>)
  403d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d60:	095b      	lsrs	r3, r3, #5
  403d62:	79fa      	ldrb	r2, [r7, #7]
  403d64:	f002 021f 	and.w	r2, r2, #31
  403d68:	2001      	movs	r0, #1
  403d6a:	fa00 f202 	lsl.w	r2, r0, r2
  403d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403d72:	bf00      	nop
  403d74:	370c      	adds	r7, #12
  403d76:	46bd      	mov	sp, r7
  403d78:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d7c:	4770      	bx	lr
  403d7e:	bf00      	nop
  403d80:	e000e100 	.word	0xe000e100

00403d84 <NVIC_DisableIRQ>:
  403d84:	b480      	push	{r7}
  403d86:	b083      	sub	sp, #12
  403d88:	af00      	add	r7, sp, #0
  403d8a:	4603      	mov	r3, r0
  403d8c:	71fb      	strb	r3, [r7, #7]
  403d8e:	4909      	ldr	r1, [pc, #36]	; (403db4 <NVIC_DisableIRQ+0x30>)
  403d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d94:	095b      	lsrs	r3, r3, #5
  403d96:	79fa      	ldrb	r2, [r7, #7]
  403d98:	f002 021f 	and.w	r2, r2, #31
  403d9c:	2001      	movs	r0, #1
  403d9e:	fa00 f202 	lsl.w	r2, r0, r2
  403da2:	3320      	adds	r3, #32
  403da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403da8:	bf00      	nop
  403daa:	370c      	adds	r7, #12
  403dac:	46bd      	mov	sp, r7
  403dae:	f85d 7b04 	ldr.w	r7, [sp], #4
  403db2:	4770      	bx	lr
  403db4:	e000e100 	.word	0xe000e100

00403db8 <NVIC_ClearPendingIRQ>:
  403db8:	b480      	push	{r7}
  403dba:	b083      	sub	sp, #12
  403dbc:	af00      	add	r7, sp, #0
  403dbe:	4603      	mov	r3, r0
  403dc0:	71fb      	strb	r3, [r7, #7]
  403dc2:	4909      	ldr	r1, [pc, #36]	; (403de8 <NVIC_ClearPendingIRQ+0x30>)
  403dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403dc8:	095b      	lsrs	r3, r3, #5
  403dca:	79fa      	ldrb	r2, [r7, #7]
  403dcc:	f002 021f 	and.w	r2, r2, #31
  403dd0:	2001      	movs	r0, #1
  403dd2:	fa00 f202 	lsl.w	r2, r0, r2
  403dd6:	3360      	adds	r3, #96	; 0x60
  403dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403ddc:	bf00      	nop
  403dde:	370c      	adds	r7, #12
  403de0:	46bd      	mov	sp, r7
  403de2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403de6:	4770      	bx	lr
  403de8:	e000e100 	.word	0xe000e100

00403dec <NVIC_SetPriority>:
  403dec:	b480      	push	{r7}
  403dee:	b083      	sub	sp, #12
  403df0:	af00      	add	r7, sp, #0
  403df2:	4603      	mov	r3, r0
  403df4:	6039      	str	r1, [r7, #0]
  403df6:	71fb      	strb	r3, [r7, #7]
  403df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403dfc:	2b00      	cmp	r3, #0
  403dfe:	da0b      	bge.n	403e18 <NVIC_SetPriority+0x2c>
  403e00:	490d      	ldr	r1, [pc, #52]	; (403e38 <NVIC_SetPriority+0x4c>)
  403e02:	79fb      	ldrb	r3, [r7, #7]
  403e04:	f003 030f 	and.w	r3, r3, #15
  403e08:	3b04      	subs	r3, #4
  403e0a:	683a      	ldr	r2, [r7, #0]
  403e0c:	b2d2      	uxtb	r2, r2
  403e0e:	0112      	lsls	r2, r2, #4
  403e10:	b2d2      	uxtb	r2, r2
  403e12:	440b      	add	r3, r1
  403e14:	761a      	strb	r2, [r3, #24]
  403e16:	e009      	b.n	403e2c <NVIC_SetPriority+0x40>
  403e18:	4908      	ldr	r1, [pc, #32]	; (403e3c <NVIC_SetPriority+0x50>)
  403e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e1e:	683a      	ldr	r2, [r7, #0]
  403e20:	b2d2      	uxtb	r2, r2
  403e22:	0112      	lsls	r2, r2, #4
  403e24:	b2d2      	uxtb	r2, r2
  403e26:	440b      	add	r3, r1
  403e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  403e2c:	bf00      	nop
  403e2e:	370c      	adds	r7, #12
  403e30:	46bd      	mov	sp, r7
  403e32:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e36:	4770      	bx	lr
  403e38:	e000ed00 	.word	0xe000ed00
  403e3c:	e000e100 	.word	0xe000e100

00403e40 <pio_handler_process>:
  403e40:	b580      	push	{r7, lr}
  403e42:	b084      	sub	sp, #16
  403e44:	af00      	add	r7, sp, #0
  403e46:	6078      	str	r0, [r7, #4]
  403e48:	6039      	str	r1, [r7, #0]
  403e4a:	6878      	ldr	r0, [r7, #4]
  403e4c:	4b26      	ldr	r3, [pc, #152]	; (403ee8 <pio_handler_process+0xa8>)
  403e4e:	4798      	blx	r3
  403e50:	60f8      	str	r0, [r7, #12]
  403e52:	6878      	ldr	r0, [r7, #4]
  403e54:	4b25      	ldr	r3, [pc, #148]	; (403eec <pio_handler_process+0xac>)
  403e56:	4798      	blx	r3
  403e58:	4602      	mov	r2, r0
  403e5a:	68fb      	ldr	r3, [r7, #12]
  403e5c:	4013      	ands	r3, r2
  403e5e:	60fb      	str	r3, [r7, #12]
  403e60:	68fb      	ldr	r3, [r7, #12]
  403e62:	2b00      	cmp	r3, #0
  403e64:	d03c      	beq.n	403ee0 <pio_handler_process+0xa0>
  403e66:	2300      	movs	r3, #0
  403e68:	60bb      	str	r3, [r7, #8]
  403e6a:	e034      	b.n	403ed6 <pio_handler_process+0x96>
  403e6c:	4a20      	ldr	r2, [pc, #128]	; (403ef0 <pio_handler_process+0xb0>)
  403e6e:	68bb      	ldr	r3, [r7, #8]
  403e70:	011b      	lsls	r3, r3, #4
  403e72:	4413      	add	r3, r2
  403e74:	681a      	ldr	r2, [r3, #0]
  403e76:	683b      	ldr	r3, [r7, #0]
  403e78:	429a      	cmp	r2, r3
  403e7a:	d126      	bne.n	403eca <pio_handler_process+0x8a>
  403e7c:	4a1c      	ldr	r2, [pc, #112]	; (403ef0 <pio_handler_process+0xb0>)
  403e7e:	68bb      	ldr	r3, [r7, #8]
  403e80:	011b      	lsls	r3, r3, #4
  403e82:	4413      	add	r3, r2
  403e84:	3304      	adds	r3, #4
  403e86:	681a      	ldr	r2, [r3, #0]
  403e88:	68fb      	ldr	r3, [r7, #12]
  403e8a:	4013      	ands	r3, r2
  403e8c:	2b00      	cmp	r3, #0
  403e8e:	d01c      	beq.n	403eca <pio_handler_process+0x8a>
  403e90:	4a17      	ldr	r2, [pc, #92]	; (403ef0 <pio_handler_process+0xb0>)
  403e92:	68bb      	ldr	r3, [r7, #8]
  403e94:	011b      	lsls	r3, r3, #4
  403e96:	4413      	add	r3, r2
  403e98:	330c      	adds	r3, #12
  403e9a:	681b      	ldr	r3, [r3, #0]
  403e9c:	4914      	ldr	r1, [pc, #80]	; (403ef0 <pio_handler_process+0xb0>)
  403e9e:	68ba      	ldr	r2, [r7, #8]
  403ea0:	0112      	lsls	r2, r2, #4
  403ea2:	440a      	add	r2, r1
  403ea4:	6810      	ldr	r0, [r2, #0]
  403ea6:	4912      	ldr	r1, [pc, #72]	; (403ef0 <pio_handler_process+0xb0>)
  403ea8:	68ba      	ldr	r2, [r7, #8]
  403eaa:	0112      	lsls	r2, r2, #4
  403eac:	440a      	add	r2, r1
  403eae:	3204      	adds	r2, #4
  403eb0:	6812      	ldr	r2, [r2, #0]
  403eb2:	4611      	mov	r1, r2
  403eb4:	4798      	blx	r3
  403eb6:	4a0e      	ldr	r2, [pc, #56]	; (403ef0 <pio_handler_process+0xb0>)
  403eb8:	68bb      	ldr	r3, [r7, #8]
  403eba:	011b      	lsls	r3, r3, #4
  403ebc:	4413      	add	r3, r2
  403ebe:	3304      	adds	r3, #4
  403ec0:	681b      	ldr	r3, [r3, #0]
  403ec2:	43db      	mvns	r3, r3
  403ec4:	68fa      	ldr	r2, [r7, #12]
  403ec6:	4013      	ands	r3, r2
  403ec8:	60fb      	str	r3, [r7, #12]
  403eca:	68bb      	ldr	r3, [r7, #8]
  403ecc:	3301      	adds	r3, #1
  403ece:	60bb      	str	r3, [r7, #8]
  403ed0:	68bb      	ldr	r3, [r7, #8]
  403ed2:	2b06      	cmp	r3, #6
  403ed4:	d803      	bhi.n	403ede <pio_handler_process+0x9e>
  403ed6:	68fb      	ldr	r3, [r7, #12]
  403ed8:	2b00      	cmp	r3, #0
  403eda:	d1c7      	bne.n	403e6c <pio_handler_process+0x2c>
  403edc:	e000      	b.n	403ee0 <pio_handler_process+0xa0>
  403ede:	bf00      	nop
  403ee0:	bf00      	nop
  403ee2:	3710      	adds	r7, #16
  403ee4:	46bd      	mov	sp, r7
  403ee6:	bd80      	pop	{r7, pc}
  403ee8:	00403d21 	.word	0x00403d21
  403eec:	00403d39 	.word	0x00403d39
  403ef0:	200003b0 	.word	0x200003b0

00403ef4 <pio_handler_set>:
  403ef4:	b580      	push	{r7, lr}
  403ef6:	b086      	sub	sp, #24
  403ef8:	af00      	add	r7, sp, #0
  403efa:	60f8      	str	r0, [r7, #12]
  403efc:	60b9      	str	r1, [r7, #8]
  403efe:	607a      	str	r2, [r7, #4]
  403f00:	603b      	str	r3, [r7, #0]
  403f02:	4b22      	ldr	r3, [pc, #136]	; (403f8c <pio_handler_set+0x98>)
  403f04:	613b      	str	r3, [r7, #16]
  403f06:	4b22      	ldr	r3, [pc, #136]	; (403f90 <pio_handler_set+0x9c>)
  403f08:	681b      	ldr	r3, [r3, #0]
  403f0a:	2b06      	cmp	r3, #6
  403f0c:	d901      	bls.n	403f12 <pio_handler_set+0x1e>
  403f0e:	2301      	movs	r3, #1
  403f10:	e038      	b.n	403f84 <pio_handler_set+0x90>
  403f12:	2300      	movs	r3, #0
  403f14:	75fb      	strb	r3, [r7, #23]
  403f16:	e011      	b.n	403f3c <pio_handler_set+0x48>
  403f18:	7dfb      	ldrb	r3, [r7, #23]
  403f1a:	011b      	lsls	r3, r3, #4
  403f1c:	4a1b      	ldr	r2, [pc, #108]	; (403f8c <pio_handler_set+0x98>)
  403f1e:	4413      	add	r3, r2
  403f20:	613b      	str	r3, [r7, #16]
  403f22:	693b      	ldr	r3, [r7, #16]
  403f24:	681a      	ldr	r2, [r3, #0]
  403f26:	68bb      	ldr	r3, [r7, #8]
  403f28:	429a      	cmp	r2, r3
  403f2a:	d104      	bne.n	403f36 <pio_handler_set+0x42>
  403f2c:	693b      	ldr	r3, [r7, #16]
  403f2e:	685a      	ldr	r2, [r3, #4]
  403f30:	687b      	ldr	r3, [r7, #4]
  403f32:	429a      	cmp	r2, r3
  403f34:	d008      	beq.n	403f48 <pio_handler_set+0x54>
  403f36:	7dfb      	ldrb	r3, [r7, #23]
  403f38:	3301      	adds	r3, #1
  403f3a:	75fb      	strb	r3, [r7, #23]
  403f3c:	7dfa      	ldrb	r2, [r7, #23]
  403f3e:	4b14      	ldr	r3, [pc, #80]	; (403f90 <pio_handler_set+0x9c>)
  403f40:	681b      	ldr	r3, [r3, #0]
  403f42:	429a      	cmp	r2, r3
  403f44:	d9e8      	bls.n	403f18 <pio_handler_set+0x24>
  403f46:	e000      	b.n	403f4a <pio_handler_set+0x56>
  403f48:	bf00      	nop
  403f4a:	693b      	ldr	r3, [r7, #16]
  403f4c:	68ba      	ldr	r2, [r7, #8]
  403f4e:	601a      	str	r2, [r3, #0]
  403f50:	693b      	ldr	r3, [r7, #16]
  403f52:	687a      	ldr	r2, [r7, #4]
  403f54:	605a      	str	r2, [r3, #4]
  403f56:	693b      	ldr	r3, [r7, #16]
  403f58:	683a      	ldr	r2, [r7, #0]
  403f5a:	609a      	str	r2, [r3, #8]
  403f5c:	693b      	ldr	r3, [r7, #16]
  403f5e:	6a3a      	ldr	r2, [r7, #32]
  403f60:	60da      	str	r2, [r3, #12]
  403f62:	7dfa      	ldrb	r2, [r7, #23]
  403f64:	4b0a      	ldr	r3, [pc, #40]	; (403f90 <pio_handler_set+0x9c>)
  403f66:	681b      	ldr	r3, [r3, #0]
  403f68:	3301      	adds	r3, #1
  403f6a:	429a      	cmp	r2, r3
  403f6c:	d104      	bne.n	403f78 <pio_handler_set+0x84>
  403f6e:	4b08      	ldr	r3, [pc, #32]	; (403f90 <pio_handler_set+0x9c>)
  403f70:	681b      	ldr	r3, [r3, #0]
  403f72:	3301      	adds	r3, #1
  403f74:	4a06      	ldr	r2, [pc, #24]	; (403f90 <pio_handler_set+0x9c>)
  403f76:	6013      	str	r3, [r2, #0]
  403f78:	683a      	ldr	r2, [r7, #0]
  403f7a:	6879      	ldr	r1, [r7, #4]
  403f7c:	68f8      	ldr	r0, [r7, #12]
  403f7e:	4b05      	ldr	r3, [pc, #20]	; (403f94 <pio_handler_set+0xa0>)
  403f80:	4798      	blx	r3
  403f82:	2300      	movs	r3, #0
  403f84:	4618      	mov	r0, r3
  403f86:	3718      	adds	r7, #24
  403f88:	46bd      	mov	sp, r7
  403f8a:	bd80      	pop	{r7, pc}
  403f8c:	200003b0 	.word	0x200003b0
  403f90:	20000420 	.word	0x20000420
  403f94:	00403c7d 	.word	0x00403c7d

00403f98 <PIOB_Handler>:
  403f98:	b580      	push	{r7, lr}
  403f9a:	af00      	add	r7, sp, #0
  403f9c:	210c      	movs	r1, #12
  403f9e:	4802      	ldr	r0, [pc, #8]	; (403fa8 <PIOB_Handler+0x10>)
  403fa0:	4b02      	ldr	r3, [pc, #8]	; (403fac <PIOB_Handler+0x14>)
  403fa2:	4798      	blx	r3
  403fa4:	bf00      	nop
  403fa6:	bd80      	pop	{r7, pc}
  403fa8:	400e1000 	.word	0x400e1000
  403fac:	00403e41 	.word	0x00403e41

00403fb0 <pio_handler_set_priority>:
  403fb0:	b580      	push	{r7, lr}
  403fb2:	b086      	sub	sp, #24
  403fb4:	af00      	add	r7, sp, #0
  403fb6:	60f8      	str	r0, [r7, #12]
  403fb8:	460b      	mov	r3, r1
  403fba:	607a      	str	r2, [r7, #4]
  403fbc:	72fb      	strb	r3, [r7, #11]
  403fbe:	2300      	movs	r3, #0
  403fc0:	617b      	str	r3, [r7, #20]
  403fc2:	68f8      	ldr	r0, [r7, #12]
  403fc4:	4b13      	ldr	r3, [pc, #76]	; (404014 <pio_handler_set_priority+0x64>)
  403fc6:	4798      	blx	r3
  403fc8:	6178      	str	r0, [r7, #20]
  403fca:	f04f 31ff 	mov.w	r1, #4294967295
  403fce:	68f8      	ldr	r0, [r7, #12]
  403fd0:	4b11      	ldr	r3, [pc, #68]	; (404018 <pio_handler_set_priority+0x68>)
  403fd2:	4798      	blx	r3
  403fd4:	68f8      	ldr	r0, [r7, #12]
  403fd6:	4b11      	ldr	r3, [pc, #68]	; (40401c <pio_handler_set_priority+0x6c>)
  403fd8:	4798      	blx	r3
  403fda:	f997 300b 	ldrsb.w	r3, [r7, #11]
  403fde:	4618      	mov	r0, r3
  403fe0:	4b0f      	ldr	r3, [pc, #60]	; (404020 <pio_handler_set_priority+0x70>)
  403fe2:	4798      	blx	r3
  403fe4:	f997 300b 	ldrsb.w	r3, [r7, #11]
  403fe8:	4618      	mov	r0, r3
  403fea:	4b0e      	ldr	r3, [pc, #56]	; (404024 <pio_handler_set_priority+0x74>)
  403fec:	4798      	blx	r3
  403fee:	f997 300b 	ldrsb.w	r3, [r7, #11]
  403ff2:	6879      	ldr	r1, [r7, #4]
  403ff4:	4618      	mov	r0, r3
  403ff6:	4b0c      	ldr	r3, [pc, #48]	; (404028 <pio_handler_set_priority+0x78>)
  403ff8:	4798      	blx	r3
  403ffa:	f997 300b 	ldrsb.w	r3, [r7, #11]
  403ffe:	4618      	mov	r0, r3
  404000:	4b0a      	ldr	r3, [pc, #40]	; (40402c <pio_handler_set_priority+0x7c>)
  404002:	4798      	blx	r3
  404004:	6979      	ldr	r1, [r7, #20]
  404006:	68f8      	ldr	r0, [r7, #12]
  404008:	4b09      	ldr	r3, [pc, #36]	; (404030 <pio_handler_set_priority+0x80>)
  40400a:	4798      	blx	r3
  40400c:	bf00      	nop
  40400e:	3718      	adds	r7, #24
  404010:	46bd      	mov	sp, r7
  404012:	bd80      	pop	{r7, pc}
  404014:	00403d39 	.word	0x00403d39
  404018:	00403d05 	.word	0x00403d05
  40401c:	00403d21 	.word	0x00403d21
  404020:	00403d85 	.word	0x00403d85
  404024:	00403db9 	.word	0x00403db9
  404028:	00403ded 	.word	0x00403ded
  40402c:	00403d51 	.word	0x00403d51
  404030:	00403ce9 	.word	0x00403ce9

00404034 <pio_handler_clear_pending_IRQ>:
  404034:	b580      	push	{r7, lr}
  404036:	b084      	sub	sp, #16
  404038:	af00      	add	r7, sp, #0
  40403a:	6078      	str	r0, [r7, #4]
  40403c:	460b      	mov	r3, r1
  40403e:	70fb      	strb	r3, [r7, #3]
  404040:	2300      	movs	r3, #0
  404042:	60fb      	str	r3, [r7, #12]
  404044:	6878      	ldr	r0, [r7, #4]
  404046:	4b11      	ldr	r3, [pc, #68]	; (40408c <pio_handler_clear_pending_IRQ+0x58>)
  404048:	4798      	blx	r3
  40404a:	60f8      	str	r0, [r7, #12]
  40404c:	f04f 31ff 	mov.w	r1, #4294967295
  404050:	6878      	ldr	r0, [r7, #4]
  404052:	4b0f      	ldr	r3, [pc, #60]	; (404090 <pio_handler_clear_pending_IRQ+0x5c>)
  404054:	4798      	blx	r3
  404056:	6878      	ldr	r0, [r7, #4]
  404058:	4b0e      	ldr	r3, [pc, #56]	; (404094 <pio_handler_clear_pending_IRQ+0x60>)
  40405a:	4798      	blx	r3
  40405c:	f997 3003 	ldrsb.w	r3, [r7, #3]
  404060:	4618      	mov	r0, r3
  404062:	4b0d      	ldr	r3, [pc, #52]	; (404098 <pio_handler_clear_pending_IRQ+0x64>)
  404064:	4798      	blx	r3
  404066:	f997 3003 	ldrsb.w	r3, [r7, #3]
  40406a:	4618      	mov	r0, r3
  40406c:	4b0b      	ldr	r3, [pc, #44]	; (40409c <pio_handler_clear_pending_IRQ+0x68>)
  40406e:	4798      	blx	r3
  404070:	f997 3003 	ldrsb.w	r3, [r7, #3]
  404074:	4618      	mov	r0, r3
  404076:	4b0a      	ldr	r3, [pc, #40]	; (4040a0 <pio_handler_clear_pending_IRQ+0x6c>)
  404078:	4798      	blx	r3
  40407a:	68f9      	ldr	r1, [r7, #12]
  40407c:	6878      	ldr	r0, [r7, #4]
  40407e:	4b09      	ldr	r3, [pc, #36]	; (4040a4 <pio_handler_clear_pending_IRQ+0x70>)
  404080:	4798      	blx	r3
  404082:	bf00      	nop
  404084:	3710      	adds	r7, #16
  404086:	46bd      	mov	sp, r7
  404088:	bd80      	pop	{r7, pc}
  40408a:	bf00      	nop
  40408c:	00403d39 	.word	0x00403d39
  404090:	00403d05 	.word	0x00403d05
  404094:	00403d21 	.word	0x00403d21
  404098:	00403d85 	.word	0x00403d85
  40409c:	00403db9 	.word	0x00403db9
  4040a0:	00403d51 	.word	0x00403d51
  4040a4:	00403ce9 	.word	0x00403ce9

004040a8 <pmc_switch_mck_to_pllack>:
  4040a8:	b480      	push	{r7}
  4040aa:	b085      	sub	sp, #20
  4040ac:	af00      	add	r7, sp, #0
  4040ae:	6078      	str	r0, [r7, #4]
  4040b0:	491d      	ldr	r1, [pc, #116]	; (404128 <pmc_switch_mck_to_pllack+0x80>)
  4040b2:	4b1d      	ldr	r3, [pc, #116]	; (404128 <pmc_switch_mck_to_pllack+0x80>)
  4040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4040b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4040ba:	687b      	ldr	r3, [r7, #4]
  4040bc:	4313      	orrs	r3, r2
  4040be:	630b      	str	r3, [r1, #48]	; 0x30
  4040c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4040c4:	60fb      	str	r3, [r7, #12]
  4040c6:	e007      	b.n	4040d8 <pmc_switch_mck_to_pllack+0x30>
  4040c8:	68fb      	ldr	r3, [r7, #12]
  4040ca:	2b00      	cmp	r3, #0
  4040cc:	d101      	bne.n	4040d2 <pmc_switch_mck_to_pllack+0x2a>
  4040ce:	2301      	movs	r3, #1
  4040d0:	e023      	b.n	40411a <pmc_switch_mck_to_pllack+0x72>
  4040d2:	68fb      	ldr	r3, [r7, #12]
  4040d4:	3b01      	subs	r3, #1
  4040d6:	60fb      	str	r3, [r7, #12]
  4040d8:	4b13      	ldr	r3, [pc, #76]	; (404128 <pmc_switch_mck_to_pllack+0x80>)
  4040da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4040dc:	f003 0308 	and.w	r3, r3, #8
  4040e0:	2b00      	cmp	r3, #0
  4040e2:	d0f1      	beq.n	4040c8 <pmc_switch_mck_to_pllack+0x20>
  4040e4:	4a10      	ldr	r2, [pc, #64]	; (404128 <pmc_switch_mck_to_pllack+0x80>)
  4040e6:	4b10      	ldr	r3, [pc, #64]	; (404128 <pmc_switch_mck_to_pllack+0x80>)
  4040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4040ea:	f023 0303 	bic.w	r3, r3, #3
  4040ee:	f043 0302 	orr.w	r3, r3, #2
  4040f2:	6313      	str	r3, [r2, #48]	; 0x30
  4040f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4040f8:	60fb      	str	r3, [r7, #12]
  4040fa:	e007      	b.n	40410c <pmc_switch_mck_to_pllack+0x64>
  4040fc:	68fb      	ldr	r3, [r7, #12]
  4040fe:	2b00      	cmp	r3, #0
  404100:	d101      	bne.n	404106 <pmc_switch_mck_to_pllack+0x5e>
  404102:	2301      	movs	r3, #1
  404104:	e009      	b.n	40411a <pmc_switch_mck_to_pllack+0x72>
  404106:	68fb      	ldr	r3, [r7, #12]
  404108:	3b01      	subs	r3, #1
  40410a:	60fb      	str	r3, [r7, #12]
  40410c:	4b06      	ldr	r3, [pc, #24]	; (404128 <pmc_switch_mck_to_pllack+0x80>)
  40410e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404110:	f003 0308 	and.w	r3, r3, #8
  404114:	2b00      	cmp	r3, #0
  404116:	d0f1      	beq.n	4040fc <pmc_switch_mck_to_pllack+0x54>
  404118:	2300      	movs	r3, #0
  40411a:	4618      	mov	r0, r3
  40411c:	3714      	adds	r7, #20
  40411e:	46bd      	mov	sp, r7
  404120:	f85d 7b04 	ldr.w	r7, [sp], #4
  404124:	4770      	bx	lr
  404126:	bf00      	nop
  404128:	400e0400 	.word	0x400e0400

0040412c <pmc_switch_sclk_to_32kxtal>:
  40412c:	b480      	push	{r7}
  40412e:	b083      	sub	sp, #12
  404130:	af00      	add	r7, sp, #0
  404132:	6078      	str	r0, [r7, #4]
  404134:	687b      	ldr	r3, [r7, #4]
  404136:	2b01      	cmp	r3, #1
  404138:	d107      	bne.n	40414a <pmc_switch_sclk_to_32kxtal+0x1e>
  40413a:	4a08      	ldr	r2, [pc, #32]	; (40415c <pmc_switch_sclk_to_32kxtal+0x30>)
  40413c:	4b07      	ldr	r3, [pc, #28]	; (40415c <pmc_switch_sclk_to_32kxtal+0x30>)
  40413e:	689b      	ldr	r3, [r3, #8]
  404140:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  404144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404148:	6093      	str	r3, [r2, #8]
  40414a:	4b04      	ldr	r3, [pc, #16]	; (40415c <pmc_switch_sclk_to_32kxtal+0x30>)
  40414c:	4a04      	ldr	r2, [pc, #16]	; (404160 <pmc_switch_sclk_to_32kxtal+0x34>)
  40414e:	601a      	str	r2, [r3, #0]
  404150:	bf00      	nop
  404152:	370c      	adds	r7, #12
  404154:	46bd      	mov	sp, r7
  404156:	f85d 7b04 	ldr.w	r7, [sp], #4
  40415a:	4770      	bx	lr
  40415c:	400e1410 	.word	0x400e1410
  404160:	a5000008 	.word	0xa5000008

00404164 <pmc_osc_is_ready_32kxtal>:
  404164:	b480      	push	{r7}
  404166:	af00      	add	r7, sp, #0
  404168:	4b09      	ldr	r3, [pc, #36]	; (404190 <pmc_osc_is_ready_32kxtal+0x2c>)
  40416a:	695b      	ldr	r3, [r3, #20]
  40416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404170:	2b00      	cmp	r3, #0
  404172:	d007      	beq.n	404184 <pmc_osc_is_ready_32kxtal+0x20>
  404174:	4b07      	ldr	r3, [pc, #28]	; (404194 <pmc_osc_is_ready_32kxtal+0x30>)
  404176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404178:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40417c:	2b00      	cmp	r3, #0
  40417e:	d001      	beq.n	404184 <pmc_osc_is_ready_32kxtal+0x20>
  404180:	2301      	movs	r3, #1
  404182:	e000      	b.n	404186 <pmc_osc_is_ready_32kxtal+0x22>
  404184:	2300      	movs	r3, #0
  404186:	4618      	mov	r0, r3
  404188:	46bd      	mov	sp, r7
  40418a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40418e:	4770      	bx	lr
  404190:	400e1410 	.word	0x400e1410
  404194:	400e0400 	.word	0x400e0400

00404198 <pmc_switch_mainck_to_fastrc>:
  404198:	b480      	push	{r7}
  40419a:	b083      	sub	sp, #12
  40419c:	af00      	add	r7, sp, #0
  40419e:	6078      	str	r0, [r7, #4]
  4041a0:	4a18      	ldr	r2, [pc, #96]	; (404204 <pmc_switch_mainck_to_fastrc+0x6c>)
  4041a2:	4b18      	ldr	r3, [pc, #96]	; (404204 <pmc_switch_mainck_to_fastrc+0x6c>)
  4041a4:	6a1b      	ldr	r3, [r3, #32]
  4041a6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4041aa:	f043 0308 	orr.w	r3, r3, #8
  4041ae:	6213      	str	r3, [r2, #32]
  4041b0:	bf00      	nop
  4041b2:	4b14      	ldr	r3, [pc, #80]	; (404204 <pmc_switch_mainck_to_fastrc+0x6c>)
  4041b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4041ba:	2b00      	cmp	r3, #0
  4041bc:	d0f9      	beq.n	4041b2 <pmc_switch_mainck_to_fastrc+0x1a>
  4041be:	4911      	ldr	r1, [pc, #68]	; (404204 <pmc_switch_mainck_to_fastrc+0x6c>)
  4041c0:	4b10      	ldr	r3, [pc, #64]	; (404204 <pmc_switch_mainck_to_fastrc+0x6c>)
  4041c2:	6a1b      	ldr	r3, [r3, #32]
  4041c4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4041cc:	687a      	ldr	r2, [r7, #4]
  4041ce:	4313      	orrs	r3, r2
  4041d0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4041d4:	620b      	str	r3, [r1, #32]
  4041d6:	bf00      	nop
  4041d8:	4b0a      	ldr	r3, [pc, #40]	; (404204 <pmc_switch_mainck_to_fastrc+0x6c>)
  4041da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4041e0:	2b00      	cmp	r3, #0
  4041e2:	d0f9      	beq.n	4041d8 <pmc_switch_mainck_to_fastrc+0x40>
  4041e4:	4a07      	ldr	r2, [pc, #28]	; (404204 <pmc_switch_mainck_to_fastrc+0x6c>)
  4041e6:	4b07      	ldr	r3, [pc, #28]	; (404204 <pmc_switch_mainck_to_fastrc+0x6c>)
  4041e8:	6a1b      	ldr	r3, [r3, #32]
  4041ea:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4041ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4041f2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4041f6:	6213      	str	r3, [r2, #32]
  4041f8:	bf00      	nop
  4041fa:	370c      	adds	r7, #12
  4041fc:	46bd      	mov	sp, r7
  4041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  404202:	4770      	bx	lr
  404204:	400e0400 	.word	0x400e0400

00404208 <pmc_switch_mainck_to_xtal>:
  404208:	b480      	push	{r7}
  40420a:	b083      	sub	sp, #12
  40420c:	af00      	add	r7, sp, #0
  40420e:	6078      	str	r0, [r7, #4]
  404210:	6039      	str	r1, [r7, #0]
  404212:	687b      	ldr	r3, [r7, #4]
  404214:	2b00      	cmp	r3, #0
  404216:	d008      	beq.n	40422a <pmc_switch_mainck_to_xtal+0x22>
  404218:	4916      	ldr	r1, [pc, #88]	; (404274 <pmc_switch_mainck_to_xtal+0x6c>)
  40421a:	4b16      	ldr	r3, [pc, #88]	; (404274 <pmc_switch_mainck_to_xtal+0x6c>)
  40421c:	6a1b      	ldr	r3, [r3, #32]
  40421e:	4a16      	ldr	r2, [pc, #88]	; (404278 <pmc_switch_mainck_to_xtal+0x70>)
  404220:	401a      	ands	r2, r3
  404222:	4b16      	ldr	r3, [pc, #88]	; (40427c <pmc_switch_mainck_to_xtal+0x74>)
  404224:	4313      	orrs	r3, r2
  404226:	620b      	str	r3, [r1, #32]
  404228:	e01e      	b.n	404268 <pmc_switch_mainck_to_xtal+0x60>
  40422a:	4912      	ldr	r1, [pc, #72]	; (404274 <pmc_switch_mainck_to_xtal+0x6c>)
  40422c:	4b11      	ldr	r3, [pc, #68]	; (404274 <pmc_switch_mainck_to_xtal+0x6c>)
  40422e:	6a1b      	ldr	r3, [r3, #32]
  404230:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404234:	f023 0303 	bic.w	r3, r3, #3
  404238:	683a      	ldr	r2, [r7, #0]
  40423a:	0212      	lsls	r2, r2, #8
  40423c:	b292      	uxth	r2, r2
  40423e:	4313      	orrs	r3, r2
  404240:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404244:	f043 0301 	orr.w	r3, r3, #1
  404248:	620b      	str	r3, [r1, #32]
  40424a:	bf00      	nop
  40424c:	4b09      	ldr	r3, [pc, #36]	; (404274 <pmc_switch_mainck_to_xtal+0x6c>)
  40424e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404250:	f003 0301 	and.w	r3, r3, #1
  404254:	2b00      	cmp	r3, #0
  404256:	d0f9      	beq.n	40424c <pmc_switch_mainck_to_xtal+0x44>
  404258:	4a06      	ldr	r2, [pc, #24]	; (404274 <pmc_switch_mainck_to_xtal+0x6c>)
  40425a:	4b06      	ldr	r3, [pc, #24]	; (404274 <pmc_switch_mainck_to_xtal+0x6c>)
  40425c:	6a1b      	ldr	r3, [r3, #32]
  40425e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  404262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404266:	6213      	str	r3, [r2, #32]
  404268:	bf00      	nop
  40426a:	370c      	adds	r7, #12
  40426c:	46bd      	mov	sp, r7
  40426e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404272:	4770      	bx	lr
  404274:	400e0400 	.word	0x400e0400
  404278:	fec8fffc 	.word	0xfec8fffc
  40427c:	01370002 	.word	0x01370002

00404280 <pmc_osc_is_ready_mainck>:
  404280:	b480      	push	{r7}
  404282:	af00      	add	r7, sp, #0
  404284:	4b04      	ldr	r3, [pc, #16]	; (404298 <pmc_osc_is_ready_mainck+0x18>)
  404286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40428c:	4618      	mov	r0, r3
  40428e:	46bd      	mov	sp, r7
  404290:	f85d 7b04 	ldr.w	r7, [sp], #4
  404294:	4770      	bx	lr
  404296:	bf00      	nop
  404298:	400e0400 	.word	0x400e0400

0040429c <pmc_disable_pllack>:
  40429c:	b480      	push	{r7}
  40429e:	af00      	add	r7, sp, #0
  4042a0:	4b03      	ldr	r3, [pc, #12]	; (4042b0 <pmc_disable_pllack+0x14>)
  4042a2:	2200      	movs	r2, #0
  4042a4:	629a      	str	r2, [r3, #40]	; 0x28
  4042a6:	bf00      	nop
  4042a8:	46bd      	mov	sp, r7
  4042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042ae:	4770      	bx	lr
  4042b0:	400e0400 	.word	0x400e0400

004042b4 <pmc_is_locked_pllack>:
  4042b4:	b480      	push	{r7}
  4042b6:	af00      	add	r7, sp, #0
  4042b8:	4b04      	ldr	r3, [pc, #16]	; (4042cc <pmc_is_locked_pllack+0x18>)
  4042ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4042bc:	f003 0302 	and.w	r3, r3, #2
  4042c0:	4618      	mov	r0, r3
  4042c2:	46bd      	mov	sp, r7
  4042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042c8:	4770      	bx	lr
  4042ca:	bf00      	nop
  4042cc:	400e0400 	.word	0x400e0400

004042d0 <pmc_disable_pllbck>:
  4042d0:	b480      	push	{r7}
  4042d2:	af00      	add	r7, sp, #0
  4042d4:	4b03      	ldr	r3, [pc, #12]	; (4042e4 <pmc_disable_pllbck+0x14>)
  4042d6:	2200      	movs	r2, #0
  4042d8:	62da      	str	r2, [r3, #44]	; 0x2c
  4042da:	bf00      	nop
  4042dc:	46bd      	mov	sp, r7
  4042de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042e2:	4770      	bx	lr
  4042e4:	400e0400 	.word	0x400e0400

004042e8 <pmc_is_locked_pllbck>:
  4042e8:	b480      	push	{r7}
  4042ea:	af00      	add	r7, sp, #0
  4042ec:	4b04      	ldr	r3, [pc, #16]	; (404300 <pmc_is_locked_pllbck+0x18>)
  4042ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4042f0:	f003 0304 	and.w	r3, r3, #4
  4042f4:	4618      	mov	r0, r3
  4042f6:	46bd      	mov	sp, r7
  4042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042fc:	4770      	bx	lr
  4042fe:	bf00      	nop
  404300:	400e0400 	.word	0x400e0400

00404304 <pmc_enable_periph_clk>:
  404304:	b480      	push	{r7}
  404306:	b083      	sub	sp, #12
  404308:	af00      	add	r7, sp, #0
  40430a:	6078      	str	r0, [r7, #4]
  40430c:	687b      	ldr	r3, [r7, #4]
  40430e:	2b32      	cmp	r3, #50	; 0x32
  404310:	d901      	bls.n	404316 <pmc_enable_periph_clk+0x12>
  404312:	2301      	movs	r3, #1
  404314:	e02f      	b.n	404376 <pmc_enable_periph_clk+0x72>
  404316:	687b      	ldr	r3, [r7, #4]
  404318:	2b1f      	cmp	r3, #31
  40431a:	d813      	bhi.n	404344 <pmc_enable_periph_clk+0x40>
  40431c:	4b19      	ldr	r3, [pc, #100]	; (404384 <pmc_enable_periph_clk+0x80>)
  40431e:	699a      	ldr	r2, [r3, #24]
  404320:	2101      	movs	r1, #1
  404322:	687b      	ldr	r3, [r7, #4]
  404324:	fa01 f303 	lsl.w	r3, r1, r3
  404328:	401a      	ands	r2, r3
  40432a:	2101      	movs	r1, #1
  40432c:	687b      	ldr	r3, [r7, #4]
  40432e:	fa01 f303 	lsl.w	r3, r1, r3
  404332:	429a      	cmp	r2, r3
  404334:	d01e      	beq.n	404374 <pmc_enable_periph_clk+0x70>
  404336:	4a13      	ldr	r2, [pc, #76]	; (404384 <pmc_enable_periph_clk+0x80>)
  404338:	2101      	movs	r1, #1
  40433a:	687b      	ldr	r3, [r7, #4]
  40433c:	fa01 f303 	lsl.w	r3, r1, r3
  404340:	6113      	str	r3, [r2, #16]
  404342:	e017      	b.n	404374 <pmc_enable_periph_clk+0x70>
  404344:	687b      	ldr	r3, [r7, #4]
  404346:	3b20      	subs	r3, #32
  404348:	607b      	str	r3, [r7, #4]
  40434a:	4b0e      	ldr	r3, [pc, #56]	; (404384 <pmc_enable_periph_clk+0x80>)
  40434c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404350:	2101      	movs	r1, #1
  404352:	687b      	ldr	r3, [r7, #4]
  404354:	fa01 f303 	lsl.w	r3, r1, r3
  404358:	401a      	ands	r2, r3
  40435a:	2101      	movs	r1, #1
  40435c:	687b      	ldr	r3, [r7, #4]
  40435e:	fa01 f303 	lsl.w	r3, r1, r3
  404362:	429a      	cmp	r2, r3
  404364:	d006      	beq.n	404374 <pmc_enable_periph_clk+0x70>
  404366:	4a07      	ldr	r2, [pc, #28]	; (404384 <pmc_enable_periph_clk+0x80>)
  404368:	2101      	movs	r1, #1
  40436a:	687b      	ldr	r3, [r7, #4]
  40436c:	fa01 f303 	lsl.w	r3, r1, r3
  404370:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  404374:	2300      	movs	r3, #0
  404376:	4618      	mov	r0, r3
  404378:	370c      	adds	r7, #12
  40437a:	46bd      	mov	sp, r7
  40437c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404380:	4770      	bx	lr
  404382:	bf00      	nop
  404384:	400e0400 	.word	0x400e0400

00404388 <pmc_switch_pck_to_pllack>:
  404388:	b480      	push	{r7}
  40438a:	b085      	sub	sp, #20
  40438c:	af00      	add	r7, sp, #0
  40438e:	6078      	str	r0, [r7, #4]
  404390:	6039      	str	r1, [r7, #0]
  404392:	4912      	ldr	r1, [pc, #72]	; (4043dc <pmc_switch_pck_to_pllack+0x54>)
  404394:	683b      	ldr	r3, [r7, #0]
  404396:	f043 0202 	orr.w	r2, r3, #2
  40439a:	687b      	ldr	r3, [r7, #4]
  40439c:	3310      	adds	r3, #16
  40439e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4043a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4043a6:	60fb      	str	r3, [r7, #12]
  4043a8:	e007      	b.n	4043ba <pmc_switch_pck_to_pllack+0x32>
  4043aa:	68fb      	ldr	r3, [r7, #12]
  4043ac:	2b00      	cmp	r3, #0
  4043ae:	d101      	bne.n	4043b4 <pmc_switch_pck_to_pllack+0x2c>
  4043b0:	2301      	movs	r3, #1
  4043b2:	e00d      	b.n	4043d0 <pmc_switch_pck_to_pllack+0x48>
  4043b4:	68fb      	ldr	r3, [r7, #12]
  4043b6:	3b01      	subs	r3, #1
  4043b8:	60fb      	str	r3, [r7, #12]
  4043ba:	4b08      	ldr	r3, [pc, #32]	; (4043dc <pmc_switch_pck_to_pllack+0x54>)
  4043bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4043be:	f44f 7180 	mov.w	r1, #256	; 0x100
  4043c2:	687b      	ldr	r3, [r7, #4]
  4043c4:	fa01 f303 	lsl.w	r3, r1, r3
  4043c8:	4013      	ands	r3, r2
  4043ca:	2b00      	cmp	r3, #0
  4043cc:	d0ed      	beq.n	4043aa <pmc_switch_pck_to_pllack+0x22>
  4043ce:	2300      	movs	r3, #0
  4043d0:	4618      	mov	r0, r3
  4043d2:	3714      	adds	r7, #20
  4043d4:	46bd      	mov	sp, r7
  4043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043da:	4770      	bx	lr
  4043dc:	400e0400 	.word	0x400e0400

004043e0 <pmc_switch_pck_to_mck>:
  4043e0:	b480      	push	{r7}
  4043e2:	b085      	sub	sp, #20
  4043e4:	af00      	add	r7, sp, #0
  4043e6:	6078      	str	r0, [r7, #4]
  4043e8:	6039      	str	r1, [r7, #0]
  4043ea:	4912      	ldr	r1, [pc, #72]	; (404434 <pmc_switch_pck_to_mck+0x54>)
  4043ec:	683b      	ldr	r3, [r7, #0]
  4043ee:	f043 0204 	orr.w	r2, r3, #4
  4043f2:	687b      	ldr	r3, [r7, #4]
  4043f4:	3310      	adds	r3, #16
  4043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4043fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4043fe:	60fb      	str	r3, [r7, #12]
  404400:	e007      	b.n	404412 <pmc_switch_pck_to_mck+0x32>
  404402:	68fb      	ldr	r3, [r7, #12]
  404404:	2b00      	cmp	r3, #0
  404406:	d101      	bne.n	40440c <pmc_switch_pck_to_mck+0x2c>
  404408:	2301      	movs	r3, #1
  40440a:	e00d      	b.n	404428 <pmc_switch_pck_to_mck+0x48>
  40440c:	68fb      	ldr	r3, [r7, #12]
  40440e:	3b01      	subs	r3, #1
  404410:	60fb      	str	r3, [r7, #12]
  404412:	4b08      	ldr	r3, [pc, #32]	; (404434 <pmc_switch_pck_to_mck+0x54>)
  404414:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  404416:	f44f 7180 	mov.w	r1, #256	; 0x100
  40441a:	687b      	ldr	r3, [r7, #4]
  40441c:	fa01 f303 	lsl.w	r3, r1, r3
  404420:	4013      	ands	r3, r2
  404422:	2b00      	cmp	r3, #0
  404424:	d0ed      	beq.n	404402 <pmc_switch_pck_to_mck+0x22>
  404426:	2300      	movs	r3, #0
  404428:	4618      	mov	r0, r3
  40442a:	3714      	adds	r7, #20
  40442c:	46bd      	mov	sp, r7
  40442e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404432:	4770      	bx	lr
  404434:	400e0400 	.word	0x400e0400

00404438 <pmc_enable_pck>:
  404438:	b480      	push	{r7}
  40443a:	b083      	sub	sp, #12
  40443c:	af00      	add	r7, sp, #0
  40443e:	6078      	str	r0, [r7, #4]
  404440:	4a06      	ldr	r2, [pc, #24]	; (40445c <pmc_enable_pck+0x24>)
  404442:	f44f 7180 	mov.w	r1, #256	; 0x100
  404446:	687b      	ldr	r3, [r7, #4]
  404448:	fa01 f303 	lsl.w	r3, r1, r3
  40444c:	6013      	str	r3, [r2, #0]
  40444e:	bf00      	nop
  404450:	370c      	adds	r7, #12
  404452:	46bd      	mov	sp, r7
  404454:	f85d 7b04 	ldr.w	r7, [sp], #4
  404458:	4770      	bx	lr
  40445a:	bf00      	nop
  40445c:	400e0400 	.word	0x400e0400

00404460 <pmc_disable_pck>:
  404460:	b480      	push	{r7}
  404462:	b083      	sub	sp, #12
  404464:	af00      	add	r7, sp, #0
  404466:	6078      	str	r0, [r7, #4]
  404468:	4a06      	ldr	r2, [pc, #24]	; (404484 <pmc_disable_pck+0x24>)
  40446a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40446e:	687b      	ldr	r3, [r7, #4]
  404470:	fa01 f303 	lsl.w	r3, r1, r3
  404474:	6053      	str	r3, [r2, #4]
  404476:	bf00      	nop
  404478:	370c      	adds	r7, #12
  40447a:	46bd      	mov	sp, r7
  40447c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404480:	4770      	bx	lr
  404482:	bf00      	nop
  404484:	400e0400 	.word	0x400e0400

00404488 <pmc_set_flash_in_wait_mode>:
  404488:	b480      	push	{r7}
  40448a:	b083      	sub	sp, #12
  40448c:	af00      	add	r7, sp, #0
  40448e:	6078      	str	r0, [r7, #4]
  404490:	4a04      	ldr	r2, [pc, #16]	; (4044a4 <pmc_set_flash_in_wait_mode+0x1c>)
  404492:	687b      	ldr	r3, [r7, #4]
  404494:	6013      	str	r3, [r2, #0]
  404496:	bf00      	nop
  404498:	370c      	adds	r7, #12
  40449a:	46bd      	mov	sp, r7
  40449c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4044a0:	4770      	bx	lr
  4044a2:	bf00      	nop
  4044a4:	2000016c 	.word	0x2000016c

004044a8 <pmc_enable_waitmode>:
  4044a8:	b480      	push	{r7}
  4044aa:	b083      	sub	sp, #12
  4044ac:	af00      	add	r7, sp, #0
  4044ae:	4b1b      	ldr	r3, [pc, #108]	; (40451c <pmc_enable_waitmode+0x74>)
  4044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4044b2:	607b      	str	r3, [r7, #4]
  4044b4:	687b      	ldr	r3, [r7, #4]
  4044b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  4044ba:	607b      	str	r3, [r7, #4]
  4044bc:	4b18      	ldr	r3, [pc, #96]	; (404520 <pmc_enable_waitmode+0x78>)
  4044be:	681b      	ldr	r3, [r3, #0]
  4044c0:	687a      	ldr	r2, [r7, #4]
  4044c2:	4313      	orrs	r3, r2
  4044c4:	607b      	str	r3, [r7, #4]
  4044c6:	4a15      	ldr	r2, [pc, #84]	; (40451c <pmc_enable_waitmode+0x74>)
  4044c8:	687b      	ldr	r3, [r7, #4]
  4044ca:	6713      	str	r3, [r2, #112]	; 0x70
  4044cc:	4a13      	ldr	r2, [pc, #76]	; (40451c <pmc_enable_waitmode+0x74>)
  4044ce:	4b13      	ldr	r3, [pc, #76]	; (40451c <pmc_enable_waitmode+0x74>)
  4044d0:	6a1b      	ldr	r3, [r3, #32]
  4044d2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4044d6:	f043 0304 	orr.w	r3, r3, #4
  4044da:	6213      	str	r3, [r2, #32]
  4044dc:	bf00      	nop
  4044de:	4b0f      	ldr	r3, [pc, #60]	; (40451c <pmc_enable_waitmode+0x74>)
  4044e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4044e2:	f003 0308 	and.w	r3, r3, #8
  4044e6:	2b00      	cmp	r3, #0
  4044e8:	d0f9      	beq.n	4044de <pmc_enable_waitmode+0x36>
  4044ea:	2300      	movs	r3, #0
  4044ec:	607b      	str	r3, [r7, #4]
  4044ee:	e003      	b.n	4044f8 <pmc_enable_waitmode+0x50>
  4044f0:	bf00      	nop
  4044f2:	687b      	ldr	r3, [r7, #4]
  4044f4:	3301      	adds	r3, #1
  4044f6:	607b      	str	r3, [r7, #4]
  4044f8:	687b      	ldr	r3, [r7, #4]
  4044fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4044fe:	d3f7      	bcc.n	4044f0 <pmc_enable_waitmode+0x48>
  404500:	bf00      	nop
  404502:	4b06      	ldr	r3, [pc, #24]	; (40451c <pmc_enable_waitmode+0x74>)
  404504:	6a1b      	ldr	r3, [r3, #32]
  404506:	f003 0308 	and.w	r3, r3, #8
  40450a:	2b00      	cmp	r3, #0
  40450c:	d0f9      	beq.n	404502 <pmc_enable_waitmode+0x5a>
  40450e:	bf00      	nop
  404510:	370c      	adds	r7, #12
  404512:	46bd      	mov	sp, r7
  404514:	f85d 7b04 	ldr.w	r7, [sp], #4
  404518:	4770      	bx	lr
  40451a:	bf00      	nop
  40451c:	400e0400 	.word	0x400e0400
  404520:	2000016c 	.word	0x2000016c

00404524 <pmc_sleep>:
  404524:	b590      	push	{r4, r7, lr}
  404526:	b099      	sub	sp, #100	; 0x64
  404528:	af00      	add	r7, sp, #0
  40452a:	6078      	str	r0, [r7, #4]
  40452c:	687b      	ldr	r3, [r7, #4]
  40452e:	3b01      	subs	r3, #1
  404530:	2b04      	cmp	r3, #4
  404532:	f200 81af 	bhi.w	404894 <pmc_sleep+0x370>
  404536:	a201      	add	r2, pc, #4	; (adr r2, 40453c <pmc_sleep+0x18>)
  404538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40453c:	00404551 	.word	0x00404551
  404540:	00404551 	.word	0x00404551
  404544:	00404571 	.word	0x00404571
  404548:	00404571 	.word	0x00404571
  40454c:	00404873 	.word	0x00404873
  404550:	4a77      	ldr	r2, [pc, #476]	; (404730 <pmc_sleep+0x20c>)
  404552:	4b77      	ldr	r3, [pc, #476]	; (404730 <pmc_sleep+0x20c>)
  404554:	691b      	ldr	r3, [r3, #16]
  404556:	f023 0304 	bic.w	r3, r3, #4
  40455a:	6113      	str	r3, [r2, #16]
  40455c:	4b75      	ldr	r3, [pc, #468]	; (404734 <pmc_sleep+0x210>)
  40455e:	2201      	movs	r2, #1
  404560:	701a      	strb	r2, [r3, #0]
  404562:	f3bf 8f5f 	dmb	sy
  404566:	b662      	cpsie	i
  404568:	f3bf 8f4f 	dsb	sy
  40456c:	bf30      	wfi
  40456e:	e191      	b.n	404894 <pmc_sleep+0x370>
  404570:	687b      	ldr	r3, [r7, #4]
  404572:	2b03      	cmp	r3, #3
  404574:	d103      	bne.n	40457e <pmc_sleep+0x5a>
  404576:	2000      	movs	r0, #0
  404578:	4b6f      	ldr	r3, [pc, #444]	; (404738 <pmc_sleep+0x214>)
  40457a:	4798      	blx	r3
  40457c:	e003      	b.n	404586 <pmc_sleep+0x62>
  40457e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  404582:	4b6d      	ldr	r3, [pc, #436]	; (404738 <pmc_sleep+0x214>)
  404584:	4798      	blx	r3
  404586:	b672      	cpsid	i
  404588:	f3bf 8f5f 	dmb	sy
  40458c:	4b69      	ldr	r3, [pc, #420]	; (404734 <pmc_sleep+0x210>)
  40458e:	2200      	movs	r2, #0
  404590:	701a      	strb	r2, [r3, #0]
  404592:	4b6a      	ldr	r3, [pc, #424]	; (40473c <pmc_sleep+0x218>)
  404594:	2201      	movs	r2, #1
  404596:	701a      	strb	r2, [r3, #0]
  404598:	687b      	ldr	r3, [r7, #4]
  40459a:	2b04      	cmp	r3, #4
  40459c:	bf0c      	ite	eq
  40459e:	2301      	moveq	r3, #1
  4045a0:	2300      	movne	r3, #0
  4045a2:	b2da      	uxtb	r2, r3
  4045a4:	f107 031c 	add.w	r3, r7, #28
  4045a8:	643b      	str	r3, [r7, #64]	; 0x40
  4045aa:	f107 0318 	add.w	r3, r7, #24
  4045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  4045b0:	f107 0314 	add.w	r3, r7, #20
  4045b4:	63bb      	str	r3, [r7, #56]	; 0x38
  4045b6:	f107 0310 	add.w	r3, r7, #16
  4045ba:	637b      	str	r3, [r7, #52]	; 0x34
  4045bc:	f107 030c 	add.w	r3, r7, #12
  4045c0:	633b      	str	r3, [r7, #48]	; 0x30
  4045c2:	4613      	mov	r3, r2
  4045c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4045c8:	4b5d      	ldr	r3, [pc, #372]	; (404740 <pmc_sleep+0x21c>)
  4045ca:	6a1b      	ldr	r3, [r3, #32]
  4045cc:	62bb      	str	r3, [r7, #40]	; 0x28
  4045ce:	4b5c      	ldr	r3, [pc, #368]	; (404740 <pmc_sleep+0x21c>)
  4045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4045d2:	627b      	str	r3, [r7, #36]	; 0x24
  4045d4:	4b5b      	ldr	r3, [pc, #364]	; (404744 <pmc_sleep+0x220>)
  4045d6:	681b      	ldr	r3, [r3, #0]
  4045d8:	623b      	str	r3, [r7, #32]
  4045da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4045dc:	2b00      	cmp	r3, #0
  4045de:	d002      	beq.n	4045e6 <pmc_sleep+0xc2>
  4045e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4045e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4045e4:	601a      	str	r2, [r3, #0]
  4045e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4045e8:	2b00      	cmp	r3, #0
  4045ea:	d003      	beq.n	4045f4 <pmc_sleep+0xd0>
  4045ec:	4b54      	ldr	r3, [pc, #336]	; (404740 <pmc_sleep+0x21c>)
  4045ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4045f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4045f2:	601a      	str	r2, [r3, #0]
  4045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4045f6:	2b00      	cmp	r3, #0
  4045f8:	d002      	beq.n	404600 <pmc_sleep+0xdc>
  4045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4045fc:	2200      	movs	r2, #0
  4045fe:	601a      	str	r2, [r3, #0]
  404600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  404602:	2b00      	cmp	r3, #0
  404604:	d002      	beq.n	40460c <pmc_sleep+0xe8>
  404606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  404608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40460a:	601a      	str	r2, [r3, #0]
  40460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40460e:	2b00      	cmp	r3, #0
  404610:	d002      	beq.n	404618 <pmc_sleep+0xf4>
  404612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404614:	6a3a      	ldr	r2, [r7, #32]
  404616:	601a      	str	r2, [r3, #0]
  404618:	4a49      	ldr	r2, [pc, #292]	; (404740 <pmc_sleep+0x21c>)
  40461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40461c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404620:	f043 0308 	orr.w	r3, r3, #8
  404624:	6213      	str	r3, [r2, #32]
  404626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404628:	f003 0303 	and.w	r3, r3, #3
  40462c:	2b01      	cmp	r3, #1
  40462e:	d90e      	bls.n	40464e <pmc_sleep+0x12a>
  404630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404632:	f023 0303 	bic.w	r3, r3, #3
  404636:	f043 0301 	orr.w	r3, r3, #1
  40463a:	627b      	str	r3, [r7, #36]	; 0x24
  40463c:	4a40      	ldr	r2, [pc, #256]	; (404740 <pmc_sleep+0x21c>)
  40463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404640:	6313      	str	r3, [r2, #48]	; 0x30
  404642:	4b3f      	ldr	r3, [pc, #252]	; (404740 <pmc_sleep+0x21c>)
  404644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404646:	f003 0308 	and.w	r3, r3, #8
  40464a:	2b00      	cmp	r3, #0
  40464c:	d0f9      	beq.n	404642 <pmc_sleep+0x11e>
  40464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404650:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404654:	2b00      	cmp	r3, #0
  404656:	d00c      	beq.n	404672 <pmc_sleep+0x14e>
  404658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40465e:	627b      	str	r3, [r7, #36]	; 0x24
  404660:	4a37      	ldr	r2, [pc, #220]	; (404740 <pmc_sleep+0x21c>)
  404662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404664:	6313      	str	r3, [r2, #48]	; 0x30
  404666:	4b36      	ldr	r3, [pc, #216]	; (404740 <pmc_sleep+0x21c>)
  404668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40466a:	f003 0308 	and.w	r3, r3, #8
  40466e:	2b00      	cmp	r3, #0
  404670:	d0f9      	beq.n	404666 <pmc_sleep+0x142>
  404672:	4b35      	ldr	r3, [pc, #212]	; (404748 <pmc_sleep+0x224>)
  404674:	4798      	blx	r3
  404676:	4b32      	ldr	r3, [pc, #200]	; (404740 <pmc_sleep+0x21c>)
  404678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40467e:	2b00      	cmp	r3, #0
  404680:	d0f9      	beq.n	404676 <pmc_sleep+0x152>
  404682:	4a30      	ldr	r2, [pc, #192]	; (404744 <pmc_sleep+0x220>)
  404684:	6a3b      	ldr	r3, [r7, #32]
  404686:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  40468a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40468e:	6013      	str	r3, [r2, #0]
  404690:	492b      	ldr	r1, [pc, #172]	; (404740 <pmc_sleep+0x21c>)
  404692:	4b2b      	ldr	r3, [pc, #172]	; (404740 <pmc_sleep+0x21c>)
  404694:	6a1a      	ldr	r2, [r3, #32]
  404696:	4b2d      	ldr	r3, [pc, #180]	; (40474c <pmc_sleep+0x228>)
  404698:	4013      	ands	r3, r2
  40469a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40469e:	f043 0320 	orr.w	r3, r3, #32
  4046a2:	620b      	str	r3, [r1, #32]
  4046a4:	4b26      	ldr	r3, [pc, #152]	; (404740 <pmc_sleep+0x21c>)
  4046a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4046a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4046ac:	2b00      	cmp	r3, #0
  4046ae:	d0f9      	beq.n	4046a4 <pmc_sleep+0x180>
  4046b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4046b4:	2b00      	cmp	r3, #0
  4046b6:	d009      	beq.n	4046cc <pmc_sleep+0x1a8>
  4046b8:	4a21      	ldr	r2, [pc, #132]	; (404740 <pmc_sleep+0x21c>)
  4046ba:	4b21      	ldr	r3, [pc, #132]	; (404740 <pmc_sleep+0x21c>)
  4046bc:	6a1b      	ldr	r3, [r3, #32]
  4046be:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4046c2:	f023 0301 	bic.w	r3, r3, #1
  4046c6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4046ca:	6213      	str	r3, [r2, #32]
  4046cc:	4b19      	ldr	r3, [pc, #100]	; (404734 <pmc_sleep+0x210>)
  4046ce:	2201      	movs	r2, #1
  4046d0:	701a      	strb	r2, [r3, #0]
  4046d2:	f3bf 8f5f 	dmb	sy
  4046d6:	b662      	cpsie	i
  4046d8:	4b1d      	ldr	r3, [pc, #116]	; (404750 <pmc_sleep+0x22c>)
  4046da:	4798      	blx	r3
  4046dc:	b672      	cpsid	i
  4046de:	f3bf 8f5f 	dmb	sy
  4046e2:	4b14      	ldr	r3, [pc, #80]	; (404734 <pmc_sleep+0x210>)
  4046e4:	2200      	movs	r2, #0
  4046e6:	701a      	strb	r2, [r3, #0]
  4046e8:	69fc      	ldr	r4, [r7, #28]
  4046ea:	69b8      	ldr	r0, [r7, #24]
  4046ec:	6979      	ldr	r1, [r7, #20]
  4046ee:	693a      	ldr	r2, [r7, #16]
  4046f0:	68fb      	ldr	r3, [r7, #12]
  4046f2:	65fc      	str	r4, [r7, #92]	; 0x5c
  4046f4:	65b8      	str	r0, [r7, #88]	; 0x58
  4046f6:	6579      	str	r1, [r7, #84]	; 0x54
  4046f8:	653a      	str	r2, [r7, #80]	; 0x50
  4046fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  4046fc:	2300      	movs	r3, #0
  4046fe:	64bb      	str	r3, [r7, #72]	; 0x48
  404700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  404702:	f003 0302 	and.w	r3, r3, #2
  404706:	2b00      	cmp	r3, #0
  404708:	d028      	beq.n	40475c <pmc_sleep+0x238>
  40470a:	490d      	ldr	r1, [pc, #52]	; (404740 <pmc_sleep+0x21c>)
  40470c:	4b0c      	ldr	r3, [pc, #48]	; (404740 <pmc_sleep+0x21c>)
  40470e:	6a1b      	ldr	r3, [r3, #32]
  404710:	4a10      	ldr	r2, [pc, #64]	; (404754 <pmc_sleep+0x230>)
  404712:	401a      	ands	r2, r3
  404714:	4b10      	ldr	r3, [pc, #64]	; (404758 <pmc_sleep+0x234>)
  404716:	4313      	orrs	r3, r2
  404718:	620b      	str	r3, [r1, #32]
  40471a:	4a09      	ldr	r2, [pc, #36]	; (404740 <pmc_sleep+0x21c>)
  40471c:	4b08      	ldr	r3, [pc, #32]	; (404740 <pmc_sleep+0x21c>)
  40471e:	6a1b      	ldr	r3, [r3, #32]
  404720:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404724:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  404728:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40472c:	6213      	str	r3, [r2, #32]
  40472e:	e050      	b.n	4047d2 <pmc_sleep+0x2ae>
  404730:	e000ed00 	.word	0xe000ed00
  404734:	20000114 	.word	0x20000114
  404738:	00404489 	.word	0x00404489
  40473c:	20000424 	.word	0x20000424
  404740:	400e0400 	.word	0x400e0400
  404744:	400e0a00 	.word	0x400e0a00
  404748:	0040429d 	.word	0x0040429d
  40474c:	fec8ffdf 	.word	0xfec8ffdf
  404750:	004044a9 	.word	0x004044a9
  404754:	fec8fffc 	.word	0xfec8fffc
  404758:	01370002 	.word	0x01370002
  40475c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40475e:	f003 0301 	and.w	r3, r3, #1
  404762:	2b00      	cmp	r3, #0
  404764:	d035      	beq.n	4047d2 <pmc_sleep+0x2ae>
  404766:	4b4d      	ldr	r3, [pc, #308]	; (40489c <pmc_sleep+0x378>)
  404768:	6a1b      	ldr	r3, [r3, #32]
  40476a:	f003 0301 	and.w	r3, r3, #1
  40476e:	2b00      	cmp	r3, #0
  404770:	d111      	bne.n	404796 <pmc_sleep+0x272>
  404772:	4a4a      	ldr	r2, [pc, #296]	; (40489c <pmc_sleep+0x378>)
  404774:	4b49      	ldr	r3, [pc, #292]	; (40489c <pmc_sleep+0x378>)
  404776:	6a1b      	ldr	r3, [r3, #32]
  404778:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40477c:	f023 0303 	bic.w	r3, r3, #3
  404780:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404784:	f043 0301 	orr.w	r3, r3, #1
  404788:	6213      	str	r3, [r2, #32]
  40478a:	4b44      	ldr	r3, [pc, #272]	; (40489c <pmc_sleep+0x378>)
  40478c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40478e:	f003 0301 	and.w	r3, r3, #1
  404792:	2b00      	cmp	r3, #0
  404794:	d0f9      	beq.n	40478a <pmc_sleep+0x266>
  404796:	4b41      	ldr	r3, [pc, #260]	; (40489c <pmc_sleep+0x378>)
  404798:	6a1b      	ldr	r3, [r3, #32]
  40479a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40479e:	2b00      	cmp	r3, #0
  4047a0:	d10d      	bne.n	4047be <pmc_sleep+0x29a>
  4047a2:	4a3e      	ldr	r2, [pc, #248]	; (40489c <pmc_sleep+0x378>)
  4047a4:	4b3d      	ldr	r3, [pc, #244]	; (40489c <pmc_sleep+0x378>)
  4047a6:	6a1b      	ldr	r3, [r3, #32]
  4047a8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4047b0:	6213      	str	r3, [r2, #32]
  4047b2:	4b3a      	ldr	r3, [pc, #232]	; (40489c <pmc_sleep+0x378>)
  4047b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4047b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4047ba:	2b00      	cmp	r3, #0
  4047bc:	d0f9      	beq.n	4047b2 <pmc_sleep+0x28e>
  4047be:	4a37      	ldr	r2, [pc, #220]	; (40489c <pmc_sleep+0x378>)
  4047c0:	4b36      	ldr	r3, [pc, #216]	; (40489c <pmc_sleep+0x378>)
  4047c2:	6a1b      	ldr	r3, [r3, #32]
  4047c4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4047c8:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  4047cc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4047d0:	6213      	str	r3, [r2, #32]
  4047d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
  4047d4:	4b32      	ldr	r3, [pc, #200]	; (4048a0 <pmc_sleep+0x37c>)
  4047d6:	4013      	ands	r3, r2
  4047d8:	2b00      	cmp	r3, #0
  4047da:	d006      	beq.n	4047ea <pmc_sleep+0x2c6>
  4047dc:	4a2f      	ldr	r2, [pc, #188]	; (40489c <pmc_sleep+0x378>)
  4047de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  4047e0:	6293      	str	r3, [r2, #40]	; 0x28
  4047e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4047e4:	f043 0302 	orr.w	r3, r3, #2
  4047e8:	64bb      	str	r3, [r7, #72]	; 0x48
  4047ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4047ec:	f003 0303 	and.w	r3, r3, #3
  4047f0:	2b02      	cmp	r3, #2
  4047f2:	d105      	bne.n	404800 <pmc_sleep+0x2dc>
  4047f4:	4b29      	ldr	r3, [pc, #164]	; (40489c <pmc_sleep+0x378>)
  4047f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4047f8:	f003 0302 	and.w	r3, r3, #2
  4047fc:	2b00      	cmp	r3, #0
  4047fe:	d0f9      	beq.n	4047f4 <pmc_sleep+0x2d0>
  404800:	4b26      	ldr	r3, [pc, #152]	; (40489c <pmc_sleep+0x378>)
  404802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404804:	647b      	str	r3, [r7, #68]	; 0x44
  404806:	4925      	ldr	r1, [pc, #148]	; (40489c <pmc_sleep+0x378>)
  404808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40480a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40480e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  404810:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404814:	4313      	orrs	r3, r2
  404816:	630b      	str	r3, [r1, #48]	; 0x30
  404818:	4b20      	ldr	r3, [pc, #128]	; (40489c <pmc_sleep+0x378>)
  40481a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40481c:	f003 0308 	and.w	r3, r3, #8
  404820:	2b00      	cmp	r3, #0
  404822:	d0f9      	beq.n	404818 <pmc_sleep+0x2f4>
  404824:	4a1f      	ldr	r2, [pc, #124]	; (4048a4 <pmc_sleep+0x380>)
  404826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  404828:	6013      	str	r3, [r2, #0]
  40482a:	4a1c      	ldr	r2, [pc, #112]	; (40489c <pmc_sleep+0x378>)
  40482c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40482e:	6313      	str	r3, [r2, #48]	; 0x30
  404830:	4b1a      	ldr	r3, [pc, #104]	; (40489c <pmc_sleep+0x378>)
  404832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404834:	f003 0308 	and.w	r3, r3, #8
  404838:	2b00      	cmp	r3, #0
  40483a:	d0f9      	beq.n	404830 <pmc_sleep+0x30c>
  40483c:	4b17      	ldr	r3, [pc, #92]	; (40489c <pmc_sleep+0x378>)
  40483e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  404840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  404842:	4013      	ands	r3, r2
  404844:	2b00      	cmp	r3, #0
  404846:	d0f9      	beq.n	40483c <pmc_sleep+0x318>
  404848:	4b17      	ldr	r3, [pc, #92]	; (4048a8 <pmc_sleep+0x384>)
  40484a:	2200      	movs	r2, #0
  40484c:	701a      	strb	r2, [r3, #0]
  40484e:	4b17      	ldr	r3, [pc, #92]	; (4048ac <pmc_sleep+0x388>)
  404850:	681b      	ldr	r3, [r3, #0]
  404852:	2b00      	cmp	r3, #0
  404854:	d005      	beq.n	404862 <pmc_sleep+0x33e>
  404856:	4b15      	ldr	r3, [pc, #84]	; (4048ac <pmc_sleep+0x388>)
  404858:	681b      	ldr	r3, [r3, #0]
  40485a:	4798      	blx	r3
  40485c:	4b13      	ldr	r3, [pc, #76]	; (4048ac <pmc_sleep+0x388>)
  40485e:	2200      	movs	r2, #0
  404860:	601a      	str	r2, [r3, #0]
  404862:	4b13      	ldr	r3, [pc, #76]	; (4048b0 <pmc_sleep+0x38c>)
  404864:	2201      	movs	r2, #1
  404866:	701a      	strb	r2, [r3, #0]
  404868:	f3bf 8f5f 	dmb	sy
  40486c:	b662      	cpsie	i
  40486e:	bf00      	nop
  404870:	e010      	b.n	404894 <pmc_sleep+0x370>
  404872:	4a10      	ldr	r2, [pc, #64]	; (4048b4 <pmc_sleep+0x390>)
  404874:	4b0f      	ldr	r3, [pc, #60]	; (4048b4 <pmc_sleep+0x390>)
  404876:	691b      	ldr	r3, [r3, #16]
  404878:	f043 0304 	orr.w	r3, r3, #4
  40487c:	6113      	str	r3, [r2, #16]
  40487e:	4b0e      	ldr	r3, [pc, #56]	; (4048b8 <pmc_sleep+0x394>)
  404880:	4a0e      	ldr	r2, [pc, #56]	; (4048bc <pmc_sleep+0x398>)
  404882:	601a      	str	r2, [r3, #0]
  404884:	4b0a      	ldr	r3, [pc, #40]	; (4048b0 <pmc_sleep+0x38c>)
  404886:	2201      	movs	r2, #1
  404888:	701a      	strb	r2, [r3, #0]
  40488a:	f3bf 8f5f 	dmb	sy
  40488e:	b662      	cpsie	i
  404890:	bf30      	wfi
  404892:	bf00      	nop
  404894:	bf00      	nop
  404896:	3764      	adds	r7, #100	; 0x64
  404898:	46bd      	mov	sp, r7
  40489a:	bd90      	pop	{r4, r7, pc}
  40489c:	400e0400 	.word	0x400e0400
  4048a0:	1fff0000 	.word	0x1fff0000
  4048a4:	400e0a00 	.word	0x400e0a00
  4048a8:	20000424 	.word	0x20000424
  4048ac:	20000428 	.word	0x20000428
  4048b0:	20000114 	.word	0x20000114
  4048b4:	e000ed00 	.word	0xe000ed00
  4048b8:	400e1410 	.word	0x400e1410
  4048bc:	a5000004 	.word	0xa5000004

004048c0 <rtt_get_status>:
  4048c0:	b480      	push	{r7}
  4048c2:	b083      	sub	sp, #12
  4048c4:	af00      	add	r7, sp, #0
  4048c6:	6078      	str	r0, [r7, #4]
  4048c8:	687b      	ldr	r3, [r7, #4]
  4048ca:	68db      	ldr	r3, [r3, #12]
  4048cc:	4618      	mov	r0, r3
  4048ce:	370c      	adds	r7, #12
  4048d0:	46bd      	mov	sp, r7
  4048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048d6:	4770      	bx	lr

004048d8 <supc_set_regulator_trim_user>:
  4048d8:	b480      	push	{r7}
  4048da:	b085      	sub	sp, #20
  4048dc:	af00      	add	r7, sp, #0
  4048de:	6078      	str	r0, [r7, #4]
  4048e0:	6039      	str	r1, [r7, #0]
  4048e2:	687b      	ldr	r3, [r7, #4]
  4048e4:	69db      	ldr	r3, [r3, #28]
  4048e6:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
  4048ea:	60fb      	str	r3, [r7, #12]
  4048ec:	683b      	ldr	r3, [r7, #0]
  4048ee:	025b      	lsls	r3, r3, #9
  4048f0:	f403 52f0 	and.w	r2, r3, #7680	; 0x1e00
  4048f4:	68fb      	ldr	r3, [r7, #12]
  4048f6:	4313      	orrs	r3, r2
  4048f8:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  4048fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404900:	687a      	ldr	r2, [r7, #4]
  404902:	61d3      	str	r3, [r2, #28]
  404904:	bf00      	nop
  404906:	3714      	adds	r7, #20
  404908:	46bd      	mov	sp, r7
  40490a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40490e:	4770      	bx	lr

00404910 <tc_init>:
  404910:	b480      	push	{r7}
  404912:	b087      	sub	sp, #28
  404914:	af00      	add	r7, sp, #0
  404916:	60f8      	str	r0, [r7, #12]
  404918:	60b9      	str	r1, [r7, #8]
  40491a:	607a      	str	r2, [r7, #4]
  40491c:	68fa      	ldr	r2, [r7, #12]
  40491e:	68bb      	ldr	r3, [r7, #8]
  404920:	019b      	lsls	r3, r3, #6
  404922:	4413      	add	r3, r2
  404924:	617b      	str	r3, [r7, #20]
  404926:	697b      	ldr	r3, [r7, #20]
  404928:	2202      	movs	r2, #2
  40492a:	601a      	str	r2, [r3, #0]
  40492c:	697b      	ldr	r3, [r7, #20]
  40492e:	f04f 32ff 	mov.w	r2, #4294967295
  404932:	629a      	str	r2, [r3, #40]	; 0x28
  404934:	697b      	ldr	r3, [r7, #20]
  404936:	6a1b      	ldr	r3, [r3, #32]
  404938:	697b      	ldr	r3, [r7, #20]
  40493a:	687a      	ldr	r2, [r7, #4]
  40493c:	605a      	str	r2, [r3, #4]
  40493e:	bf00      	nop
  404940:	371c      	adds	r7, #28
  404942:	46bd      	mov	sp, r7
  404944:	f85d 7b04 	ldr.w	r7, [sp], #4
  404948:	4770      	bx	lr

0040494a <tc_start>:
  40494a:	b480      	push	{r7}
  40494c:	b083      	sub	sp, #12
  40494e:	af00      	add	r7, sp, #0
  404950:	6078      	str	r0, [r7, #4]
  404952:	6039      	str	r1, [r7, #0]
  404954:	687a      	ldr	r2, [r7, #4]
  404956:	683b      	ldr	r3, [r7, #0]
  404958:	019b      	lsls	r3, r3, #6
  40495a:	4413      	add	r3, r2
  40495c:	2205      	movs	r2, #5
  40495e:	601a      	str	r2, [r3, #0]
  404960:	bf00      	nop
  404962:	370c      	adds	r7, #12
  404964:	46bd      	mov	sp, r7
  404966:	f85d 7b04 	ldr.w	r7, [sp], #4
  40496a:	4770      	bx	lr

0040496c <tc_write_rc>:
  40496c:	b480      	push	{r7}
  40496e:	b085      	sub	sp, #20
  404970:	af00      	add	r7, sp, #0
  404972:	60f8      	str	r0, [r7, #12]
  404974:	60b9      	str	r1, [r7, #8]
  404976:	607a      	str	r2, [r7, #4]
  404978:	68fa      	ldr	r2, [r7, #12]
  40497a:	68bb      	ldr	r3, [r7, #8]
  40497c:	019b      	lsls	r3, r3, #6
  40497e:	4413      	add	r3, r2
  404980:	331c      	adds	r3, #28
  404982:	687a      	ldr	r2, [r7, #4]
  404984:	601a      	str	r2, [r3, #0]
  404986:	bf00      	nop
  404988:	3714      	adds	r7, #20
  40498a:	46bd      	mov	sp, r7
  40498c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404990:	4770      	bx	lr

00404992 <tc_enable_interrupt>:
  404992:	b480      	push	{r7}
  404994:	b087      	sub	sp, #28
  404996:	af00      	add	r7, sp, #0
  404998:	60f8      	str	r0, [r7, #12]
  40499a:	60b9      	str	r1, [r7, #8]
  40499c:	607a      	str	r2, [r7, #4]
  40499e:	68fa      	ldr	r2, [r7, #12]
  4049a0:	68bb      	ldr	r3, [r7, #8]
  4049a2:	019b      	lsls	r3, r3, #6
  4049a4:	4413      	add	r3, r2
  4049a6:	617b      	str	r3, [r7, #20]
  4049a8:	697b      	ldr	r3, [r7, #20]
  4049aa:	687a      	ldr	r2, [r7, #4]
  4049ac:	625a      	str	r2, [r3, #36]	; 0x24
  4049ae:	bf00      	nop
  4049b0:	371c      	adds	r7, #28
  4049b2:	46bd      	mov	sp, r7
  4049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049b8:	4770      	bx	lr

004049ba <tc_get_interrupt_mask>:
  4049ba:	b480      	push	{r7}
  4049bc:	b085      	sub	sp, #20
  4049be:	af00      	add	r7, sp, #0
  4049c0:	6078      	str	r0, [r7, #4]
  4049c2:	6039      	str	r1, [r7, #0]
  4049c4:	687a      	ldr	r2, [r7, #4]
  4049c6:	683b      	ldr	r3, [r7, #0]
  4049c8:	019b      	lsls	r3, r3, #6
  4049ca:	4413      	add	r3, r2
  4049cc:	60fb      	str	r3, [r7, #12]
  4049ce:	68fb      	ldr	r3, [r7, #12]
  4049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4049d2:	4618      	mov	r0, r3
  4049d4:	3714      	adds	r7, #20
  4049d6:	46bd      	mov	sp, r7
  4049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049dc:	4770      	bx	lr

004049de <tc_get_status>:
  4049de:	b480      	push	{r7}
  4049e0:	b085      	sub	sp, #20
  4049e2:	af00      	add	r7, sp, #0
  4049e4:	6078      	str	r0, [r7, #4]
  4049e6:	6039      	str	r1, [r7, #0]
  4049e8:	687a      	ldr	r2, [r7, #4]
  4049ea:	683b      	ldr	r3, [r7, #0]
  4049ec:	019b      	lsls	r3, r3, #6
  4049ee:	4413      	add	r3, r2
  4049f0:	60fb      	str	r3, [r7, #12]
  4049f2:	68fb      	ldr	r3, [r7, #12]
  4049f4:	6a1b      	ldr	r3, [r3, #32]
  4049f6:	4618      	mov	r0, r3
  4049f8:	3714      	adds	r7, #20
  4049fa:	46bd      	mov	sp, r7
  4049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a00:	4770      	bx	lr

00404a02 <twi_enable_master_mode>:
  404a02:	b480      	push	{r7}
  404a04:	b083      	sub	sp, #12
  404a06:	af00      	add	r7, sp, #0
  404a08:	6078      	str	r0, [r7, #4]
  404a0a:	687b      	ldr	r3, [r7, #4]
  404a0c:	2208      	movs	r2, #8
  404a0e:	601a      	str	r2, [r3, #0]
  404a10:	687b      	ldr	r3, [r7, #4]
  404a12:	2220      	movs	r2, #32
  404a14:	601a      	str	r2, [r3, #0]
  404a16:	687b      	ldr	r3, [r7, #4]
  404a18:	2204      	movs	r2, #4
  404a1a:	601a      	str	r2, [r3, #0]
  404a1c:	bf00      	nop
  404a1e:	370c      	adds	r7, #12
  404a20:	46bd      	mov	sp, r7
  404a22:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a26:	4770      	bx	lr

00404a28 <twi_master_init>:
  404a28:	b580      	push	{r7, lr}
  404a2a:	b084      	sub	sp, #16
  404a2c:	af00      	add	r7, sp, #0
  404a2e:	6078      	str	r0, [r7, #4]
  404a30:	6039      	str	r1, [r7, #0]
  404a32:	2300      	movs	r3, #0
  404a34:	60fb      	str	r3, [r7, #12]
  404a36:	687b      	ldr	r3, [r7, #4]
  404a38:	f04f 32ff 	mov.w	r2, #4294967295
  404a3c:	629a      	str	r2, [r3, #40]	; 0x28
  404a3e:	687b      	ldr	r3, [r7, #4]
  404a40:	6a1b      	ldr	r3, [r3, #32]
  404a42:	6878      	ldr	r0, [r7, #4]
  404a44:	4b0e      	ldr	r3, [pc, #56]	; (404a80 <twi_master_init+0x58>)
  404a46:	4798      	blx	r3
  404a48:	6878      	ldr	r0, [r7, #4]
  404a4a:	4b0e      	ldr	r3, [pc, #56]	; (404a84 <twi_master_init+0x5c>)
  404a4c:	4798      	blx	r3
  404a4e:	683b      	ldr	r3, [r7, #0]
  404a50:	6859      	ldr	r1, [r3, #4]
  404a52:	683b      	ldr	r3, [r7, #0]
  404a54:	681b      	ldr	r3, [r3, #0]
  404a56:	461a      	mov	r2, r3
  404a58:	6878      	ldr	r0, [r7, #4]
  404a5a:	4b0b      	ldr	r3, [pc, #44]	; (404a88 <twi_master_init+0x60>)
  404a5c:	4798      	blx	r3
  404a5e:	4603      	mov	r3, r0
  404a60:	2b01      	cmp	r3, #1
  404a62:	d101      	bne.n	404a68 <twi_master_init+0x40>
  404a64:	2301      	movs	r3, #1
  404a66:	60fb      	str	r3, [r7, #12]
  404a68:	683b      	ldr	r3, [r7, #0]
  404a6a:	7a5b      	ldrb	r3, [r3, #9]
  404a6c:	2b01      	cmp	r3, #1
  404a6e:	d102      	bne.n	404a76 <twi_master_init+0x4e>
  404a70:	687b      	ldr	r3, [r7, #4]
  404a72:	2240      	movs	r2, #64	; 0x40
  404a74:	601a      	str	r2, [r3, #0]
  404a76:	68fb      	ldr	r3, [r7, #12]
  404a78:	4618      	mov	r0, r3
  404a7a:	3710      	adds	r7, #16
  404a7c:	46bd      	mov	sp, r7
  404a7e:	bd80      	pop	{r7, pc}
  404a80:	00404e31 	.word	0x00404e31
  404a84:	00404a03 	.word	0x00404a03
  404a88:	00404a8d 	.word	0x00404a8d

00404a8c <twi_set_speed>:
  404a8c:	b480      	push	{r7}
  404a8e:	b089      	sub	sp, #36	; 0x24
  404a90:	af00      	add	r7, sp, #0
  404a92:	60f8      	str	r0, [r7, #12]
  404a94:	60b9      	str	r1, [r7, #8]
  404a96:	607a      	str	r2, [r7, #4]
  404a98:	2300      	movs	r3, #0
  404a9a:	61fb      	str	r3, [r7, #28]
  404a9c:	68bb      	ldr	r3, [r7, #8]
  404a9e:	4a34      	ldr	r2, [pc, #208]	; (404b70 <twi_set_speed+0xe4>)
  404aa0:	4293      	cmp	r3, r2
  404aa2:	d901      	bls.n	404aa8 <twi_set_speed+0x1c>
  404aa4:	2301      	movs	r3, #1
  404aa6:	e05d      	b.n	404b64 <twi_set_speed+0xd8>
  404aa8:	68bb      	ldr	r3, [r7, #8]
  404aaa:	4a32      	ldr	r2, [pc, #200]	; (404b74 <twi_set_speed+0xe8>)
  404aac:	4293      	cmp	r3, r2
  404aae:	d937      	bls.n	404b20 <twi_set_speed+0x94>
  404ab0:	687b      	ldr	r3, [r7, #4]
  404ab2:	4a31      	ldr	r2, [pc, #196]	; (404b78 <twi_set_speed+0xec>)
  404ab4:	fba2 2303 	umull	r2, r3, r2, r3
  404ab8:	0b9b      	lsrs	r3, r3, #14
  404aba:	3b03      	subs	r3, #3
  404abc:	617b      	str	r3, [r7, #20]
  404abe:	68ba      	ldr	r2, [r7, #8]
  404ac0:	4b2e      	ldr	r3, [pc, #184]	; (404b7c <twi_set_speed+0xf0>)
  404ac2:	4413      	add	r3, r2
  404ac4:	009b      	lsls	r3, r3, #2
  404ac6:	687a      	ldr	r2, [r7, #4]
  404ac8:	fbb2 f3f3 	udiv	r3, r2, r3
  404acc:	3b03      	subs	r3, #3
  404ace:	613b      	str	r3, [r7, #16]
  404ad0:	e005      	b.n	404ade <twi_set_speed+0x52>
  404ad2:	69fb      	ldr	r3, [r7, #28]
  404ad4:	3301      	adds	r3, #1
  404ad6:	61fb      	str	r3, [r7, #28]
  404ad8:	697b      	ldr	r3, [r7, #20]
  404ada:	085b      	lsrs	r3, r3, #1
  404adc:	617b      	str	r3, [r7, #20]
  404ade:	697b      	ldr	r3, [r7, #20]
  404ae0:	2bff      	cmp	r3, #255	; 0xff
  404ae2:	d909      	bls.n	404af8 <twi_set_speed+0x6c>
  404ae4:	69fb      	ldr	r3, [r7, #28]
  404ae6:	2b06      	cmp	r3, #6
  404ae8:	d9f3      	bls.n	404ad2 <twi_set_speed+0x46>
  404aea:	e005      	b.n	404af8 <twi_set_speed+0x6c>
  404aec:	69fb      	ldr	r3, [r7, #28]
  404aee:	3301      	adds	r3, #1
  404af0:	61fb      	str	r3, [r7, #28]
  404af2:	693b      	ldr	r3, [r7, #16]
  404af4:	085b      	lsrs	r3, r3, #1
  404af6:	613b      	str	r3, [r7, #16]
  404af8:	693b      	ldr	r3, [r7, #16]
  404afa:	2bff      	cmp	r3, #255	; 0xff
  404afc:	d902      	bls.n	404b04 <twi_set_speed+0x78>
  404afe:	69fb      	ldr	r3, [r7, #28]
  404b00:	2b06      	cmp	r3, #6
  404b02:	d9f3      	bls.n	404aec <twi_set_speed+0x60>
  404b04:	697b      	ldr	r3, [r7, #20]
  404b06:	b2da      	uxtb	r2, r3
  404b08:	693b      	ldr	r3, [r7, #16]
  404b0a:	021b      	lsls	r3, r3, #8
  404b0c:	b29b      	uxth	r3, r3
  404b0e:	431a      	orrs	r2, r3
  404b10:	69fb      	ldr	r3, [r7, #28]
  404b12:	041b      	lsls	r3, r3, #16
  404b14:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  404b18:	431a      	orrs	r2, r3
  404b1a:	68fb      	ldr	r3, [r7, #12]
  404b1c:	611a      	str	r2, [r3, #16]
  404b1e:	e020      	b.n	404b62 <twi_set_speed+0xd6>
  404b20:	68bb      	ldr	r3, [r7, #8]
  404b22:	005b      	lsls	r3, r3, #1
  404b24:	687a      	ldr	r2, [r7, #4]
  404b26:	fbb2 f3f3 	udiv	r3, r2, r3
  404b2a:	3b03      	subs	r3, #3
  404b2c:	61bb      	str	r3, [r7, #24]
  404b2e:	e005      	b.n	404b3c <twi_set_speed+0xb0>
  404b30:	69fb      	ldr	r3, [r7, #28]
  404b32:	3301      	adds	r3, #1
  404b34:	61fb      	str	r3, [r7, #28]
  404b36:	69bb      	ldr	r3, [r7, #24]
  404b38:	085b      	lsrs	r3, r3, #1
  404b3a:	61bb      	str	r3, [r7, #24]
  404b3c:	69bb      	ldr	r3, [r7, #24]
  404b3e:	2bff      	cmp	r3, #255	; 0xff
  404b40:	d902      	bls.n	404b48 <twi_set_speed+0xbc>
  404b42:	69fb      	ldr	r3, [r7, #28]
  404b44:	2b06      	cmp	r3, #6
  404b46:	d9f3      	bls.n	404b30 <twi_set_speed+0xa4>
  404b48:	69bb      	ldr	r3, [r7, #24]
  404b4a:	b2da      	uxtb	r2, r3
  404b4c:	69bb      	ldr	r3, [r7, #24]
  404b4e:	021b      	lsls	r3, r3, #8
  404b50:	b29b      	uxth	r3, r3
  404b52:	431a      	orrs	r2, r3
  404b54:	69fb      	ldr	r3, [r7, #28]
  404b56:	041b      	lsls	r3, r3, #16
  404b58:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  404b5c:	431a      	orrs	r2, r3
  404b5e:	68fb      	ldr	r3, [r7, #12]
  404b60:	611a      	str	r2, [r3, #16]
  404b62:	2300      	movs	r3, #0
  404b64:	4618      	mov	r0, r3
  404b66:	3724      	adds	r7, #36	; 0x24
  404b68:	46bd      	mov	sp, r7
  404b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b6e:	4770      	bx	lr
  404b70:	00061a80 	.word	0x00061a80
  404b74:	0005dc00 	.word	0x0005dc00
  404b78:	057619f1 	.word	0x057619f1
  404b7c:	3ffd1200 	.word	0x3ffd1200

00404b80 <twi_mk_addr>:
  404b80:	b480      	push	{r7}
  404b82:	b085      	sub	sp, #20
  404b84:	af00      	add	r7, sp, #0
  404b86:	6078      	str	r0, [r7, #4]
  404b88:	6039      	str	r1, [r7, #0]
  404b8a:	683b      	ldr	r3, [r7, #0]
  404b8c:	2b00      	cmp	r3, #0
  404b8e:	d101      	bne.n	404b94 <twi_mk_addr+0x14>
  404b90:	2300      	movs	r3, #0
  404b92:	e01d      	b.n	404bd0 <twi_mk_addr+0x50>
  404b94:	687b      	ldr	r3, [r7, #4]
  404b96:	781b      	ldrb	r3, [r3, #0]
  404b98:	60fb      	str	r3, [r7, #12]
  404b9a:	683b      	ldr	r3, [r7, #0]
  404b9c:	2b01      	cmp	r3, #1
  404b9e:	dd09      	ble.n	404bb4 <twi_mk_addr+0x34>
  404ba0:	68fb      	ldr	r3, [r7, #12]
  404ba2:	021b      	lsls	r3, r3, #8
  404ba4:	60fb      	str	r3, [r7, #12]
  404ba6:	687b      	ldr	r3, [r7, #4]
  404ba8:	3301      	adds	r3, #1
  404baa:	781b      	ldrb	r3, [r3, #0]
  404bac:	461a      	mov	r2, r3
  404bae:	68fb      	ldr	r3, [r7, #12]
  404bb0:	4313      	orrs	r3, r2
  404bb2:	60fb      	str	r3, [r7, #12]
  404bb4:	683b      	ldr	r3, [r7, #0]
  404bb6:	2b02      	cmp	r3, #2
  404bb8:	dd09      	ble.n	404bce <twi_mk_addr+0x4e>
  404bba:	68fb      	ldr	r3, [r7, #12]
  404bbc:	021b      	lsls	r3, r3, #8
  404bbe:	60fb      	str	r3, [r7, #12]
  404bc0:	687b      	ldr	r3, [r7, #4]
  404bc2:	3302      	adds	r3, #2
  404bc4:	781b      	ldrb	r3, [r3, #0]
  404bc6:	461a      	mov	r2, r3
  404bc8:	68fb      	ldr	r3, [r7, #12]
  404bca:	4313      	orrs	r3, r2
  404bcc:	60fb      	str	r3, [r7, #12]
  404bce:	68fb      	ldr	r3, [r7, #12]
  404bd0:	4618      	mov	r0, r3
  404bd2:	3714      	adds	r7, #20
  404bd4:	46bd      	mov	sp, r7
  404bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404bda:	4770      	bx	lr

00404bdc <twi_master_read>:
  404bdc:	b580      	push	{r7, lr}
  404bde:	b088      	sub	sp, #32
  404be0:	af00      	add	r7, sp, #0
  404be2:	6078      	str	r0, [r7, #4]
  404be4:	6039      	str	r1, [r7, #0]
  404be6:	683b      	ldr	r3, [r7, #0]
  404be8:	68db      	ldr	r3, [r3, #12]
  404bea:	61fb      	str	r3, [r7, #28]
  404bec:	683b      	ldr	r3, [r7, #0]
  404bee:	689b      	ldr	r3, [r3, #8]
  404bf0:	61bb      	str	r3, [r7, #24]
  404bf2:	2300      	movs	r3, #0
  404bf4:	75fb      	strb	r3, [r7, #23]
  404bf6:	f247 5330 	movw	r3, #30000	; 0x7530
  404bfa:	613b      	str	r3, [r7, #16]
  404bfc:	69fb      	ldr	r3, [r7, #28]
  404bfe:	2b00      	cmp	r3, #0
  404c00:	d101      	bne.n	404c06 <twi_master_read+0x2a>
  404c02:	2301      	movs	r3, #1
  404c04:	e069      	b.n	404cda <twi_master_read+0xfe>
  404c06:	687b      	ldr	r3, [r7, #4]
  404c08:	2200      	movs	r2, #0
  404c0a:	605a      	str	r2, [r3, #4]
  404c0c:	683b      	ldr	r3, [r7, #0]
  404c0e:	7c1b      	ldrb	r3, [r3, #16]
  404c10:	041b      	lsls	r3, r3, #16
  404c12:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
  404c16:	683b      	ldr	r3, [r7, #0]
  404c18:	685b      	ldr	r3, [r3, #4]
  404c1a:	021b      	lsls	r3, r3, #8
  404c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404c20:	4313      	orrs	r3, r2
  404c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  404c26:	687b      	ldr	r3, [r7, #4]
  404c28:	605a      	str	r2, [r3, #4]
  404c2a:	687b      	ldr	r3, [r7, #4]
  404c2c:	2200      	movs	r2, #0
  404c2e:	60da      	str	r2, [r3, #12]
  404c30:	683a      	ldr	r2, [r7, #0]
  404c32:	683b      	ldr	r3, [r7, #0]
  404c34:	685b      	ldr	r3, [r3, #4]
  404c36:	4619      	mov	r1, r3
  404c38:	4610      	mov	r0, r2
  404c3a:	4b2a      	ldr	r3, [pc, #168]	; (404ce4 <twi_master_read+0x108>)
  404c3c:	4798      	blx	r3
  404c3e:	4602      	mov	r2, r0
  404c40:	687b      	ldr	r3, [r7, #4]
  404c42:	60da      	str	r2, [r3, #12]
  404c44:	69fb      	ldr	r3, [r7, #28]
  404c46:	2b01      	cmp	r3, #1
  404c48:	d105      	bne.n	404c56 <twi_master_read+0x7a>
  404c4a:	687b      	ldr	r3, [r7, #4]
  404c4c:	2203      	movs	r2, #3
  404c4e:	601a      	str	r2, [r3, #0]
  404c50:	2301      	movs	r3, #1
  404c52:	75fb      	strb	r3, [r7, #23]
  404c54:	e034      	b.n	404cc0 <twi_master_read+0xe4>
  404c56:	687b      	ldr	r3, [r7, #4]
  404c58:	2201      	movs	r2, #1
  404c5a:	601a      	str	r2, [r3, #0]
  404c5c:	2300      	movs	r3, #0
  404c5e:	75fb      	strb	r3, [r7, #23]
  404c60:	e02e      	b.n	404cc0 <twi_master_read+0xe4>
  404c62:	687b      	ldr	r3, [r7, #4]
  404c64:	6a1b      	ldr	r3, [r3, #32]
  404c66:	60fb      	str	r3, [r7, #12]
  404c68:	68fb      	ldr	r3, [r7, #12]
  404c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404c6e:	2b00      	cmp	r3, #0
  404c70:	d001      	beq.n	404c76 <twi_master_read+0x9a>
  404c72:	2305      	movs	r3, #5
  404c74:	e031      	b.n	404cda <twi_master_read+0xfe>
  404c76:	693b      	ldr	r3, [r7, #16]
  404c78:	1e5a      	subs	r2, r3, #1
  404c7a:	613a      	str	r2, [r7, #16]
  404c7c:	2b00      	cmp	r3, #0
  404c7e:	d101      	bne.n	404c84 <twi_master_read+0xa8>
  404c80:	2309      	movs	r3, #9
  404c82:	e02a      	b.n	404cda <twi_master_read+0xfe>
  404c84:	69fb      	ldr	r3, [r7, #28]
  404c86:	2b01      	cmp	r3, #1
  404c88:	d107      	bne.n	404c9a <twi_master_read+0xbe>
  404c8a:	7dfb      	ldrb	r3, [r7, #23]
  404c8c:	2b00      	cmp	r3, #0
  404c8e:	d104      	bne.n	404c9a <twi_master_read+0xbe>
  404c90:	687b      	ldr	r3, [r7, #4]
  404c92:	2202      	movs	r2, #2
  404c94:	601a      	str	r2, [r3, #0]
  404c96:	2301      	movs	r3, #1
  404c98:	75fb      	strb	r3, [r7, #23]
  404c9a:	68fb      	ldr	r3, [r7, #12]
  404c9c:	f003 0302 	and.w	r3, r3, #2
  404ca0:	2b00      	cmp	r3, #0
  404ca2:	d100      	bne.n	404ca6 <twi_master_read+0xca>
  404ca4:	e00c      	b.n	404cc0 <twi_master_read+0xe4>
  404ca6:	69bb      	ldr	r3, [r7, #24]
  404ca8:	1c5a      	adds	r2, r3, #1
  404caa:	61ba      	str	r2, [r7, #24]
  404cac:	687a      	ldr	r2, [r7, #4]
  404cae:	6b12      	ldr	r2, [r2, #48]	; 0x30
  404cb0:	b2d2      	uxtb	r2, r2
  404cb2:	701a      	strb	r2, [r3, #0]
  404cb4:	69fb      	ldr	r3, [r7, #28]
  404cb6:	3b01      	subs	r3, #1
  404cb8:	61fb      	str	r3, [r7, #28]
  404cba:	f247 5330 	movw	r3, #30000	; 0x7530
  404cbe:	613b      	str	r3, [r7, #16]
  404cc0:	69fb      	ldr	r3, [r7, #28]
  404cc2:	2b00      	cmp	r3, #0
  404cc4:	d1cd      	bne.n	404c62 <twi_master_read+0x86>
  404cc6:	bf00      	nop
  404cc8:	687b      	ldr	r3, [r7, #4]
  404cca:	6a1b      	ldr	r3, [r3, #32]
  404ccc:	f003 0301 	and.w	r3, r3, #1
  404cd0:	2b00      	cmp	r3, #0
  404cd2:	d0f9      	beq.n	404cc8 <twi_master_read+0xec>
  404cd4:	687b      	ldr	r3, [r7, #4]
  404cd6:	6a1b      	ldr	r3, [r3, #32]
  404cd8:	2300      	movs	r3, #0
  404cda:	4618      	mov	r0, r3
  404cdc:	3720      	adds	r7, #32
  404cde:	46bd      	mov	sp, r7
  404ce0:	bd80      	pop	{r7, pc}
  404ce2:	bf00      	nop
  404ce4:	00404b81 	.word	0x00404b81

00404ce8 <twi_master_write>:
  404ce8:	b580      	push	{r7, lr}
  404cea:	b086      	sub	sp, #24
  404cec:	af00      	add	r7, sp, #0
  404cee:	6078      	str	r0, [r7, #4]
  404cf0:	6039      	str	r1, [r7, #0]
  404cf2:	683b      	ldr	r3, [r7, #0]
  404cf4:	68db      	ldr	r3, [r3, #12]
  404cf6:	617b      	str	r3, [r7, #20]
  404cf8:	683b      	ldr	r3, [r7, #0]
  404cfa:	689b      	ldr	r3, [r3, #8]
  404cfc:	613b      	str	r3, [r7, #16]
  404cfe:	697b      	ldr	r3, [r7, #20]
  404d00:	2b00      	cmp	r3, #0
  404d02:	d101      	bne.n	404d08 <twi_master_write+0x20>
  404d04:	2301      	movs	r3, #1
  404d06:	e056      	b.n	404db6 <twi_master_write+0xce>
  404d08:	687b      	ldr	r3, [r7, #4]
  404d0a:	2200      	movs	r2, #0
  404d0c:	605a      	str	r2, [r3, #4]
  404d0e:	683b      	ldr	r3, [r7, #0]
  404d10:	7c1b      	ldrb	r3, [r3, #16]
  404d12:	041b      	lsls	r3, r3, #16
  404d14:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
  404d18:	683b      	ldr	r3, [r7, #0]
  404d1a:	685b      	ldr	r3, [r3, #4]
  404d1c:	021b      	lsls	r3, r3, #8
  404d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404d22:	431a      	orrs	r2, r3
  404d24:	687b      	ldr	r3, [r7, #4]
  404d26:	605a      	str	r2, [r3, #4]
  404d28:	687b      	ldr	r3, [r7, #4]
  404d2a:	2200      	movs	r2, #0
  404d2c:	60da      	str	r2, [r3, #12]
  404d2e:	683a      	ldr	r2, [r7, #0]
  404d30:	683b      	ldr	r3, [r7, #0]
  404d32:	685b      	ldr	r3, [r3, #4]
  404d34:	4619      	mov	r1, r3
  404d36:	4610      	mov	r0, r2
  404d38:	4b21      	ldr	r3, [pc, #132]	; (404dc0 <twi_master_write+0xd8>)
  404d3a:	4798      	blx	r3
  404d3c:	4602      	mov	r2, r0
  404d3e:	687b      	ldr	r3, [r7, #4]
  404d40:	60da      	str	r2, [r3, #12]
  404d42:	e019      	b.n	404d78 <twi_master_write+0x90>
  404d44:	687b      	ldr	r3, [r7, #4]
  404d46:	6a1b      	ldr	r3, [r3, #32]
  404d48:	60fb      	str	r3, [r7, #12]
  404d4a:	68fb      	ldr	r3, [r7, #12]
  404d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404d50:	2b00      	cmp	r3, #0
  404d52:	d001      	beq.n	404d58 <twi_master_write+0x70>
  404d54:	2305      	movs	r3, #5
  404d56:	e02e      	b.n	404db6 <twi_master_write+0xce>
  404d58:	68fb      	ldr	r3, [r7, #12]
  404d5a:	f003 0304 	and.w	r3, r3, #4
  404d5e:	2b00      	cmp	r3, #0
  404d60:	d100      	bne.n	404d64 <twi_master_write+0x7c>
  404d62:	e009      	b.n	404d78 <twi_master_write+0x90>
  404d64:	693b      	ldr	r3, [r7, #16]
  404d66:	1c5a      	adds	r2, r3, #1
  404d68:	613a      	str	r2, [r7, #16]
  404d6a:	781b      	ldrb	r3, [r3, #0]
  404d6c:	461a      	mov	r2, r3
  404d6e:	687b      	ldr	r3, [r7, #4]
  404d70:	635a      	str	r2, [r3, #52]	; 0x34
  404d72:	697b      	ldr	r3, [r7, #20]
  404d74:	3b01      	subs	r3, #1
  404d76:	617b      	str	r3, [r7, #20]
  404d78:	697b      	ldr	r3, [r7, #20]
  404d7a:	2b00      	cmp	r3, #0
  404d7c:	d1e2      	bne.n	404d44 <twi_master_write+0x5c>
  404d7e:	687b      	ldr	r3, [r7, #4]
  404d80:	6a1b      	ldr	r3, [r3, #32]
  404d82:	60fb      	str	r3, [r7, #12]
  404d84:	68fb      	ldr	r3, [r7, #12]
  404d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404d8a:	2b00      	cmp	r3, #0
  404d8c:	d001      	beq.n	404d92 <twi_master_write+0xaa>
  404d8e:	2305      	movs	r3, #5
  404d90:	e011      	b.n	404db6 <twi_master_write+0xce>
  404d92:	68fb      	ldr	r3, [r7, #12]
  404d94:	f003 0304 	and.w	r3, r3, #4
  404d98:	2b00      	cmp	r3, #0
  404d9a:	d100      	bne.n	404d9e <twi_master_write+0xb6>
  404d9c:	e7ef      	b.n	404d7e <twi_master_write+0x96>
  404d9e:	bf00      	nop
  404da0:	687b      	ldr	r3, [r7, #4]
  404da2:	2202      	movs	r2, #2
  404da4:	601a      	str	r2, [r3, #0]
  404da6:	bf00      	nop
  404da8:	687b      	ldr	r3, [r7, #4]
  404daa:	6a1b      	ldr	r3, [r3, #32]
  404dac:	f003 0301 	and.w	r3, r3, #1
  404db0:	2b00      	cmp	r3, #0
  404db2:	d0f9      	beq.n	404da8 <twi_master_write+0xc0>
  404db4:	2300      	movs	r3, #0
  404db6:	4618      	mov	r0, r3
  404db8:	3718      	adds	r7, #24
  404dba:	46bd      	mov	sp, r7
  404dbc:	bd80      	pop	{r7, pc}
  404dbe:	bf00      	nop
  404dc0:	00404b81 	.word	0x00404b81

00404dc4 <twi_enable_interrupt>:
  404dc4:	b480      	push	{r7}
  404dc6:	b083      	sub	sp, #12
  404dc8:	af00      	add	r7, sp, #0
  404dca:	6078      	str	r0, [r7, #4]
  404dcc:	6039      	str	r1, [r7, #0]
  404dce:	687b      	ldr	r3, [r7, #4]
  404dd0:	683a      	ldr	r2, [r7, #0]
  404dd2:	625a      	str	r2, [r3, #36]	; 0x24
  404dd4:	bf00      	nop
  404dd6:	370c      	adds	r7, #12
  404dd8:	46bd      	mov	sp, r7
  404dda:	f85d 7b04 	ldr.w	r7, [sp], #4
  404dde:	4770      	bx	lr

00404de0 <twi_disable_interrupt>:
  404de0:	b480      	push	{r7}
  404de2:	b083      	sub	sp, #12
  404de4:	af00      	add	r7, sp, #0
  404de6:	6078      	str	r0, [r7, #4]
  404de8:	6039      	str	r1, [r7, #0]
  404dea:	687b      	ldr	r3, [r7, #4]
  404dec:	683a      	ldr	r2, [r7, #0]
  404dee:	629a      	str	r2, [r3, #40]	; 0x28
  404df0:	687b      	ldr	r3, [r7, #4]
  404df2:	6a1b      	ldr	r3, [r3, #32]
  404df4:	bf00      	nop
  404df6:	370c      	adds	r7, #12
  404df8:	46bd      	mov	sp, r7
  404dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
  404dfe:	4770      	bx	lr

00404e00 <twi_get_interrupt_status>:
  404e00:	b480      	push	{r7}
  404e02:	b083      	sub	sp, #12
  404e04:	af00      	add	r7, sp, #0
  404e06:	6078      	str	r0, [r7, #4]
  404e08:	687b      	ldr	r3, [r7, #4]
  404e0a:	6a1b      	ldr	r3, [r3, #32]
  404e0c:	4618      	mov	r0, r3
  404e0e:	370c      	adds	r7, #12
  404e10:	46bd      	mov	sp, r7
  404e12:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e16:	4770      	bx	lr

00404e18 <twi_get_interrupt_mask>:
  404e18:	b480      	push	{r7}
  404e1a:	b083      	sub	sp, #12
  404e1c:	af00      	add	r7, sp, #0
  404e1e:	6078      	str	r0, [r7, #4]
  404e20:	687b      	ldr	r3, [r7, #4]
  404e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404e24:	4618      	mov	r0, r3
  404e26:	370c      	adds	r7, #12
  404e28:	46bd      	mov	sp, r7
  404e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e2e:	4770      	bx	lr

00404e30 <twi_reset>:
  404e30:	b480      	push	{r7}
  404e32:	b083      	sub	sp, #12
  404e34:	af00      	add	r7, sp, #0
  404e36:	6078      	str	r0, [r7, #4]
  404e38:	687b      	ldr	r3, [r7, #4]
  404e3a:	2280      	movs	r2, #128	; 0x80
  404e3c:	601a      	str	r2, [r3, #0]
  404e3e:	687b      	ldr	r3, [r7, #4]
  404e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404e42:	bf00      	nop
  404e44:	370c      	adds	r7, #12
  404e46:	46bd      	mov	sp, r7
  404e48:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e4c:	4770      	bx	lr
	...

00404e50 <twi_get_pdc_base>:
  404e50:	b480      	push	{r7}
  404e52:	b085      	sub	sp, #20
  404e54:	af00      	add	r7, sp, #0
  404e56:	6078      	str	r0, [r7, #4]
  404e58:	2300      	movs	r3, #0
  404e5a:	60fb      	str	r3, [r7, #12]
  404e5c:	687b      	ldr	r3, [r7, #4]
  404e5e:	4a0d      	ldr	r2, [pc, #52]	; (404e94 <twi_get_pdc_base+0x44>)
  404e60:	4293      	cmp	r3, r2
  404e62:	d102      	bne.n	404e6a <twi_get_pdc_base+0x1a>
  404e64:	4b0c      	ldr	r3, [pc, #48]	; (404e98 <twi_get_pdc_base+0x48>)
  404e66:	60fb      	str	r3, [r7, #12]
  404e68:	e00c      	b.n	404e84 <twi_get_pdc_base+0x34>
  404e6a:	687b      	ldr	r3, [r7, #4]
  404e6c:	4a0b      	ldr	r2, [pc, #44]	; (404e9c <twi_get_pdc_base+0x4c>)
  404e6e:	4293      	cmp	r3, r2
  404e70:	d102      	bne.n	404e78 <twi_get_pdc_base+0x28>
  404e72:	4b0b      	ldr	r3, [pc, #44]	; (404ea0 <twi_get_pdc_base+0x50>)
  404e74:	60fb      	str	r3, [r7, #12]
  404e76:	e005      	b.n	404e84 <twi_get_pdc_base+0x34>
  404e78:	687b      	ldr	r3, [r7, #4]
  404e7a:	4a0a      	ldr	r2, [pc, #40]	; (404ea4 <twi_get_pdc_base+0x54>)
  404e7c:	4293      	cmp	r3, r2
  404e7e:	d101      	bne.n	404e84 <twi_get_pdc_base+0x34>
  404e80:	4b09      	ldr	r3, [pc, #36]	; (404ea8 <twi_get_pdc_base+0x58>)
  404e82:	60fb      	str	r3, [r7, #12]
  404e84:	68fb      	ldr	r3, [r7, #12]
  404e86:	4618      	mov	r0, r3
  404e88:	3714      	adds	r7, #20
  404e8a:	46bd      	mov	sp, r7
  404e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e90:	4770      	bx	lr
  404e92:	bf00      	nop
  404e94:	40020600 	.word	0x40020600
  404e98:	40020700 	.word	0x40020700
  404e9c:	40024600 	.word	0x40024600
  404ea0:	40024700 	.word	0x40024700
  404ea4:	40018600 	.word	0x40018600
  404ea8:	40018700 	.word	0x40018700

00404eac <usart_set_async_baudrate>:
  404eac:	b480      	push	{r7}
  404eae:	b089      	sub	sp, #36	; 0x24
  404eb0:	af00      	add	r7, sp, #0
  404eb2:	60f8      	str	r0, [r7, #12]
  404eb4:	60b9      	str	r1, [r7, #8]
  404eb6:	607a      	str	r2, [r7, #4]
  404eb8:	68bb      	ldr	r3, [r7, #8]
  404eba:	011a      	lsls	r2, r3, #4
  404ebc:	687b      	ldr	r3, [r7, #4]
  404ebe:	429a      	cmp	r2, r3
  404ec0:	d802      	bhi.n	404ec8 <usart_set_async_baudrate+0x1c>
  404ec2:	2310      	movs	r3, #16
  404ec4:	61fb      	str	r3, [r7, #28]
  404ec6:	e001      	b.n	404ecc <usart_set_async_baudrate+0x20>
  404ec8:	2308      	movs	r3, #8
  404eca:	61fb      	str	r3, [r7, #28]
  404ecc:	687b      	ldr	r3, [r7, #4]
  404ece:	00da      	lsls	r2, r3, #3
  404ed0:	69fb      	ldr	r3, [r7, #28]
  404ed2:	68b9      	ldr	r1, [r7, #8]
  404ed4:	fb01 f303 	mul.w	r3, r1, r3
  404ed8:	085b      	lsrs	r3, r3, #1
  404eda:	441a      	add	r2, r3
  404edc:	69fb      	ldr	r3, [r7, #28]
  404ede:	68b9      	ldr	r1, [r7, #8]
  404ee0:	fb01 f303 	mul.w	r3, r1, r3
  404ee4:	fbb2 f3f3 	udiv	r3, r2, r3
  404ee8:	61bb      	str	r3, [r7, #24]
  404eea:	69bb      	ldr	r3, [r7, #24]
  404eec:	08db      	lsrs	r3, r3, #3
  404eee:	617b      	str	r3, [r7, #20]
  404ef0:	69bb      	ldr	r3, [r7, #24]
  404ef2:	f003 0307 	and.w	r3, r3, #7
  404ef6:	613b      	str	r3, [r7, #16]
  404ef8:	697b      	ldr	r3, [r7, #20]
  404efa:	2b00      	cmp	r3, #0
  404efc:	d003      	beq.n	404f06 <usart_set_async_baudrate+0x5a>
  404efe:	697b      	ldr	r3, [r7, #20]
  404f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404f04:	d301      	bcc.n	404f0a <usart_set_async_baudrate+0x5e>
  404f06:	2301      	movs	r3, #1
  404f08:	e00f      	b.n	404f2a <usart_set_async_baudrate+0x7e>
  404f0a:	69fb      	ldr	r3, [r7, #28]
  404f0c:	2b08      	cmp	r3, #8
  404f0e:	d105      	bne.n	404f1c <usart_set_async_baudrate+0x70>
  404f10:	68fb      	ldr	r3, [r7, #12]
  404f12:	685b      	ldr	r3, [r3, #4]
  404f14:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  404f18:	68fb      	ldr	r3, [r7, #12]
  404f1a:	605a      	str	r2, [r3, #4]
  404f1c:	693b      	ldr	r3, [r7, #16]
  404f1e:	041a      	lsls	r2, r3, #16
  404f20:	697b      	ldr	r3, [r7, #20]
  404f22:	431a      	orrs	r2, r3
  404f24:	68fb      	ldr	r3, [r7, #12]
  404f26:	621a      	str	r2, [r3, #32]
  404f28:	2300      	movs	r3, #0
  404f2a:	4618      	mov	r0, r3
  404f2c:	3724      	adds	r7, #36	; 0x24
  404f2e:	46bd      	mov	sp, r7
  404f30:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f34:	4770      	bx	lr
	...

00404f38 <usart_reset>:
  404f38:	b580      	push	{r7, lr}
  404f3a:	b082      	sub	sp, #8
  404f3c:	af00      	add	r7, sp, #0
  404f3e:	6078      	str	r0, [r7, #4]
  404f40:	6878      	ldr	r0, [r7, #4]
  404f42:	4b0d      	ldr	r3, [pc, #52]	; (404f78 <usart_reset+0x40>)
  404f44:	4798      	blx	r3
  404f46:	687b      	ldr	r3, [r7, #4]
  404f48:	2200      	movs	r2, #0
  404f4a:	605a      	str	r2, [r3, #4]
  404f4c:	687b      	ldr	r3, [r7, #4]
  404f4e:	2200      	movs	r2, #0
  404f50:	625a      	str	r2, [r3, #36]	; 0x24
  404f52:	687b      	ldr	r3, [r7, #4]
  404f54:	2200      	movs	r2, #0
  404f56:	629a      	str	r2, [r3, #40]	; 0x28
  404f58:	6878      	ldr	r0, [r7, #4]
  404f5a:	4b08      	ldr	r3, [pc, #32]	; (404f7c <usart_reset+0x44>)
  404f5c:	4798      	blx	r3
  404f5e:	6878      	ldr	r0, [r7, #4]
  404f60:	4b07      	ldr	r3, [pc, #28]	; (404f80 <usart_reset+0x48>)
  404f62:	4798      	blx	r3
  404f64:	6878      	ldr	r0, [r7, #4]
  404f66:	4b07      	ldr	r3, [pc, #28]	; (404f84 <usart_reset+0x4c>)
  404f68:	4798      	blx	r3
  404f6a:	6878      	ldr	r0, [r7, #4]
  404f6c:	4b06      	ldr	r3, [pc, #24]	; (404f88 <usart_reset+0x50>)
  404f6e:	4798      	blx	r3
  404f70:	bf00      	nop
  404f72:	3708      	adds	r7, #8
  404f74:	46bd      	mov	sp, r7
  404f76:	bd80      	pop	{r7, pc}
  404f78:	00405119 	.word	0x00405119
  404f7c:	0040502b 	.word	0x0040502b
  404f80:	0040505f 	.word	0x0040505f
  404f84:	00405079 	.word	0x00405079
  404f88:	00405095 	.word	0x00405095

00404f8c <usart_init_rs232>:
  404f8c:	b580      	push	{r7, lr}
  404f8e:	b084      	sub	sp, #16
  404f90:	af00      	add	r7, sp, #0
  404f92:	60f8      	str	r0, [r7, #12]
  404f94:	60b9      	str	r1, [r7, #8]
  404f96:	607a      	str	r2, [r7, #4]
  404f98:	68f8      	ldr	r0, [r7, #12]
  404f9a:	4b1a      	ldr	r3, [pc, #104]	; (405004 <usart_init_rs232+0x78>)
  404f9c:	4798      	blx	r3
  404f9e:	4b1a      	ldr	r3, [pc, #104]	; (405008 <usart_init_rs232+0x7c>)
  404fa0:	2200      	movs	r2, #0
  404fa2:	601a      	str	r2, [r3, #0]
  404fa4:	68bb      	ldr	r3, [r7, #8]
  404fa6:	2b00      	cmp	r3, #0
  404fa8:	d009      	beq.n	404fbe <usart_init_rs232+0x32>
  404faa:	68bb      	ldr	r3, [r7, #8]
  404fac:	681b      	ldr	r3, [r3, #0]
  404fae:	687a      	ldr	r2, [r7, #4]
  404fb0:	4619      	mov	r1, r3
  404fb2:	68f8      	ldr	r0, [r7, #12]
  404fb4:	4b15      	ldr	r3, [pc, #84]	; (40500c <usart_init_rs232+0x80>)
  404fb6:	4798      	blx	r3
  404fb8:	4603      	mov	r3, r0
  404fba:	2b00      	cmp	r3, #0
  404fbc:	d001      	beq.n	404fc2 <usart_init_rs232+0x36>
  404fbe:	2301      	movs	r3, #1
  404fc0:	e01b      	b.n	404ffa <usart_init_rs232+0x6e>
  404fc2:	68bb      	ldr	r3, [r7, #8]
  404fc4:	685a      	ldr	r2, [r3, #4]
  404fc6:	68bb      	ldr	r3, [r7, #8]
  404fc8:	689b      	ldr	r3, [r3, #8]
  404fca:	431a      	orrs	r2, r3
  404fcc:	68bb      	ldr	r3, [r7, #8]
  404fce:	691b      	ldr	r3, [r3, #16]
  404fd0:	431a      	orrs	r2, r3
  404fd2:	68bb      	ldr	r3, [r7, #8]
  404fd4:	68db      	ldr	r3, [r3, #12]
  404fd6:	431a      	orrs	r2, r3
  404fd8:	4b0b      	ldr	r3, [pc, #44]	; (405008 <usart_init_rs232+0x7c>)
  404fda:	681b      	ldr	r3, [r3, #0]
  404fdc:	4313      	orrs	r3, r2
  404fde:	4a0a      	ldr	r2, [pc, #40]	; (405008 <usart_init_rs232+0x7c>)
  404fe0:	6013      	str	r3, [r2, #0]
  404fe2:	4b09      	ldr	r3, [pc, #36]	; (405008 <usart_init_rs232+0x7c>)
  404fe4:	681b      	ldr	r3, [r3, #0]
  404fe6:	4a08      	ldr	r2, [pc, #32]	; (405008 <usart_init_rs232+0x7c>)
  404fe8:	6013      	str	r3, [r2, #0]
  404fea:	68fb      	ldr	r3, [r7, #12]
  404fec:	685a      	ldr	r2, [r3, #4]
  404fee:	4b06      	ldr	r3, [pc, #24]	; (405008 <usart_init_rs232+0x7c>)
  404ff0:	681b      	ldr	r3, [r3, #0]
  404ff2:	431a      	orrs	r2, r3
  404ff4:	68fb      	ldr	r3, [r7, #12]
  404ff6:	605a      	str	r2, [r3, #4]
  404ff8:	2300      	movs	r3, #0
  404ffa:	4618      	mov	r0, r3
  404ffc:	3710      	adds	r7, #16
  404ffe:	46bd      	mov	sp, r7
  405000:	bd80      	pop	{r7, pc}
  405002:	bf00      	nop
  405004:	00404f39 	.word	0x00404f39
  405008:	2000042c 	.word	0x2000042c
  40500c:	00404ead 	.word	0x00404ead

00405010 <usart_enable_tx>:
  405010:	b480      	push	{r7}
  405012:	b083      	sub	sp, #12
  405014:	af00      	add	r7, sp, #0
  405016:	6078      	str	r0, [r7, #4]
  405018:	687b      	ldr	r3, [r7, #4]
  40501a:	2240      	movs	r2, #64	; 0x40
  40501c:	601a      	str	r2, [r3, #0]
  40501e:	bf00      	nop
  405020:	370c      	adds	r7, #12
  405022:	46bd      	mov	sp, r7
  405024:	f85d 7b04 	ldr.w	r7, [sp], #4
  405028:	4770      	bx	lr

0040502a <usart_reset_tx>:
  40502a:	b480      	push	{r7}
  40502c:	b083      	sub	sp, #12
  40502e:	af00      	add	r7, sp, #0
  405030:	6078      	str	r0, [r7, #4]
  405032:	687b      	ldr	r3, [r7, #4]
  405034:	2288      	movs	r2, #136	; 0x88
  405036:	601a      	str	r2, [r3, #0]
  405038:	bf00      	nop
  40503a:	370c      	adds	r7, #12
  40503c:	46bd      	mov	sp, r7
  40503e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405042:	4770      	bx	lr

00405044 <usart_enable_rx>:
  405044:	b480      	push	{r7}
  405046:	b083      	sub	sp, #12
  405048:	af00      	add	r7, sp, #0
  40504a:	6078      	str	r0, [r7, #4]
  40504c:	687b      	ldr	r3, [r7, #4]
  40504e:	2210      	movs	r2, #16
  405050:	601a      	str	r2, [r3, #0]
  405052:	bf00      	nop
  405054:	370c      	adds	r7, #12
  405056:	46bd      	mov	sp, r7
  405058:	f85d 7b04 	ldr.w	r7, [sp], #4
  40505c:	4770      	bx	lr

0040505e <usart_reset_rx>:
  40505e:	b480      	push	{r7}
  405060:	b083      	sub	sp, #12
  405062:	af00      	add	r7, sp, #0
  405064:	6078      	str	r0, [r7, #4]
  405066:	687b      	ldr	r3, [r7, #4]
  405068:	2224      	movs	r2, #36	; 0x24
  40506a:	601a      	str	r2, [r3, #0]
  40506c:	bf00      	nop
  40506e:	370c      	adds	r7, #12
  405070:	46bd      	mov	sp, r7
  405072:	f85d 7b04 	ldr.w	r7, [sp], #4
  405076:	4770      	bx	lr

00405078 <usart_reset_status>:
  405078:	b480      	push	{r7}
  40507a:	b083      	sub	sp, #12
  40507c:	af00      	add	r7, sp, #0
  40507e:	6078      	str	r0, [r7, #4]
  405080:	687b      	ldr	r3, [r7, #4]
  405082:	f44f 7280 	mov.w	r2, #256	; 0x100
  405086:	601a      	str	r2, [r3, #0]
  405088:	bf00      	nop
  40508a:	370c      	adds	r7, #12
  40508c:	46bd      	mov	sp, r7
  40508e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405092:	4770      	bx	lr

00405094 <usart_drive_RTS_pin_high>:
  405094:	b480      	push	{r7}
  405096:	b083      	sub	sp, #12
  405098:	af00      	add	r7, sp, #0
  40509a:	6078      	str	r0, [r7, #4]
  40509c:	687b      	ldr	r3, [r7, #4]
  40509e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4050a2:	601a      	str	r2, [r3, #0]
  4050a4:	bf00      	nop
  4050a6:	370c      	adds	r7, #12
  4050a8:	46bd      	mov	sp, r7
  4050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050ae:	4770      	bx	lr

004050b0 <usart_write>:
  4050b0:	b480      	push	{r7}
  4050b2:	b083      	sub	sp, #12
  4050b4:	af00      	add	r7, sp, #0
  4050b6:	6078      	str	r0, [r7, #4]
  4050b8:	6039      	str	r1, [r7, #0]
  4050ba:	687b      	ldr	r3, [r7, #4]
  4050bc:	695b      	ldr	r3, [r3, #20]
  4050be:	f003 0302 	and.w	r3, r3, #2
  4050c2:	2b00      	cmp	r3, #0
  4050c4:	d101      	bne.n	4050ca <usart_write+0x1a>
  4050c6:	2301      	movs	r3, #1
  4050c8:	e005      	b.n	4050d6 <usart_write+0x26>
  4050ca:	683b      	ldr	r3, [r7, #0]
  4050cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4050d0:	687b      	ldr	r3, [r7, #4]
  4050d2:	61da      	str	r2, [r3, #28]
  4050d4:	2300      	movs	r3, #0
  4050d6:	4618      	mov	r0, r3
  4050d8:	370c      	adds	r7, #12
  4050da:	46bd      	mov	sp, r7
  4050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050e0:	4770      	bx	lr

004050e2 <usart_read>:
  4050e2:	b480      	push	{r7}
  4050e4:	b083      	sub	sp, #12
  4050e6:	af00      	add	r7, sp, #0
  4050e8:	6078      	str	r0, [r7, #4]
  4050ea:	6039      	str	r1, [r7, #0]
  4050ec:	687b      	ldr	r3, [r7, #4]
  4050ee:	695b      	ldr	r3, [r3, #20]
  4050f0:	f003 0301 	and.w	r3, r3, #1
  4050f4:	2b00      	cmp	r3, #0
  4050f6:	d101      	bne.n	4050fc <usart_read+0x1a>
  4050f8:	2301      	movs	r3, #1
  4050fa:	e006      	b.n	40510a <usart_read+0x28>
  4050fc:	687b      	ldr	r3, [r7, #4]
  4050fe:	699b      	ldr	r3, [r3, #24]
  405100:	f3c3 0208 	ubfx	r2, r3, #0, #9
  405104:	683b      	ldr	r3, [r7, #0]
  405106:	601a      	str	r2, [r3, #0]
  405108:	2300      	movs	r3, #0
  40510a:	4618      	mov	r0, r3
  40510c:	370c      	adds	r7, #12
  40510e:	46bd      	mov	sp, r7
  405110:	f85d 7b04 	ldr.w	r7, [sp], #4
  405114:	4770      	bx	lr
	...

00405118 <usart_disable_writeprotect>:
  405118:	b480      	push	{r7}
  40511a:	b083      	sub	sp, #12
  40511c:	af00      	add	r7, sp, #0
  40511e:	6078      	str	r0, [r7, #4]
  405120:	687b      	ldr	r3, [r7, #4]
  405122:	4a04      	ldr	r2, [pc, #16]	; (405134 <usart_disable_writeprotect+0x1c>)
  405124:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  405128:	bf00      	nop
  40512a:	370c      	adds	r7, #12
  40512c:	46bd      	mov	sp, r7
  40512e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405132:	4770      	bx	lr
  405134:	55534100 	.word	0x55534100

00405138 <cpu_irq_save>:
  405138:	b480      	push	{r7}
  40513a:	b083      	sub	sp, #12
  40513c:	af00      	add	r7, sp, #0
  40513e:	f3ef 8310 	mrs	r3, PRIMASK
  405142:	607b      	str	r3, [r7, #4]
  405144:	687b      	ldr	r3, [r7, #4]
  405146:	2b00      	cmp	r3, #0
  405148:	bf0c      	ite	eq
  40514a:	2301      	moveq	r3, #1
  40514c:	2300      	movne	r3, #0
  40514e:	b2db      	uxtb	r3, r3
  405150:	603b      	str	r3, [r7, #0]
  405152:	b672      	cpsid	i
  405154:	f3bf 8f5f 	dmb	sy
  405158:	4b04      	ldr	r3, [pc, #16]	; (40516c <cpu_irq_save+0x34>)
  40515a:	2200      	movs	r2, #0
  40515c:	701a      	strb	r2, [r3, #0]
  40515e:	683b      	ldr	r3, [r7, #0]
  405160:	4618      	mov	r0, r3
  405162:	370c      	adds	r7, #12
  405164:	46bd      	mov	sp, r7
  405166:	f85d 7b04 	ldr.w	r7, [sp], #4
  40516a:	4770      	bx	lr
  40516c:	20000114 	.word	0x20000114

00405170 <cpu_irq_is_enabled_flags>:
  405170:	b480      	push	{r7}
  405172:	b083      	sub	sp, #12
  405174:	af00      	add	r7, sp, #0
  405176:	6078      	str	r0, [r7, #4]
  405178:	687b      	ldr	r3, [r7, #4]
  40517a:	2b00      	cmp	r3, #0
  40517c:	bf14      	ite	ne
  40517e:	2301      	movne	r3, #1
  405180:	2300      	moveq	r3, #0
  405182:	b2db      	uxtb	r3, r3
  405184:	4618      	mov	r0, r3
  405186:	370c      	adds	r7, #12
  405188:	46bd      	mov	sp, r7
  40518a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40518e:	4770      	bx	lr

00405190 <cpu_irq_restore>:
  405190:	b580      	push	{r7, lr}
  405192:	b082      	sub	sp, #8
  405194:	af00      	add	r7, sp, #0
  405196:	6078      	str	r0, [r7, #4]
  405198:	6878      	ldr	r0, [r7, #4]
  40519a:	4b07      	ldr	r3, [pc, #28]	; (4051b8 <cpu_irq_restore+0x28>)
  40519c:	4798      	blx	r3
  40519e:	4603      	mov	r3, r0
  4051a0:	2b00      	cmp	r3, #0
  4051a2:	d005      	beq.n	4051b0 <cpu_irq_restore+0x20>
  4051a4:	4b05      	ldr	r3, [pc, #20]	; (4051bc <cpu_irq_restore+0x2c>)
  4051a6:	2201      	movs	r2, #1
  4051a8:	701a      	strb	r2, [r3, #0]
  4051aa:	f3bf 8f5f 	dmb	sy
  4051ae:	b662      	cpsie	i
  4051b0:	bf00      	nop
  4051b2:	3708      	adds	r7, #8
  4051b4:	46bd      	mov	sp, r7
  4051b6:	bd80      	pop	{r7, pc}
  4051b8:	00405171 	.word	0x00405171
  4051bc:	20000114 	.word	0x20000114

004051c0 <Reset_Handler>:
  4051c0:	b580      	push	{r7, lr}
  4051c2:	b084      	sub	sp, #16
  4051c4:	af00      	add	r7, sp, #0
  4051c6:	4b25      	ldr	r3, [pc, #148]	; (40525c <Reset_Handler+0x9c>)
  4051c8:	60fb      	str	r3, [r7, #12]
  4051ca:	4b25      	ldr	r3, [pc, #148]	; (405260 <Reset_Handler+0xa0>)
  4051cc:	60bb      	str	r3, [r7, #8]
  4051ce:	68fa      	ldr	r2, [r7, #12]
  4051d0:	68bb      	ldr	r3, [r7, #8]
  4051d2:	429a      	cmp	r2, r3
  4051d4:	d00c      	beq.n	4051f0 <Reset_Handler+0x30>
  4051d6:	e007      	b.n	4051e8 <Reset_Handler+0x28>
  4051d8:	68bb      	ldr	r3, [r7, #8]
  4051da:	1d1a      	adds	r2, r3, #4
  4051dc:	60ba      	str	r2, [r7, #8]
  4051de:	68fa      	ldr	r2, [r7, #12]
  4051e0:	1d11      	adds	r1, r2, #4
  4051e2:	60f9      	str	r1, [r7, #12]
  4051e4:	6812      	ldr	r2, [r2, #0]
  4051e6:	601a      	str	r2, [r3, #0]
  4051e8:	68bb      	ldr	r3, [r7, #8]
  4051ea:	4a1e      	ldr	r2, [pc, #120]	; (405264 <Reset_Handler+0xa4>)
  4051ec:	4293      	cmp	r3, r2
  4051ee:	d3f3      	bcc.n	4051d8 <Reset_Handler+0x18>
  4051f0:	4b1d      	ldr	r3, [pc, #116]	; (405268 <Reset_Handler+0xa8>)
  4051f2:	60bb      	str	r3, [r7, #8]
  4051f4:	e004      	b.n	405200 <Reset_Handler+0x40>
  4051f6:	68bb      	ldr	r3, [r7, #8]
  4051f8:	1d1a      	adds	r2, r3, #4
  4051fa:	60ba      	str	r2, [r7, #8]
  4051fc:	2200      	movs	r2, #0
  4051fe:	601a      	str	r2, [r3, #0]
  405200:	68bb      	ldr	r3, [r7, #8]
  405202:	4a1a      	ldr	r2, [pc, #104]	; (40526c <Reset_Handler+0xac>)
  405204:	4293      	cmp	r3, r2
  405206:	d3f6      	bcc.n	4051f6 <Reset_Handler+0x36>
  405208:	4b19      	ldr	r3, [pc, #100]	; (405270 <Reset_Handler+0xb0>)
  40520a:	60fb      	str	r3, [r7, #12]
  40520c:	4a19      	ldr	r2, [pc, #100]	; (405274 <Reset_Handler+0xb4>)
  40520e:	68fb      	ldr	r3, [r7, #12]
  405210:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405214:	6093      	str	r3, [r2, #8]
  405216:	4b18      	ldr	r3, [pc, #96]	; (405278 <Reset_Handler+0xb8>)
  405218:	4798      	blx	r3
  40521a:	6078      	str	r0, [r7, #4]
  40521c:	4a17      	ldr	r2, [pc, #92]	; (40527c <Reset_Handler+0xbc>)
  40521e:	4b17      	ldr	r3, [pc, #92]	; (40527c <Reset_Handler+0xbc>)
  405220:	681b      	ldr	r3, [r3, #0]
  405222:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405226:	6013      	str	r3, [r2, #0]
  405228:	f3bf 8f4f 	dsb	sy
  40522c:	f3bf 8f6f 	isb	sy
  405230:	6878      	ldr	r0, [r7, #4]
  405232:	4b13      	ldr	r3, [pc, #76]	; (405280 <Reset_Handler+0xc0>)
  405234:	4798      	blx	r3
  405236:	68fb      	ldr	r3, [r7, #12]
  405238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40523c:	d309      	bcc.n	405252 <Reset_Handler+0x92>
  40523e:	68fb      	ldr	r3, [r7, #12]
  405240:	4a10      	ldr	r2, [pc, #64]	; (405284 <Reset_Handler+0xc4>)
  405242:	4293      	cmp	r3, r2
  405244:	d805      	bhi.n	405252 <Reset_Handler+0x92>
  405246:	4a0b      	ldr	r2, [pc, #44]	; (405274 <Reset_Handler+0xb4>)
  405248:	4b0a      	ldr	r3, [pc, #40]	; (405274 <Reset_Handler+0xb4>)
  40524a:	689b      	ldr	r3, [r3, #8]
  40524c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  405250:	6093      	str	r3, [r2, #8]
  405252:	4b0d      	ldr	r3, [pc, #52]	; (405288 <Reset_Handler+0xc8>)
  405254:	4798      	blx	r3
  405256:	4b0d      	ldr	r3, [pc, #52]	; (40528c <Reset_Handler+0xcc>)
  405258:	4798      	blx	r3
  40525a:	e7fe      	b.n	40525a <Reset_Handler+0x9a>
  40525c:	0040cf98 	.word	0x0040cf98
  405260:	20000000 	.word	0x20000000
  405264:	20000348 	.word	0x20000348
  405268:	20000348 	.word	0x20000348
  40526c:	20000930 	.word	0x20000930
  405270:	00400000 	.word	0x00400000
  405274:	e000ed00 	.word	0xe000ed00
  405278:	00405139 	.word	0x00405139
  40527c:	e000ed88 	.word	0xe000ed88
  405280:	00405191 	.word	0x00405191
  405284:	20027fff 	.word	0x20027fff
  405288:	00408b05 	.word	0x00408b05
  40528c:	004001b5 	.word	0x004001b5

00405290 <Dummy_Handler>:
  405290:	b480      	push	{r7}
  405292:	af00      	add	r7, sp, #0
  405294:	e7fe      	b.n	405294 <Dummy_Handler+0x4>
	...

00405298 <SystemCoreClockUpdate>:
  405298:	b480      	push	{r7}
  40529a:	af00      	add	r7, sp, #0
  40529c:	4b41      	ldr	r3, [pc, #260]	; (4053a4 <SystemCoreClockUpdate+0x10c>)
  40529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4052a0:	f003 0303 	and.w	r3, r3, #3
  4052a4:	2b01      	cmp	r3, #1
  4052a6:	d014      	beq.n	4052d2 <SystemCoreClockUpdate+0x3a>
  4052a8:	2b01      	cmp	r3, #1
  4052aa:	d302      	bcc.n	4052b2 <SystemCoreClockUpdate+0x1a>
  4052ac:	2b02      	cmp	r3, #2
  4052ae:	d038      	beq.n	405322 <SystemCoreClockUpdate+0x8a>
  4052b0:	e059      	b.n	405366 <SystemCoreClockUpdate+0xce>
  4052b2:	4b3d      	ldr	r3, [pc, #244]	; (4053a8 <SystemCoreClockUpdate+0x110>)
  4052b4:	695b      	ldr	r3, [r3, #20]
  4052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4052ba:	2b00      	cmp	r3, #0
  4052bc:	d004      	beq.n	4052c8 <SystemCoreClockUpdate+0x30>
  4052be:	4b3b      	ldr	r3, [pc, #236]	; (4053ac <SystemCoreClockUpdate+0x114>)
  4052c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4052c4:	601a      	str	r2, [r3, #0]
  4052c6:	e04e      	b.n	405366 <SystemCoreClockUpdate+0xce>
  4052c8:	4b38      	ldr	r3, [pc, #224]	; (4053ac <SystemCoreClockUpdate+0x114>)
  4052ca:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4052ce:	601a      	str	r2, [r3, #0]
  4052d0:	e049      	b.n	405366 <SystemCoreClockUpdate+0xce>
  4052d2:	4b34      	ldr	r3, [pc, #208]	; (4053a4 <SystemCoreClockUpdate+0x10c>)
  4052d4:	6a1b      	ldr	r3, [r3, #32]
  4052d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4052da:	2b00      	cmp	r3, #0
  4052dc:	d003      	beq.n	4052e6 <SystemCoreClockUpdate+0x4e>
  4052de:	4b33      	ldr	r3, [pc, #204]	; (4053ac <SystemCoreClockUpdate+0x114>)
  4052e0:	4a33      	ldr	r2, [pc, #204]	; (4053b0 <SystemCoreClockUpdate+0x118>)
  4052e2:	601a      	str	r2, [r3, #0]
  4052e4:	e03f      	b.n	405366 <SystemCoreClockUpdate+0xce>
  4052e6:	4b31      	ldr	r3, [pc, #196]	; (4053ac <SystemCoreClockUpdate+0x114>)
  4052e8:	4a32      	ldr	r2, [pc, #200]	; (4053b4 <SystemCoreClockUpdate+0x11c>)
  4052ea:	601a      	str	r2, [r3, #0]
  4052ec:	4b2d      	ldr	r3, [pc, #180]	; (4053a4 <SystemCoreClockUpdate+0x10c>)
  4052ee:	6a1b      	ldr	r3, [r3, #32]
  4052f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4052f4:	2b10      	cmp	r3, #16
  4052f6:	d004      	beq.n	405302 <SystemCoreClockUpdate+0x6a>
  4052f8:	2b20      	cmp	r3, #32
  4052fa:	d008      	beq.n	40530e <SystemCoreClockUpdate+0x76>
  4052fc:	2b00      	cmp	r3, #0
  4052fe:	d00e      	beq.n	40531e <SystemCoreClockUpdate+0x86>
  405300:	e00e      	b.n	405320 <SystemCoreClockUpdate+0x88>
  405302:	4b2a      	ldr	r3, [pc, #168]	; (4053ac <SystemCoreClockUpdate+0x114>)
  405304:	681b      	ldr	r3, [r3, #0]
  405306:	005b      	lsls	r3, r3, #1
  405308:	4a28      	ldr	r2, [pc, #160]	; (4053ac <SystemCoreClockUpdate+0x114>)
  40530a:	6013      	str	r3, [r2, #0]
  40530c:	e008      	b.n	405320 <SystemCoreClockUpdate+0x88>
  40530e:	4b27      	ldr	r3, [pc, #156]	; (4053ac <SystemCoreClockUpdate+0x114>)
  405310:	681a      	ldr	r2, [r3, #0]
  405312:	4613      	mov	r3, r2
  405314:	005b      	lsls	r3, r3, #1
  405316:	4413      	add	r3, r2
  405318:	4a24      	ldr	r2, [pc, #144]	; (4053ac <SystemCoreClockUpdate+0x114>)
  40531a:	6013      	str	r3, [r2, #0]
  40531c:	e000      	b.n	405320 <SystemCoreClockUpdate+0x88>
  40531e:	bf00      	nop
  405320:	e021      	b.n	405366 <SystemCoreClockUpdate+0xce>
  405322:	4b21      	ldr	r3, [pc, #132]	; (4053a8 <SystemCoreClockUpdate+0x110>)
  405324:	695b      	ldr	r3, [r3, #20]
  405326:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40532a:	2b00      	cmp	r3, #0
  40532c:	d004      	beq.n	405338 <SystemCoreClockUpdate+0xa0>
  40532e:	4b1f      	ldr	r3, [pc, #124]	; (4053ac <SystemCoreClockUpdate+0x114>)
  405330:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405334:	601a      	str	r2, [r3, #0]
  405336:	e003      	b.n	405340 <SystemCoreClockUpdate+0xa8>
  405338:	4b1c      	ldr	r3, [pc, #112]	; (4053ac <SystemCoreClockUpdate+0x114>)
  40533a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40533e:	601a      	str	r2, [r3, #0]
  405340:	4b18      	ldr	r3, [pc, #96]	; (4053a4 <SystemCoreClockUpdate+0x10c>)
  405342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405344:	f003 0303 	and.w	r3, r3, #3
  405348:	2b02      	cmp	r3, #2
  40534a:	d10b      	bne.n	405364 <SystemCoreClockUpdate+0xcc>
  40534c:	4b15      	ldr	r3, [pc, #84]	; (4053a4 <SystemCoreClockUpdate+0x10c>)
  40534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405350:	0c1b      	lsrs	r3, r3, #16
  405352:	f3c3 030c 	ubfx	r3, r3, #0, #13
  405356:	3301      	adds	r3, #1
  405358:	4a14      	ldr	r2, [pc, #80]	; (4053ac <SystemCoreClockUpdate+0x114>)
  40535a:	6812      	ldr	r2, [r2, #0]
  40535c:	fb02 f303 	mul.w	r3, r2, r3
  405360:	4a12      	ldr	r2, [pc, #72]	; (4053ac <SystemCoreClockUpdate+0x114>)
  405362:	6013      	str	r3, [r2, #0]
  405364:	bf00      	nop
  405366:	4b0f      	ldr	r3, [pc, #60]	; (4053a4 <SystemCoreClockUpdate+0x10c>)
  405368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40536a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40536e:	2b70      	cmp	r3, #112	; 0x70
  405370:	d108      	bne.n	405384 <SystemCoreClockUpdate+0xec>
  405372:	4b0e      	ldr	r3, [pc, #56]	; (4053ac <SystemCoreClockUpdate+0x114>)
  405374:	681b      	ldr	r3, [r3, #0]
  405376:	4a10      	ldr	r2, [pc, #64]	; (4053b8 <SystemCoreClockUpdate+0x120>)
  405378:	fba2 2303 	umull	r2, r3, r2, r3
  40537c:	085b      	lsrs	r3, r3, #1
  40537e:	4a0b      	ldr	r2, [pc, #44]	; (4053ac <SystemCoreClockUpdate+0x114>)
  405380:	6013      	str	r3, [r2, #0]
  405382:	e00a      	b.n	40539a <SystemCoreClockUpdate+0x102>
  405384:	4b07      	ldr	r3, [pc, #28]	; (4053a4 <SystemCoreClockUpdate+0x10c>)
  405386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405388:	091b      	lsrs	r3, r3, #4
  40538a:	f003 0307 	and.w	r3, r3, #7
  40538e:	4a07      	ldr	r2, [pc, #28]	; (4053ac <SystemCoreClockUpdate+0x114>)
  405390:	6812      	ldr	r2, [r2, #0]
  405392:	fa22 f303 	lsr.w	r3, r2, r3
  405396:	4a05      	ldr	r2, [pc, #20]	; (4053ac <SystemCoreClockUpdate+0x114>)
  405398:	6013      	str	r3, [r2, #0]
  40539a:	bf00      	nop
  40539c:	46bd      	mov	sp, r7
  40539e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053a2:	4770      	bx	lr
  4053a4:	400e0400 	.word	0x400e0400
  4053a8:	400e1410 	.word	0x400e1410
  4053ac:	20000170 	.word	0x20000170
  4053b0:	00b71b00 	.word	0x00b71b00
  4053b4:	007a1200 	.word	0x007a1200
  4053b8:	aaaaaaab 	.word	0xaaaaaaab

004053bc <system_init_flash>:
  4053bc:	b480      	push	{r7}
  4053be:	b083      	sub	sp, #12
  4053c0:	af00      	add	r7, sp, #0
  4053c2:	6078      	str	r0, [r7, #4]
  4053c4:	687b      	ldr	r3, [r7, #4]
  4053c6:	4a19      	ldr	r2, [pc, #100]	; (40542c <system_init_flash+0x70>)
  4053c8:	4293      	cmp	r3, r2
  4053ca:	d804      	bhi.n	4053d6 <system_init_flash+0x1a>
  4053cc:	4b18      	ldr	r3, [pc, #96]	; (405430 <system_init_flash+0x74>)
  4053ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4053d2:	601a      	str	r2, [r3, #0]
  4053d4:	e023      	b.n	40541e <system_init_flash+0x62>
  4053d6:	687b      	ldr	r3, [r7, #4]
  4053d8:	4a16      	ldr	r2, [pc, #88]	; (405434 <system_init_flash+0x78>)
  4053da:	4293      	cmp	r3, r2
  4053dc:	d803      	bhi.n	4053e6 <system_init_flash+0x2a>
  4053de:	4b14      	ldr	r3, [pc, #80]	; (405430 <system_init_flash+0x74>)
  4053e0:	4a15      	ldr	r2, [pc, #84]	; (405438 <system_init_flash+0x7c>)
  4053e2:	601a      	str	r2, [r3, #0]
  4053e4:	e01b      	b.n	40541e <system_init_flash+0x62>
  4053e6:	687b      	ldr	r3, [r7, #4]
  4053e8:	4a14      	ldr	r2, [pc, #80]	; (40543c <system_init_flash+0x80>)
  4053ea:	4293      	cmp	r3, r2
  4053ec:	d803      	bhi.n	4053f6 <system_init_flash+0x3a>
  4053ee:	4b10      	ldr	r3, [pc, #64]	; (405430 <system_init_flash+0x74>)
  4053f0:	4a13      	ldr	r2, [pc, #76]	; (405440 <system_init_flash+0x84>)
  4053f2:	601a      	str	r2, [r3, #0]
  4053f4:	e013      	b.n	40541e <system_init_flash+0x62>
  4053f6:	687b      	ldr	r3, [r7, #4]
  4053f8:	4a12      	ldr	r2, [pc, #72]	; (405444 <system_init_flash+0x88>)
  4053fa:	4293      	cmp	r3, r2
  4053fc:	d803      	bhi.n	405406 <system_init_flash+0x4a>
  4053fe:	4b0c      	ldr	r3, [pc, #48]	; (405430 <system_init_flash+0x74>)
  405400:	4a11      	ldr	r2, [pc, #68]	; (405448 <system_init_flash+0x8c>)
  405402:	601a      	str	r2, [r3, #0]
  405404:	e00b      	b.n	40541e <system_init_flash+0x62>
  405406:	687b      	ldr	r3, [r7, #4]
  405408:	4a10      	ldr	r2, [pc, #64]	; (40544c <system_init_flash+0x90>)
  40540a:	4293      	cmp	r3, r2
  40540c:	d804      	bhi.n	405418 <system_init_flash+0x5c>
  40540e:	4b08      	ldr	r3, [pc, #32]	; (405430 <system_init_flash+0x74>)
  405410:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  405414:	601a      	str	r2, [r3, #0]
  405416:	e002      	b.n	40541e <system_init_flash+0x62>
  405418:	4b05      	ldr	r3, [pc, #20]	; (405430 <system_init_flash+0x74>)
  40541a:	4a0d      	ldr	r2, [pc, #52]	; (405450 <system_init_flash+0x94>)
  40541c:	601a      	str	r2, [r3, #0]
  40541e:	bf00      	nop
  405420:	370c      	adds	r7, #12
  405422:	46bd      	mov	sp, r7
  405424:	f85d 7b04 	ldr.w	r7, [sp], #4
  405428:	4770      	bx	lr
  40542a:	bf00      	nop
  40542c:	01312cff 	.word	0x01312cff
  405430:	400e0a00 	.word	0x400e0a00
  405434:	026259ff 	.word	0x026259ff
  405438:	04000100 	.word	0x04000100
  40543c:	039386ff 	.word	0x039386ff
  405440:	04000200 	.word	0x04000200
  405444:	04c4b3ff 	.word	0x04c4b3ff
  405448:	04000300 	.word	0x04000300
  40544c:	05f5e0ff 	.word	0x05f5e0ff
  405450:	04000500 	.word	0x04000500

00405454 <_sbrk>:
  405454:	b480      	push	{r7}
  405456:	b085      	sub	sp, #20
  405458:	af00      	add	r7, sp, #0
  40545a:	6078      	str	r0, [r7, #4]
  40545c:	4b10      	ldr	r3, [pc, #64]	; (4054a0 <_sbrk+0x4c>)
  40545e:	60fb      	str	r3, [r7, #12]
  405460:	4b10      	ldr	r3, [pc, #64]	; (4054a4 <_sbrk+0x50>)
  405462:	681b      	ldr	r3, [r3, #0]
  405464:	2b00      	cmp	r3, #0
  405466:	d102      	bne.n	40546e <_sbrk+0x1a>
  405468:	4b0e      	ldr	r3, [pc, #56]	; (4054a4 <_sbrk+0x50>)
  40546a:	4a0f      	ldr	r2, [pc, #60]	; (4054a8 <_sbrk+0x54>)
  40546c:	601a      	str	r2, [r3, #0]
  40546e:	4b0d      	ldr	r3, [pc, #52]	; (4054a4 <_sbrk+0x50>)
  405470:	681b      	ldr	r3, [r3, #0]
  405472:	60bb      	str	r3, [r7, #8]
  405474:	68ba      	ldr	r2, [r7, #8]
  405476:	687b      	ldr	r3, [r7, #4]
  405478:	441a      	add	r2, r3
  40547a:	68fb      	ldr	r3, [r7, #12]
  40547c:	429a      	cmp	r2, r3
  40547e:	dd02      	ble.n	405486 <_sbrk+0x32>
  405480:	f04f 33ff 	mov.w	r3, #4294967295
  405484:	e006      	b.n	405494 <_sbrk+0x40>
  405486:	4b07      	ldr	r3, [pc, #28]	; (4054a4 <_sbrk+0x50>)
  405488:	681a      	ldr	r2, [r3, #0]
  40548a:	687b      	ldr	r3, [r7, #4]
  40548c:	4413      	add	r3, r2
  40548e:	4a05      	ldr	r2, [pc, #20]	; (4054a4 <_sbrk+0x50>)
  405490:	6013      	str	r3, [r2, #0]
  405492:	68bb      	ldr	r3, [r7, #8]
  405494:	4618      	mov	r0, r3
  405496:	3714      	adds	r7, #20
  405498:	46bd      	mov	sp, r7
  40549a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40549e:	4770      	bx	lr
  4054a0:	20027ffc 	.word	0x20027ffc
  4054a4:	20000430 	.word	0x20000430
  4054a8:	20003930 	.word	0x20003930

004054ac <_close>:
  4054ac:	b480      	push	{r7}
  4054ae:	b083      	sub	sp, #12
  4054b0:	af00      	add	r7, sp, #0
  4054b2:	6078      	str	r0, [r7, #4]
  4054b4:	f04f 33ff 	mov.w	r3, #4294967295
  4054b8:	4618      	mov	r0, r3
  4054ba:	370c      	adds	r7, #12
  4054bc:	46bd      	mov	sp, r7
  4054be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054c2:	4770      	bx	lr

004054c4 <_fstat>:
  4054c4:	b480      	push	{r7}
  4054c6:	b083      	sub	sp, #12
  4054c8:	af00      	add	r7, sp, #0
  4054ca:	6078      	str	r0, [r7, #4]
  4054cc:	6039      	str	r1, [r7, #0]
  4054ce:	683b      	ldr	r3, [r7, #0]
  4054d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4054d4:	605a      	str	r2, [r3, #4]
  4054d6:	2300      	movs	r3, #0
  4054d8:	4618      	mov	r0, r3
  4054da:	370c      	adds	r7, #12
  4054dc:	46bd      	mov	sp, r7
  4054de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054e2:	4770      	bx	lr

004054e4 <_isatty>:
  4054e4:	b480      	push	{r7}
  4054e6:	b083      	sub	sp, #12
  4054e8:	af00      	add	r7, sp, #0
  4054ea:	6078      	str	r0, [r7, #4]
  4054ec:	2301      	movs	r3, #1
  4054ee:	4618      	mov	r0, r3
  4054f0:	370c      	adds	r7, #12
  4054f2:	46bd      	mov	sp, r7
  4054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054f8:	4770      	bx	lr

004054fa <_lseek>:
  4054fa:	b480      	push	{r7}
  4054fc:	b085      	sub	sp, #20
  4054fe:	af00      	add	r7, sp, #0
  405500:	60f8      	str	r0, [r7, #12]
  405502:	60b9      	str	r1, [r7, #8]
  405504:	607a      	str	r2, [r7, #4]
  405506:	2300      	movs	r3, #0
  405508:	4618      	mov	r0, r3
  40550a:	3714      	adds	r7, #20
  40550c:	46bd      	mov	sp, r7
  40550e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405512:	4770      	bx	lr

00405514 <ch201_gprmt_init>:

#include "soniclib.h"
#include "ch201_gprmt.h"
#include "ch_common.h"

uint8_t ch201_gprmt_init(ch_dev_t *dev_ptr, ch_group_t *grp_ptr, uint8_t i2c_addr, uint8_t io_index, uint8_t i2c_bus_index) {
  405514:	b580      	push	{r7, lr}
  405516:	b084      	sub	sp, #16
  405518:	af00      	add	r7, sp, #0
  40551a:	60f8      	str	r0, [r7, #12]
  40551c:	60b9      	str	r1, [r7, #8]
  40551e:	4611      	mov	r1, r2
  405520:	461a      	mov	r2, r3
  405522:	460b      	mov	r3, r1
  405524:	71fb      	strb	r3, [r7, #7]
  405526:	4613      	mov	r3, r2
  405528:	71bb      	strb	r3, [r7, #6]
	
	dev_ptr->part_number = CH201_PART_NUMBER;
  40552a:	68fb      	ldr	r3, [r7, #12]
  40552c:	22c9      	movs	r2, #201	; 0xc9
  40552e:	839a      	strh	r2, [r3, #28]
	dev_ptr->app_i2c_address = i2c_addr;
  405530:	68fb      	ldr	r3, [r7, #12]
  405532:	79fa      	ldrb	r2, [r7, #7]
  405534:	765a      	strb	r2, [r3, #25]
	dev_ptr->io_index = io_index;
  405536:	68fb      	ldr	r3, [r7, #12]
  405538:	79ba      	ldrb	r2, [r7, #6]
  40553a:	f883 2020 	strb.w	r2, [r3, #32]
	dev_ptr->i2c_bus_index = i2c_bus_index;
  40553e:	68fb      	ldr	r3, [r7, #12]
  405540:	7e3a      	ldrb	r2, [r7, #24]
  405542:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	dev_ptr->freqCounterCycles = CH201_COMMON_FREQCOUNTERCYCLES;
  405546:	68fb      	ldr	r3, [r7, #12]
  405548:	2280      	movs	r2, #128	; 0x80
  40554a:	80da      	strh	r2, [r3, #6]
	dev_ptr->freqLockValue     = CH201_COMMON_READY_FREQ_LOCKED;
  40554c:	68fb      	ldr	r3, [r7, #12]
  40554e:	2202      	movs	r2, #2
  405550:	715a      	strb	r2, [r3, #5]

	/* Init firmware-specific function pointers */
	dev_ptr->firmware 					= ch201_gprmt_fw;
  405552:	68fb      	ldr	r3, [r7, #12]
  405554:	4a3b      	ldr	r2, [pc, #236]	; (405644 <ch201_gprmt_init+0x130>)
  405556:	631a      	str	r2, [r3, #48]	; 0x30
	dev_ptr->fw_version_string			= ch201_gprmt_version;
  405558:	4b3b      	ldr	r3, [pc, #236]	; (405648 <ch201_gprmt_init+0x134>)
  40555a:	681a      	ldr	r2, [r3, #0]
  40555c:	68fb      	ldr	r3, [r7, #12]
  40555e:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_ptr->ram_init 					= get_ram_ch201_gprmt_init_ptr();
  405560:	4b3a      	ldr	r3, [pc, #232]	; (40564c <ch201_gprmt_init+0x138>)
  405562:	4798      	blx	r3
  405564:	4602      	mov	r2, r0
  405566:	68fb      	ldr	r3, [r7, #12]
  405568:	635a      	str	r2, [r3, #52]	; 0x34
	dev_ptr->get_fw_ram_init_size 		= get_ch201_gprmt_fw_ram_init_size;
  40556a:	68fb      	ldr	r3, [r7, #12]
  40556c:	4a38      	ldr	r2, [pc, #224]	; (405650 <ch201_gprmt_init+0x13c>)
  40556e:	651a      	str	r2, [r3, #80]	; 0x50
	dev_ptr->get_fw_ram_init_addr 		= get_ch201_gprmt_fw_ram_init_addr;
  405570:	68fb      	ldr	r3, [r7, #12]
  405572:	4a38      	ldr	r2, [pc, #224]	; (405654 <ch201_gprmt_init+0x140>)
  405574:	655a      	str	r2, [r3, #84]	; 0x54

	dev_ptr->prepare_pulse_timer 		= ch_common_prepare_pulse_timer;
  405576:	68fb      	ldr	r3, [r7, #12]
  405578:	4a37      	ldr	r2, [pc, #220]	; (405658 <ch201_gprmt_init+0x144>)
  40557a:	639a      	str	r2, [r3, #56]	; 0x38
	dev_ptr->store_pt_result 			= ch_common_store_pt_result;
  40557c:	68fb      	ldr	r3, [r7, #12]
  40557e:	4a37      	ldr	r2, [pc, #220]	; (40565c <ch201_gprmt_init+0x148>)
  405580:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_ptr->store_op_freq 				= ch_common_store_op_freq;
  405582:	68fb      	ldr	r3, [r7, #12]
  405584:	4a36      	ldr	r2, [pc, #216]	; (405660 <ch201_gprmt_init+0x14c>)
  405586:	641a      	str	r2, [r3, #64]	; 0x40
	dev_ptr->store_bandwidth 			= ch_common_store_bandwidth;
  405588:	68fb      	ldr	r3, [r7, #12]
  40558a:	4a36      	ldr	r2, [pc, #216]	; (405664 <ch201_gprmt_init+0x150>)
  40558c:	645a      	str	r2, [r3, #68]	; 0x44
	dev_ptr->store_scalefactor 			= ch_common_store_scale_factor;
  40558e:	68fb      	ldr	r3, [r7, #12]
  405590:	4a35      	ldr	r2, [pc, #212]	; (405668 <ch201_gprmt_init+0x154>)
  405592:	649a      	str	r2, [r3, #72]	; 0x48
	dev_ptr->get_locked_state 			= ch_common_get_locked_state;
  405594:	68fb      	ldr	r3, [r7, #12]
  405596:	4a35      	ldr	r2, [pc, #212]	; (40566c <ch201_gprmt_init+0x158>)
  405598:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Init API function pointers */
	dev_ptr->api_funcs.fw_load          	= ch_common_fw_load;
  40559a:	68fb      	ldr	r3, [r7, #12]
  40559c:	4a34      	ldr	r2, [pc, #208]	; (405670 <ch201_gprmt_init+0x15c>)
  40559e:	659a      	str	r2, [r3, #88]	; 0x58
	dev_ptr->api_funcs.set_mode         	= ch_common_set_mode;
  4055a0:	68fb      	ldr	r3, [r7, #12]
  4055a2:	4a34      	ldr	r2, [pc, #208]	; (405674 <ch201_gprmt_init+0x160>)
  4055a4:	65da      	str	r2, [r3, #92]	; 0x5c
	dev_ptr->api_funcs.set_sample_interval  = ch_common_set_sample_interval;
  4055a6:	68fb      	ldr	r3, [r7, #12]
  4055a8:	4a33      	ldr	r2, [pc, #204]	; (405678 <ch201_gprmt_init+0x164>)
  4055aa:	661a      	str	r2, [r3, #96]	; 0x60
	dev_ptr->api_funcs.set_num_samples  	= ch_common_set_num_samples;
  4055ac:	68fb      	ldr	r3, [r7, #12]
  4055ae:	4a33      	ldr	r2, [pc, #204]	; (40567c <ch201_gprmt_init+0x168>)
  4055b0:	665a      	str	r2, [r3, #100]	; 0x64
	dev_ptr->api_funcs.set_max_range    	= ch_common_set_max_range;
  4055b2:	68fb      	ldr	r3, [r7, #12]
  4055b4:	4a32      	ldr	r2, [pc, #200]	; (405680 <ch201_gprmt_init+0x16c>)
  4055b6:	669a      	str	r2, [r3, #104]	; 0x68
	dev_ptr->api_funcs.set_static_range 	= NULL;								// not supported
  4055b8:	68fb      	ldr	r3, [r7, #12]
  4055ba:	2200      	movs	r2, #0
  4055bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	dev_ptr->api_funcs.set_rx_holdoff   	= ch_common_set_rx_holdoff;
  4055c0:	68fb      	ldr	r3, [r7, #12]
  4055c2:	4a30      	ldr	r2, [pc, #192]	; (405684 <ch201_gprmt_init+0x170>)
  4055c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	dev_ptr->api_funcs.get_rx_holdoff   	= ch_common_get_rx_holdoff;
  4055c8:	68fb      	ldr	r3, [r7, #12]
  4055ca:	4a2f      	ldr	r2, [pc, #188]	; (405688 <ch201_gprmt_init+0x174>)
  4055cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_ptr->api_funcs.get_range        	= ch_common_get_range;
  4055d0:	68fb      	ldr	r3, [r7, #12]
  4055d2:	4a2e      	ldr	r2, [pc, #184]	; (40568c <ch201_gprmt_init+0x178>)
  4055d4:	671a      	str	r2, [r3, #112]	; 0x70
	dev_ptr->api_funcs.get_amplitude    	= ch_common_get_amplitude;
  4055d6:	68fb      	ldr	r3, [r7, #12]
  4055d8:	4a2d      	ldr	r2, [pc, #180]	; (405690 <ch201_gprmt_init+0x17c>)
  4055da:	679a      	str	r2, [r3, #120]	; 0x78
	dev_ptr->api_funcs.get_iq_data      	= ch_common_get_iq_data;
  4055dc:	68fb      	ldr	r3, [r7, #12]
  4055de:	4a2d      	ldr	r2, [pc, #180]	; (405694 <ch201_gprmt_init+0x180>)
  4055e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	dev_ptr->api_funcs.get_amplitude_data  	= ch_common_get_amplitude_data;
  4055e4:	68fb      	ldr	r3, [r7, #12]
  4055e6:	4a2c      	ldr	r2, [pc, #176]	; (405698 <ch201_gprmt_init+0x184>)
  4055e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	dev_ptr->api_funcs.samples_to_mm    	= ch_common_samples_to_mm;
  4055ec:	68fb      	ldr	r3, [r7, #12]
  4055ee:	4a2b      	ldr	r2, [pc, #172]	; (40569c <ch201_gprmt_init+0x188>)
  4055f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	dev_ptr->api_funcs.mm_to_samples    	= ch_common_mm_to_samples;
  4055f4:	68fb      	ldr	r3, [r7, #12]
  4055f6:	4a2a      	ldr	r2, [pc, #168]	; (4056a0 <ch201_gprmt_init+0x18c>)
  4055f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	dev_ptr->api_funcs.set_thresholds   	= ch_common_set_thresholds;
  4055fc:	68fb      	ldr	r3, [r7, #12]
  4055fe:	4a29      	ldr	r2, [pc, #164]	; (4056a4 <ch201_gprmt_init+0x190>)
  405600:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	dev_ptr->api_funcs.get_thresholds   	= ch_common_get_thresholds;
  405604:	68fb      	ldr	r3, [r7, #12]
  405606:	4a28      	ldr	r2, [pc, #160]	; (4056a8 <ch201_gprmt_init+0x194>)
  405608:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	dev_ptr->api_funcs.set_sample_window 	= ch_common_set_sample_window;
  40560c:	68fb      	ldr	r3, [r7, #12]
  40560e:	4a27      	ldr	r2, [pc, #156]	; (4056ac <ch201_gprmt_init+0x198>)
  405610:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_ptr->api_funcs.get_amplitude_avg 	= ch_common_get_amplitude_avg;
  405612:	68fb      	ldr	r3, [r7, #12]
  405614:	4a26      	ldr	r2, [pc, #152]	; (4056b0 <ch201_gprmt_init+0x19c>)
  405616:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Init max sample count */
	dev_ptr->max_samples = CH201_GPRMT_MAX_SAMPLES;
  405618:	68fb      	ldr	r3, [r7, #12]
  40561a:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
  40561e:	845a      	strh	r2, [r3, #34]	; 0x22

	/* This firmware does not use oversampling */
	dev_ptr->oversample = 0;
  405620:	68fb      	ldr	r3, [r7, #12]
  405622:	2200      	movs	r2, #0
  405624:	779a      	strb	r2, [r3, #30]

	/* Init device and group descriptor linkage */
	dev_ptr->group						= grp_ptr;			// set parent group pointer
  405626:	68fb      	ldr	r3, [r7, #12]
  405628:	68ba      	ldr	r2, [r7, #8]
  40562a:	601a      	str	r2, [r3, #0]
	grp_ptr->device[io_index] 	   		= dev_ptr;			// add to parent group
  40562c:	79ba      	ldrb	r2, [r7, #6]
  40562e:	68bb      	ldr	r3, [r7, #8]
  405630:	3206      	adds	r2, #6
  405632:	68f9      	ldr	r1, [r7, #12]
  405634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return 0;
  405638:	2300      	movs	r3, #0
}
  40563a:	4618      	mov	r0, r3
  40563c:	3710      	adds	r7, #16
  40563e:	46bd      	mov	sp, r7
  405640:	bd80      	pop	{r7, pc}
  405642:	bf00      	nop
  405644:	0040c490 	.word	0x0040c490
  405648:	20000174 	.word	0x20000174
  40564c:	004056d9 	.word	0x004056d9
  405650:	004056c7 	.word	0x004056c7
  405654:	004056b5 	.word	0x004056b5
  405658:	0040645d 	.word	0x0040645d
  40565c:	00406491 	.word	0x00406491
  405660:	004064cd 	.word	0x004064cd
  405664:	00406541 	.word	0x00406541
  405668:	00406555 	.word	0x00406555
  40566c:	004063fd 	.word	0x004063fd
  405670:	00405f51 	.word	0x00405f51
  405674:	00405e0d 	.word	0x00405e0d
  405678:	00405fa1 	.word	0x00405fa1
  40567c:	00406059 	.word	0x00406059
  405680:	004060d9 	.word	0x004060d9
  405684:	00406c45 	.word	0x00406c45
  405688:	00406ca5 	.word	0x00406ca5
  40568c:	004062a1 	.word	0x004062a1
  405690:	004063b9 	.word	0x004063b9
  405694:	00406ac9 	.word	0x00406ac9
  405698:	00406b05 	.word	0x00406b05
  40569c:	00406251 	.word	0x00406251
  4056a0:	00406165 	.word	0x00406165
  4056a4:	004065a5 	.word	0x004065a5
  4056a8:	004066b9 	.word	0x004066b9
  4056ac:	004069a5 	.word	0x004069a5
  4056b0:	004069f9 	.word	0x004069f9

004056b4 <get_ch201_gprmt_fw_ram_init_addr>:
const char * ch201_gprmt_gitsha1 = "dev";

#define RAM_INIT_ADDRESS 2410
#define RAM_INIT_WRITE_SIZE   28

uint16_t get_ch201_gprmt_fw_ram_init_addr(void) { return (uint16_t)RAM_INIT_ADDRESS;}
  4056b4:	b480      	push	{r7}
  4056b6:	af00      	add	r7, sp, #0
  4056b8:	f640 136a 	movw	r3, #2410	; 0x96a
  4056bc:	4618      	mov	r0, r3
  4056be:	46bd      	mov	sp, r7
  4056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056c4:	4770      	bx	lr

004056c6 <get_ch201_gprmt_fw_ram_init_size>:
uint16_t get_ch201_gprmt_fw_ram_init_size(void) { return (uint16_t)RAM_INIT_WRITE_SIZE;}
  4056c6:	b480      	push	{r7}
  4056c8:	af00      	add	r7, sp, #0
  4056ca:	231c      	movs	r3, #28
  4056cc:	4618      	mov	r0, r3
  4056ce:	46bd      	mov	sp, r7
  4056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056d4:	4770      	bx	lr
	...

004056d8 <get_ram_ch201_gprmt_init_ptr>:

const unsigned char ram_ch201_gprmt_init[RAM_INIT_WRITE_SIZE] = {
0x88, 0x13, 0xD0, 0x07, 0x20, 0x03, 0x90, 0x01, 0xFA, 0x00, 0xAF, 0x00, 0x06, 0x00, 0x00, 0x00, 
0x00, 0xFA, 0x00, 0x00, 0x64, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00, };

const unsigned char * get_ram_ch201_gprmt_init_ptr(void) { return &ram_ch201_gprmt_init[0];}
  4056d8:	b480      	push	{r7}
  4056da:	af00      	add	r7, sp, #0
  4056dc:	4b02      	ldr	r3, [pc, #8]	; (4056e8 <get_ram_ch201_gprmt_init_ptr+0x10>)
  4056de:	4618      	mov	r0, r3
  4056e0:	46bd      	mov	sp, r7
  4056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056e6:	4770      	bx	lr
  4056e8:	0040c474 	.word	0x0040c474

004056ec <chbsp_debug_toggle>:



/* Functions supporting debugging */

__attribute__((weak)) void chbsp_debug_toggle(uint8_t __attribute__((unused)) dbg_pin_num) {}
  4056ec:	b480      	push	{r7}
  4056ee:	b083      	sub	sp, #12
  4056f0:	af00      	add	r7, sp, #0
  4056f2:	4603      	mov	r3, r0
  4056f4:	71fb      	strb	r3, [r7, #7]
  4056f6:	bf00      	nop
  4056f8:	370c      	adds	r7, #12
  4056fa:	46bd      	mov	sp, r7
  4056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405700:	4770      	bx	lr

00405702 <chbsp_external_i2c_irq_handler>:

__attribute__((weak)) void chbsp_io_set(ch_dev_t *dev_ptr) {
	(void)(dev_ptr);
}

__attribute__((weak)) void chbsp_external_i2c_irq_handler(chdrv_i2c_transaction_t *trans){
  405702:	b480      	push	{r7}
  405704:	b083      	sub	sp, #12
  405706:	af00      	add	r7, sp, #0
  405708:	6078      	str	r0, [r7, #4]
	(void)(trans);
}
  40570a:	bf00      	nop
  40570c:	370c      	adds	r7, #12
  40570e:	46bd      	mov	sp, r7
  405710:	f85d 7b04 	ldr.w	r7, [sp], #4
  405714:	4770      	bx	lr
	...

00405718 <ch_init>:
 *
 * \return 0 (RET_OK) if successful, non-zero otherwise
 *
 */

uint8_t	ch_init(ch_dev_t *dev_ptr, ch_group_t *grp_ptr, uint8_t dev_num, ch_fw_init_func_t fw_init_func) {
  405718:	b590      	push	{r4, r7, lr}
  40571a:	b089      	sub	sp, #36	; 0x24
  40571c:	af02      	add	r7, sp, #8
  40571e:	60f8      	str	r0, [r7, #12]
  405720:	60b9      	str	r1, [r7, #8]
  405722:	603b      	str	r3, [r7, #0]
  405724:	4613      	mov	r3, r2
  405726:	71fb      	strb	r3, [r7, #7]
	
	uint8_t	ret_val = RET_ERR;
  405728:	2301      	movs	r3, #1
  40572a:	75fb      	strb	r3, [r7, #23]

	ch_i2c_info_t	i2c_info;

	if (fw_init_func != NULL) {
  40572c:	683b      	ldr	r3, [r7, #0]
  40572e:	2b00      	cmp	r3, #0
  405730:	d019      	beq.n	405766 <ch_init+0x4e>
		/* Get I2C parameters from BSP */
		ret_val = chbsp_i2c_get_info(grp_ptr, dev_num, &i2c_info);
  405732:	f107 0210 	add.w	r2, r7, #16
  405736:	79fb      	ldrb	r3, [r7, #7]
  405738:	4619      	mov	r1, r3
  40573a:	68b8      	ldr	r0, [r7, #8]
  40573c:	4b0c      	ldr	r3, [pc, #48]	; (405770 <ch_init+0x58>)
  40573e:	4798      	blx	r3
  405740:	4603      	mov	r3, r0
  405742:	75fb      	strb	r3, [r7, #23]
	
		if (ret_val == RET_OK) {
  405744:	7dfb      	ldrb	r3, [r7, #23]
  405746:	2b00      	cmp	r3, #0
  405748:	d10d      	bne.n	405766 <ch_init+0x4e>
			/* Save special handling flags for Chirp driver */
			grp_ptr->i2c_drv_flags = i2c_info.drv_flags;
  40574a:	8a7a      	ldrh	r2, [r7, #18]
  40574c:	68bb      	ldr	r3, [r7, #8]
  40574e:	809a      	strh	r2, [r3, #4]

			/* Call asic f/w init function passed in as parameter */
			ret_val = (*fw_init_func)(dev_ptr, grp_ptr, i2c_info.address, dev_num, i2c_info.bus_num);
  405750:	7c3a      	ldrb	r2, [r7, #16]
  405752:	7c7b      	ldrb	r3, [r7, #17]
  405754:	79f9      	ldrb	r1, [r7, #7]
  405756:	9300      	str	r3, [sp, #0]
  405758:	683c      	ldr	r4, [r7, #0]
  40575a:	460b      	mov	r3, r1
  40575c:	68b9      	ldr	r1, [r7, #8]
  40575e:	68f8      	ldr	r0, [r7, #12]
  405760:	47a0      	blx	r4
  405762:	4603      	mov	r3, r0
  405764:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret_val;
  405766:	7dfb      	ldrb	r3, [r7, #23]
}
  405768:	4618      	mov	r0, r3
  40576a:	371c      	adds	r7, #28
  40576c:	46bd      	mov	sp, r7
  40576e:	bd90      	pop	{r4, r7, pc}
  405770:	0040264d 	.word	0x0040264d

00405774 <ch_get_config>:


uint8_t	ch_get_config(ch_dev_t *dev_ptr, ch_config_t *config_ptr) {
  405774:	b480      	push	{r7}
  405776:	b085      	sub	sp, #20
  405778:	af00      	add	r7, sp, #0
  40577a:	6078      	str	r0, [r7, #4]
  40577c:	6039      	str	r1, [r7, #0]
	uint8_t ret_val = 0;
  40577e:	2300      	movs	r3, #0
  405780:	73fb      	strb	r3, [r7, #15]

	config_ptr->mode         	= dev_ptr->mode;
  405782:	687b      	ldr	r3, [r7, #4]
  405784:	791a      	ldrb	r2, [r3, #4]
  405786:	683b      	ldr	r3, [r7, #0]
  405788:	701a      	strb	r2, [r3, #0]
	config_ptr->max_range    	= dev_ptr->max_range;
  40578a:	687b      	ldr	r3, [r7, #4]
  40578c:	891a      	ldrh	r2, [r3, #8]
  40578e:	683b      	ldr	r3, [r7, #0]
  405790:	805a      	strh	r2, [r3, #2]
	config_ptr->static_range 	= dev_ptr->static_range;
  405792:	687b      	ldr	r3, [r7, #4]
  405794:	895a      	ldrh	r2, [r3, #10]
  405796:	683b      	ldr	r3, [r7, #0]
  405798:	809a      	strh	r2, [r3, #4]
	config_ptr->sample_interval	= dev_ptr->sample_interval;
  40579a:	687b      	ldr	r3, [r7, #4]
  40579c:	899a      	ldrh	r2, [r3, #12]
  40579e:	683b      	ldr	r3, [r7, #0]
  4057a0:	80da      	strh	r2, [r3, #6]
	config_ptr->thresh_ptr   	= NULL;				// thresholds not returned here - use ch_get_thresholds()
  4057a2:	683b      	ldr	r3, [r7, #0]
  4057a4:	2200      	movs	r2, #0
  4057a6:	609a      	str	r2, [r3, #8]

	return ret_val;
  4057a8:	7bfb      	ldrb	r3, [r7, #15]
}
  4057aa:	4618      	mov	r0, r3
  4057ac:	3714      	adds	r7, #20
  4057ae:	46bd      	mov	sp, r7
  4057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057b4:	4770      	bx	lr
	...

004057b8 <ch_set_config>:


uint8_t	ch_set_config(ch_dev_t *dev_ptr, ch_config_t *config_ptr) {
  4057b8:	b580      	push	{r7, lr}
  4057ba:	b084      	sub	sp, #16
  4057bc:	af00      	add	r7, sp, #0
  4057be:	6078      	str	r0, [r7, #4]
  4057c0:	6039      	str	r1, [r7, #0]
	uint8_t ret_val = 0;
  4057c2:	2300      	movs	r3, #0
  4057c4:	73fb      	strb	r3, [r7, #15]

	ret_val = ch_set_mode(dev_ptr, config_ptr->mode);						// set operating mode
  4057c6:	683b      	ldr	r3, [r7, #0]
  4057c8:	781b      	ldrb	r3, [r3, #0]
  4057ca:	4619      	mov	r1, r3
  4057cc:	6878      	ldr	r0, [r7, #4]
  4057ce:	4b31      	ldr	r3, [pc, #196]	; (405894 <ch_set_config+0xdc>)
  4057d0:	4798      	blx	r3
  4057d2:	4603      	mov	r3, r0
  4057d4:	73fb      	strb	r3, [r7, #15]

	if (!ret_val) {
  4057d6:	7bfb      	ldrb	r3, [r7, #15]
  4057d8:	2b00      	cmp	r3, #0
  4057da:	d10b      	bne.n	4057f4 <ch_set_config+0x3c>
		dev_ptr->mode = config_ptr->mode;
  4057dc:	683b      	ldr	r3, [r7, #0]
  4057de:	781a      	ldrb	r2, [r3, #0]
  4057e0:	687b      	ldr	r3, [r7, #4]
  4057e2:	711a      	strb	r2, [r3, #4]

		ret_val = ch_set_max_range(dev_ptr, config_ptr->max_range);			// set max range
  4057e4:	683b      	ldr	r3, [r7, #0]
  4057e6:	885b      	ldrh	r3, [r3, #2]
  4057e8:	4619      	mov	r1, r3
  4057ea:	6878      	ldr	r0, [r7, #4]
  4057ec:	4b2a      	ldr	r3, [pc, #168]	; (405898 <ch_set_config+0xe0>)
  4057ee:	4798      	blx	r3
  4057f0:	4603      	mov	r3, r0
  4057f2:	73fb      	strb	r3, [r7, #15]
	}

	if (!ret_val) {
  4057f4:	7bfb      	ldrb	r3, [r7, #15]
  4057f6:	2b00      	cmp	r3, #0
  4057f8:	d112      	bne.n	405820 <ch_set_config+0x68>

		if (dev_ptr->part_number == CH101_PART_NUMBER) {					// static rejection only on CH101
  4057fa:	687b      	ldr	r3, [r7, #4]
  4057fc:	8b9b      	ldrh	r3, [r3, #28]
  4057fe:	2b65      	cmp	r3, #101	; 0x65
  405800:	d10e      	bne.n	405820 <ch_set_config+0x68>
			ret_val = ch_set_static_range(dev_ptr, config_ptr->static_range);	// set static target rejection range
  405802:	683b      	ldr	r3, [r7, #0]
  405804:	889b      	ldrh	r3, [r3, #4]
  405806:	4619      	mov	r1, r3
  405808:	6878      	ldr	r0, [r7, #4]
  40580a:	4b24      	ldr	r3, [pc, #144]	; (40589c <ch_set_config+0xe4>)
  40580c:	4798      	blx	r3
  40580e:	4603      	mov	r3, r0
  405810:	73fb      	strb	r3, [r7, #15]

			if (!ret_val) {
  405812:	7bfb      	ldrb	r3, [r7, #15]
  405814:	2b00      	cmp	r3, #0
  405816:	d103      	bne.n	405820 <ch_set_config+0x68>
				dev_ptr->static_range = config_ptr->static_range;
  405818:	683b      	ldr	r3, [r7, #0]
  40581a:	889a      	ldrh	r2, [r3, #4]
  40581c:	687b      	ldr	r3, [r7, #4]
  40581e:	815a      	strh	r2, [r3, #10]
			}
		}
	}

	if (!ret_val) {
  405820:	7bfb      	ldrb	r3, [r7, #15]
  405822:	2b00      	cmp	r3, #0
  405824:	d107      	bne.n	405836 <ch_set_config+0x7e>
		ret_val = ch_set_sample_interval(dev_ptr, config_ptr->sample_interval);		// set sample interval (free-run mode only)
  405826:	683b      	ldr	r3, [r7, #0]
  405828:	88db      	ldrh	r3, [r3, #6]
  40582a:	4619      	mov	r1, r3
  40582c:	6878      	ldr	r0, [r7, #4]
  40582e:	4b1c      	ldr	r3, [pc, #112]	; (4058a0 <ch_set_config+0xe8>)
  405830:	4798      	blx	r3
  405832:	4603      	mov	r3, r0
  405834:	73fb      	strb	r3, [r7, #15]
	}

	if (!ret_val) {
  405836:	7bfb      	ldrb	r3, [r7, #15]
  405838:	2b00      	cmp	r3, #0
  40583a:	d10f      	bne.n	40585c <ch_set_config+0xa4>
		dev_ptr->sample_interval = config_ptr->sample_interval;
  40583c:	683b      	ldr	r3, [r7, #0]
  40583e:	88da      	ldrh	r2, [r3, #6]
  405840:	687b      	ldr	r3, [r7, #4]
  405842:	819a      	strh	r2, [r3, #12]

		if (dev_ptr->part_number == CH201_PART_NUMBER) {					// multi threshold only on CH201
  405844:	687b      	ldr	r3, [r7, #4]
  405846:	8b9b      	ldrh	r3, [r3, #28]
  405848:	2bc9      	cmp	r3, #201	; 0xc9
  40584a:	d107      	bne.n	40585c <ch_set_config+0xa4>
			ret_val = ch_set_thresholds(dev_ptr, config_ptr->thresh_ptr);		// set multiple thresholds
  40584c:	683b      	ldr	r3, [r7, #0]
  40584e:	689b      	ldr	r3, [r3, #8]
  405850:	4619      	mov	r1, r3
  405852:	6878      	ldr	r0, [r7, #4]
  405854:	4b13      	ldr	r3, [pc, #76]	; (4058a4 <ch_set_config+0xec>)
  405856:	4798      	blx	r3
  405858:	4603      	mov	r3, r0
  40585a:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (!ret_val) {
  40585c:	7bfb      	ldrb	r3, [r7, #15]
  40585e:	2b00      	cmp	r3, #0
  405860:	d107      	bne.n	405872 <ch_set_config+0xba>
		ret_val = ch_set_target_interrupt(dev_ptr, config_ptr->enable_target_int);		// enable/disable target detection interrupt 
  405862:	683b      	ldr	r3, [r7, #0]
  405864:	7b5b      	ldrb	r3, [r3, #13]
  405866:	4619      	mov	r1, r3
  405868:	6878      	ldr	r0, [r7, #4]
  40586a:	4b0f      	ldr	r3, [pc, #60]	; (4058a8 <ch_set_config+0xf0>)
  40586c:	4798      	blx	r3
  40586e:	4603      	mov	r3, r0
  405870:	73fb      	strb	r3, [r7, #15]
	}
	if (!ret_val) {
  405872:	7bfb      	ldrb	r3, [r7, #15]
  405874:	2b00      	cmp	r3, #0
  405876:	d107      	bne.n	405888 <ch_set_config+0xd0>
		ret_val = ch_set_time_plan(dev_ptr,config_ptr->time_plan);		// set time plan (sonicsync only)
  405878:	683b      	ldr	r3, [r7, #0]
  40587a:	7b1b      	ldrb	r3, [r3, #12]
  40587c:	4619      	mov	r1, r3
  40587e:	6878      	ldr	r0, [r7, #4]
  405880:	4b0a      	ldr	r3, [pc, #40]	; (4058ac <ch_set_config+0xf4>)
  405882:	4798      	blx	r3
  405884:	4603      	mov	r3, r0
  405886:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
  405888:	7bfb      	ldrb	r3, [r7, #15]
}
  40588a:	4618      	mov	r0, r3
  40588c:	3710      	adds	r7, #16
  40588e:	46bd      	mov	sp, r7
  405890:	bd80      	pop	{r7, pc}
  405892:	bf00      	nop
  405894:	004059d3 	.word	0x004059d3
  405898:	00405ab1 	.word	0x00405ab1
  40589c:	00405ae5 	.word	0x00405ae5
  4058a0:	00405a15 	.word	0x00405a15
  4058a4:	00405c99 	.word	0x00405c99
  4058a8:	00405da1 	.word	0x00405da1
  4058ac:	00405d0d 	.word	0x00405d0d

004058b0 <ch_group_start>:




uint8_t	ch_group_start(ch_group_t *grp_ptr) {
  4058b0:	b580      	push	{r7, lr}
  4058b2:	b084      	sub	sp, #16
  4058b4:	af00      	add	r7, sp, #0
  4058b6:	6078      	str	r0, [r7, #4]
	uint8_t ret_val;

	ret_val = chdrv_group_start(grp_ptr);
  4058b8:	6878      	ldr	r0, [r7, #4]
  4058ba:	4b04      	ldr	r3, [pc, #16]	; (4058cc <ch_group_start+0x1c>)
  4058bc:	4798      	blx	r3
  4058be:	4603      	mov	r3, r0
  4058c0:	73fb      	strb	r3, [r7, #15]

	return ret_val;
  4058c2:	7bfb      	ldrb	r3, [r7, #15]
}
  4058c4:	4618      	mov	r0, r3
  4058c6:	3710      	adds	r7, #16
  4058c8:	46bd      	mov	sp, r7
  4058ca:	bd80      	pop	{r7, pc}
  4058cc:	00407aa9 	.word	0x00407aa9

004058d0 <ch_group_trigger>:

void ch_trigger(ch_dev_t *dev_ptr) {
	chdrv_hw_trigger(dev_ptr);
}

void ch_group_trigger(ch_group_t *grp_ptr) {
  4058d0:	b580      	push	{r7, lr}
  4058d2:	b082      	sub	sp, #8
  4058d4:	af00      	add	r7, sp, #0
  4058d6:	6078      	str	r0, [r7, #4]
	chdrv_group_hw_trigger(grp_ptr);
  4058d8:	6878      	ldr	r0, [r7, #4]
  4058da:	4b03      	ldr	r3, [pc, #12]	; (4058e8 <ch_group_trigger+0x18>)
  4058dc:	4798      	blx	r3
}
  4058de:	bf00      	nop
  4058e0:	3708      	adds	r7, #8
  4058e2:	46bd      	mov	sp, r7
  4058e4:	bd80      	pop	{r7, pc}
  4058e6:	bf00      	nop
  4058e8:	004073ad 	.word	0x004073ad

004058ec <ch_sensor_is_connected>:
	} else {
		chdrv_group_soft_reset(grp_ptr);
	}
}

uint8_t ch_sensor_is_connected(ch_dev_t *dev_ptr) {
  4058ec:	b480      	push	{r7}
  4058ee:	b083      	sub	sp, #12
  4058f0:	af00      	add	r7, sp, #0
  4058f2:	6078      	str	r0, [r7, #4]

	return dev_ptr->sensor_connected;
  4058f4:	687b      	ldr	r3, [r7, #4]
  4058f6:	7fdb      	ldrb	r3, [r3, #31]
}
  4058f8:	4618      	mov	r0, r3
  4058fa:	370c      	adds	r7, #12
  4058fc:	46bd      	mov	sp, r7
  4058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405902:	4770      	bx	lr

00405904 <ch_get_part_number>:


uint16_t ch_get_part_number(ch_dev_t *dev_ptr) {
  405904:	b480      	push	{r7}
  405906:	b083      	sub	sp, #12
  405908:	af00      	add	r7, sp, #0
  40590a:	6078      	str	r0, [r7, #4]

	return dev_ptr->part_number;
  40590c:	687b      	ldr	r3, [r7, #4]
  40590e:	8b9b      	ldrh	r3, [r3, #28]
}
  405910:	4618      	mov	r0, r3
  405912:	370c      	adds	r7, #12
  405914:	46bd      	mov	sp, r7
  405916:	f85d 7b04 	ldr.w	r7, [sp], #4
  40591a:	4770      	bx	lr

0040591c <ch_get_dev_num>:


uint8_t  ch_get_dev_num(ch_dev_t *dev_ptr) {
  40591c:	b480      	push	{r7}
  40591e:	b083      	sub	sp, #12
  405920:	af00      	add	r7, sp, #0
  405922:	6078      	str	r0, [r7, #4]

	return dev_ptr->io_index;
  405924:	687b      	ldr	r3, [r7, #4]
  405926:	f893 3020 	ldrb.w	r3, [r3, #32]
}
  40592a:	4618      	mov	r0, r3
  40592c:	370c      	adds	r7, #12
  40592e:	46bd      	mov	sp, r7
  405930:	f85d 7b04 	ldr.w	r7, [sp], #4
  405934:	4770      	bx	lr

00405936 <ch_get_dev_ptr>:


ch_dev_t *ch_get_dev_ptr(ch_group_t *grp_ptr, uint8_t dev_num) {
  405936:	b480      	push	{r7}
  405938:	b083      	sub	sp, #12
  40593a:	af00      	add	r7, sp, #0
  40593c:	6078      	str	r0, [r7, #4]
  40593e:	460b      	mov	r3, r1
  405940:	70fb      	strb	r3, [r7, #3]

	return grp_ptr->device[dev_num];
  405942:	78fa      	ldrb	r2, [r7, #3]
  405944:	687b      	ldr	r3, [r7, #4]
  405946:	3206      	adds	r2, #6
  405948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  40594c:	4618      	mov	r0, r3
  40594e:	370c      	adds	r7, #12
  405950:	46bd      	mov	sp, r7
  405952:	f85d 7b04 	ldr.w	r7, [sp], #4
  405956:	4770      	bx	lr

00405958 <ch_get_i2c_address>:

uint8_t  ch_get_i2c_address(ch_dev_t *dev_ptr) {
  405958:	b480      	push	{r7}
  40595a:	b083      	sub	sp, #12
  40595c:	af00      	add	r7, sp, #0
  40595e:	6078      	str	r0, [r7, #4]

	return dev_ptr->i2c_address;
  405960:	687b      	ldr	r3, [r7, #4]
  405962:	7e1b      	ldrb	r3, [r3, #24]
}
  405964:	4618      	mov	r0, r3
  405966:	370c      	adds	r7, #12
  405968:	46bd      	mov	sp, r7
  40596a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40596e:	4770      	bx	lr

00405970 <ch_get_i2c_bus>:


uint8_t  ch_get_i2c_bus(ch_dev_t *dev_ptr) {
  405970:	b480      	push	{r7}
  405972:	b083      	sub	sp, #12
  405974:	af00      	add	r7, sp, #0
  405976:	6078      	str	r0, [r7, #4]

	return dev_ptr->i2c_bus_index;
  405978:	687b      	ldr	r3, [r7, #4]
  40597a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
  40597e:	4618      	mov	r0, r3
  405980:	370c      	adds	r7, #12
  405982:	46bd      	mov	sp, r7
  405984:	f85d 7b04 	ldr.w	r7, [sp], #4
  405988:	4770      	bx	lr

0040598a <ch_get_num_ports>:


uint8_t ch_get_num_ports(ch_group_t *grp_ptr) {
  40598a:	b480      	push	{r7}
  40598c:	b083      	sub	sp, #12
  40598e:	af00      	add	r7, sp, #0
  405990:	6078      	str	r0, [r7, #4]

	return grp_ptr->num_ports;
  405992:	687b      	ldr	r3, [r7, #4]
  405994:	781b      	ldrb	r3, [r3, #0]
}
  405996:	4618      	mov	r0, r3
  405998:	370c      	adds	r7, #12
  40599a:	46bd      	mov	sp, r7
  40599c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059a0:	4770      	bx	lr

004059a2 <ch_get_fw_version_string>:

const char *ch_get_fw_version_string(ch_dev_t *dev_ptr) {
  4059a2:	b480      	push	{r7}
  4059a4:	b083      	sub	sp, #12
  4059a6:	af00      	add	r7, sp, #0
  4059a8:	6078      	str	r0, [r7, #4]

	return dev_ptr->fw_version_string;
  4059aa:	687b      	ldr	r3, [r7, #4]
  4059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  4059ae:	4618      	mov	r0, r3
  4059b0:	370c      	adds	r7, #12
  4059b2:	46bd      	mov	sp, r7
  4059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059b8:	4770      	bx	lr

004059ba <ch_get_mode>:

ch_mode_t ch_get_mode(ch_dev_t *dev_ptr) {
  4059ba:	b480      	push	{r7}
  4059bc:	b083      	sub	sp, #12
  4059be:	af00      	add	r7, sp, #0
  4059c0:	6078      	str	r0, [r7, #4]

	return dev_ptr->mode;
  4059c2:	687b      	ldr	r3, [r7, #4]
  4059c4:	791b      	ldrb	r3, [r3, #4]
}
  4059c6:	4618      	mov	r0, r3
  4059c8:	370c      	adds	r7, #12
  4059ca:	46bd      	mov	sp, r7
  4059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059d0:	4770      	bx	lr

004059d2 <ch_set_mode>:


uint8_t ch_set_mode(ch_dev_t *dev_ptr, ch_mode_t mode) {
  4059d2:	b580      	push	{r7, lr}
  4059d4:	b084      	sub	sp, #16
  4059d6:	af00      	add	r7, sp, #0
  4059d8:	6078      	str	r0, [r7, #4]
  4059da:	460b      	mov	r3, r1
  4059dc:	70fb      	strb	r3, [r7, #3]
	int	ret_val = RET_ERR;
  4059de:	2301      	movs	r3, #1
  4059e0:	60fb      	str	r3, [r7, #12]
	ch_set_mode_func_t func_ptr = dev_ptr->api_funcs.set_mode;
  4059e2:	687b      	ldr	r3, [r7, #4]
  4059e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  4059e6:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  4059e8:	68bb      	ldr	r3, [r7, #8]
  4059ea:	2b00      	cmp	r3, #0
  4059ec:	d006      	beq.n	4059fc <ch_set_mode+0x2a>
		ret_val = (*func_ptr)(dev_ptr, mode);
  4059ee:	78fa      	ldrb	r2, [r7, #3]
  4059f0:	68bb      	ldr	r3, [r7, #8]
  4059f2:	4611      	mov	r1, r2
  4059f4:	6878      	ldr	r0, [r7, #4]
  4059f6:	4798      	blx	r3
  4059f8:	4603      	mov	r3, r0
  4059fa:	60fb      	str	r3, [r7, #12]
	}

	if (ret_val == 0) {
  4059fc:	68fb      	ldr	r3, [r7, #12]
  4059fe:	2b00      	cmp	r3, #0
  405a00:	d102      	bne.n	405a08 <ch_set_mode+0x36>
		dev_ptr->mode = mode;
  405a02:	687b      	ldr	r3, [r7, #4]
  405a04:	78fa      	ldrb	r2, [r7, #3]
  405a06:	711a      	strb	r2, [r3, #4]
	}

	return ret_val;
  405a08:	68fb      	ldr	r3, [r7, #12]
  405a0a:	b2db      	uxtb	r3, r3
}
  405a0c:	4618      	mov	r0, r3
  405a0e:	3710      	adds	r7, #16
  405a10:	46bd      	mov	sp, r7
  405a12:	bd80      	pop	{r7, pc}

00405a14 <ch_set_sample_interval>:
	}

	return sample_interval;
}

uint8_t ch_set_sample_interval(ch_dev_t *dev_ptr, uint16_t sample_interval) {
  405a14:	b580      	push	{r7, lr}
  405a16:	b084      	sub	sp, #16
  405a18:	af00      	add	r7, sp, #0
  405a1a:	6078      	str	r0, [r7, #4]
  405a1c:	460b      	mov	r3, r1
  405a1e:	807b      	strh	r3, [r7, #2]
	int	ret_val = RET_ERR;
  405a20:	2301      	movs	r3, #1
  405a22:	60fb      	str	r3, [r7, #12]
	ch_set_sample_interval_func_t func_ptr = dev_ptr->api_funcs.set_sample_interval;
  405a24:	687b      	ldr	r3, [r7, #4]
  405a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  405a28:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405a2a:	68bb      	ldr	r3, [r7, #8]
  405a2c:	2b00      	cmp	r3, #0
  405a2e:	d006      	beq.n	405a3e <ch_set_sample_interval+0x2a>
		ret_val = (*func_ptr)(dev_ptr, sample_interval);
  405a30:	887a      	ldrh	r2, [r7, #2]
  405a32:	68bb      	ldr	r3, [r7, #8]
  405a34:	4611      	mov	r1, r2
  405a36:	6878      	ldr	r0, [r7, #4]
  405a38:	4798      	blx	r3
  405a3a:	4603      	mov	r3, r0
  405a3c:	60fb      	str	r3, [r7, #12]
	}

	return ret_val;
  405a3e:	68fb      	ldr	r3, [r7, #12]
  405a40:	b2db      	uxtb	r3, r3
}
  405a42:	4618      	mov	r0, r3
  405a44:	3710      	adds	r7, #16
  405a46:	46bd      	mov	sp, r7
  405a48:	bd80      	pop	{r7, pc}

00405a4a <ch_get_num_samples>:

uint16_t ch_get_num_samples(ch_dev_t *dev_ptr) {
  405a4a:	b480      	push	{r7}
  405a4c:	b083      	sub	sp, #12
  405a4e:	af00      	add	r7, sp, #0
  405a50:	6078      	str	r0, [r7, #4]

	return dev_ptr->num_rx_samples;
  405a52:	687b      	ldr	r3, [r7, #4]
  405a54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
  405a56:	4618      	mov	r0, r3
  405a58:	370c      	adds	r7, #12
  405a5a:	46bd      	mov	sp, r7
  405a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a60:	4770      	bx	lr
	...

00405a64 <ch_set_num_samples>:

uint8_t ch_set_num_samples(ch_dev_t *dev_ptr, uint16_t num_samples) {
  405a64:	b580      	push	{r7, lr}
  405a66:	b084      	sub	sp, #16
  405a68:	af00      	add	r7, sp, #0
  405a6a:	6078      	str	r0, [r7, #4]
  405a6c:	460b      	mov	r3, r1
  405a6e:	807b      	strh	r3, [r7, #2]
	uint8_t	ret_val = RET_ERR;
  405a70:	2301      	movs	r3, #1
  405a72:	73fb      	strb	r3, [r7, #15]
	ch_set_num_samples_func_t func_ptr = dev_ptr->api_funcs.set_num_samples;
  405a74:	687b      	ldr	r3, [r7, #4]
  405a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  405a78:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405a7a:	68bb      	ldr	r3, [r7, #8]
  405a7c:	2b00      	cmp	r3, #0
  405a7e:	d006      	beq.n	405a8e <ch_set_num_samples+0x2a>
		ret_val = (*func_ptr)(dev_ptr, num_samples);
  405a80:	887a      	ldrh	r2, [r7, #2]
  405a82:	68bb      	ldr	r3, [r7, #8]
  405a84:	4611      	mov	r1, r2
  405a86:	6878      	ldr	r0, [r7, #4]
  405a88:	4798      	blx	r3
  405a8a:	4603      	mov	r3, r0
  405a8c:	73fb      	strb	r3, [r7, #15]
	}

	dev_ptr->max_range = ch_samples_to_mm(dev_ptr, num_samples);	// store corresponding range in mm
  405a8e:	887b      	ldrh	r3, [r7, #2]
  405a90:	4619      	mov	r1, r3
  405a92:	6878      	ldr	r0, [r7, #4]
  405a94:	4b05      	ldr	r3, [pc, #20]	; (405aac <ch_set_num_samples+0x48>)
  405a96:	4798      	blx	r3
  405a98:	4603      	mov	r3, r0
  405a9a:	461a      	mov	r2, r3
  405a9c:	687b      	ldr	r3, [r7, #4]
  405a9e:	811a      	strh	r2, [r3, #8]

	return ret_val;
  405aa0:	7bfb      	ldrb	r3, [r7, #15]
}
  405aa2:	4618      	mov	r0, r3
  405aa4:	3710      	adds	r7, #16
  405aa6:	46bd      	mov	sp, r7
  405aa8:	bd80      	pop	{r7, pc}
  405aaa:	bf00      	nop
  405aac:	00405c11 	.word	0x00405c11

00405ab0 <ch_set_max_range>:

	return dev_ptr->max_range;
}


uint8_t ch_set_max_range(ch_dev_t *dev_ptr, uint16_t max_range) {
  405ab0:	b580      	push	{r7, lr}
  405ab2:	b084      	sub	sp, #16
  405ab4:	af00      	add	r7, sp, #0
  405ab6:	6078      	str	r0, [r7, #4]
  405ab8:	460b      	mov	r3, r1
  405aba:	807b      	strh	r3, [r7, #2]
	uint8_t	ret_val = RET_ERR;
  405abc:	2301      	movs	r3, #1
  405abe:	73fb      	strb	r3, [r7, #15]
	ch_set_max_range_func_t func_ptr = dev_ptr->api_funcs.set_max_range;
  405ac0:	687b      	ldr	r3, [r7, #4]
  405ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405ac4:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405ac6:	68bb      	ldr	r3, [r7, #8]
  405ac8:	2b00      	cmp	r3, #0
  405aca:	d006      	beq.n	405ada <ch_set_max_range+0x2a>
		ret_val = (*func_ptr)(dev_ptr, max_range);
  405acc:	887a      	ldrh	r2, [r7, #2]
  405ace:	68bb      	ldr	r3, [r7, #8]
  405ad0:	4611      	mov	r1, r2
  405ad2:	6878      	ldr	r0, [r7, #4]
  405ad4:	4798      	blx	r3
  405ad6:	4603      	mov	r3, r0
  405ad8:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
  405ada:	7bfb      	ldrb	r3, [r7, #15]
}
  405adc:	4618      	mov	r0, r3
  405ade:	3710      	adds	r7, #16
  405ae0:	46bd      	mov	sp, r7
  405ae2:	bd80      	pop	{r7, pc}

00405ae4 <ch_set_static_range>:
uint16_t ch_get_static_range(ch_dev_t *dev_ptr) {

	return dev_ptr->static_range;
}

uint8_t ch_set_static_range(ch_dev_t *dev_ptr, uint16_t num_samples) {
  405ae4:	b580      	push	{r7, lr}
  405ae6:	b084      	sub	sp, #16
  405ae8:	af00      	add	r7, sp, #0
  405aea:	6078      	str	r0, [r7, #4]
  405aec:	460b      	mov	r3, r1
  405aee:	807b      	strh	r3, [r7, #2]
	uint8_t	ret_val = RET_OK;
  405af0:	2300      	movs	r3, #0
  405af2:	73fb      	strb	r3, [r7, #15]
	ch_set_static_range_func_t func_ptr = dev_ptr->api_funcs.set_static_range;
  405af4:	687b      	ldr	r3, [r7, #4]
  405af6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  405afa:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405afc:	68bb      	ldr	r3, [r7, #8]
  405afe:	2b00      	cmp	r3, #0
  405b00:	d006      	beq.n	405b10 <ch_set_static_range+0x2c>
		ret_val = (*func_ptr)(dev_ptr, num_samples);
  405b02:	887a      	ldrh	r2, [r7, #2]
  405b04:	68bb      	ldr	r3, [r7, #8]
  405b06:	4611      	mov	r1, r2
  405b08:	6878      	ldr	r0, [r7, #4]
  405b0a:	4798      	blx	r3
  405b0c:	4603      	mov	r3, r0
  405b0e:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
  405b10:	7bfb      	ldrb	r3, [r7, #15]
}
  405b12:	4618      	mov	r0, r3
  405b14:	3710      	adds	r7, #16
  405b16:	46bd      	mov	sp, r7
  405b18:	bd80      	pop	{r7, pc}

00405b1a <ch_get_range>:

uint32_t ch_get_range(ch_dev_t *dev_ptr, ch_range_t range_type) {
  405b1a:	b580      	push	{r7, lr}
  405b1c:	b084      	sub	sp, #16
  405b1e:	af00      	add	r7, sp, #0
  405b20:	6078      	str	r0, [r7, #4]
  405b22:	460b      	mov	r3, r1
  405b24:	70fb      	strb	r3, [r7, #3]
	uint32_t	range = 0;
  405b26:	2300      	movs	r3, #0
  405b28:	60fb      	str	r3, [r7, #12]
	ch_get_range_func_t func_ptr = dev_ptr->api_funcs.get_range;
  405b2a:	687b      	ldr	r3, [r7, #4]
  405b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405b2e:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405b30:	68bb      	ldr	r3, [r7, #8]
  405b32:	2b00      	cmp	r3, #0
  405b34:	d005      	beq.n	405b42 <ch_get_range+0x28>
		range = (*func_ptr)(dev_ptr, range_type);
  405b36:	78fa      	ldrb	r2, [r7, #3]
  405b38:	68bb      	ldr	r3, [r7, #8]
  405b3a:	4611      	mov	r1, r2
  405b3c:	6878      	ldr	r0, [r7, #4]
  405b3e:	4798      	blx	r3
  405b40:	60f8      	str	r0, [r7, #12]
	}

	return range;
  405b42:	68fb      	ldr	r3, [r7, #12]
}
  405b44:	4618      	mov	r0, r3
  405b46:	3710      	adds	r7, #16
  405b48:	46bd      	mov	sp, r7
  405b4a:	bd80      	pop	{r7, pc}

00405b4c <ch_get_amplitude>:
	}

	return tof_us;
}

uint16_t ch_get_amplitude(ch_dev_t *dev_ptr) {
  405b4c:	b580      	push	{r7, lr}
  405b4e:	b084      	sub	sp, #16
  405b50:	af00      	add	r7, sp, #0
  405b52:	6078      	str	r0, [r7, #4]
	int	amplitude = 0;
  405b54:	2300      	movs	r3, #0
  405b56:	60fb      	str	r3, [r7, #12]
	ch_get_amplitude_func_t func_ptr = dev_ptr->api_funcs.get_amplitude;
  405b58:	687b      	ldr	r3, [r7, #4]
  405b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  405b5c:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405b5e:	68bb      	ldr	r3, [r7, #8]
  405b60:	2b00      	cmp	r3, #0
  405b62:	d004      	beq.n	405b6e <ch_get_amplitude+0x22>
		amplitude = (*func_ptr)(dev_ptr);
  405b64:	68bb      	ldr	r3, [r7, #8]
  405b66:	6878      	ldr	r0, [r7, #4]
  405b68:	4798      	blx	r3
  405b6a:	4603      	mov	r3, r0
  405b6c:	60fb      	str	r3, [r7, #12]
	}

	return amplitude;
  405b6e:	68fb      	ldr	r3, [r7, #12]
  405b70:	b29b      	uxth	r3, r3
}
  405b72:	4618      	mov	r0, r3
  405b74:	3710      	adds	r7, #16
  405b76:	46bd      	mov	sp, r7
  405b78:	bd80      	pop	{r7, pc}

00405b7a <ch_get_frequency>:
	}

	return ret_val;	
}

uint32_t ch_get_frequency(ch_dev_t *dev_ptr) {
  405b7a:	b480      	push	{r7}
  405b7c:	b083      	sub	sp, #12
  405b7e:	af00      	add	r7, sp, #0
  405b80:	6078      	str	r0, [r7, #4]

	return dev_ptr->op_frequency;
  405b82:	687b      	ldr	r3, [r7, #4]
  405b84:	691b      	ldr	r3, [r3, #16]
}
  405b86:	4618      	mov	r0, r3
  405b88:	370c      	adds	r7, #12
  405b8a:	46bd      	mov	sp, r7
  405b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b90:	4770      	bx	lr

00405b92 <ch_get_rtc_cal_pulselength>:

uint16_t ch_get_rtc_cal_pulselength(ch_dev_t *dev_ptr) {
  405b92:	b480      	push	{r7}
  405b94:	b083      	sub	sp, #12
  405b96:	af00      	add	r7, sp, #0
  405b98:	6078      	str	r0, [r7, #4]

	return dev_ptr->group->rtc_cal_pulse_ms;
  405b9a:	687b      	ldr	r3, [r7, #4]
  405b9c:	681b      	ldr	r3, [r3, #0]
  405b9e:	88db      	ldrh	r3, [r3, #6]
}
  405ba0:	4618      	mov	r0, r3
  405ba2:	370c      	adds	r7, #12
  405ba4:	46bd      	mov	sp, r7
  405ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405baa:	4770      	bx	lr

00405bac <ch_get_rtc_cal_result>:


uint16_t ch_get_rtc_cal_result(ch_dev_t *dev_ptr) {
  405bac:	b480      	push	{r7}
  405bae:	b083      	sub	sp, #12
  405bb0:	af00      	add	r7, sp, #0
  405bb2:	6078      	str	r0, [r7, #4]

	return dev_ptr->rtc_cal_result;
  405bb4:	687b      	ldr	r3, [r7, #4]
  405bb6:	89db      	ldrh	r3, [r3, #14]
}
  405bb8:	4618      	mov	r0, r3
  405bba:	370c      	adds	r7, #12
  405bbc:	46bd      	mov	sp, r7
  405bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405bc2:	4770      	bx	lr

00405bc4 <ch_get_iq_data>:

	return dev_ptr->scale_factor;
}


uint8_t ch_get_iq_data(ch_dev_t *dev_ptr, ch_iq_sample_t *buf_ptr, uint16_t start_sample, uint16_t num_samples, ch_io_mode_t mode) {
  405bc4:	b590      	push	{r4, r7, lr}
  405bc6:	b089      	sub	sp, #36	; 0x24
  405bc8:	af02      	add	r7, sp, #8
  405bca:	60f8      	str	r0, [r7, #12]
  405bcc:	60b9      	str	r1, [r7, #8]
  405bce:	4611      	mov	r1, r2
  405bd0:	461a      	mov	r2, r3
  405bd2:	460b      	mov	r3, r1
  405bd4:	80fb      	strh	r3, [r7, #6]
  405bd6:	4613      	mov	r3, r2
  405bd8:	80bb      	strh	r3, [r7, #4]
	int	ret_val = 0;
  405bda:	2300      	movs	r3, #0
  405bdc:	617b      	str	r3, [r7, #20]
	ch_get_iq_data_func_t func_ptr = dev_ptr->api_funcs.get_iq_data;
  405bde:	68fb      	ldr	r3, [r7, #12]
  405be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  405be4:	613b      	str	r3, [r7, #16]

	if (func_ptr != NULL) {
  405be6:	693b      	ldr	r3, [r7, #16]
  405be8:	2b00      	cmp	r3, #0
  405bea:	d00b      	beq.n	405c04 <ch_get_iq_data+0x40>
		ret_val = (*func_ptr)(dev_ptr, buf_ptr, start_sample, num_samples, mode);
  405bec:	88b9      	ldrh	r1, [r7, #4]
  405bee:	88fa      	ldrh	r2, [r7, #6]
  405bf0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  405bf4:	9300      	str	r3, [sp, #0]
  405bf6:	693c      	ldr	r4, [r7, #16]
  405bf8:	460b      	mov	r3, r1
  405bfa:	68b9      	ldr	r1, [r7, #8]
  405bfc:	68f8      	ldr	r0, [r7, #12]
  405bfe:	47a0      	blx	r4
  405c00:	4603      	mov	r3, r0
  405c02:	617b      	str	r3, [r7, #20]
	}

	return ret_val;
  405c04:	697b      	ldr	r3, [r7, #20]
  405c06:	b2db      	uxtb	r3, r3
}
  405c08:	4618      	mov	r0, r3
  405c0a:	371c      	adds	r7, #28
  405c0c:	46bd      	mov	sp, r7
  405c0e:	bd90      	pop	{r4, r7, pc}

00405c10 <ch_samples_to_mm>:


uint16_t ch_samples_to_mm(ch_dev_t *dev_ptr, uint16_t num_samples) {
  405c10:	b580      	push	{r7, lr}
  405c12:	b084      	sub	sp, #16
  405c14:	af00      	add	r7, sp, #0
  405c16:	6078      	str	r0, [r7, #4]
  405c18:	460b      	mov	r3, r1
  405c1a:	807b      	strh	r3, [r7, #2]
	int	num_mm = 0;
  405c1c:	2300      	movs	r3, #0
  405c1e:	60fb      	str	r3, [r7, #12]
	ch_samples_to_mm_func_t func_ptr = dev_ptr->api_funcs.samples_to_mm;
  405c20:	687b      	ldr	r3, [r7, #4]
  405c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  405c26:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405c28:	68bb      	ldr	r3, [r7, #8]
  405c2a:	2b00      	cmp	r3, #0
  405c2c:	d006      	beq.n	405c3c <ch_samples_to_mm+0x2c>
		num_mm = (*func_ptr)(dev_ptr, num_samples);
  405c2e:	887a      	ldrh	r2, [r7, #2]
  405c30:	68bb      	ldr	r3, [r7, #8]
  405c32:	4611      	mov	r1, r2
  405c34:	6878      	ldr	r0, [r7, #4]
  405c36:	4798      	blx	r3
  405c38:	4603      	mov	r3, r0
  405c3a:	60fb      	str	r3, [r7, #12]
	}

	return num_mm;
  405c3c:	68fb      	ldr	r3, [r7, #12]
  405c3e:	b29b      	uxth	r3, r3
}
  405c40:	4618      	mov	r0, r3
  405c42:	3710      	adds	r7, #16
  405c44:	46bd      	mov	sp, r7
  405c46:	bd80      	pop	{r7, pc}

00405c48 <ch_iq_to_amplitude>:
	}

	return amplitude;	
}

uint16_t ch_iq_to_amplitude(ch_iq_sample_t *iq_sample) {
  405c48:	b580      	push	{r7, lr}
  405c4a:	b086      	sub	sp, #24
  405c4c:	af00      	add	r7, sp, #0
  405c4e:	6078      	str	r0, [r7, #4]
	uint32_t amplitude;
	uint32_t i_sq = ((uint32_t) iq_sample->i * (uint32_t) iq_sample->i);
  405c50:	687b      	ldr	r3, [r7, #4]
  405c52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  405c56:	461a      	mov	r2, r3
  405c58:	687b      	ldr	r3, [r7, #4]
  405c5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  405c5e:	fb03 f302 	mul.w	r3, r3, r2
  405c62:	617b      	str	r3, [r7, #20]
	uint32_t q_sq = ((uint32_t) iq_sample->q * (uint32_t) iq_sample->q);
  405c64:	687b      	ldr	r3, [r7, #4]
  405c66:	f9b3 3000 	ldrsh.w	r3, [r3]
  405c6a:	461a      	mov	r2, r3
  405c6c:	687b      	ldr	r3, [r7, #4]
  405c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
  405c72:	fb03 f302 	mul.w	r3, r3, r2
  405c76:	613b      	str	r3, [r7, #16]

	amplitude = sqrt_int32(i_sq + q_sq);
  405c78:	697a      	ldr	r2, [r7, #20]
  405c7a:	693b      	ldr	r3, [r7, #16]
  405c7c:	4413      	add	r3, r2
  405c7e:	4618      	mov	r0, r3
  405c80:	4b04      	ldr	r3, [pc, #16]	; (405c94 <ch_iq_to_amplitude+0x4c>)
  405c82:	4798      	blx	r3
  405c84:	4603      	mov	r3, r0
  405c86:	60fb      	str	r3, [r7, #12]

	return (uint16_t) amplitude;
  405c88:	68fb      	ldr	r3, [r7, #12]
  405c8a:	b29b      	uxth	r3, r3
}
  405c8c:	4618      	mov	r0, r3
  405c8e:	3718      	adds	r7, #24
  405c90:	46bd      	mov	sp, r7
  405c92:	bd80      	pop	{r7, pc}
  405c94:	00407c87 	.word	0x00407c87

00405c98 <ch_set_thresholds>:


uint8_t ch_set_thresholds(ch_dev_t *dev_ptr, ch_thresholds_t *thresh_ptr) {
  405c98:	b580      	push	{r7, lr}
  405c9a:	b084      	sub	sp, #16
  405c9c:	af00      	add	r7, sp, #0
  405c9e:	6078      	str	r0, [r7, #4]
  405ca0:	6039      	str	r1, [r7, #0]
	int	ret_val = RET_OK;
  405ca2:	2300      	movs	r3, #0
  405ca4:	60fb      	str	r3, [r7, #12]
	ch_set_thresholds_func_t func_ptr = dev_ptr->api_funcs.set_thresholds;
  405ca6:	687b      	ldr	r3, [r7, #4]
  405ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  405cac:	60bb      	str	r3, [r7, #8]

	if ((func_ptr != NULL) && (thresh_ptr != NULL)) {
  405cae:	68bb      	ldr	r3, [r7, #8]
  405cb0:	2b00      	cmp	r3, #0
  405cb2:	d008      	beq.n	405cc6 <ch_set_thresholds+0x2e>
  405cb4:	683b      	ldr	r3, [r7, #0]
  405cb6:	2b00      	cmp	r3, #0
  405cb8:	d005      	beq.n	405cc6 <ch_set_thresholds+0x2e>
		ret_val = (*func_ptr)(dev_ptr, thresh_ptr);
  405cba:	68bb      	ldr	r3, [r7, #8]
  405cbc:	6839      	ldr	r1, [r7, #0]
  405cbe:	6878      	ldr	r0, [r7, #4]
  405cc0:	4798      	blx	r3
  405cc2:	4603      	mov	r3, r0
  405cc4:	60fb      	str	r3, [r7, #12]
		}

	return ret_val;
  405cc6:	68fb      	ldr	r3, [r7, #12]
  405cc8:	b2db      	uxtb	r3, r3
}
  405cca:	4618      	mov	r0, r3
  405ccc:	3710      	adds	r7, #16
  405cce:	46bd      	mov	sp, r7
  405cd0:	bd80      	pop	{r7, pc}

00405cd2 <ch_get_thresholds>:

uint8_t ch_get_thresholds(ch_dev_t *dev_ptr, ch_thresholds_t *thresh_ptr) {
  405cd2:	b580      	push	{r7, lr}
  405cd4:	b084      	sub	sp, #16
  405cd6:	af00      	add	r7, sp, #0
  405cd8:	6078      	str	r0, [r7, #4]
  405cda:	6039      	str	r1, [r7, #0]
	int	ret_val = RET_ERR;
  405cdc:	2301      	movs	r3, #1
  405cde:	60fb      	str	r3, [r7, #12]
	ch_get_thresholds_func_t func_ptr = dev_ptr->api_funcs.get_thresholds;
  405ce0:	687b      	ldr	r3, [r7, #4]
  405ce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
  405ce6:	60bb      	str	r3, [r7, #8]

	if ((func_ptr != NULL) && (thresh_ptr != NULL)) {
  405ce8:	68bb      	ldr	r3, [r7, #8]
  405cea:	2b00      	cmp	r3, #0
  405cec:	d008      	beq.n	405d00 <ch_get_thresholds+0x2e>
  405cee:	683b      	ldr	r3, [r7, #0]
  405cf0:	2b00      	cmp	r3, #0
  405cf2:	d005      	beq.n	405d00 <ch_get_thresholds+0x2e>
		ret_val = (*func_ptr)(dev_ptr, thresh_ptr);
  405cf4:	68bb      	ldr	r3, [r7, #8]
  405cf6:	6839      	ldr	r1, [r7, #0]
  405cf8:	6878      	ldr	r0, [r7, #4]
  405cfa:	4798      	blx	r3
  405cfc:	4603      	mov	r3, r0
  405cfe:	60fb      	str	r3, [r7, #12]
	}

	return ret_val;
  405d00:	68fb      	ldr	r3, [r7, #12]
  405d02:	b2db      	uxtb	r3, r3
}
  405d04:	4618      	mov	r0, r3
  405d06:	3710      	adds	r7, #16
  405d08:	46bd      	mov	sp, r7
  405d0a:	bd80      	pop	{r7, pc}

00405d0c <ch_set_time_plan>:

uint8_t ch_set_time_plan(ch_dev_t *dev_ptr, ch_time_plan_t time_plan) {
  405d0c:	b580      	push	{r7, lr}
  405d0e:	b084      	sub	sp, #16
  405d10:	af00      	add	r7, sp, #0
  405d12:	6078      	str	r0, [r7, #4]
  405d14:	460b      	mov	r3, r1
  405d16:	70fb      	strb	r3, [r7, #3]
	uint8_t ret_val = RET_OK;
  405d18:	2300      	movs	r3, #0
  405d1a:	73fb      	strb	r3, [r7, #15]
	ch_set_time_plan_func_t func_ptr = dev_ptr->api_funcs.set_time_plan;
  405d1c:	687b      	ldr	r3, [r7, #4]
  405d1e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
  405d22:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405d24:	68bb      	ldr	r3, [r7, #8]
  405d26:	2b00      	cmp	r3, #0
  405d28:	d006      	beq.n	405d38 <ch_set_time_plan+0x2c>
		ret_val = (*func_ptr)(dev_ptr, time_plan);
  405d2a:	78fa      	ldrb	r2, [r7, #3]
  405d2c:	68bb      	ldr	r3, [r7, #8]
  405d2e:	4611      	mov	r1, r2
  405d30:	6878      	ldr	r0, [r7, #4]
  405d32:	4798      	blx	r3
  405d34:	4603      	mov	r3, r0
  405d36:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
  405d38:	7bfb      	ldrb	r3, [r7, #15]
}
  405d3a:	4618      	mov	r0, r3
  405d3c:	3710      	adds	r7, #16
  405d3e:	46bd      	mov	sp, r7
  405d40:	bd80      	pop	{r7, pc}

00405d42 <ch_io_int_callback_set>:
/*!
 * \brief Set callback function for Chirp sensor I/O interrupt
 *
 * \note
 */
void ch_io_int_callback_set(ch_group_t *grp_ptr, ch_io_int_callback_t callback_func_ptr) {
  405d42:	b480      	push	{r7}
  405d44:	b083      	sub	sp, #12
  405d46:	af00      	add	r7, sp, #0
  405d48:	6078      	str	r0, [r7, #4]
  405d4a:	6039      	str	r1, [r7, #0]

	grp_ptr->io_int_callback = callback_func_ptr;
  405d4c:	687b      	ldr	r3, [r7, #4]
  405d4e:	683a      	ldr	r2, [r7, #0]
  405d50:	611a      	str	r2, [r3, #16]
}
  405d52:	bf00      	nop
  405d54:	370c      	adds	r7, #12
  405d56:	46bd      	mov	sp, r7
  405d58:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d5c:	4770      	bx	lr

00405d5e <ch_io_complete_callback_set>:
/*!
 * \brief Set callback function for Chirp sensor I/O operation complete
 *
 * \note
 */
void ch_io_complete_callback_set(ch_group_t *grp_ptr, ch_io_complete_callback_t callback_func_ptr) {
  405d5e:	b480      	push	{r7}
  405d60:	b083      	sub	sp, #12
  405d62:	af00      	add	r7, sp, #0
  405d64:	6078      	str	r0, [r7, #4]
  405d66:	6039      	str	r1, [r7, #0]

	grp_ptr->io_complete_callback = callback_func_ptr;
  405d68:	687b      	ldr	r3, [r7, #4]
  405d6a:	683a      	ldr	r2, [r7, #0]
  405d6c:	615a      	str	r2, [r3, #20]
}
  405d6e:	bf00      	nop
  405d70:	370c      	adds	r7, #12
  405d72:	46bd      	mov	sp, r7
  405d74:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d78:	4770      	bx	lr
	...

00405d7c <ch_io_notify>:
 *
 * Call this function once from your I2C interrupt handler each time it completes an I/O operation.
 * It will call the function previously specified during \a ch_io_complete_callback_set() when all group
 * transactions are complete.
 */
void ch_io_notify(ch_group_t *grp_ptr, uint8_t i2c_bus_index) {
  405d7c:	b580      	push	{r7, lr}
  405d7e:	b082      	sub	sp, #8
  405d80:	af00      	add	r7, sp, #0
  405d82:	6078      	str	r0, [r7, #4]
  405d84:	460b      	mov	r3, r1
  405d86:	70fb      	strb	r3, [r7, #3]
	
	chdrv_group_i2c_irq_handler(grp_ptr, i2c_bus_index);
  405d88:	78fb      	ldrb	r3, [r7, #3]
  405d8a:	4619      	mov	r1, r3
  405d8c:	6878      	ldr	r0, [r7, #4]
  405d8e:	4b03      	ldr	r3, [pc, #12]	; (405d9c <ch_io_notify+0x20>)
  405d90:	4798      	blx	r3
}
  405d92:	bf00      	nop
  405d94:	3708      	adds	r7, #8
  405d96:	46bd      	mov	sp, r7
  405d98:	bd80      	pop	{r7, pc}
  405d9a:	bf00      	nop
  405d9c:	00407055 	.word	0x00407055

00405da0 <ch_set_target_interrupt>:

uint8_t ch_set_target_interrupt(ch_dev_t *dev_ptr, uint8_t enable) {
  405da0:	b580      	push	{r7, lr}
  405da2:	b084      	sub	sp, #16
  405da4:	af00      	add	r7, sp, #0
  405da6:	6078      	str	r0, [r7, #4]
  405da8:	460b      	mov	r3, r1
  405daa:	70fb      	strb	r3, [r7, #3]
	int	ret_val = RET_OK;
  405dac:	2300      	movs	r3, #0
  405dae:	60fb      	str	r3, [r7, #12]
	ch_set_target_interrupt_func_t func_ptr = dev_ptr->api_funcs.set_target_interrupt;
  405db0:	687b      	ldr	r3, [r7, #4]
  405db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
  405db6:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405db8:	68bb      	ldr	r3, [r7, #8]
  405dba:	2b00      	cmp	r3, #0
  405dbc:	d006      	beq.n	405dcc <ch_set_target_interrupt+0x2c>
		ret_val = (*func_ptr)(dev_ptr, enable);
  405dbe:	78fa      	ldrb	r2, [r7, #3]
  405dc0:	68bb      	ldr	r3, [r7, #8]
  405dc2:	4611      	mov	r1, r2
  405dc4:	6878      	ldr	r0, [r7, #4]
  405dc6:	4798      	blx	r3
  405dc8:	4603      	mov	r3, r0
  405dca:	60fb      	str	r3, [r7, #12]
	}

	return ret_val;
  405dcc:	68fb      	ldr	r3, [r7, #12]
  405dce:	b2db      	uxtb	r3, r3
}
  405dd0:	4618      	mov	r0, r3
  405dd2:	3710      	adds	r7, #16
  405dd4:	46bd      	mov	sp, r7
  405dd6:	bd80      	pop	{r7, pc}

00405dd8 <ch_set_rx_pretrigger>:
	}

	return rx_pulse_length;		
}

void ch_set_rx_pretrigger(ch_group_t *grp_ptr, uint8_t enable) {
  405dd8:	b580      	push	{r7, lr}
  405dda:	b082      	sub	sp, #8
  405ddc:	af00      	add	r7, sp, #0
  405dde:	6078      	str	r0, [r7, #4]
  405de0:	460b      	mov	r3, r1
  405de2:	70fb      	strb	r3, [r7, #3]

	if (enable) {
  405de4:	78fb      	ldrb	r3, [r7, #3]
  405de6:	2b00      	cmp	r3, #0
  405de8:	d005      	beq.n	405df6 <ch_set_rx_pretrigger+0x1e>
		chdrv_pretrigger_delay_set(grp_ptr, CHDRV_PRETRIGGER_DELAY_US);
  405dea:	f44f 7116 	mov.w	r1, #600	; 0x258
  405dee:	6878      	ldr	r0, [r7, #4]
  405df0:	4b05      	ldr	r3, [pc, #20]	; (405e08 <ch_set_rx_pretrigger+0x30>)
  405df2:	4798      	blx	r3
	} else {
		chdrv_pretrigger_delay_set(grp_ptr, 0);
	}
}
  405df4:	e003      	b.n	405dfe <ch_set_rx_pretrigger+0x26>
		chdrv_pretrigger_delay_set(grp_ptr, 0);
  405df6:	2100      	movs	r1, #0
  405df8:	6878      	ldr	r0, [r7, #4]
  405dfa:	4b03      	ldr	r3, [pc, #12]	; (405e08 <ch_set_rx_pretrigger+0x30>)
  405dfc:	4798      	blx	r3
}
  405dfe:	bf00      	nop
  405e00:	3708      	adds	r7, #8
  405e02:	46bd      	mov	sp, r7
  405e04:	bd80      	pop	{r7, pc}
  405e06:	bf00      	nop
  405e08:	00407c69 	.word	0x00407c69

00405e0c <ch_common_set_mode>:
static uint8_t get_sample_data(ch_dev_t *dev_ptr, ch_iq_sample_t *buf_ptr, uint16_t start_sample, uint16_t num_samples,
							   ch_io_mode_t mode, uint8_t sample_size_in_byte);

/* Functions */

uint8_t ch_common_set_mode(ch_dev_t *dev_ptr, ch_mode_t mode) {
  405e0c:	b580      	push	{r7, lr}
  405e0e:	b084      	sub	sp, #16
  405e10:	af00      	add	r7, sp, #0
  405e12:	6078      	str	r0, [r7, #4]
  405e14:	460b      	mov	r3, r1
  405e16:	70fb      	strb	r3, [r7, #3]
	uint8_t ret_val = 0;
  405e18:	2300      	movs	r3, #0
  405e1a:	73fb      	strb	r3, [r7, #15]
	uint8_t	opmode_reg;
	uint8_t	period_reg;
	uint8_t	tick_interval_reg;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  405e1c:	687b      	ldr	r3, [r7, #4]
  405e1e:	8b9b      	ldrh	r3, [r3, #28]
  405e20:	2b65      	cmp	r3, #101	; 0x65
  405e22:	d106      	bne.n	405e32 <ch_common_set_mode+0x26>
		opmode_reg = CH101_COMMON_REG_OPMODE;
  405e24:	2301      	movs	r3, #1
  405e26:	73bb      	strb	r3, [r7, #14]
		period_reg = CH101_COMMON_REG_PERIOD;
  405e28:	2305      	movs	r3, #5
  405e2a:	737b      	strb	r3, [r7, #13]
		tick_interval_reg = CH101_COMMON_REG_TICK_INTERVAL;
  405e2c:	2302      	movs	r3, #2
  405e2e:	733b      	strb	r3, [r7, #12]
  405e30:	e005      	b.n	405e3e <ch_common_set_mode+0x32>
	} else {
		opmode_reg = CH201_COMMON_REG_OPMODE;
  405e32:	2301      	movs	r3, #1
  405e34:	73bb      	strb	r3, [r7, #14]
		period_reg = CH201_COMMON_REG_PERIOD;
  405e36:	2305      	movs	r3, #5
  405e38:	737b      	strb	r3, [r7, #13]
		tick_interval_reg = CH201_COMMON_REG_TICK_INTERVAL;
  405e3a:	2302      	movs	r3, #2
  405e3c:	733b      	strb	r3, [r7, #12]
	}

	if (dev_ptr->sensor_connected) {
  405e3e:	687b      	ldr	r3, [r7, #4]
  405e40:	7fdb      	ldrb	r3, [r3, #31]
  405e42:	2b00      	cmp	r3, #0
  405e44:	d07a      	beq.n	405f3c <ch_common_set_mode+0x130>
		switch (mode) {
  405e46:	78fb      	ldrb	r3, [r7, #3]
  405e48:	2b20      	cmp	r3, #32
  405e4a:	d874      	bhi.n	405f36 <ch_common_set_mode+0x12a>
  405e4c:	a201      	add	r2, pc, #4	; (adr r2, 405e54 <ch_common_set_mode+0x48>)
  405e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405e52:	bf00      	nop
  405e54:	00405ed9 	.word	0x00405ed9
  405e58:	00405f37 	.word	0x00405f37
  405e5c:	00405f07 	.word	0x00405f07
  405e60:	00405f37 	.word	0x00405f37
  405e64:	00405f37 	.word	0x00405f37
  405e68:	00405f37 	.word	0x00405f37
  405e6c:	00405f37 	.word	0x00405f37
  405e70:	00405f37 	.word	0x00405f37
  405e74:	00405f37 	.word	0x00405f37
  405e78:	00405f37 	.word	0x00405f37
  405e7c:	00405f37 	.word	0x00405f37
  405e80:	00405f37 	.word	0x00405f37
  405e84:	00405f37 	.word	0x00405f37
  405e88:	00405f37 	.word	0x00405f37
  405e8c:	00405f37 	.word	0x00405f37
  405e90:	00405f37 	.word	0x00405f37
  405e94:	00405f17 	.word	0x00405f17
  405e98:	00405f37 	.word	0x00405f37
  405e9c:	00405f37 	.word	0x00405f37
  405ea0:	00405f37 	.word	0x00405f37
  405ea4:	00405f37 	.word	0x00405f37
  405ea8:	00405f37 	.word	0x00405f37
  405eac:	00405f37 	.word	0x00405f37
  405eb0:	00405f37 	.word	0x00405f37
  405eb4:	00405f37 	.word	0x00405f37
  405eb8:	00405f37 	.word	0x00405f37
  405ebc:	00405f37 	.word	0x00405f37
  405ec0:	00405f37 	.word	0x00405f37
  405ec4:	00405f37 	.word	0x00405f37
  405ec8:	00405f37 	.word	0x00405f37
  405ecc:	00405f37 	.word	0x00405f37
  405ed0:	00405f37 	.word	0x00405f37
  405ed4:	00405f27 	.word	0x00405f27
			case CH_MODE_IDLE:
				chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_IDLE);
  405ed8:	7bbb      	ldrb	r3, [r7, #14]
  405eda:	b29b      	uxth	r3, r3
  405edc:	2200      	movs	r2, #0
  405ede:	4619      	mov	r1, r3
  405ee0:	6878      	ldr	r0, [r7, #4]
  405ee2:	4b19      	ldr	r3, [pc, #100]	; (405f48 <ch_common_set_mode+0x13c>)
  405ee4:	4798      	blx	r3
				chdrv_write_byte(dev_ptr, period_reg, 0);
  405ee6:	7b7b      	ldrb	r3, [r7, #13]
  405ee8:	b29b      	uxth	r3, r3
  405eea:	2200      	movs	r2, #0
  405eec:	4619      	mov	r1, r3
  405eee:	6878      	ldr	r0, [r7, #4]
  405ef0:	4b15      	ldr	r3, [pc, #84]	; (405f48 <ch_common_set_mode+0x13c>)
  405ef2:	4798      	blx	r3
				chdrv_write_word(dev_ptr, tick_interval_reg, 2048);		// XXX need define
  405ef4:	7b3b      	ldrb	r3, [r7, #12]
  405ef6:	b29b      	uxth	r3, r3
  405ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405efc:	4619      	mov	r1, r3
  405efe:	6878      	ldr	r0, [r7, #4]
  405f00:	4b12      	ldr	r3, [pc, #72]	; (405f4c <ch_common_set_mode+0x140>)
  405f02:	4798      	blx	r3
				break;
  405f04:	e01a      	b.n	405f3c <ch_common_set_mode+0x130>

			case CH_MODE_FREERUN:
				chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_FREERUN);
  405f06:	7bbb      	ldrb	r3, [r7, #14]
  405f08:	b29b      	uxth	r3, r3
  405f0a:	2202      	movs	r2, #2
  405f0c:	4619      	mov	r1, r3
  405f0e:	6878      	ldr	r0, [r7, #4]
  405f10:	4b0d      	ldr	r3, [pc, #52]	; (405f48 <ch_common_set_mode+0x13c>)
  405f12:	4798      	blx	r3
					// XXX need to set period / tick interval (?)
				break;
  405f14:	e012      	b.n	405f3c <ch_common_set_mode+0x130>

			case CH_MODE_TRIGGERED_TX_RX:
				chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_TRIGGERED_TX_RX);
  405f16:	7bbb      	ldrb	r3, [r7, #14]
  405f18:	b29b      	uxth	r3, r3
  405f1a:	2210      	movs	r2, #16
  405f1c:	4619      	mov	r1, r3
  405f1e:	6878      	ldr	r0, [r7, #4]
  405f20:	4b09      	ldr	r3, [pc, #36]	; (405f48 <ch_common_set_mode+0x13c>)
  405f22:	4798      	blx	r3
				break;
  405f24:	e00a      	b.n	405f3c <ch_common_set_mode+0x130>

			case CH_MODE_TRIGGERED_RX_ONLY:
				chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_TRIGGERED_RX_ONLY);
  405f26:	7bbb      	ldrb	r3, [r7, #14]
  405f28:	b29b      	uxth	r3, r3
  405f2a:	2220      	movs	r2, #32
  405f2c:	4619      	mov	r1, r3
  405f2e:	6878      	ldr	r0, [r7, #4]
  405f30:	4b05      	ldr	r3, [pc, #20]	; (405f48 <ch_common_set_mode+0x13c>)
  405f32:	4798      	blx	r3
				break;
  405f34:	e002      	b.n	405f3c <ch_common_set_mode+0x130>

			default:
				ret_val = RET_ERR;				// return non-zero to indicate error
  405f36:	2301      	movs	r3, #1
  405f38:	73fb      	strb	r3, [r7, #15]
				break;
  405f3a:	bf00      	nop
		}
	}

	return ret_val;
  405f3c:	7bfb      	ldrb	r3, [r7, #15]
}
  405f3e:	4618      	mov	r0, r3
  405f40:	3710      	adds	r7, #16
  405f42:	46bd      	mov	sp, r7
  405f44:	bd80      	pop	{r7, pc}
  405f46:	bf00      	nop
  405f48:	00406da5 	.word	0x00406da5
  405f4c:	00406ddd 	.word	0x00406ddd

00405f50 <ch_common_fw_load>:

uint8_t ch_common_fw_load(ch_dev_t *dev_ptr) {
  405f50:	b590      	push	{r4, r7, lr}
  405f52:	b085      	sub	sp, #20
  405f54:	af00      	add	r7, sp, #0
  405f56:	6078      	str	r0, [r7, #4]
	uint8_t	ch_err = 0;
  405f58:	2300      	movs	r3, #0
  405f5a:	72fb      	strb	r3, [r7, #11]
	uint16_t prog_mem_addr;
	uint16_t fw_size;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  405f5c:	687b      	ldr	r3, [r7, #4]
  405f5e:	8b9b      	ldrh	r3, [r3, #28]
  405f60:	2b65      	cmp	r3, #101	; 0x65
  405f62:	d106      	bne.n	405f72 <ch_common_fw_load+0x22>
		prog_mem_addr = CH101_PROG_MEM_ADDR;
  405f64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  405f68:	81fb      	strh	r3, [r7, #14]
		fw_size 	  = CH101_FW_SIZE;
  405f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405f6e:	81bb      	strh	r3, [r7, #12]
  405f70:	e005      	b.n	405f7e <ch_common_fw_load+0x2e>
	} else {
		prog_mem_addr = CH201_PROG_MEM_ADDR;
  405f72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  405f76:	81fb      	strh	r3, [r7, #14]
		fw_size 	  = CH201_FW_SIZE;
  405f78:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405f7c:	81bb      	strh	r3, [r7, #12]
	}

	ch_err = chdrv_prog_mem_write(dev_ptr, prog_mem_addr, (uint8_t *) dev_ptr->firmware, fw_size);
  405f7e:	687b      	ldr	r3, [r7, #4]
  405f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405f82:	89bb      	ldrh	r3, [r7, #12]
  405f84:	89f9      	ldrh	r1, [r7, #14]
  405f86:	6878      	ldr	r0, [r7, #4]
  405f88:	4c04      	ldr	r4, [pc, #16]	; (405f9c <ch_common_fw_load+0x4c>)
  405f8a:	47a0      	blx	r4
  405f8c:	4603      	mov	r3, r0
  405f8e:	72fb      	strb	r3, [r7, #11]
	return ch_err;
  405f90:	7afb      	ldrb	r3, [r7, #11]
}
  405f92:	4618      	mov	r0, r3
  405f94:	3714      	adds	r7, #20
  405f96:	46bd      	mov	sp, r7
  405f98:	bd90      	pop	{r4, r7, pc}
  405f9a:	bf00      	nop
  405f9c:	00407509 	.word	0x00407509

00405fa0 <ch_common_set_sample_interval>:


uint8_t ch_common_set_sample_interval(ch_dev_t *dev_ptr, uint16_t interval_ms) {
  405fa0:	b580      	push	{r7, lr}
  405fa2:	b086      	sub	sp, #24
  405fa4:	af00      	add	r7, sp, #0
  405fa6:	6078      	str	r0, [r7, #4]
  405fa8:	460b      	mov	r3, r1
  405faa:	807b      	strh	r3, [r7, #2]
	uint8_t	period_reg;
	uint8_t	tick_interval_reg;
	uint8_t ret_val = 0;
  405fac:	2300      	movs	r3, #0
  405fae:	757b      	strb	r3, [r7, #21]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  405fb0:	687b      	ldr	r3, [r7, #4]
  405fb2:	8b9b      	ldrh	r3, [r3, #28]
  405fb4:	2b65      	cmp	r3, #101	; 0x65
  405fb6:	d104      	bne.n	405fc2 <ch_common_set_sample_interval+0x22>
		period_reg 		  = CH101_COMMON_REG_PERIOD;
  405fb8:	2305      	movs	r3, #5
  405fba:	75fb      	strb	r3, [r7, #23]
		tick_interval_reg = CH101_COMMON_REG_TICK_INTERVAL;
  405fbc:	2302      	movs	r3, #2
  405fbe:	75bb      	strb	r3, [r7, #22]
  405fc0:	e003      	b.n	405fca <ch_common_set_sample_interval+0x2a>
	} else {
		period_reg 		  = CH201_COMMON_REG_PERIOD;
  405fc2:	2305      	movs	r3, #5
  405fc4:	75fb      	strb	r3, [r7, #23]
		tick_interval_reg = CH201_COMMON_REG_TICK_INTERVAL;
  405fc6:	2302      	movs	r3, #2
  405fc8:	75bb      	strb	r3, [r7, #22]
	}

	if (dev_ptr->sensor_connected) {
  405fca:	687b      	ldr	r3, [r7, #4]
  405fcc:	7fdb      	ldrb	r3, [r3, #31]
  405fce:	2b00      	cmp	r3, #0
  405fd0:	d038      	beq.n	406044 <ch_common_set_sample_interval+0xa4>
		uint32_t sample_interval = dev_ptr->rtc_cal_result * interval_ms / dev_ptr->group->rtc_cal_pulse_ms;
  405fd2:	687b      	ldr	r3, [r7, #4]
  405fd4:	89db      	ldrh	r3, [r3, #14]
  405fd6:	461a      	mov	r2, r3
  405fd8:	887b      	ldrh	r3, [r7, #2]
  405fda:	fb03 f302 	mul.w	r3, r3, r2
  405fde:	687a      	ldr	r2, [r7, #4]
  405fe0:	6812      	ldr	r2, [r2, #0]
  405fe2:	88d2      	ldrh	r2, [r2, #6]
  405fe4:	fb93 f3f2 	sdiv	r3, r3, r2
  405fe8:	60bb      	str	r3, [r7, #8]
		uint32_t period;

		if (interval_ms != 0) {
  405fea:	887b      	ldrh	r3, [r7, #2]
  405fec:	2b00      	cmp	r3, #0
  405fee:	d009      	beq.n	406004 <ch_common_set_sample_interval+0x64>
			period = (sample_interval / 2048) + 1;				// XXX need define
  405ff0:	68bb      	ldr	r3, [r7, #8]
  405ff2:	0adb      	lsrs	r3, r3, #11
  405ff4:	3301      	adds	r3, #1
  405ff6:	613b      	str	r3, [r7, #16]
			if (period > UINT8_MAX) {					/* check if result fits in register */
  405ff8:	693b      	ldr	r3, [r7, #16]
  405ffa:	2bff      	cmp	r3, #255	; 0xff
  405ffc:	d904      	bls.n	406008 <ch_common_set_sample_interval+0x68>
				ret_val = 1;
  405ffe:	2301      	movs	r3, #1
  406000:	757b      	strb	r3, [r7, #21]
  406002:	e001      	b.n	406008 <ch_common_set_sample_interval+0x68>
			}
		} else {
			period = 0;
  406004:	2300      	movs	r3, #0
  406006:	613b      	str	r3, [r7, #16]
		}

		if (ret_val == 0) {
  406008:	7d7b      	ldrb	r3, [r7, #21]
  40600a:	2b00      	cmp	r3, #0
  40600c:	d11a      	bne.n	406044 <ch_common_set_sample_interval+0xa4>
			uint32_t tick_interval;

			if (period != 0) {
  40600e:	693b      	ldr	r3, [r7, #16]
  406010:	2b00      	cmp	r3, #0
  406012:	d005      	beq.n	406020 <ch_common_set_sample_interval+0x80>
				tick_interval = sample_interval / period;
  406014:	68ba      	ldr	r2, [r7, #8]
  406016:	693b      	ldr	r3, [r7, #16]
  406018:	fbb2 f3f3 	udiv	r3, r2, r3
  40601c:	60fb      	str	r3, [r7, #12]
  40601e:	e001      	b.n	406024 <ch_common_set_sample_interval+0x84>
			} else {
				tick_interval = 0;
  406020:	2300      	movs	r3, #0
  406022:	60fb      	str	r3, [r7, #12]
#ifdef CHDRV_DEBUG
			char cbuf[80];
			snprintf(cbuf, sizeof(cbuf), "Set period=%lu, tick_interval=%lu\n", period, tick_interval);
			chbsp_print_str(cbuf);
#endif
			chdrv_write_byte(dev_ptr, period_reg, (uint8_t) period);
  406024:	7dfb      	ldrb	r3, [r7, #23]
  406026:	b29b      	uxth	r3, r3
  406028:	693a      	ldr	r2, [r7, #16]
  40602a:	b2d2      	uxtb	r2, r2
  40602c:	4619      	mov	r1, r3
  40602e:	6878      	ldr	r0, [r7, #4]
  406030:	4b07      	ldr	r3, [pc, #28]	; (406050 <ch_common_set_sample_interval+0xb0>)
  406032:	4798      	blx	r3
			chdrv_write_word(dev_ptr, tick_interval_reg, (uint16_t) tick_interval);
  406034:	7dbb      	ldrb	r3, [r7, #22]
  406036:	b29b      	uxth	r3, r3
  406038:	68fa      	ldr	r2, [r7, #12]
  40603a:	b292      	uxth	r2, r2
  40603c:	4619      	mov	r1, r3
  40603e:	6878      	ldr	r0, [r7, #4]
  406040:	4b04      	ldr	r3, [pc, #16]	; (406054 <ch_common_set_sample_interval+0xb4>)
  406042:	4798      	blx	r3
		}
	}

	return ret_val;
  406044:	7d7b      	ldrb	r3, [r7, #21]
}
  406046:	4618      	mov	r0, r3
  406048:	3718      	adds	r7, #24
  40604a:	46bd      	mov	sp, r7
  40604c:	bd80      	pop	{r7, pc}
  40604e:	bf00      	nop
  406050:	00406da5 	.word	0x00406da5
  406054:	00406ddd 	.word	0x00406ddd

00406058 <ch_common_set_num_samples>:

// Note: uses actual num_samples, even for CH201
uint8_t ch_common_set_num_samples(ch_dev_t *dev_ptr, uint16_t num_samples ) {
  406058:	b580      	push	{r7, lr}
  40605a:	b084      	sub	sp, #16
  40605c:	af00      	add	r7, sp, #0
  40605e:	6078      	str	r0, [r7, #4]
  406060:	460b      	mov	r3, r1
  406062:	807b      	strh	r3, [r7, #2]
	uint8_t max_range_reg;
	uint8_t ret_val = 1;		// default is error (not connected or num_samples too big)
  406064:	2301      	movs	r3, #1
  406066:	73bb      	strb	r3, [r7, #14]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406068:	687b      	ldr	r3, [r7, #4]
  40606a:	8b9b      	ldrh	r3, [r3, #28]
  40606c:	2b65      	cmp	r3, #101	; 0x65
  40606e:	d102      	bne.n	406076 <ch_common_set_num_samples+0x1e>
		max_range_reg = CH101_COMMON_REG_MAX_RANGE;
  406070:	2307      	movs	r3, #7
  406072:	73fb      	strb	r3, [r7, #15]
  406074:	e004      	b.n	406080 <ch_common_set_num_samples+0x28>
	} else {
		max_range_reg = CH201_COMMON_REG_MAX_RANGE;
  406076:	2307      	movs	r3, #7
  406078:	73fb      	strb	r3, [r7, #15]
		num_samples /= 2;					// each internal count for CH201 represents 2 physical samples
  40607a:	887b      	ldrh	r3, [r7, #2]
  40607c:	085b      	lsrs	r3, r3, #1
  40607e:	807b      	strh	r3, [r7, #2]
	}

	if (dev_ptr->sensor_connected && (num_samples <= UINT8_MAX)) {
  406080:	687b      	ldr	r3, [r7, #4]
  406082:	7fdb      	ldrb	r3, [r3, #31]
  406084:	2b00      	cmp	r3, #0
  406086:	d00c      	beq.n	4060a2 <ch_common_set_num_samples+0x4a>
  406088:	887b      	ldrh	r3, [r7, #2]
  40608a:	2bff      	cmp	r3, #255	; 0xff
  40608c:	d809      	bhi.n	4060a2 <ch_common_set_num_samples+0x4a>
		ret_val = chdrv_write_byte(dev_ptr, max_range_reg, num_samples);
  40608e:	7bfb      	ldrb	r3, [r7, #15]
  406090:	b29b      	uxth	r3, r3
  406092:	887a      	ldrh	r2, [r7, #2]
  406094:	b2d2      	uxtb	r2, r2
  406096:	4619      	mov	r1, r3
  406098:	6878      	ldr	r0, [r7, #4]
  40609a:	4b0e      	ldr	r3, [pc, #56]	; (4060d4 <ch_common_set_num_samples+0x7c>)
  40609c:	4798      	blx	r3
  40609e:	4603      	mov	r3, r0
  4060a0:	73bb      	strb	r3, [r7, #14]
	}

	if (!ret_val) {
  4060a2:	7bbb      	ldrb	r3, [r7, #14]
  4060a4:	2b00      	cmp	r3, #0
  4060a6:	d10d      	bne.n	4060c4 <ch_common_set_num_samples+0x6c>
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4060a8:	687b      	ldr	r3, [r7, #4]
  4060aa:	8b9b      	ldrh	r3, [r3, #28]
  4060ac:	2b65      	cmp	r3, #101	; 0x65
  4060ae:	d103      	bne.n	4060b8 <ch_common_set_num_samples+0x60>
			dev_ptr->num_rx_samples = num_samples;
  4060b0:	687b      	ldr	r3, [r7, #4]
  4060b2:	887a      	ldrh	r2, [r7, #2]
  4060b4:	849a      	strh	r2, [r3, #36]	; 0x24
  4060b6:	e008      	b.n	4060ca <ch_common_set_num_samples+0x72>
		} else {
			dev_ptr->num_rx_samples = (num_samples * 2);	// store actual physical sample count
  4060b8:	887b      	ldrh	r3, [r7, #2]
  4060ba:	005b      	lsls	r3, r3, #1
  4060bc:	b29a      	uxth	r2, r3
  4060be:	687b      	ldr	r3, [r7, #4]
  4060c0:	849a      	strh	r2, [r3, #36]	; 0x24
  4060c2:	e002      	b.n	4060ca <ch_common_set_num_samples+0x72>
		}
	} else {
		dev_ptr->num_rx_samples = 0;
  4060c4:	687b      	ldr	r3, [r7, #4]
  4060c6:	2200      	movs	r2, #0
  4060c8:	849a      	strh	r2, [r3, #36]	; 0x24
	}
	
	return ret_val;
  4060ca:	7bbb      	ldrb	r3, [r7, #14]
}
  4060cc:	4618      	mov	r0, r3
  4060ce:	3710      	adds	r7, #16
  4060d0:	46bd      	mov	sp, r7
  4060d2:	bd80      	pop	{r7, pc}
  4060d4:	00406da5 	.word	0x00406da5

004060d8 <ch_common_set_max_range>:


uint8_t ch_common_set_max_range(ch_dev_t *dev_ptr, uint16_t max_range_mm) {
  4060d8:	b580      	push	{r7, lr}
  4060da:	b084      	sub	sp, #16
  4060dc:	af00      	add	r7, sp, #0
  4060de:	6078      	str	r0, [r7, #4]
  4060e0:	460b      	mov	r3, r1
  4060e2:	807b      	strh	r3, [r7, #2]
	uint8_t ret_val;
	uint32_t num_samples;

	ret_val = (!dev_ptr->sensor_connected);
  4060e4:	687b      	ldr	r3, [r7, #4]
  4060e6:	7fdb      	ldrb	r3, [r3, #31]
  4060e8:	2b00      	cmp	r3, #0
  4060ea:	bf0c      	ite	eq
  4060ec:	2301      	moveq	r3, #1
  4060ee:	2300      	movne	r3, #0
  4060f0:	b2db      	uxtb	r3, r3
  4060f2:	73fb      	strb	r3, [r7, #15]

	if (!ret_val) {
  4060f4:	7bfb      	ldrb	r3, [r7, #15]
  4060f6:	2b00      	cmp	r3, #0
  4060f8:	d11f      	bne.n	40613a <ch_common_set_max_range+0x62>
		num_samples = dev_ptr->api_funcs.mm_to_samples(dev_ptr, max_range_mm);
  4060fa:	687b      	ldr	r3, [r7, #4]
  4060fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
  406100:	887a      	ldrh	r2, [r7, #2]
  406102:	4611      	mov	r1, r2
  406104:	6878      	ldr	r0, [r7, #4]
  406106:	4798      	blx	r3
  406108:	4603      	mov	r3, r0
  40610a:	60bb      	str	r3, [r7, #8]

		if (num_samples > dev_ptr->max_samples) {
  40610c:	687b      	ldr	r3, [r7, #4]
  40610e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  406110:	461a      	mov	r2, r3
  406112:	68bb      	ldr	r3, [r7, #8]
  406114:	429a      	cmp	r2, r3
  406116:	d20d      	bcs.n	406134 <ch_common_set_max_range+0x5c>
			num_samples = dev_ptr->max_samples;
  406118:	687b      	ldr	r3, [r7, #4]
  40611a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  40611c:	60bb      	str	r3, [r7, #8]
			dev_ptr->max_range = ch_samples_to_mm(dev_ptr, num_samples);	// store reduced max range
  40611e:	68bb      	ldr	r3, [r7, #8]
  406120:	b29b      	uxth	r3, r3
  406122:	4619      	mov	r1, r3
  406124:	6878      	ldr	r0, [r7, #4]
  406126:	4b0d      	ldr	r3, [pc, #52]	; (40615c <ch_common_set_max_range+0x84>)
  406128:	4798      	blx	r3
  40612a:	4603      	mov	r3, r0
  40612c:	461a      	mov	r2, r3
  40612e:	687b      	ldr	r3, [r7, #4]
  406130:	811a      	strh	r2, [r3, #8]
  406132:	e002      	b.n	40613a <ch_common_set_max_range+0x62>
		} else {
			dev_ptr->max_range = max_range_mm;							// store user-specified max range
  406134:	687b      	ldr	r3, [r7, #4]
  406136:	887a      	ldrh	r2, [r7, #2]
  406138:	811a      	strh	r2, [r3, #8]
		snprintf(cbuf, sizeof(cbuf), "num_samples=%lu\n", num_samples);
		chbsp_print_str(cbuf);
#endif
	}

	if (!ret_val) {
  40613a:	7bfb      	ldrb	r3, [r7, #15]
  40613c:	2b00      	cmp	r3, #0
  40613e:	d107      	bne.n	406150 <ch_common_set_max_range+0x78>
		ret_val = ch_set_num_samples(dev_ptr, num_samples);
  406140:	68bb      	ldr	r3, [r7, #8]
  406142:	b29b      	uxth	r3, r3
  406144:	4619      	mov	r1, r3
  406146:	6878      	ldr	r0, [r7, #4]
  406148:	4b05      	ldr	r3, [pc, #20]	; (406160 <ch_common_set_max_range+0x88>)
  40614a:	4798      	blx	r3
  40614c:	4603      	mov	r3, r0
  40614e:	73fb      	strb	r3, [r7, #15]
	}

#ifdef CHDRV_DEBUG
	printf("Set samples: ret_val: %u  dev_ptr->num_rx_samples: %u\n", ret_val, dev_ptr->num_rx_samples);
#endif
	return ret_val;
  406150:	7bfb      	ldrb	r3, [r7, #15]
}
  406152:	4618      	mov	r0, r3
  406154:	3710      	adds	r7, #16
  406156:	46bd      	mov	sp, r7
  406158:	bd80      	pop	{r7, pc}
  40615a:	bf00      	nop
  40615c:	00405c11 	.word	0x00405c11
  406160:	00405a65 	.word	0x00405a65

00406164 <ch_common_mm_to_samples>:


uint16_t ch_common_mm_to_samples(ch_dev_t *dev_ptr, uint16_t num_mm) {
  406164:	b580      	push	{r7, lr}
  406166:	b086      	sub	sp, #24
  406168:	af00      	add	r7, sp, #0
  40616a:	6078      	str	r0, [r7, #4]
  40616c:	460b      	mov	r3, r1
  40616e:	807b      	strh	r3, [r7, #2]
	uint8_t err;
	uint16_t scale_factor;
	uint32_t num_samples = 0;
  406170:	2300      	movs	r3, #0
  406172:	613b      	str	r3, [r7, #16]
	uint32_t divisor1;
	uint32_t divisor2 = (dev_ptr->group->rtc_cal_pulse_ms * CH_SPEEDOFSOUND_MPS);
  406174:	687b      	ldr	r3, [r7, #4]
  406176:	681b      	ldr	r3, [r3, #0]
  406178:	88db      	ldrh	r3, [r3, #6]
  40617a:	461a      	mov	r2, r3
  40617c:	f240 1357 	movw	r3, #343	; 0x157
  406180:	fb03 f302 	mul.w	r3, r3, r2
  406184:	60bb      	str	r3, [r7, #8]

	err = (!dev_ptr) || (!dev_ptr->sensor_connected);
  406186:	687b      	ldr	r3, [r7, #4]
  406188:	2b00      	cmp	r3, #0
  40618a:	d003      	beq.n	406194 <ch_common_mm_to_samples+0x30>
  40618c:	687b      	ldr	r3, [r7, #4]
  40618e:	7fdb      	ldrb	r3, [r3, #31]
  406190:	2b00      	cmp	r3, #0
  406192:	d101      	bne.n	406198 <ch_common_mm_to_samples+0x34>
  406194:	2301      	movs	r3, #1
  406196:	e000      	b.n	40619a <ch_common_mm_to_samples+0x36>
  406198:	2300      	movs	r3, #0
  40619a:	75fb      	strb	r3, [r7, #23]

	if (!err) {
  40619c:	7dfb      	ldrb	r3, [r7, #23]
  40619e:	2b00      	cmp	r3, #0
  4061a0:	d114      	bne.n	4061cc <ch_common_mm_to_samples+0x68>
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4061a2:	687b      	ldr	r3, [r7, #4]
  4061a4:	8b9b      	ldrh	r3, [r3, #28]
  4061a6:	2b65      	cmp	r3, #101	; 0x65
  4061a8:	d103      	bne.n	4061b2 <ch_common_mm_to_samples+0x4e>
			divisor1 = 0x2000;			// (4*16*128)  XXX need define(s)
  4061aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4061ae:	60fb      	str	r3, [r7, #12]
  4061b0:	e002      	b.n	4061b8 <ch_common_mm_to_samples+0x54>
		} else {
			divisor1 = 0x4000;			// (4*16*128*2)  XXX need define(s)
  4061b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4061b6:	60fb      	str	r3, [r7, #12]
		}

		if (dev_ptr->scale_factor == 0) {
  4061b8:	687b      	ldr	r3, [r7, #4]
  4061ba:	8adb      	ldrh	r3, [r3, #22]
  4061bc:	2b00      	cmp	r3, #0
  4061be:	d102      	bne.n	4061c6 <ch_common_mm_to_samples+0x62>
			ch_common_store_scale_factor(dev_ptr);
  4061c0:	6878      	ldr	r0, [r7, #4]
  4061c2:	4b22      	ldr	r3, [pc, #136]	; (40624c <ch_common_mm_to_samples+0xe8>)
  4061c4:	4798      	blx	r3
		}

		scale_factor = dev_ptr->scale_factor;
  4061c6:	687b      	ldr	r3, [r7, #4]
  4061c8:	8adb      	ldrh	r3, [r3, #22]
  4061ca:	82bb      	strh	r3, [r7, #20]
	}

	if (!err) {
  4061cc:	7dfb      	ldrb	r3, [r7, #23]
  4061ce:	2b00      	cmp	r3, #0
  4061d0:	d126      	bne.n	406220 <ch_common_mm_to_samples+0xbc>
		// Two steps of division to avoid needing a type larger than 32 bits
		// Ceiling division to ensure result is at least enough samples to meet specified range
		// Oversample value is signed power of two for this firmware relative to standard f/8 sampling.

		num_samples = ((dev_ptr->rtc_cal_result * scale_factor) + (divisor1 - 1)) / divisor1;
  4061d2:	687b      	ldr	r3, [r7, #4]
  4061d4:	89db      	ldrh	r3, [r3, #14]
  4061d6:	461a      	mov	r2, r3
  4061d8:	8abb      	ldrh	r3, [r7, #20]
  4061da:	fb03 f302 	mul.w	r3, r3, r2
  4061de:	461a      	mov	r2, r3
  4061e0:	68fb      	ldr	r3, [r7, #12]
  4061e2:	4413      	add	r3, r2
  4061e4:	1e5a      	subs	r2, r3, #1
  4061e6:	68fb      	ldr	r3, [r7, #12]
  4061e8:	fbb2 f3f3 	udiv	r3, r2, r3
  4061ec:	613b      	str	r3, [r7, #16]

		num_samples = (((num_samples * num_mm) << dev_ptr->oversample) + (divisor2 - 1)) / divisor2;
  4061ee:	887b      	ldrh	r3, [r7, #2]
  4061f0:	693a      	ldr	r2, [r7, #16]
  4061f2:	fb02 f303 	mul.w	r3, r2, r3
  4061f6:	687a      	ldr	r2, [r7, #4]
  4061f8:	f992 201e 	ldrsb.w	r2, [r2, #30]
  4061fc:	fa03 f202 	lsl.w	r2, r3, r2
  406200:	68bb      	ldr	r3, [r7, #8]
  406202:	4413      	add	r3, r2
  406204:	1e5a      	subs	r2, r3, #1
  406206:	68bb      	ldr	r3, [r7, #8]
  406208:	fbb2 f3f3 	udiv	r3, r2, r3
  40620c:	613b      	str	r3, [r7, #16]

		err = (num_samples > UINT16_MAX);
  40620e:	693b      	ldr	r3, [r7, #16]
  406210:	f64f 72ff 	movw	r2, #65535	; 0xffff
  406214:	4293      	cmp	r3, r2
  406216:	bf8c      	ite	hi
  406218:	2301      	movhi	r3, #1
  40621a:	2300      	movls	r3, #0
  40621c:	b2db      	uxtb	r3, r3
  40621e:	75fb      	strb	r3, [r7, #23]
	}

	if (!err) {
  406220:	7dfb      	ldrb	r3, [r7, #23]
  406222:	2b00      	cmp	r3, #0
  406224:	d106      	bne.n	406234 <ch_common_mm_to_samples+0xd0>
		if (dev_ptr->part_number == CH201_PART_NUMBER) {
  406226:	687b      	ldr	r3, [r7, #4]
  406228:	8b9b      	ldrh	r3, [r3, #28]
  40622a:	2bc9      	cmp	r3, #201	; 0xc9
  40622c:	d102      	bne.n	406234 <ch_common_mm_to_samples+0xd0>
			num_samples *= 2;			// each internal count for CH201 represents 2 physical samples
  40622e:	693b      	ldr	r3, [r7, #16]
  406230:	005b      	lsls	r3, r3, #1
  406232:	613b      	str	r3, [r7, #16]
		}
	}

	if (err) {
  406234:	7dfb      	ldrb	r3, [r7, #23]
  406236:	2b00      	cmp	r3, #0
  406238:	d001      	beq.n	40623e <ch_common_mm_to_samples+0xda>
		num_samples = 0;		// return zero if error
  40623a:	2300      	movs	r3, #0
  40623c:	613b      	str	r3, [r7, #16]
	}

	return (uint16_t) num_samples;
  40623e:	693b      	ldr	r3, [r7, #16]
  406240:	b29b      	uxth	r3, r3
}
  406242:	4618      	mov	r0, r3
  406244:	3718      	adds	r7, #24
  406246:	46bd      	mov	sp, r7
  406248:	bd80      	pop	{r7, pc}
  40624a:	bf00      	nop
  40624c:	00406555 	.word	0x00406555

00406250 <ch_common_samples_to_mm>:


uint16_t ch_common_samples_to_mm(ch_dev_t *dev_ptr, uint16_t num_samples) {
  406250:	b480      	push	{r7}
  406252:	b085      	sub	sp, #20
  406254:	af00      	add	r7, sp, #0
  406256:	6078      	str	r0, [r7, #4]
  406258:	460b      	mov	r3, r1
  40625a:	807b      	strh	r3, [r7, #2]
	uint32_t	num_mm = 0;
  40625c:	2300      	movs	r3, #0
  40625e:	60fb      	str	r3, [r7, #12]
	uint32_t	op_freq = dev_ptr->op_frequency;
  406260:	687b      	ldr	r3, [r7, #4]
  406262:	691b      	ldr	r3, [r3, #16]
  406264:	60bb      	str	r3, [r7, #8]

	if (op_freq != 0) {
  406266:	68bb      	ldr	r3, [r7, #8]
  406268:	2b00      	cmp	r3, #0
  40626a:	d008      	beq.n	40627e <ch_common_samples_to_mm+0x2e>
		num_mm = ((uint32_t) num_samples * CH_SPEEDOFSOUND_MPS * 8 * 1000) / (op_freq * 2);
  40626c:	887b      	ldrh	r3, [r7, #2]
  40626e:	4a0b      	ldr	r2, [pc, #44]	; (40629c <ch_common_samples_to_mm+0x4c>)
  406270:	fb02 f203 	mul.w	r2, r2, r3
  406274:	68bb      	ldr	r3, [r7, #8]
  406276:	005b      	lsls	r3, r3, #1
  406278:	fbb2 f3f3 	udiv	r3, r2, r3
  40627c:	60fb      	str	r3, [r7, #12]
	}

	/* Adjust for oversampling, if used */
	num_mm >>= dev_ptr->oversample;
  40627e:	687b      	ldr	r3, [r7, #4]
  406280:	f993 301e 	ldrsb.w	r3, [r3, #30]
  406284:	461a      	mov	r2, r3
  406286:	68fb      	ldr	r3, [r7, #12]
  406288:	40d3      	lsrs	r3, r2
  40628a:	60fb      	str	r3, [r7, #12]

	return (uint16_t) num_mm;
  40628c:	68fb      	ldr	r3, [r7, #12]
  40628e:	b29b      	uxth	r3, r3
}
  406290:	4618      	mov	r0, r3
  406292:	3714      	adds	r7, #20
  406294:	46bd      	mov	sp, r7
  406296:	f85d 7b04 	ldr.w	r7, [sp], #4
  40629a:	4770      	bx	lr
  40629c:	0029dec0 	.word	0x0029dec0

004062a0 <ch_common_get_range>:
		}
	}
	return ret_val;
}

uint32_t ch_common_get_range(ch_dev_t *dev_ptr, ch_range_t range_type) {
  4062a0:	b580      	push	{r7, lr}
  4062a2:	b08a      	sub	sp, #40	; 0x28
  4062a4:	af00      	add	r7, sp, #0
  4062a6:	6078      	str	r0, [r7, #4]
  4062a8:	460b      	mov	r3, r1
  4062aa:	70fb      	strb	r3, [r7, #3]
	uint8_t		tof_reg;
	uint32_t	range = CH_NO_TARGET;
  4062ac:	f04f 33ff 	mov.w	r3, #4294967295
  4062b0:	623b      	str	r3, [r7, #32]
	uint16_t 	time_of_flight;
	uint16_t 	scale_factor;
	int 		err;

	if (dev_ptr->sensor_connected) {
  4062b2:	687b      	ldr	r3, [r7, #4]
  4062b4:	7fdb      	ldrb	r3, [r3, #31]
  4062b6:	2b00      	cmp	r3, #0
  4062b8:	d073      	beq.n	4063a2 <ch_common_get_range+0x102>

		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4062ba:	687b      	ldr	r3, [r7, #4]
  4062bc:	8b9b      	ldrh	r3, [r3, #28]
  4062be:	2b65      	cmp	r3, #101	; 0x65
  4062c0:	d103      	bne.n	4062ca <ch_common_get_range+0x2a>
			tof_reg = CH101_COMMON_REG_TOF;
  4062c2:	2318      	movs	r3, #24
  4062c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  4062c8:	e002      	b.n	4062d0 <ch_common_get_range+0x30>
		} else {
			tof_reg = CH201_COMMON_REG_TOF;
  4062ca:	2324      	movs	r3, #36	; 0x24
  4062cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		err = chdrv_read_word(dev_ptr, tof_reg, &time_of_flight);
  4062d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4062d4:	b29b      	uxth	r3, r3
  4062d6:	f107 020a 	add.w	r2, r7, #10
  4062da:	4619      	mov	r1, r3
  4062dc:	6878      	ldr	r0, [r7, #4]
  4062de:	4b33      	ldr	r3, [pc, #204]	; (4063ac <ch_common_get_range+0x10c>)
  4062e0:	4798      	blx	r3
  4062e2:	61f8      	str	r0, [r7, #28]

		if (!err && (time_of_flight != UINT16_MAX)) { // If object detected
  4062e4:	69fb      	ldr	r3, [r7, #28]
  4062e6:	2b00      	cmp	r3, #0
  4062e8:	d15b      	bne.n	4063a2 <ch_common_get_range+0x102>
  4062ea:	897b      	ldrh	r3, [r7, #10]
  4062ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4062f0:	4293      	cmp	r3, r2
  4062f2:	d056      	beq.n	4063a2 <ch_common_get_range+0x102>

			if (dev_ptr->scale_factor == 0) {
  4062f4:	687b      	ldr	r3, [r7, #4]
  4062f6:	8adb      	ldrh	r3, [r3, #22]
  4062f8:	2b00      	cmp	r3, #0
  4062fa:	d102      	bne.n	406302 <ch_common_get_range+0x62>
				ch_common_store_scale_factor(dev_ptr);
  4062fc:	6878      	ldr	r0, [r7, #4]
  4062fe:	4b2c      	ldr	r3, [pc, #176]	; (4063b0 <ch_common_get_range+0x110>)
  406300:	4798      	blx	r3
			}
			scale_factor = dev_ptr->scale_factor;
  406302:	687b      	ldr	r3, [r7, #4]
  406304:	8adb      	ldrh	r3, [r3, #22]
  406306:	837b      	strh	r3, [r7, #26]

			if (scale_factor != 0) {
  406308:	8b7b      	ldrh	r3, [r7, #26]
  40630a:	2b00      	cmp	r3, #0
  40630c:	d049      	beq.n	4063a2 <ch_common_get_range+0x102>
				uint32_t num = (CH_SPEEDOFSOUND_MPS * dev_ptr->group->rtc_cal_pulse_ms * (uint32_t) time_of_flight);
  40630e:	687b      	ldr	r3, [r7, #4]
  406310:	681b      	ldr	r3, [r3, #0]
  406312:	88db      	ldrh	r3, [r3, #6]
  406314:	897a      	ldrh	r2, [r7, #10]
  406316:	fb02 f303 	mul.w	r3, r2, r3
  40631a:	f240 1257 	movw	r2, #343	; 0x157
  40631e:	fb02 f303 	mul.w	r3, r2, r3
  406322:	617b      	str	r3, [r7, #20]
				uint32_t den = ((uint32_t) dev_ptr->rtc_cal_result * (uint32_t) scale_factor) >> 11;		// XXX need define
  406324:	687b      	ldr	r3, [r7, #4]
  406326:	89db      	ldrh	r3, [r3, #14]
  406328:	461a      	mov	r2, r3
  40632a:	8b7b      	ldrh	r3, [r7, #26]
  40632c:	fb03 f302 	mul.w	r3, r3, r2
  406330:	0adb      	lsrs	r3, r3, #11
  406332:	613b      	str	r3, [r7, #16]

				range = (num / den);
  406334:	697a      	ldr	r2, [r7, #20]
  406336:	693b      	ldr	r3, [r7, #16]
  406338:	fbb2 f3f3 	udiv	r3, r2, r3
  40633c:	623b      	str	r3, [r7, #32]

				if (dev_ptr->part_number == CH201_PART_NUMBER) {
  40633e:	687b      	ldr	r3, [r7, #4]
  406340:	8b9b      	ldrh	r3, [r3, #28]
  406342:	2bc9      	cmp	r3, #201	; 0xc9
  406344:	d102      	bne.n	40634c <ch_common_get_range+0xac>
					range *= 2;
  406346:	6a3b      	ldr	r3, [r7, #32]
  406348:	005b      	lsls	r3, r3, #1
  40634a:	623b      	str	r3, [r7, #32]
				}

				if (range_type == CH_RANGE_ECHO_ONE_WAY) {
  40634c:	78fb      	ldrb	r3, [r7, #3]
  40634e:	2b00      	cmp	r3, #0
  406350:	d102      	bne.n	406358 <ch_common_get_range+0xb8>
					range /= 2;
  406352:	6a3b      	ldr	r3, [r7, #32]
  406354:	085b      	lsrs	r3, r3, #1
  406356:	623b      	str	r3, [r7, #32]
				}

				/* Adjust for oversampling, if used */
				range >>= dev_ptr->oversample;
  406358:	687b      	ldr	r3, [r7, #4]
  40635a:	f993 301e 	ldrsb.w	r3, [r3, #30]
  40635e:	461a      	mov	r2, r3
  406360:	6a3b      	ldr	r3, [r7, #32]
  406362:	40d3      	lsrs	r3, r2
  406364:	623b      	str	r3, [r7, #32]

				/* If rx-only node, adjust for pre-trigger time included in ToF */
				if (dev_ptr->mode == CH_MODE_TRIGGERED_RX_ONLY) {
  406366:	687b      	ldr	r3, [r7, #4]
  406368:	791b      	ldrb	r3, [r3, #4]
  40636a:	2b20      	cmp	r3, #32
  40636c:	d119      	bne.n	4063a2 <ch_common_get_range+0x102>
					uint32_t pretrig_adj = (CH_SPEEDOFSOUND_MPS * dev_ptr->group->pretrig_delay_us * 32) / 1000;
  40636e:	687b      	ldr	r3, [r7, #4]
  406370:	681b      	ldr	r3, [r3, #0]
  406372:	891b      	ldrh	r3, [r3, #8]
  406374:	461a      	mov	r2, r3
  406376:	f642 23e0 	movw	r3, #10976	; 0x2ae0
  40637a:	fb03 f302 	mul.w	r3, r3, r2
  40637e:	4a0d      	ldr	r2, [pc, #52]	; (4063b4 <ch_common_get_range+0x114>)
  406380:	fb82 1203 	smull	r1, r2, r2, r3
  406384:	1192      	asrs	r2, r2, #6
  406386:	17db      	asrs	r3, r3, #31
  406388:	1ad3      	subs	r3, r2, r3
  40638a:	60fb      	str	r3, [r7, #12]

					if (range > pretrig_adj) {
  40638c:	6a3a      	ldr	r2, [r7, #32]
  40638e:	68fb      	ldr	r3, [r7, #12]
  406390:	429a      	cmp	r2, r3
  406392:	d904      	bls.n	40639e <ch_common_get_range+0xfe>
						range -= pretrig_adj;			// subtract adjustment from calculated range
  406394:	6a3a      	ldr	r2, [r7, #32]
  406396:	68fb      	ldr	r3, [r7, #12]
  406398:	1ad3      	subs	r3, r2, r3
  40639a:	623b      	str	r3, [r7, #32]
  40639c:	e001      	b.n	4063a2 <ch_common_get_range+0x102>
					} else {
						range = CH_MIN_RANGE_VAL;		// underflow - range is very close to zero, use minimum value
  40639e:	2301      	movs	r3, #1
  4063a0:	623b      	str	r3, [r7, #32]
					}
				}
			}
		}
	}
	return range;
  4063a2:	6a3b      	ldr	r3, [r7, #32]
}
  4063a4:	4618      	mov	r0, r3
  4063a6:	3728      	adds	r7, #40	; 0x28
  4063a8:	46bd      	mov	sp, r7
  4063aa:	bd80      	pop	{r7, pc}
  4063ac:	00406e79 	.word	0x00406e79
  4063b0:	00406555 	.word	0x00406555
  4063b4:	10624dd3 	.word	0x10624dd3

004063b8 <ch_common_get_amplitude>:


uint16_t ch_common_get_amplitude(ch_dev_t *dev_ptr) {
  4063b8:	b580      	push	{r7, lr}
  4063ba:	b084      	sub	sp, #16
  4063bc:	af00      	add	r7, sp, #0
  4063be:	6078      	str	r0, [r7, #4]
	uint8_t  amplitude_reg;
	uint16_t amplitude = 0;
  4063c0:	2300      	movs	r3, #0
  4063c2:	81bb      	strh	r3, [r7, #12]

	if (dev_ptr->sensor_connected) {
  4063c4:	687b      	ldr	r3, [r7, #4]
  4063c6:	7fdb      	ldrb	r3, [r3, #31]
  4063c8:	2b00      	cmp	r3, #0
  4063ca:	d010      	beq.n	4063ee <ch_common_get_amplitude+0x36>
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4063cc:	687b      	ldr	r3, [r7, #4]
  4063ce:	8b9b      	ldrh	r3, [r3, #28]
  4063d0:	2b65      	cmp	r3, #101	; 0x65
  4063d2:	d102      	bne.n	4063da <ch_common_get_amplitude+0x22>
			amplitude_reg = CH101_COMMON_REG_AMPLITUDE;
  4063d4:	231a      	movs	r3, #26
  4063d6:	73fb      	strb	r3, [r7, #15]
  4063d8:	e001      	b.n	4063de <ch_common_get_amplitude+0x26>
		} else {
			amplitude_reg = CH201_COMMON_REG_AMPLITUDE;
  4063da:	2326      	movs	r3, #38	; 0x26
  4063dc:	73fb      	strb	r3, [r7, #15]
		}

		chdrv_read_word(dev_ptr, amplitude_reg, &amplitude);
  4063de:	7bfb      	ldrb	r3, [r7, #15]
  4063e0:	b29b      	uxth	r3, r3
  4063e2:	f107 020c 	add.w	r2, r7, #12
  4063e6:	4619      	mov	r1, r3
  4063e8:	6878      	ldr	r0, [r7, #4]
  4063ea:	4b03      	ldr	r3, [pc, #12]	; (4063f8 <ch_common_get_amplitude+0x40>)
  4063ec:	4798      	blx	r3
	}

	return amplitude;
  4063ee:	89bb      	ldrh	r3, [r7, #12]
}
  4063f0:	4618      	mov	r0, r3
  4063f2:	3710      	adds	r7, #16
  4063f4:	46bd      	mov	sp, r7
  4063f6:	bd80      	pop	{r7, pc}
  4063f8:	00406e79 	.word	0x00406e79

004063fc <ch_common_get_locked_state>:


uint8_t ch_common_get_locked_state(ch_dev_t *dev_ptr) {
  4063fc:	b580      	push	{r7, lr}
  4063fe:	b084      	sub	sp, #16
  406400:	af00      	add	r7, sp, #0
  406402:	6078      	str	r0, [r7, #4]
	uint8_t ready_reg;
	uint8_t lock_mask = dev_ptr->freqLockValue;
  406404:	687b      	ldr	r3, [r7, #4]
  406406:	795b      	ldrb	r3, [r3, #5]
  406408:	737b      	strb	r3, [r7, #13]
	uint8_t ret_val = 0;
  40640a:	2300      	movs	r3, #0
  40640c:	73bb      	strb	r3, [r7, #14]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  40640e:	687b      	ldr	r3, [r7, #4]
  406410:	8b9b      	ldrh	r3, [r3, #28]
  406412:	2b65      	cmp	r3, #101	; 0x65
  406414:	d102      	bne.n	40641c <ch_common_get_locked_state+0x20>
		ready_reg = CH101_COMMON_REG_READY;
  406416:	2314      	movs	r3, #20
  406418:	73fb      	strb	r3, [r7, #15]
  40641a:	e001      	b.n	406420 <ch_common_get_locked_state+0x24>
	} else {
		ready_reg = CH201_COMMON_REG_READY;
  40641c:	2314      	movs	r3, #20
  40641e:	73fb      	strb	r3, [r7, #15]
	}

	if (dev_ptr->sensor_connected) {
  406420:	687b      	ldr	r3, [r7, #4]
  406422:	7fdb      	ldrb	r3, [r3, #31]
  406424:	2b00      	cmp	r3, #0
  406426:	d011      	beq.n	40644c <ch_common_get_locked_state+0x50>
		uint8_t ready_value = 0;
  406428:	2300      	movs	r3, #0
  40642a:	733b      	strb	r3, [r7, #12]
		chdrv_read_byte(dev_ptr, ready_reg, &ready_value);
  40642c:	7bfb      	ldrb	r3, [r7, #15]
  40642e:	b29b      	uxth	r3, r3
  406430:	f107 020c 	add.w	r2, r7, #12
  406434:	4619      	mov	r1, r3
  406436:	6878      	ldr	r0, [r7, #4]
  406438:	4b07      	ldr	r3, [pc, #28]	; (406458 <ch_common_get_locked_state+0x5c>)
  40643a:	4798      	blx	r3
		if (ready_value & lock_mask) {
  40643c:	7b3a      	ldrb	r2, [r7, #12]
  40643e:	7b7b      	ldrb	r3, [r7, #13]
  406440:	4013      	ands	r3, r2
  406442:	b2db      	uxtb	r3, r3
  406444:	2b00      	cmp	r3, #0
  406446:	d001      	beq.n	40644c <ch_common_get_locked_state+0x50>
			ret_val = 1;
  406448:	2301      	movs	r3, #1
  40644a:	73bb      	strb	r3, [r7, #14]
		}
	}
	return ret_val;
  40644c:	7bbb      	ldrb	r3, [r7, #14]
}
  40644e:	4618      	mov	r0, r3
  406450:	3710      	adds	r7, #16
  406452:	46bd      	mov	sp, r7
  406454:	bd80      	pop	{r7, pc}
  406456:	bf00      	nop
  406458:	00406e21 	.word	0x00406e21

0040645c <ch_common_prepare_pulse_timer>:

void ch_common_prepare_pulse_timer(ch_dev_t *dev_ptr) {
  40645c:	b580      	push	{r7, lr}
  40645e:	b084      	sub	sp, #16
  406460:	af00      	add	r7, sp, #0
  406462:	6078      	str	r0, [r7, #4]
	uint8_t cal_trig_reg;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406464:	687b      	ldr	r3, [r7, #4]
  406466:	8b9b      	ldrh	r3, [r3, #28]
  406468:	2b65      	cmp	r3, #101	; 0x65
  40646a:	d102      	bne.n	406472 <ch_common_prepare_pulse_timer+0x16>
		cal_trig_reg = CH101_COMMON_REG_CAL_TRIG;
  40646c:	2306      	movs	r3, #6
  40646e:	73fb      	strb	r3, [r7, #15]
  406470:	e001      	b.n	406476 <ch_common_prepare_pulse_timer+0x1a>
	} else {
		cal_trig_reg = CH201_COMMON_REG_CAL_TRIG;
  406472:	2306      	movs	r3, #6
  406474:	73fb      	strb	r3, [r7, #15]
	}

	chdrv_write_byte(dev_ptr, cal_trig_reg, 0);
  406476:	7bfb      	ldrb	r3, [r7, #15]
  406478:	b29b      	uxth	r3, r3
  40647a:	2200      	movs	r2, #0
  40647c:	4619      	mov	r1, r3
  40647e:	6878      	ldr	r0, [r7, #4]
  406480:	4b02      	ldr	r3, [pc, #8]	; (40648c <ch_common_prepare_pulse_timer+0x30>)
  406482:	4798      	blx	r3
}
  406484:	bf00      	nop
  406486:	3710      	adds	r7, #16
  406488:	46bd      	mov	sp, r7
  40648a:	bd80      	pop	{r7, pc}
  40648c:	00406da5 	.word	0x00406da5

00406490 <ch_common_store_pt_result>:

void ch_common_store_pt_result(ch_dev_t *dev_ptr) {
  406490:	b580      	push	{r7, lr}
  406492:	b084      	sub	sp, #16
  406494:	af00      	add	r7, sp, #0
  406496:	6078      	str	r0, [r7, #4]
	uint8_t pt_result_reg;
	uint16_t rtc_cal_result;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406498:	687b      	ldr	r3, [r7, #4]
  40649a:	8b9b      	ldrh	r3, [r3, #28]
  40649c:	2b65      	cmp	r3, #101	; 0x65
  40649e:	d102      	bne.n	4064a6 <ch_common_store_pt_result+0x16>
		pt_result_reg = CH101_COMMON_REG_CAL_RESULT;
  4064a0:	230a      	movs	r3, #10
  4064a2:	73fb      	strb	r3, [r7, #15]
  4064a4:	e001      	b.n	4064aa <ch_common_store_pt_result+0x1a>
	} else {
		pt_result_reg = CH201_COMMON_REG_CAL_RESULT;
  4064a6:	230a      	movs	r3, #10
  4064a8:	73fb      	strb	r3, [r7, #15]
	}

	chdrv_read_word(dev_ptr, pt_result_reg, &rtc_cal_result);
  4064aa:	7bfb      	ldrb	r3, [r7, #15]
  4064ac:	b29b      	uxth	r3, r3
  4064ae:	f107 020c 	add.w	r2, r7, #12
  4064b2:	4619      	mov	r1, r3
  4064b4:	6878      	ldr	r0, [r7, #4]
  4064b6:	4b04      	ldr	r3, [pc, #16]	; (4064c8 <ch_common_store_pt_result+0x38>)
  4064b8:	4798      	blx	r3
	dev_ptr->rtc_cal_result = rtc_cal_result;
  4064ba:	89ba      	ldrh	r2, [r7, #12]
  4064bc:	687b      	ldr	r3, [r7, #4]
  4064be:	81da      	strh	r2, [r3, #14]
}
  4064c0:	bf00      	nop
  4064c2:	3710      	adds	r7, #16
  4064c4:	46bd      	mov	sp, r7
  4064c6:	bd80      	pop	{r7, pc}
  4064c8:	00406e79 	.word	0x00406e79

004064cc <ch_common_store_op_freq>:

void ch_common_store_op_freq(ch_dev_t *dev_ptr){
  4064cc:	b580      	push	{r7, lr}
  4064ce:	b088      	sub	sp, #32
  4064d0:	af00      	add	r7, sp, #0
  4064d2:	6078      	str	r0, [r7, #4]
	uint32_t freq_counter_cycles;
	uint32_t num;
	uint32_t den;
	uint32_t op_freq;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4064d4:	687b      	ldr	r3, [r7, #4]
  4064d6:	8b9b      	ldrh	r3, [r3, #28]
  4064d8:	2b65      	cmp	r3, #101	; 0x65
  4064da:	d102      	bne.n	4064e2 <ch_common_store_op_freq+0x16>
		tof_sf_reg = CH101_COMMON_REG_TOF_SF;
  4064dc:	2316      	movs	r3, #22
  4064de:	77fb      	strb	r3, [r7, #31]
  4064e0:	e001      	b.n	4064e6 <ch_common_store_op_freq+0x1a>
	} else {
		tof_sf_reg = CH201_COMMON_REG_TOF_SF;
  4064e2:	2322      	movs	r3, #34	; 0x22
  4064e4:	77fb      	strb	r3, [r7, #31]
	}

	freq_counter_cycles = dev_ptr->freqCounterCycles;
  4064e6:	687b      	ldr	r3, [r7, #4]
  4064e8:	88db      	ldrh	r3, [r3, #6]
  4064ea:	61bb      	str	r3, [r7, #24]

	chdrv_read_word(dev_ptr, tof_sf_reg, &raw_freq);
  4064ec:	7ffb      	ldrb	r3, [r7, #31]
  4064ee:	b29b      	uxth	r3, r3
  4064f0:	f107 020a 	add.w	r2, r7, #10
  4064f4:	4619      	mov	r1, r3
  4064f6:	6878      	ldr	r0, [r7, #4]
  4064f8:	4b10      	ldr	r3, [pc, #64]	; (40653c <ch_common_store_op_freq+0x70>)
  4064fa:	4798      	blx	r3

	num = (uint32_t)(((dev_ptr->rtc_cal_result)*1000U) / (16U * freq_counter_cycles)) * (uint32_t)(raw_freq);
  4064fc:	687b      	ldr	r3, [r7, #4]
  4064fe:	89db      	ldrh	r3, [r3, #14]
  406500:	461a      	mov	r2, r3
  406502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  406506:	fb03 f202 	mul.w	r2, r3, r2
  40650a:	69bb      	ldr	r3, [r7, #24]
  40650c:	011b      	lsls	r3, r3, #4
  40650e:	fbb2 f3f3 	udiv	r3, r2, r3
  406512:	897a      	ldrh	r2, [r7, #10]
  406514:	fb02 f303 	mul.w	r3, r2, r3
  406518:	617b      	str	r3, [r7, #20]
	den = (uint32_t)(dev_ptr->group->rtc_cal_pulse_ms);
  40651a:	687b      	ldr	r3, [r7, #4]
  40651c:	681b      	ldr	r3, [r3, #0]
  40651e:	88db      	ldrh	r3, [r3, #6]
  406520:	613b      	str	r3, [r7, #16]
	op_freq = (num/den);
  406522:	697a      	ldr	r2, [r7, #20]
  406524:	693b      	ldr	r3, [r7, #16]
  406526:	fbb2 f3f3 	udiv	r3, r2, r3
  40652a:	60fb      	str	r3, [r7, #12]

	dev_ptr->op_frequency = op_freq;
  40652c:	687b      	ldr	r3, [r7, #4]
  40652e:	68fa      	ldr	r2, [r7, #12]
  406530:	611a      	str	r2, [r3, #16]
}
  406532:	bf00      	nop
  406534:	3720      	adds	r7, #32
  406536:	46bd      	mov	sp, r7
  406538:	bd80      	pop	{r7, pc}
  40653a:	bf00      	nop
  40653c:	00406e79 	.word	0x00406e79

00406540 <ch_common_store_bandwidth>:

void ch_common_store_bandwidth(ch_dev_t __attribute__((unused)) *dev_ptr) {
  406540:	b480      	push	{r7}
  406542:	b083      	sub	sp, #12
  406544:	af00      	add	r7, sp, #0
  406546:	6078      	str	r0, [r7, #4]
/*
 * Not supported in current GPR firmware
 */
}
  406548:	bf00      	nop
  40654a:	370c      	adds	r7, #12
  40654c:	46bd      	mov	sp, r7
  40654e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406552:	4770      	bx	lr

00406554 <ch_common_store_scale_factor>:

void ch_common_store_scale_factor(ch_dev_t *dev_ptr) {
  406554:	b580      	push	{r7, lr}
  406556:	b084      	sub	sp, #16
  406558:	af00      	add	r7, sp, #0
  40655a:	6078      	str	r0, [r7, #4]
	uint8_t	err;
	uint8_t	tof_sf_reg;
	uint16_t scale_factor;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  40655c:	687b      	ldr	r3, [r7, #4]
  40655e:	8b9b      	ldrh	r3, [r3, #28]
  406560:	2b65      	cmp	r3, #101	; 0x65
  406562:	d102      	bne.n	40656a <ch_common_store_scale_factor+0x16>
		tof_sf_reg = CH101_COMMON_REG_TOF_SF;
  406564:	2316      	movs	r3, #22
  406566:	73fb      	strb	r3, [r7, #15]
  406568:	e001      	b.n	40656e <ch_common_store_scale_factor+0x1a>
	} else {
		tof_sf_reg = CH201_COMMON_REG_TOF_SF;
  40656a:	2322      	movs	r3, #34	; 0x22
  40656c:	73fb      	strb	r3, [r7, #15]
	}

	err = chdrv_read_word(dev_ptr, tof_sf_reg, &scale_factor);
  40656e:	7bfb      	ldrb	r3, [r7, #15]
  406570:	b29b      	uxth	r3, r3
  406572:	f107 020c 	add.w	r2, r7, #12
  406576:	4619      	mov	r1, r3
  406578:	6878      	ldr	r0, [r7, #4]
  40657a:	4b09      	ldr	r3, [pc, #36]	; (4065a0 <ch_common_store_scale_factor+0x4c>)
  40657c:	4798      	blx	r3
  40657e:	4603      	mov	r3, r0
  406580:	73bb      	strb	r3, [r7, #14]
	if (!err) {
  406582:	7bbb      	ldrb	r3, [r7, #14]
  406584:	2b00      	cmp	r3, #0
  406586:	d103      	bne.n	406590 <ch_common_store_scale_factor+0x3c>
		dev_ptr->scale_factor = scale_factor;
  406588:	89ba      	ldrh	r2, [r7, #12]
  40658a:	687b      	ldr	r3, [r7, #4]
  40658c:	82da      	strh	r2, [r3, #22]
	} else {
		dev_ptr->scale_factor = 0;
	}
}
  40658e:	e002      	b.n	406596 <ch_common_store_scale_factor+0x42>
		dev_ptr->scale_factor = 0;
  406590:	687b      	ldr	r3, [r7, #4]
  406592:	2200      	movs	r2, #0
  406594:	82da      	strh	r2, [r3, #22]
}
  406596:	bf00      	nop
  406598:	3710      	adds	r7, #16
  40659a:	46bd      	mov	sp, r7
  40659c:	bd80      	pop	{r7, pc}
  40659e:	bf00      	nop
  4065a0:	00406e79 	.word	0x00406e79

004065a4 <ch_common_set_thresholds>:


uint8_t ch_common_set_thresholds(ch_dev_t *dev_ptr, ch_thresholds_t *thresholds_ptr) {
  4065a4:	b580      	push	{r7, lr}
  4065a6:	b088      	sub	sp, #32
  4065a8:	af00      	add	r7, sp, #0
  4065aa:	6078      	str	r0, [r7, #4]
  4065ac:	6039      	str	r1, [r7, #0]

	uint8_t	thresh_len_reg = 0;		// offset of register for this threshold's length
  4065ae:	2300      	movs	r3, #0
  4065b0:	77fb      	strb	r3, [r7, #31]
	uint8_t thresh_level_reg;	// threshold level reg (first in array)
	uint8_t max_num_thresholds;
	int ret_val = 1;		// default return = error
  4065b2:	2301      	movs	r3, #1
  4065b4:	61bb      	str	r3, [r7, #24]
	uint8_t	thresh_num;
	uint8_t thresh_len;
	uint16_t thresh_level;
	uint16_t start_sample = 0;
  4065b6:	2300      	movs	r3, #0
  4065b8:	82bb      	strh	r3, [r7, #20]

	if (dev_ptr->sensor_connected) {
  4065ba:	687b      	ldr	r3, [r7, #4]
  4065bc:	7fdb      	ldrb	r3, [r3, #31]
  4065be:	2b00      	cmp	r3, #0
  4065c0:	d070      	beq.n	4066a4 <ch_common_set_thresholds+0x100>
		
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4065c2:	687b      	ldr	r3, [r7, #4]
  4065c4:	8b9b      	ldrh	r3, [r3, #28]
  4065c6:	2b65      	cmp	r3, #101	; 0x65
  4065c8:	d102      	bne.n	4065d0 <ch_common_set_thresholds+0x2c>
			return ret_val;		// NOT SUPPORTED in CH101
  4065ca:	69bb      	ldr	r3, [r7, #24]
  4065cc:	b2db      	uxtb	r3, r3
  4065ce:	e06b      	b.n	4066a8 <ch_common_set_thresholds+0x104>

		} else {
			thresh_level_reg = CH201_COMMON_REG_THRESHOLDS;
  4065d0:	2316      	movs	r3, #22
  4065d2:	74fb      	strb	r3, [r7, #19]
			max_num_thresholds = CH201_COMMON_NUM_THRESHOLDS;
  4065d4:	2306      	movs	r3, #6
  4065d6:	74bb      	strb	r3, [r7, #18]
		}

		for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
  4065d8:	2300      	movs	r3, #0
  4065da:	75fb      	strb	r3, [r7, #23]
  4065dc:	e05c      	b.n	406698 <ch_common_set_thresholds+0xf4>

			if (thresh_num < (max_num_thresholds - 1)) {
  4065de:	7dfa      	ldrb	r2, [r7, #23]
  4065e0:	7cbb      	ldrb	r3, [r7, #18]
  4065e2:	3b01      	subs	r3, #1
  4065e4:	429a      	cmp	r2, r3
  4065e6:	da0e      	bge.n	406606 <ch_common_set_thresholds+0x62>
				uint16_t next_start_sample = thresholds_ptr->threshold[thresh_num + 1].start_sample;
  4065e8:	7dfb      	ldrb	r3, [r7, #23]
  4065ea:	1c5a      	adds	r2, r3, #1
  4065ec:	683b      	ldr	r3, [r7, #0]
  4065ee:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
  4065f2:	823b      	strh	r3, [r7, #16]

				thresh_len = (next_start_sample - start_sample);
  4065f4:	8a3b      	ldrh	r3, [r7, #16]
  4065f6:	b2da      	uxtb	r2, r3
  4065f8:	8abb      	ldrh	r3, [r7, #20]
  4065fa:	b2db      	uxtb	r3, r3
  4065fc:	1ad3      	subs	r3, r2, r3
  4065fe:	75bb      	strb	r3, [r7, #22]
				start_sample  = next_start_sample;
  406600:	8a3b      	ldrh	r3, [r7, #16]
  406602:	82bb      	strh	r3, [r7, #20]
  406604:	e001      	b.n	40660a <ch_common_set_thresholds+0x66>
			} else {
				thresh_len = 0;
  406606:	2300      	movs	r3, #0
  406608:	75bb      	strb	r3, [r7, #22]
			}

			if (dev_ptr->part_number == CH201_PART_NUMBER) {
  40660a:	687b      	ldr	r3, [r7, #4]
  40660c:	8b9b      	ldrh	r3, [r3, #28]
  40660e:	2bc9      	cmp	r3, #201	; 0xc9
  406610:	d122      	bne.n	406658 <ch_common_set_thresholds+0xb4>
				if (thresh_num == 0) {
  406612:	7dfb      	ldrb	r3, [r7, #23]
  406614:	2b00      	cmp	r3, #0
  406616:	d102      	bne.n	40661e <ch_common_set_thresholds+0x7a>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_0;
  406618:	2308      	movs	r3, #8
  40661a:	77fb      	strb	r3, [r7, #31]
  40661c:	e01c      	b.n	406658 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 1) {
  40661e:	7dfb      	ldrb	r3, [r7, #23]
  406620:	2b01      	cmp	r3, #1
  406622:	d102      	bne.n	40662a <ch_common_set_thresholds+0x86>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_1;
  406624:	2309      	movs	r3, #9
  406626:	77fb      	strb	r3, [r7, #31]
  406628:	e016      	b.n	406658 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 2) {
  40662a:	7dfb      	ldrb	r3, [r7, #23]
  40662c:	2b02      	cmp	r3, #2
  40662e:	d102      	bne.n	406636 <ch_common_set_thresholds+0x92>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_2;
  406630:	230c      	movs	r3, #12
  406632:	77fb      	strb	r3, [r7, #31]
  406634:	e010      	b.n	406658 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 3) {
  406636:	7dfb      	ldrb	r3, [r7, #23]
  406638:	2b03      	cmp	r3, #3
  40663a:	d102      	bne.n	406642 <ch_common_set_thresholds+0x9e>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_3;
  40663c:	230d      	movs	r3, #13
  40663e:	77fb      	strb	r3, [r7, #31]
  406640:	e00a      	b.n	406658 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 4) {
  406642:	7dfb      	ldrb	r3, [r7, #23]
  406644:	2b04      	cmp	r3, #4
  406646:	d102      	bne.n	40664e <ch_common_set_thresholds+0xaa>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_4;
  406648:	2315      	movs	r3, #21
  40664a:	77fb      	strb	r3, [r7, #31]
  40664c:	e004      	b.n	406658 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 5) {
  40664e:	7dfb      	ldrb	r3, [r7, #23]
  406650:	2b05      	cmp	r3, #5
  406652:	d101      	bne.n	406658 <ch_common_set_thresholds+0xb4>
					thresh_len_reg = 0;			// last threshold does not have length field - assumed to extend to end of data
  406654:	2300      	movs	r3, #0
  406656:	77fb      	strb	r3, [r7, #31]
				}
			}

			if (thresh_len_reg != 0) {
  406658:	7ffb      	ldrb	r3, [r7, #31]
  40665a:	2b00      	cmp	r3, #0
  40665c:	d006      	beq.n	40666c <ch_common_set_thresholds+0xc8>
				chdrv_write_byte(dev_ptr, thresh_len_reg, thresh_len); 	// set the length field (if any) for this threshold
  40665e:	7ffb      	ldrb	r3, [r7, #31]
  406660:	b29b      	uxth	r3, r3
  406662:	7dba      	ldrb	r2, [r7, #22]
  406664:	4619      	mov	r1, r3
  406666:	6878      	ldr	r0, [r7, #4]
  406668:	4b11      	ldr	r3, [pc, #68]	; (4066b0 <ch_common_set_thresholds+0x10c>)
  40666a:	4798      	blx	r3
			}
			// write level to this threshold's entry in register array
			thresh_level = thresholds_ptr->threshold[thresh_num].level;
  40666c:	7dfb      	ldrb	r3, [r7, #23]
  40666e:	683a      	ldr	r2, [r7, #0]
  406670:	009b      	lsls	r3, r3, #2
  406672:	4413      	add	r3, r2
  406674:	885b      	ldrh	r3, [r3, #2]
  406676:	81fb      	strh	r3, [r7, #14]
			chdrv_write_word(dev_ptr, (thresh_level_reg + (thresh_num * sizeof(uint16_t))), thresh_level);
  406678:	7cfb      	ldrb	r3, [r7, #19]
  40667a:	b29a      	uxth	r2, r3
  40667c:	7dfb      	ldrb	r3, [r7, #23]
  40667e:	b29b      	uxth	r3, r3
  406680:	005b      	lsls	r3, r3, #1
  406682:	b29b      	uxth	r3, r3
  406684:	4413      	add	r3, r2
  406686:	b29b      	uxth	r3, r3
  406688:	89fa      	ldrh	r2, [r7, #14]
  40668a:	4619      	mov	r1, r3
  40668c:	6878      	ldr	r0, [r7, #4]
  40668e:	4b09      	ldr	r3, [pc, #36]	; (4066b4 <ch_common_set_thresholds+0x110>)
  406690:	4798      	blx	r3
		for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
  406692:	7dfb      	ldrb	r3, [r7, #23]
  406694:	3301      	adds	r3, #1
  406696:	75fb      	strb	r3, [r7, #23]
  406698:	7dfa      	ldrb	r2, [r7, #23]
  40669a:	7cbb      	ldrb	r3, [r7, #18]
  40669c:	429a      	cmp	r2, r3
  40669e:	d39e      	bcc.n	4065de <ch_common_set_thresholds+0x3a>
		}

		ret_val = 0;	// return OK
  4066a0:	2300      	movs	r3, #0
  4066a2:	61bb      	str	r3, [r7, #24]
	}
	return ret_val;
  4066a4:	69bb      	ldr	r3, [r7, #24]
  4066a6:	b2db      	uxtb	r3, r3
}
  4066a8:	4618      	mov	r0, r3
  4066aa:	3720      	adds	r7, #32
  4066ac:	46bd      	mov	sp, r7
  4066ae:	bd80      	pop	{r7, pc}
  4066b0:	00406da5 	.word	0x00406da5
  4066b4:	00406ddd 	.word	0x00406ddd

004066b8 <ch_common_get_thresholds>:


uint8_t ch_common_get_thresholds(ch_dev_t *dev_ptr, ch_thresholds_t *thresholds_ptr) {
  4066b8:	b580      	push	{r7, lr}
  4066ba:	b086      	sub	sp, #24
  4066bc:	af00      	add	r7, sp, #0
  4066be:	6078      	str	r0, [r7, #4]
  4066c0:	6039      	str	r1, [r7, #0]
	uint8_t	thresh_len_reg = 0;		// offset of register for this threshold's length
  4066c2:	2300      	movs	r3, #0
  4066c4:	75fb      	strb	r3, [r7, #23]
	uint8_t thresh_level_reg;	// threshold level reg (first in array)
	uint8_t max_num_thresholds;
	uint8_t ret_val = 1;		// default = error return
  4066c6:	2301      	movs	r3, #1
  4066c8:	75bb      	strb	r3, [r7, #22]
	uint8_t thresh_num;
	uint8_t	thresh_len = 0;		// number of samples described by each threshold
  4066ca:	2300      	movs	r3, #0
  4066cc:	73fb      	strb	r3, [r7, #15]
	uint16_t	start_sample = 0;	// calculated start sample for each threshold
  4066ce:	2300      	movs	r3, #0
  4066d0:	827b      	strh	r3, [r7, #18]

	if (dev_ptr->sensor_connected && (thresholds_ptr != NULL)) {
  4066d2:	687b      	ldr	r3, [r7, #4]
  4066d4:	7fdb      	ldrb	r3, [r3, #31]
  4066d6:	2b00      	cmp	r3, #0
  4066d8:	d068      	beq.n	4067ac <ch_common_get_thresholds+0xf4>
  4066da:	683b      	ldr	r3, [r7, #0]
  4066dc:	2b00      	cmp	r3, #0
  4066de:	d065      	beq.n	4067ac <ch_common_get_thresholds+0xf4>
		
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4066e0:	687b      	ldr	r3, [r7, #4]
  4066e2:	8b9b      	ldrh	r3, [r3, #28]
  4066e4:	2b65      	cmp	r3, #101	; 0x65
  4066e6:	d101      	bne.n	4066ec <ch_common_get_thresholds+0x34>
			return ret_val;		// NOT SUPPORTED in CH101
  4066e8:	7dbb      	ldrb	r3, [r7, #22]
  4066ea:	e060      	b.n	4067ae <ch_common_get_thresholds+0xf6>
			
		} else {
			thresh_level_reg = CH201_COMMON_REG_THRESHOLDS;
  4066ec:	2316      	movs	r3, #22
  4066ee:	747b      	strb	r3, [r7, #17]
			max_num_thresholds = CH201_COMMON_NUM_THRESHOLDS;
  4066f0:	2306      	movs	r3, #6
  4066f2:	743b      	strb	r3, [r7, #16]
		}

		for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
  4066f4:	2300      	movs	r3, #0
  4066f6:	757b      	strb	r3, [r7, #21]
  4066f8:	e052      	b.n	4067a0 <ch_common_get_thresholds+0xe8>

			if (dev_ptr->part_number == CH201_PART_NUMBER) {
  4066fa:	687b      	ldr	r3, [r7, #4]
  4066fc:	8b9b      	ldrh	r3, [r3, #28]
  4066fe:	2bc9      	cmp	r3, #201	; 0xc9
  406700:	d122      	bne.n	406748 <ch_common_get_thresholds+0x90>
				if (thresh_num == 0) {
  406702:	7d7b      	ldrb	r3, [r7, #21]
  406704:	2b00      	cmp	r3, #0
  406706:	d102      	bne.n	40670e <ch_common_get_thresholds+0x56>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_0;
  406708:	2308      	movs	r3, #8
  40670a:	75fb      	strb	r3, [r7, #23]
  40670c:	e01c      	b.n	406748 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 1) {
  40670e:	7d7b      	ldrb	r3, [r7, #21]
  406710:	2b01      	cmp	r3, #1
  406712:	d102      	bne.n	40671a <ch_common_get_thresholds+0x62>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_1;
  406714:	2309      	movs	r3, #9
  406716:	75fb      	strb	r3, [r7, #23]
  406718:	e016      	b.n	406748 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 2) {
  40671a:	7d7b      	ldrb	r3, [r7, #21]
  40671c:	2b02      	cmp	r3, #2
  40671e:	d102      	bne.n	406726 <ch_common_get_thresholds+0x6e>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_2;
  406720:	230c      	movs	r3, #12
  406722:	75fb      	strb	r3, [r7, #23]
  406724:	e010      	b.n	406748 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 3) {
  406726:	7d7b      	ldrb	r3, [r7, #21]
  406728:	2b03      	cmp	r3, #3
  40672a:	d102      	bne.n	406732 <ch_common_get_thresholds+0x7a>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_3;
  40672c:	230d      	movs	r3, #13
  40672e:	75fb      	strb	r3, [r7, #23]
  406730:	e00a      	b.n	406748 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 4) {
  406732:	7d7b      	ldrb	r3, [r7, #21]
  406734:	2b04      	cmp	r3, #4
  406736:	d102      	bne.n	40673e <ch_common_get_thresholds+0x86>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_4;
  406738:	2315      	movs	r3, #21
  40673a:	75fb      	strb	r3, [r7, #23]
  40673c:	e004      	b.n	406748 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 5) {
  40673e:	7d7b      	ldrb	r3, [r7, #21]
  406740:	2b05      	cmp	r3, #5
  406742:	d101      	bne.n	406748 <ch_common_get_thresholds+0x90>
					thresh_len_reg = 0;			// last threshold does not have length field - assumed to extend to end of data
  406744:	2300      	movs	r3, #0
  406746:	75fb      	strb	r3, [r7, #23]
				}
			}

			if (thresh_len_reg != 0) {
  406748:	7dfb      	ldrb	r3, [r7, #23]
  40674a:	2b00      	cmp	r3, #0
  40674c:	d008      	beq.n	406760 <ch_common_get_thresholds+0xa8>
				// read the length field register for this threshold
				chdrv_read_byte(dev_ptr, thresh_len_reg, &thresh_len);
  40674e:	7dfb      	ldrb	r3, [r7, #23]
  406750:	b29b      	uxth	r3, r3
  406752:	f107 020f 	add.w	r2, r7, #15
  406756:	4619      	mov	r1, r3
  406758:	6878      	ldr	r0, [r7, #4]
  40675a:	4b17      	ldr	r3, [pc, #92]	; (4067b8 <ch_common_get_thresholds+0x100>)
  40675c:	4798      	blx	r3
  40675e:	e001      	b.n	406764 <ch_common_get_thresholds+0xac>
			} else {
				thresh_len = 0;
  406760:	2300      	movs	r3, #0
  406762:	73fb      	strb	r3, [r7, #15]
			}

			thresholds_ptr->threshold[thresh_num].start_sample = start_sample;
  406764:	7d7a      	ldrb	r2, [r7, #21]
  406766:	683b      	ldr	r3, [r7, #0]
  406768:	8a79      	ldrh	r1, [r7, #18]
  40676a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
			start_sample += thresh_len;				// increment start sample for next threshold
  40676e:	7bfb      	ldrb	r3, [r7, #15]
  406770:	b29a      	uxth	r2, r3
  406772:	8a7b      	ldrh	r3, [r7, #18]
  406774:	4413      	add	r3, r2
  406776:	827b      	strh	r3, [r7, #18]

			// get level from this threshold's entry in register array
			chdrv_read_word(dev_ptr, (thresh_level_reg + (thresh_num * sizeof(uint16_t))), 
  406778:	7c7b      	ldrb	r3, [r7, #17]
  40677a:	b29a      	uxth	r2, r3
  40677c:	7d7b      	ldrb	r3, [r7, #21]
  40677e:	b29b      	uxth	r3, r3
  406780:	005b      	lsls	r3, r3, #1
  406782:	b29b      	uxth	r3, r3
  406784:	4413      	add	r3, r2
  406786:	b299      	uxth	r1, r3
						    &(thresholds_ptr->threshold[thresh_num].level));
  406788:	7d7b      	ldrb	r3, [r7, #21]
			chdrv_read_word(dev_ptr, (thresh_level_reg + (thresh_num * sizeof(uint16_t))), 
  40678a:	009b      	lsls	r3, r3, #2
  40678c:	683a      	ldr	r2, [r7, #0]
  40678e:	4413      	add	r3, r2
  406790:	3302      	adds	r3, #2
  406792:	461a      	mov	r2, r3
  406794:	6878      	ldr	r0, [r7, #4]
  406796:	4b09      	ldr	r3, [pc, #36]	; (4067bc <ch_common_get_thresholds+0x104>)
  406798:	4798      	blx	r3
		for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
  40679a:	7d7b      	ldrb	r3, [r7, #21]
  40679c:	3301      	adds	r3, #1
  40679e:	757b      	strb	r3, [r7, #21]
  4067a0:	7d7a      	ldrb	r2, [r7, #21]
  4067a2:	7c3b      	ldrb	r3, [r7, #16]
  4067a4:	429a      	cmp	r2, r3
  4067a6:	d3a8      	bcc.n	4066fa <ch_common_get_thresholds+0x42>

		}
		ret_val = 0;	// return OK
  4067a8:	2300      	movs	r3, #0
  4067aa:	75bb      	strb	r3, [r7, #22]
	}
	return ret_val;
  4067ac:	7dbb      	ldrb	r3, [r7, #22]
}
  4067ae:	4618      	mov	r0, r3
  4067b0:	3718      	adds	r7, #24
  4067b2:	46bd      	mov	sp, r7
  4067b4:	bd80      	pop	{r7, pc}
  4067b6:	bf00      	nop
  4067b8:	00406e21 	.word	0x00406e21
  4067bc:	00406e79 	.word	0x00406e79

004067c0 <get_sample_data>:


static uint8_t get_sample_data(ch_dev_t *dev_ptr, ch_iq_sample_t *buf_ptr, uint16_t start_sample, uint16_t num_samples,
							   ch_io_mode_t mode, uint8_t sample_size_in_bytes) {
  4067c0:	b590      	push	{r4, r7, lr}
  4067c2:	b093      	sub	sp, #76	; 0x4c
  4067c4:	af04      	add	r7, sp, #16
  4067c6:	60f8      	str	r0, [r7, #12]
  4067c8:	60b9      	str	r1, [r7, #8]
  4067ca:	4611      	mov	r1, r2
  4067cc:	461a      	mov	r2, r3
  4067ce:	460b      	mov	r3, r1
  4067d0:	80fb      	strh	r3, [r7, #6]
  4067d2:	4613      	mov	r3, r2
  4067d4:	80bb      	strh	r3, [r7, #4]

	uint16_t   iq_data_addr;
	ch_group_t *grp_ptr = dev_ptr->group;
  4067d6:	68fb      	ldr	r3, [r7, #12]
  4067d8:	681b      	ldr	r3, [r3, #0]
  4067da:	623b      	str	r3, [r7, #32]
	int        error = 1;
  4067dc:	2301      	movs	r3, #1
  4067de:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t	   use_prog_read = 0;		// default = do not use low-level programming interface
  4067e0:	2300      	movs	r3, #0
  4067e2:	77fb      	strb	r3, [r7, #31]
	if (grp_ptr->num_connected[dev_ptr->i2c_bus_index] == 1) {		// if only one device on this bus
		use_prog_read = 1;											//   use low-level interface
	}
#endif

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4067e4:	68fb      	ldr	r3, [r7, #12]
  4067e6:	8b9b      	ldrh	r3, [r3, #28]
  4067e8:	2b65      	cmp	r3, #101	; 0x65
  4067ea:	d102      	bne.n	4067f2 <get_sample_data+0x32>
		iq_data_addr = CH101_COMMON_REG_DATA;
  4067ec:	231c      	movs	r3, #28
  4067ee:	86fb      	strh	r3, [r7, #54]	; 0x36
  4067f0:	e001      	b.n	4067f6 <get_sample_data+0x36>
	} else {
		iq_data_addr = CH201_COMMON_REG_DATA;
  4067f2:	2328      	movs	r3, #40	; 0x28
  4067f4:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	iq_data_addr += (start_sample * sample_size_in_bytes);
  4067f6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
  4067fa:	b29b      	uxth	r3, r3
  4067fc:	88fa      	ldrh	r2, [r7, #6]
  4067fe:	fb12 f303 	smulbb	r3, r2, r3
  406802:	b29a      	uxth	r2, r3
  406804:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  406806:	4413      	add	r3, r2
  406808:	86fb      	strh	r3, [r7, #54]	; 0x36

	if ((num_samples != 0) && ((start_sample + num_samples) <= dev_ptr->max_samples)) {
  40680a:	88bb      	ldrh	r3, [r7, #4]
  40680c:	2b00      	cmp	r3, #0
  40680e:	f000 80b3 	beq.w	406978 <get_sample_data+0x1b8>
  406812:	88fa      	ldrh	r2, [r7, #6]
  406814:	88bb      	ldrh	r3, [r7, #4]
  406816:	4413      	add	r3, r2
  406818:	68fa      	ldr	r2, [r7, #12]
  40681a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
  40681c:	4293      	cmp	r3, r2
  40681e:	f300 80ab 	bgt.w	406978 <get_sample_data+0x1b8>
		uint16_t num_bytes = (num_samples * sample_size_in_bytes);
  406822:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
  406826:	b29b      	uxth	r3, r3
  406828:	88ba      	ldrh	r2, [r7, #4]
  40682a:	fb12 f303 	smulbb	r3, r2, r3
  40682e:	83bb      	strh	r3, [r7, #28]

		if (mode == CH_IO_MODE_BLOCK) {
  406830:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
  406834:	2b00      	cmp	r3, #0
  406836:	d16e      	bne.n	406916 <get_sample_data+0x156>
			/* blocking transfer */

			if (use_prog_read) {
  406838:	7ffb      	ldrb	r3, [r7, #31]
  40683a:	2b00      	cmp	r3, #0
  40683c:	d063      	beq.n	406906 <get_sample_data+0x146>
				/* use low-level programming interface for speed */

				int num_transfers = (num_bytes + (CH_PROG_XFER_SIZE - 1)) / CH_PROG_XFER_SIZE;
  40683e:	8bbb      	ldrh	r3, [r7, #28]
  406840:	33ff      	adds	r3, #255	; 0xff
  406842:	2b00      	cmp	r3, #0
  406844:	da00      	bge.n	406848 <get_sample_data+0x88>
  406846:	33ff      	adds	r3, #255	; 0xff
  406848:	121b      	asrs	r3, r3, #8
  40684a:	61bb      	str	r3, [r7, #24]
    			int bytes_left = num_bytes;       // remaining bytes to read
  40684c:	8bbb      	ldrh	r3, [r7, #28]
  40684e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Convert register offsets to full memory addresses */
				if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406850:	68fb      	ldr	r3, [r7, #12]
  406852:	8b9b      	ldrh	r3, [r3, #28]
  406854:	2b65      	cmp	r3, #101	; 0x65
  406856:	d104      	bne.n	406862 <get_sample_data+0xa2>
					iq_data_addr += CH101_DATA_MEM_ADDR + CH101_COMMON_I2CREGS_OFFSET;
  406858:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40685a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40685e:	86fb      	strh	r3, [r7, #54]	; 0x36
  406860:	e003      	b.n	40686a <get_sample_data+0xaa>
				} else {
					iq_data_addr += CH201_DATA_MEM_ADDR + CH201_COMMON_I2CREGS_OFFSET;
  406862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  406864:	f503 7300 	add.w	r3, r3, #512	; 0x200
  406868:	86fb      	strh	r3, [r7, #54]	; 0x36
				}

				chbsp_program_enable(dev_ptr);					// assert PROG pin
  40686a:	68f8      	ldr	r0, [r7, #12]
  40686c:	4b45      	ldr	r3, [pc, #276]	; (406984 <get_sample_data+0x1c4>)
  40686e:	4798      	blx	r3

    			for (int xfer = 0; xfer < num_transfers; xfer++) {
  406870:	2300      	movs	r3, #0
  406872:	62bb      	str	r3, [r7, #40]	; 0x28
  406874:	e03f      	b.n	4068f6 <get_sample_data+0x136>
        			int bytes_to_read;
        			uint8_t message[] = { (0x80 | CH_PROG_REG_CTL), 0x09 };      // read burst command
  406876:	4b44      	ldr	r3, [pc, #272]	; (406988 <get_sample_data+0x1c8>)
  406878:	881b      	ldrh	r3, [r3, #0]
  40687a:	82bb      	strh	r3, [r7, #20]

        			if (bytes_left > CH_PROG_XFER_SIZE) {
  40687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40687e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  406882:	dd03      	ble.n	40688c <get_sample_data+0xcc>
                		bytes_to_read = CH_PROG_XFER_SIZE;
  406884:	f44f 7380 	mov.w	r3, #256	; 0x100
  406888:	627b      	str	r3, [r7, #36]	; 0x24
  40688a:	e001      	b.n	406890 <get_sample_data+0xd0>
        			} else {
                		bytes_to_read = bytes_left;
  40688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40688e:	627b      	str	r3, [r7, #36]	; 0x24
        			}
        			chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR, (iq_data_addr + (xfer * CH_PROG_XFER_SIZE)));
  406890:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406892:	b29b      	uxth	r3, r3
  406894:	021b      	lsls	r3, r3, #8
  406896:	b29a      	uxth	r2, r3
  406898:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40689a:	4413      	add	r3, r2
  40689c:	b29b      	uxth	r3, r3
  40689e:	461a      	mov	r2, r3
  4068a0:	2105      	movs	r1, #5
  4068a2:	68f8      	ldr	r0, [r7, #12]
  4068a4:	4b39      	ldr	r3, [pc, #228]	; (40698c <get_sample_data+0x1cc>)
  4068a6:	4798      	blx	r3
        			chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (bytes_to_read - 1));
  4068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4068aa:	b29b      	uxth	r3, r3
  4068ac:	3b01      	subs	r3, #1
  4068ae:	b29b      	uxth	r3, r3
  4068b0:	461a      	mov	r2, r3
  4068b2:	2107      	movs	r1, #7
  4068b4:	68f8      	ldr	r0, [r7, #12]
  4068b6:	4b35      	ldr	r3, [pc, #212]	; (40698c <get_sample_data+0x1cc>)
  4068b8:	4798      	blx	r3
        			error = chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
  4068ba:	f107 0314 	add.w	r3, r7, #20
  4068be:	2202      	movs	r2, #2
  4068c0:	4619      	mov	r1, r3
  4068c2:	68f8      	ldr	r0, [r7, #12]
  4068c4:	4b32      	ldr	r3, [pc, #200]	; (406990 <get_sample_data+0x1d0>)
  4068c6:	4798      	blx	r3
  4068c8:	6338      	str	r0, [r7, #48]	; 0x30
        			error |= chdrv_prog_i2c_read(dev_ptr, ((uint8_t *)buf_ptr + (xfer * CH_PROG_XFER_SIZE)), bytes_to_read);
  4068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068cc:	021b      	lsls	r3, r3, #8
  4068ce:	461a      	mov	r2, r3
  4068d0:	68bb      	ldr	r3, [r7, #8]
  4068d2:	4413      	add	r3, r2
  4068d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4068d6:	b292      	uxth	r2, r2
  4068d8:	4619      	mov	r1, r3
  4068da:	68f8      	ldr	r0, [r7, #12]
  4068dc:	4b2d      	ldr	r3, [pc, #180]	; (406994 <get_sample_data+0x1d4>)
  4068de:	4798      	blx	r3
  4068e0:	4602      	mov	r2, r0
  4068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4068e4:	4313      	orrs	r3, r2
  4068e6:	633b      	str	r3, [r7, #48]	; 0x30

        			bytes_left -= bytes_to_read;
  4068e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4068ec:	1ad3      	subs	r3, r2, r3
  4068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    			for (int xfer = 0; xfer < num_transfers; xfer++) {
  4068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068f2:	3301      	adds	r3, #1
  4068f4:	62bb      	str	r3, [r7, #40]	; 0x28
  4068f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4068f8:	69bb      	ldr	r3, [r7, #24]
  4068fa:	429a      	cmp	r2, r3
  4068fc:	dbbb      	blt.n	406876 <get_sample_data+0xb6>
    			}
    			chbsp_program_disable(dev_ptr);					// de-assert PROG pin
  4068fe:	68f8      	ldr	r0, [r7, #12]
  406900:	4b25      	ldr	r3, [pc, #148]	; (406998 <get_sample_data+0x1d8>)
  406902:	4798      	blx	r3
  406904:	e038      	b.n	406978 <get_sample_data+0x1b8>

			} else {	/* if (use_prog_read) */
				/* use standard I2C interface */

				error = chdrv_burst_read(dev_ptr, iq_data_addr, (uint8_t *) buf_ptr, num_bytes);
  406906:	8bbb      	ldrh	r3, [r7, #28]
  406908:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
  40690a:	68ba      	ldr	r2, [r7, #8]
  40690c:	68f8      	ldr	r0, [r7, #12]
  40690e:	4c23      	ldr	r4, [pc, #140]	; (40699c <get_sample_data+0x1dc>)
  406910:	47a0      	blx	r4
  406912:	6338      	str	r0, [r7, #48]	; 0x30
  406914:	e030      	b.n	406978 <get_sample_data+0x1b8>
			}

		} else {
			/* non-blocking transfer - queue a read transaction (must be started using ch_io_start_nb() ) */

			if (use_prog_read && (grp_ptr->i2c_drv_flags & I2C_DRV_FLAG_USE_PROG_NB)) {
  406916:	7ffb      	ldrb	r3, [r7, #31]
  406918:	2b00      	cmp	r3, #0
  40691a:	d020      	beq.n	40695e <get_sample_data+0x19e>
  40691c:	6a3b      	ldr	r3, [r7, #32]
  40691e:	889b      	ldrh	r3, [r3, #4]
  406920:	f003 0302 	and.w	r3, r3, #2
  406924:	2b00      	cmp	r3, #0
  406926:	d01a      	beq.n	40695e <get_sample_data+0x19e>
				/* Use low-level programming interface to read data */

				/* Convert register offsets to full memory addresses */
				if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406928:	68fb      	ldr	r3, [r7, #12]
  40692a:	8b9b      	ldrh	r3, [r3, #28]
  40692c:	2b65      	cmp	r3, #101	; 0x65
  40692e:	d104      	bne.n	40693a <get_sample_data+0x17a>
					iq_data_addr += (CH101_DATA_MEM_ADDR + CH101_COMMON_I2CREGS_OFFSET);
  406930:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  406932:	f503 7300 	add.w	r3, r3, #512	; 0x200
  406936:	86fb      	strh	r3, [r7, #54]	; 0x36
  406938:	e003      	b.n	406942 <get_sample_data+0x182>
				} else {
					iq_data_addr += (CH201_DATA_MEM_ADDR + CH201_COMMON_I2CREGS_OFFSET);
  40693a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40693c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  406940:	86fb      	strh	r3, [r7, #54]	; 0x36
				}

				error = chdrv_group_i2c_queue(grp_ptr, dev_ptr, 1, CHDRV_NB_TRANS_TYPE_PROG, iq_data_addr, num_bytes, 
  406942:	68bb      	ldr	r3, [r7, #8]
  406944:	9302      	str	r3, [sp, #8]
  406946:	8bbb      	ldrh	r3, [r7, #28]
  406948:	9301      	str	r3, [sp, #4]
  40694a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40694c:	9300      	str	r3, [sp, #0]
  40694e:	2301      	movs	r3, #1
  406950:	2201      	movs	r2, #1
  406952:	68f9      	ldr	r1, [r7, #12]
  406954:	6a38      	ldr	r0, [r7, #32]
  406956:	4c12      	ldr	r4, [pc, #72]	; (4069a0 <get_sample_data+0x1e0>)
  406958:	47a0      	blx	r4
  40695a:	6338      	str	r0, [r7, #48]	; 0x30
  40695c:	e00c      	b.n	406978 <get_sample_data+0x1b8>
					                      	(uint8_t *) buf_ptr);
			} else {
				/* Use regular I2C register interface to read data */
				error = chdrv_group_i2c_queue(grp_ptr, dev_ptr, 1, CHDRV_NB_TRANS_TYPE_STD, iq_data_addr, num_bytes, 
  40695e:	68bb      	ldr	r3, [r7, #8]
  406960:	9302      	str	r3, [sp, #8]
  406962:	8bbb      	ldrh	r3, [r7, #28]
  406964:	9301      	str	r3, [sp, #4]
  406966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  406968:	9300      	str	r3, [sp, #0]
  40696a:	2300      	movs	r3, #0
  40696c:	2201      	movs	r2, #1
  40696e:	68f9      	ldr	r1, [r7, #12]
  406970:	6a38      	ldr	r0, [r7, #32]
  406972:	4c0b      	ldr	r4, [pc, #44]	; (4069a0 <get_sample_data+0x1e0>)
  406974:	47a0      	blx	r4
  406976:	6338      	str	r0, [r7, #48]	; 0x30
											  (uint8_t*) buf_ptr);
			}
		}
	}

	return error;
  406978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40697a:	b2db      	uxtb	r3, r3
}
  40697c:	4618      	mov	r0, r3
  40697e:	373c      	adds	r7, #60	; 0x3c
  406980:	46bd      	mov	sp, r7
  406982:	bd90      	pop	{r4, r7, pc}
  406984:	00401f9d 	.word	0x00401f9d
  406988:	0040cc90 	.word	0x0040cc90
  40698c:	004074b1 	.word	0x004074b1
  406990:	00406cfd 	.word	0x00406cfd
  406994:	00406d35 	.word	0x00406d35
  406998:	00401fd5 	.word	0x00401fd5
  40699c:	00406e49 	.word	0x00406e49
  4069a0:	00406fbd 	.word	0x00406fbd

004069a4 <ch_common_set_sample_window>:

uint8_t	 ch_common_set_sample_window(ch_dev_t *dev_ptr, uint16_t start_sample, uint16_t num_samples) {
  4069a4:	b480      	push	{r7}
  4069a6:	b085      	sub	sp, #20
  4069a8:	af00      	add	r7, sp, #0
  4069aa:	6078      	str	r0, [r7, #4]
  4069ac:	460b      	mov	r3, r1
  4069ae:	807b      	strh	r3, [r7, #2]
  4069b0:	4613      	mov	r3, r2
  4069b2:	803b      	strh	r3, [r7, #0]
	uint8_t err = 1;
  4069b4:	2301      	movs	r3, #1
  4069b6:	73fb      	strb	r3, [r7, #15]
	uint16_t max_num_samples;


	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4069b8:	687b      	ldr	r3, [r7, #4]
  4069ba:	8b9b      	ldrh	r3, [r3, #28]
  4069bc:	2b65      	cmp	r3, #101	; 0x65
  4069be:	d102      	bne.n	4069c6 <ch_common_set_sample_window+0x22>
		max_num_samples = CH101_MAX_NUM_SAMPLES;
  4069c0:	2396      	movs	r3, #150	; 0x96
  4069c2:	81bb      	strh	r3, [r7, #12]
  4069c4:	e002      	b.n	4069cc <ch_common_set_sample_window+0x28>
	} else {
		max_num_samples = CH201_MAX_NUM_SAMPLES;
  4069c6:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  4069ca:	81bb      	strh	r3, [r7, #12]
	}

	if ((start_sample + num_samples) <= max_num_samples) {
  4069cc:	887a      	ldrh	r2, [r7, #2]
  4069ce:	883b      	ldrh	r3, [r7, #0]
  4069d0:	441a      	add	r2, r3
  4069d2:	89bb      	ldrh	r3, [r7, #12]
  4069d4:	429a      	cmp	r2, r3
  4069d6:	dc07      	bgt.n	4069e8 <ch_common_set_sample_window+0x44>
		dev_ptr->win_start_sample = start_sample;
  4069d8:	687b      	ldr	r3, [r7, #4]
  4069da:	887a      	ldrh	r2, [r7, #2]
  4069dc:	84da      	strh	r2, [r3, #38]	; 0x26
		dev_ptr->num_win_samples = num_samples;
  4069de:	687b      	ldr	r3, [r7, #4]
  4069e0:	883a      	ldrh	r2, [r7, #0]
  4069e2:	851a      	strh	r2, [r3, #40]	; 0x28

		err = 0;
  4069e4:	2300      	movs	r3, #0
  4069e6:	73fb      	strb	r3, [r7, #15]
	}

	return err;
  4069e8:	7bfb      	ldrb	r3, [r7, #15]
}
  4069ea:	4618      	mov	r0, r3
  4069ec:	3714      	adds	r7, #20
  4069ee:	46bd      	mov	sp, r7
  4069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069f4:	4770      	bx	lr
	...

004069f8 <ch_common_get_amplitude_avg>:


uint16_t ch_common_get_amplitude_avg(ch_dev_t *dev_ptr) {
  4069f8:	b590      	push	{r4, r7, lr}
  4069fa:	b0c9      	sub	sp, #292	; 0x124
  4069fc:	af02      	add	r7, sp, #8
  4069fe:	1d3b      	adds	r3, r7, #4
  406a00:	6018      	str	r0, [r3, #0]
	ch_iq_sample_t window_buf[CH_IQ_SAMPLES_PER_READ];
	uint16_t start_sample = dev_ptr->win_start_sample;
  406a02:	1d3b      	adds	r3, r7, #4
  406a04:	681b      	ldr	r3, [r3, #0]
  406a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  406a08:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	uint16_t num_samples = dev_ptr->num_win_samples;
  406a0c:	1d3b      	adds	r3, r7, #4
  406a0e:	681b      	ldr	r3, [r3, #0]
  406a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  406a12:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint32_t total_amp = 0;
  406a16:	2300      	movs	r3, #0
  406a18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t avg_amp = 0;
  406a1c:	2300      	movs	r3, #0
  406a1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t err = 0;
  406a22:	2300      	movs	r3, #0
  406a24:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109

	if ((start_sample != 0) && (num_samples != 0)) {
  406a28:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
  406a2c:	2b00      	cmp	r3, #0
  406a2e:	d03e      	beq.n	406aae <ch_common_get_amplitude_avg+0xb6>
  406a30:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
  406a34:	2b00      	cmp	r3, #0
  406a36:	d03a      	beq.n	406aae <ch_common_get_amplitude_avg+0xb6>

		err = ch_get_iq_data(dev_ptr, window_buf, start_sample, num_samples, CH_IO_MODE_BLOCK);
  406a38:	f8b7 410a 	ldrh.w	r4, [r7, #266]	; 0x10a
  406a3c:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
  406a40:	f107 0108 	add.w	r1, r7, #8
  406a44:	1d38      	adds	r0, r7, #4
  406a46:	2300      	movs	r3, #0
  406a48:	9300      	str	r3, [sp, #0]
  406a4a:	4623      	mov	r3, r4
  406a4c:	6800      	ldr	r0, [r0, #0]
  406a4e:	4c1c      	ldr	r4, [pc, #112]	; (406ac0 <ch_common_get_amplitude_avg+0xc8>)
  406a50:	47a0      	blx	r4
  406a52:	4603      	mov	r3, r0
  406a54:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109

		if (!err) {
  406a58:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
  406a5c:	2b00      	cmp	r3, #0
  406a5e:	d126      	bne.n	406aae <ch_common_get_amplitude_avg+0xb6>
			for (uint16_t idx = 0; idx < num_samples; idx++) {
  406a60:	2300      	movs	r3, #0
  406a62:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  406a66:	e014      	b.n	406a92 <ch_common_get_amplitude_avg+0x9a>
				total_amp += ch_iq_to_amplitude(&(window_buf[idx]));		// add amplitude for this sample
  406a68:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
  406a6c:	f107 0208 	add.w	r2, r7, #8
  406a70:	009b      	lsls	r3, r3, #2
  406a72:	4413      	add	r3, r2
  406a74:	4618      	mov	r0, r3
  406a76:	4b13      	ldr	r3, [pc, #76]	; (406ac4 <ch_common_get_amplitude_avg+0xcc>)
  406a78:	4798      	blx	r3
  406a7a:	4603      	mov	r3, r0
  406a7c:	461a      	mov	r2, r3
  406a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
  406a82:	4413      	add	r3, r2
  406a84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			for (uint16_t idx = 0; idx < num_samples; idx++) {
  406a88:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
  406a8c:	3301      	adds	r3, #1
  406a8e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  406a92:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
  406a96:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
  406a9a:	429a      	cmp	r2, r3
  406a9c:	d3e4      	bcc.n	406a68 <ch_common_get_amplitude_avg+0x70>
			}

		avg_amp = (total_amp / num_samples);
  406a9e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
  406aa2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
  406aa6:	fbb2 f3f3 	udiv	r3, r2, r3
  406aaa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		}
	}

	return (uint16_t) avg_amp;
  406aae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
  406ab2:	b29b      	uxth	r3, r3
}
  406ab4:	4618      	mov	r0, r3
  406ab6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
  406aba:	46bd      	mov	sp, r7
  406abc:	bd90      	pop	{r4, r7, pc}
  406abe:	bf00      	nop
  406ac0:	00405bc5 	.word	0x00405bc5
  406ac4:	00405c49 	.word	0x00405c49

00406ac8 <ch_common_get_iq_data>:

uint8_t  ch_common_get_iq_data(ch_dev_t *dev_ptr, ch_iq_sample_t *buf_ptr, uint16_t start_sample, uint16_t num_samples,
							   ch_io_mode_t mode) {
  406ac8:	b590      	push	{r4, r7, lr}
  406aca:	b087      	sub	sp, #28
  406acc:	af02      	add	r7, sp, #8
  406ace:	60f8      	str	r0, [r7, #12]
  406ad0:	60b9      	str	r1, [r7, #8]
  406ad2:	4611      	mov	r1, r2
  406ad4:	461a      	mov	r2, r3
  406ad6:	460b      	mov	r3, r1
  406ad8:	80fb      	strh	r3, [r7, #6]
  406ada:	4613      	mov	r3, r2
  406adc:	80bb      	strh	r3, [r7, #4]

	return get_sample_data(dev_ptr, buf_ptr, start_sample, num_samples, mode, sizeof(ch_iq_sample_t));
  406ade:	88b9      	ldrh	r1, [r7, #4]
  406ae0:	88fa      	ldrh	r2, [r7, #6]
  406ae2:	2304      	movs	r3, #4
  406ae4:	9301      	str	r3, [sp, #4]
  406ae6:	f897 3020 	ldrb.w	r3, [r7, #32]
  406aea:	9300      	str	r3, [sp, #0]
  406aec:	460b      	mov	r3, r1
  406aee:	68b9      	ldr	r1, [r7, #8]
  406af0:	68f8      	ldr	r0, [r7, #12]
  406af2:	4c03      	ldr	r4, [pc, #12]	; (406b00 <ch_common_get_iq_data+0x38>)
  406af4:	47a0      	blx	r4
  406af6:	4603      	mov	r3, r0
}
  406af8:	4618      	mov	r0, r3
  406afa:	3714      	adds	r7, #20
  406afc:	46bd      	mov	sp, r7
  406afe:	bd90      	pop	{r4, r7, pc}
  406b00:	004067c1 	.word	0x004067c1

00406b04 <ch_common_get_amplitude_data>:


uint8_t ch_common_get_amplitude_data(ch_dev_t *dev_ptr, uint16_t *buf_ptr, uint16_t start_sample, uint16_t num_samples,
									 ch_io_mode_t mode) {
  406b04:	b590      	push	{r4, r7, lr}
  406b06:	b0cb      	sub	sp, #300	; 0x12c
  406b08:	af02      	add	r7, sp, #8
  406b0a:	f107 040c 	add.w	r4, r7, #12
  406b0e:	6020      	str	r0, [r4, #0]
  406b10:	f107 0008 	add.w	r0, r7, #8
  406b14:	6001      	str	r1, [r0, #0]
  406b16:	4619      	mov	r1, r3
  406b18:	1dbb      	adds	r3, r7, #6
  406b1a:	801a      	strh	r2, [r3, #0]
  406b1c:	1d3b      	adds	r3, r7, #4
  406b1e:	460a      	mov	r2, r1
  406b20:	801a      	strh	r2, [r3, #0]

	ch_iq_sample_t	iq_buf[CH_IQ_SAMPLES_PER_READ];
	uint16_t		samples_in_chunk = 0;
  406b22:	2300      	movs	r3, #0
  406b24:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
	uint8_t			error = 0;
  406b28:	2300      	movs	r3, #0
  406b2a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint16_t		sample_num   = start_sample;
  406b2e:	1dbb      	adds	r3, r7, #6
  406b30:	881b      	ldrh	r3, [r3, #0]
  406b32:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
	uint16_t		samples_left = num_samples;
  406b36:	1d3b      	adds	r3, r7, #4
  406b38:	881b      	ldrh	r3, [r3, #0]
  406b3a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint8_t 		chunks_left  = (num_samples + CH_IQ_SAMPLES_PER_READ - 1) / CH_IQ_SAMPLES_PER_READ;
  406b3e:	1d3b      	adds	r3, r7, #4
  406b40:	881b      	ldrh	r3, [r3, #0]
  406b42:	333f      	adds	r3, #63	; 0x3f
  406b44:	2b00      	cmp	r3, #0
  406b46:	da00      	bge.n	406b4a <ch_common_get_amplitude_data+0x46>
  406b48:	333f      	adds	r3, #63	; 0x3f
  406b4a:	119b      	asrs	r3, r3, #6
  406b4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	/* Validate mode (only blocking mode is supported) and sample count/offset */
	if ((mode != CH_IO_MODE_BLOCK) || (start_sample + num_samples > dev_ptr->max_samples)) {
  406b50:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
  406b54:	2b00      	cmp	r3, #0
  406b56:	d10a      	bne.n	406b6e <ch_common_get_amplitude_data+0x6a>
  406b58:	1dbb      	adds	r3, r7, #6
  406b5a:	881a      	ldrh	r2, [r3, #0]
  406b5c:	1d3b      	adds	r3, r7, #4
  406b5e:	881b      	ldrh	r3, [r3, #0]
  406b60:	4413      	add	r3, r2
  406b62:	f107 020c 	add.w	r2, r7, #12
  406b66:	6812      	ldr	r2, [r2, #0]
  406b68:	8c52      	ldrh	r2, [r2, #34]	; 0x22
  406b6a:	4293      	cmp	r3, r2
  406b6c:	dd52      	ble.n	406c14 <ch_common_get_amplitude_data+0x110>
		error = 1;
  406b6e:	2301      	movs	r3, #1
  406b70:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	}

	while (!error && (chunks_left-- > 0)) {
  406b74:	e04e      	b.n	406c14 <ch_common_get_amplitude_data+0x110>

		/* Read I/Q data */
		if (samples_left > CH_IQ_SAMPLES_PER_READ) {
  406b76:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
  406b7a:	2b40      	cmp	r3, #64	; 0x40
  406b7c:	d903      	bls.n	406b86 <ch_common_get_amplitude_data+0x82>
			samples_in_chunk = CH_IQ_SAMPLES_PER_READ;
  406b7e:	2340      	movs	r3, #64	; 0x40
  406b80:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
  406b84:	e003      	b.n	406b8e <ch_common_get_amplitude_data+0x8a>
		} else {
			samples_in_chunk = samples_left;
  406b86:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
  406b8a:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
		}

		samples_left -= samples_in_chunk;			// adjust remaining sample count for next pass
  406b8e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
  406b92:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
  406b96:	1ad3      	subs	r3, r2, r3
  406b98:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118

		error = get_sample_data(dev_ptr, iq_buf, sample_num, samples_in_chunk, mode, sizeof(ch_iq_sample_t));
  406b9c:	f8b7 411e 	ldrh.w	r4, [r7, #286]	; 0x11e
  406ba0:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
  406ba4:	f107 0114 	add.w	r1, r7, #20
  406ba8:	f107 000c 	add.w	r0, r7, #12
  406bac:	2304      	movs	r3, #4
  406bae:	9301      	str	r3, [sp, #4]
  406bb0:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
  406bb4:	9300      	str	r3, [sp, #0]
  406bb6:	4623      	mov	r3, r4
  406bb8:	6800      	ldr	r0, [r0, #0]
  406bba:	4c20      	ldr	r4, [pc, #128]	; (406c3c <ch_common_get_amplitude_data+0x138>)
  406bbc:	47a0      	blx	r4
  406bbe:	4603      	mov	r3, r0
  406bc0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
		if (error) {
  406bc4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
  406bc8:	2b00      	cmp	r3, #0
  406bca:	d12f      	bne.n	406c2c <ch_common_get_amplitude_data+0x128>
			break;
		}

		/* Calculate amplitudes and store in user buffer */
		for (uint16_t idx = 0; idx < samples_in_chunk; idx++) {
  406bcc:	2300      	movs	r3, #0
  406bce:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  406bd2:	e019      	b.n	406c08 <ch_common_get_amplitude_data+0x104>
			buf_ptr[sample_num++] = ch_iq_to_amplitude(&iq_buf[idx]);
  406bd4:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
  406bd8:	1c5a      	adds	r2, r3, #1
  406bda:	f8a7 211a 	strh.w	r2, [r7, #282]	; 0x11a
  406bde:	005b      	lsls	r3, r3, #1
  406be0:	f107 0208 	add.w	r2, r7, #8
  406be4:	6812      	ldr	r2, [r2, #0]
  406be6:	18d4      	adds	r4, r2, r3
  406be8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
  406bec:	f107 0214 	add.w	r2, r7, #20
  406bf0:	009b      	lsls	r3, r3, #2
  406bf2:	4413      	add	r3, r2
  406bf4:	4618      	mov	r0, r3
  406bf6:	4b12      	ldr	r3, [pc, #72]	; (406c40 <ch_common_get_amplitude_data+0x13c>)
  406bf8:	4798      	blx	r3
  406bfa:	4603      	mov	r3, r0
  406bfc:	8023      	strh	r3, [r4, #0]
		for (uint16_t idx = 0; idx < samples_in_chunk; idx++) {
  406bfe:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
  406c02:	3301      	adds	r3, #1
  406c04:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  406c08:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
  406c0c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
  406c10:	429a      	cmp	r2, r3
  406c12:	d3df      	bcc.n	406bd4 <ch_common_get_amplitude_data+0xd0>
	while (!error && (chunks_left-- > 0)) {
  406c14:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
  406c18:	2b00      	cmp	r3, #0
  406c1a:	d108      	bne.n	406c2e <ch_common_get_amplitude_data+0x12a>
  406c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
  406c20:	1e5a      	subs	r2, r3, #1
  406c22:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
  406c26:	2b00      	cmp	r3, #0
  406c28:	d1a5      	bne.n	406b76 <ch_common_get_amplitude_data+0x72>
  406c2a:	e000      	b.n	406c2e <ch_common_get_amplitude_data+0x12a>
			break;
  406c2c:	bf00      	nop
		}

	}

	return error;
  406c2e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
  406c32:	4618      	mov	r0, r3
  406c34:	f507 7792 	add.w	r7, r7, #292	; 0x124
  406c38:	46bd      	mov	sp, r7
  406c3a:	bd90      	pop	{r4, r7, pc}
  406c3c:	004067c1 	.word	0x004067c1
  406c40:	00405c49 	.word	0x00405c49

00406c44 <ch_common_set_rx_holdoff>:

	return (ch_time_plan_t) time_plan;
}


uint8_t ch_common_set_rx_holdoff(ch_dev_t *dev_ptr, uint16_t num_samples) {
  406c44:	b580      	push	{r7, lr}
  406c46:	b084      	sub	sp, #16
  406c48:	af00      	add	r7, sp, #0
  406c4a:	6078      	str	r0, [r7, #4]
  406c4c:	460b      	mov	r3, r1
  406c4e:	807b      	strh	r3, [r7, #2]
	uint8_t rx_holdoff_reg;
	uint16_t reg_value;
	uint8_t ret_val = RET_OK;
  406c50:	2300      	movs	r3, #0
  406c52:	72fb      	strb	r3, [r7, #11]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406c54:	687b      	ldr	r3, [r7, #4]
  406c56:	8b9b      	ldrh	r3, [r3, #28]
  406c58:	2b65      	cmp	r3, #101	; 0x65
  406c5a:	d104      	bne.n	406c66 <ch_common_set_rx_holdoff+0x22>
		rx_holdoff_reg = CH101_COMMON_REG_RX_HOLDOFF;
  406c5c:	2311      	movs	r3, #17
  406c5e:	73fb      	strb	r3, [r7, #15]
		reg_value = num_samples;
  406c60:	887b      	ldrh	r3, [r7, #2]
  406c62:	81bb      	strh	r3, [r7, #12]
  406c64:	e004      	b.n	406c70 <ch_common_set_rx_holdoff+0x2c>
	} else {
		rx_holdoff_reg = CH201_COMMON_REG_RX_HOLDOFF;
  406c66:	2311      	movs	r3, #17
  406c68:	73fb      	strb	r3, [r7, #15]
		reg_value = (num_samples / 2);			// CH201 value is 1/2 actual sample count
  406c6a:	887b      	ldrh	r3, [r7, #2]
  406c6c:	085b      	lsrs	r3, r3, #1
  406c6e:	81bb      	strh	r3, [r7, #12]
	}

	if (dev_ptr->sensor_connected) {
  406c70:	687b      	ldr	r3, [r7, #4]
  406c72:	7fdb      	ldrb	r3, [r3, #31]
  406c74:	2b00      	cmp	r3, #0
  406c76:	d00e      	beq.n	406c96 <ch_common_set_rx_holdoff+0x52>
		ret_val |= chdrv_write_byte(dev_ptr, rx_holdoff_reg, (uint8_t) reg_value);
  406c78:	7bfb      	ldrb	r3, [r7, #15]
  406c7a:	b29b      	uxth	r3, r3
  406c7c:	89ba      	ldrh	r2, [r7, #12]
  406c7e:	b2d2      	uxtb	r2, r2
  406c80:	4619      	mov	r1, r3
  406c82:	6878      	ldr	r0, [r7, #4]
  406c84:	4b06      	ldr	r3, [pc, #24]	; (406ca0 <ch_common_set_rx_holdoff+0x5c>)
  406c86:	4798      	blx	r3
  406c88:	4603      	mov	r3, r0
  406c8a:	b25a      	sxtb	r2, r3
  406c8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
  406c90:	4313      	orrs	r3, r2
  406c92:	b25b      	sxtb	r3, r3
  406c94:	72fb      	strb	r3, [r7, #11]
	}

	return ret_val;
  406c96:	7afb      	ldrb	r3, [r7, #11]
}
  406c98:	4618      	mov	r0, r3
  406c9a:	3710      	adds	r7, #16
  406c9c:	46bd      	mov	sp, r7
  406c9e:	bd80      	pop	{r7, pc}
  406ca0:	00406da5 	.word	0x00406da5

00406ca4 <ch_common_get_rx_holdoff>:


uint16_t ch_common_get_rx_holdoff(ch_dev_t *dev_ptr) {
  406ca4:	b580      	push	{r7, lr}
  406ca6:	b084      	sub	sp, #16
  406ca8:	af00      	add	r7, sp, #0
  406caa:	6078      	str	r0, [r7, #4]
	uint8_t rx_holdoff_reg;
	uint8_t reg_val;
	uint16_t rx_holdoff = 0;
  406cac:	2300      	movs	r3, #0
  406cae:	81bb      	strh	r3, [r7, #12]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406cb0:	687b      	ldr	r3, [r7, #4]
  406cb2:	8b9b      	ldrh	r3, [r3, #28]
  406cb4:	2b65      	cmp	r3, #101	; 0x65
  406cb6:	d102      	bne.n	406cbe <ch_common_get_rx_holdoff+0x1a>
		rx_holdoff_reg = CH101_COMMON_REG_RX_HOLDOFF;
  406cb8:	2311      	movs	r3, #17
  406cba:	73fb      	strb	r3, [r7, #15]
  406cbc:	e001      	b.n	406cc2 <ch_common_get_rx_holdoff+0x1e>
	} else {
		rx_holdoff_reg = CH201_COMMON_REG_RX_HOLDOFF;
  406cbe:	2311      	movs	r3, #17
  406cc0:	73fb      	strb	r3, [r7, #15]
	}

	if (dev_ptr->sensor_connected) {
  406cc2:	687b      	ldr	r3, [r7, #4]
  406cc4:	7fdb      	ldrb	r3, [r3, #31]
  406cc6:	2b00      	cmp	r3, #0
  406cc8:	d007      	beq.n	406cda <ch_common_get_rx_holdoff+0x36>
		chdrv_read_byte(dev_ptr, rx_holdoff_reg, &reg_val);
  406cca:	7bfb      	ldrb	r3, [r7, #15]
  406ccc:	b29b      	uxth	r3, r3
  406cce:	f107 020b 	add.w	r2, r7, #11
  406cd2:	4619      	mov	r1, r3
  406cd4:	6878      	ldr	r0, [r7, #4]
  406cd6:	4b08      	ldr	r3, [pc, #32]	; (406cf8 <ch_common_get_rx_holdoff+0x54>)
  406cd8:	4798      	blx	r3
	}

	rx_holdoff = (uint16_t) reg_val;
  406cda:	7afb      	ldrb	r3, [r7, #11]
  406cdc:	81bb      	strh	r3, [r7, #12]

	if (dev_ptr->part_number == CH201_PART_NUMBER) {
  406cde:	687b      	ldr	r3, [r7, #4]
  406ce0:	8b9b      	ldrh	r3, [r3, #28]
  406ce2:	2bc9      	cmp	r3, #201	; 0xc9
  406ce4:	d102      	bne.n	406cec <ch_common_get_rx_holdoff+0x48>
		rx_holdoff *= 2;			// CH201 reports 1/2 actual sample count
  406ce6:	89bb      	ldrh	r3, [r7, #12]
  406ce8:	005b      	lsls	r3, r3, #1
  406cea:	81bb      	strh	r3, [r7, #12]
	}

	return rx_holdoff;	
  406cec:	89bb      	ldrh	r3, [r7, #12]
}
  406cee:	4618      	mov	r0, r3
  406cf0:	3710      	adds	r7, #16
  406cf2:	46bd      	mov	sp, r7
  406cf4:	bd80      	pop	{r7, pc}
  406cf6:	bf00      	nop
  406cf8:	00406e21 	.word	0x00406e21

00406cfc <chdrv_prog_i2c_write>:
 * \return 0 if successful, non-zero otherwise
 *
 * This function writes bytes to the device using the programming I2C address.  The
 * PROG line for the device must have been asserted before this function is called.
 */
int chdrv_prog_i2c_write(ch_dev_t *dev_ptr, uint8_t *message, uint16_t len) {
  406cfc:	b580      	push	{r7, lr}
  406cfe:	b086      	sub	sp, #24
  406d00:	af00      	add	r7, sp, #0
  406d02:	60f8      	str	r0, [r7, #12]
  406d04:	60b9      	str	r1, [r7, #8]
  406d06:	4613      	mov	r3, r2
  406d08:	80fb      	strh	r3, [r7, #6]

	dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
  406d0a:	68fb      	ldr	r3, [r7, #12]
  406d0c:	2245      	movs	r2, #69	; 0x45
  406d0e:	761a      	strb	r2, [r3, #24]
	int ch_err = chbsp_i2c_write(dev_ptr, message, len);
  406d10:	88fb      	ldrh	r3, [r7, #6]
  406d12:	461a      	mov	r2, r3
  406d14:	68b9      	ldr	r1, [r7, #8]
  406d16:	68f8      	ldr	r0, [r7, #12]
  406d18:	4b05      	ldr	r3, [pc, #20]	; (406d30 <chdrv_prog_i2c_write+0x34>)
  406d1a:	4798      	blx	r3
  406d1c:	6178      	str	r0, [r7, #20]
	dev_ptr->i2c_address = dev_ptr->app_i2c_address;
  406d1e:	68fb      	ldr	r3, [r7, #12]
  406d20:	7e5a      	ldrb	r2, [r3, #25]
  406d22:	68fb      	ldr	r3, [r7, #12]
  406d24:	761a      	strb	r2, [r3, #24]

	return ch_err;
  406d26:	697b      	ldr	r3, [r7, #20]
}
  406d28:	4618      	mov	r0, r3
  406d2a:	3718      	adds	r7, #24
  406d2c:	46bd      	mov	sp, r7
  406d2e:	bd80      	pop	{r7, pc}
  406d30:	00402699 	.word	0x00402699

00406d34 <chdrv_prog_i2c_read>:
 * \return 0 if successful, non-zero otherwise
 *
 * This function reads bytes from the device using the programming I2C address.  The
 * PROG line for the device must have been asserted before this function is called.
 */
int chdrv_prog_i2c_read(ch_dev_t *dev_ptr, uint8_t *message, uint16_t len) {
  406d34:	b580      	push	{r7, lr}
  406d36:	b086      	sub	sp, #24
  406d38:	af00      	add	r7, sp, #0
  406d3a:	60f8      	str	r0, [r7, #12]
  406d3c:	60b9      	str	r1, [r7, #8]
  406d3e:	4613      	mov	r3, r2
  406d40:	80fb      	strh	r3, [r7, #6]

	dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
  406d42:	68fb      	ldr	r3, [r7, #12]
  406d44:	2245      	movs	r2, #69	; 0x45
  406d46:	761a      	strb	r2, [r3, #24]
	int ch_err = chbsp_i2c_read(dev_ptr, message, len);
  406d48:	88fb      	ldrh	r3, [r7, #6]
  406d4a:	461a      	mov	r2, r3
  406d4c:	68b9      	ldr	r1, [r7, #8]
  406d4e:	68f8      	ldr	r0, [r7, #12]
  406d50:	4b05      	ldr	r3, [pc, #20]	; (406d68 <chdrv_prog_i2c_read+0x34>)
  406d52:	4798      	blx	r3
  406d54:	6178      	str	r0, [r7, #20]
	dev_ptr->i2c_address = dev_ptr->app_i2c_address;
  406d56:	68fb      	ldr	r3, [r7, #12]
  406d58:	7e5a      	ldrb	r2, [r3, #25]
  406d5a:	68fb      	ldr	r3, [r7, #12]
  406d5c:	761a      	strb	r2, [r3, #24]

	return ch_err;
  406d5e:	697b      	ldr	r3, [r7, #20]
}
  406d60:	4618      	mov	r0, r3
  406d62:	3718      	adds	r7, #24
  406d64:	46bd      	mov	sp, r7
  406d66:	bd80      	pop	{r7, pc}
  406d68:	00402785 	.word	0x00402785

00406d6c <chdrv_prog_i2c_read_nb>:
 *
 * This function temporarily changes the device I2C address to the low-level programming
 * interface, and issues a non-blocking read request. The PROG line for the device must have 
 * been asserted before this function is called.
 */
int chdrv_prog_i2c_read_nb(ch_dev_t *dev_ptr, uint8_t *message, uint16_t len) {
  406d6c:	b580      	push	{r7, lr}
  406d6e:	b086      	sub	sp, #24
  406d70:	af00      	add	r7, sp, #0
  406d72:	60f8      	str	r0, [r7, #12]
  406d74:	60b9      	str	r1, [r7, #8]
  406d76:	4613      	mov	r3, r2
  406d78:	80fb      	strh	r3, [r7, #6]

	dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
  406d7a:	68fb      	ldr	r3, [r7, #12]
  406d7c:	2245      	movs	r2, #69	; 0x45
  406d7e:	761a      	strb	r2, [r3, #24]
	int ch_err = chbsp_i2c_read_nb(dev_ptr, message, len);
  406d80:	88fb      	ldrh	r3, [r7, #6]
  406d82:	461a      	mov	r2, r3
  406d84:	68b9      	ldr	r1, [r7, #8]
  406d86:	68f8      	ldr	r0, [r7, #12]
  406d88:	4b05      	ldr	r3, [pc, #20]	; (406da0 <chdrv_prog_i2c_read_nb+0x34>)
  406d8a:	4798      	blx	r3
  406d8c:	6178      	str	r0, [r7, #20]
	dev_ptr->i2c_address = dev_ptr->app_i2c_address;
  406d8e:	68fb      	ldr	r3, [r7, #12]
  406d90:	7e5a      	ldrb	r2, [r3, #25]
  406d92:	68fb      	ldr	r3, [r7, #12]
  406d94:	761a      	strb	r2, [r3, #24]

	return ch_err;
  406d96:	697b      	ldr	r3, [r7, #20]
}
  406d98:	4618      	mov	r0, r3
  406d9a:	3718      	adds	r7, #24
  406d9c:	46bd      	mov	sp, r7
  406d9e:	bd80      	pop	{r7, pc}
  406da0:	0040286d 	.word	0x0040286d

00406da4 <chdrv_write_byte>:
 * \param mem_addr 		sensor memory/register address
 * \param data_value	data value to transmit
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_write_byte(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t data_value) {
  406da4:	b590      	push	{r4, r7, lr}
  406da6:	b085      	sub	sp, #20
  406da8:	af00      	add	r7, sp, #0
  406daa:	6078      	str	r0, [r7, #4]
  406dac:	460b      	mov	r3, r1
  406dae:	807b      	strh	r3, [r7, #2]
  406db0:	4613      	mov	r3, r2
  406db2:	707b      	strb	r3, [r7, #1]
	uint8_t message[] = { sizeof(data_value), data_value };		// insert byte count (1) at start of data
  406db4:	2301      	movs	r3, #1
  406db6:	723b      	strb	r3, [r7, #8]
  406db8:	787b      	ldrb	r3, [r7, #1]
  406dba:	727b      	strb	r3, [r7, #9]

	int ch_err = chbsp_i2c_mem_write(dev_ptr, mem_addr, message, sizeof(message));
  406dbc:	f107 0208 	add.w	r2, r7, #8
  406dc0:	8879      	ldrh	r1, [r7, #2]
  406dc2:	2302      	movs	r3, #2
  406dc4:	6878      	ldr	r0, [r7, #4]
  406dc6:	4c04      	ldr	r4, [pc, #16]	; (406dd8 <chdrv_write_byte+0x34>)
  406dc8:	47a0      	blx	r4
  406dca:	60f8      	str	r0, [r7, #12]

	return ch_err;
  406dcc:	68fb      	ldr	r3, [r7, #12]
}
  406dce:	4618      	mov	r0, r3
  406dd0:	3714      	adds	r7, #20
  406dd2:	46bd      	mov	sp, r7
  406dd4:	bd90      	pop	{r4, r7, pc}
  406dd6:	bf00      	nop
  406dd8:	004026f9 	.word	0x004026f9

00406ddc <chdrv_write_word>:
 * \param reg_addr 	sensor register address
 * \param data 		data value to transmit
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_write_word(ch_dev_t *dev_ptr, uint16_t mem_addr, uint16_t data_value) {
  406ddc:	b590      	push	{r4, r7, lr}
  406dde:	b085      	sub	sp, #20
  406de0:	af00      	add	r7, sp, #0
  406de2:	6078      	str	r0, [r7, #4]
  406de4:	460b      	mov	r3, r1
  406de6:	807b      	strh	r3, [r7, #2]
  406de8:	4613      	mov	r3, r2
  406dea:	803b      	strh	r3, [r7, #0]
	// First we write the register address, then the number of bytes we're writing

	// Place byte count (2) in first byte of message
	// Sensor is little-endian, so LSB goes in at the lower address
	uint8_t message[] = { sizeof(data_value), (uint8_t) data_value, (uint8_t) (data_value >> 8) }; 
  406dec:	2302      	movs	r3, #2
  406dee:	723b      	strb	r3, [r7, #8]
  406df0:	883b      	ldrh	r3, [r7, #0]
  406df2:	b2db      	uxtb	r3, r3
  406df4:	727b      	strb	r3, [r7, #9]
  406df6:	883b      	ldrh	r3, [r7, #0]
  406df8:	0a1b      	lsrs	r3, r3, #8
  406dfa:	b29b      	uxth	r3, r3
  406dfc:	b2db      	uxtb	r3, r3
  406dfe:	72bb      	strb	r3, [r7, #10]

	int ch_err = chbsp_i2c_mem_write(dev_ptr, mem_addr, message, sizeof(message));
  406e00:	f107 0208 	add.w	r2, r7, #8
  406e04:	8879      	ldrh	r1, [r7, #2]
  406e06:	2303      	movs	r3, #3
  406e08:	6878      	ldr	r0, [r7, #4]
  406e0a:	4c04      	ldr	r4, [pc, #16]	; (406e1c <chdrv_write_word+0x40>)
  406e0c:	47a0      	blx	r4
  406e0e:	60f8      	str	r0, [r7, #12]

	return ch_err;
  406e10:	68fb      	ldr	r3, [r7, #12]
}
  406e12:	4618      	mov	r0, r3
  406e14:	3714      	adds	r7, #20
  406e16:	46bd      	mov	sp, r7
  406e18:	bd90      	pop	{r4, r7, pc}
  406e1a:	bf00      	nop
  406e1c:	004026f9 	.word	0x004026f9

00406e20 <chdrv_read_byte>:
 * \param mem_addr 	sensor memory/register address
 * \param data 		pointer to receive buffer
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_read_byte(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data) {
  406e20:	b590      	push	{r4, r7, lr}
  406e22:	b085      	sub	sp, #20
  406e24:	af00      	add	r7, sp, #0
  406e26:	60f8      	str	r0, [r7, #12]
  406e28:	460b      	mov	r3, r1
  406e2a:	607a      	str	r2, [r7, #4]
  406e2c:	817b      	strh	r3, [r7, #10]

	return (chbsp_i2c_mem_read(dev_ptr, mem_addr, data, 1));
  406e2e:	8979      	ldrh	r1, [r7, #10]
  406e30:	2301      	movs	r3, #1
  406e32:	687a      	ldr	r2, [r7, #4]
  406e34:	68f8      	ldr	r0, [r7, #12]
  406e36:	4c03      	ldr	r4, [pc, #12]	; (406e44 <chdrv_read_byte+0x24>)
  406e38:	47a0      	blx	r4
  406e3a:	4603      	mov	r3, r0
}
  406e3c:	4618      	mov	r0, r3
  406e3e:	3714      	adds	r7, #20
  406e40:	46bd      	mov	sp, r7
  406e42:	bd90      	pop	{r4, r7, pc}
  406e44:	004027f5 	.word	0x004027f5

00406e48 <chdrv_burst_read>:
 * \param data 		pointer to receive buffer
 * \param len 		number of bytes to read
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_burst_read(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data, uint16_t num_bytes) {
  406e48:	b590      	push	{r4, r7, lr}
  406e4a:	b085      	sub	sp, #20
  406e4c:	af00      	add	r7, sp, #0
  406e4e:	60f8      	str	r0, [r7, #12]
  406e50:	607a      	str	r2, [r7, #4]
  406e52:	461a      	mov	r2, r3
  406e54:	460b      	mov	r3, r1
  406e56:	817b      	strh	r3, [r7, #10]
  406e58:	4613      	mov	r3, r2
  406e5a:	813b      	strh	r3, [r7, #8]

	return (chbsp_i2c_mem_read(dev_ptr, mem_addr, data, num_bytes));
  406e5c:	893b      	ldrh	r3, [r7, #8]
  406e5e:	8979      	ldrh	r1, [r7, #10]
  406e60:	687a      	ldr	r2, [r7, #4]
  406e62:	68f8      	ldr	r0, [r7, #12]
  406e64:	4c03      	ldr	r4, [pc, #12]	; (406e74 <chdrv_burst_read+0x2c>)
  406e66:	47a0      	blx	r4
  406e68:	4603      	mov	r3, r0
}
  406e6a:	4618      	mov	r0, r3
  406e6c:	3714      	adds	r7, #20
  406e6e:	46bd      	mov	sp, r7
  406e70:	bd90      	pop	{r4, r7, pc}
  406e72:	bf00      	nop
  406e74:	004027f5 	.word	0x004027f5

00406e78 <chdrv_read_word>:
 * \param mem_addr 	sensor memory/register address
 * \param data 		pointer to receive buffer
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_read_word(ch_dev_t *dev_ptr, uint16_t mem_addr, uint16_t * data) {
  406e78:	b590      	push	{r4, r7, lr}
  406e7a:	b085      	sub	sp, #20
  406e7c:	af00      	add	r7, sp, #0
  406e7e:	60f8      	str	r0, [r7, #12]
  406e80:	460b      	mov	r3, r1
  406e82:	607a      	str	r2, [r7, #4]
  406e84:	817b      	strh	r3, [r7, #10]
	//
	return (chbsp_i2c_mem_read(dev_ptr, mem_addr, (uint8_t *) data, 2));
  406e86:	8979      	ldrh	r1, [r7, #10]
  406e88:	2302      	movs	r3, #2
  406e8a:	687a      	ldr	r2, [r7, #4]
  406e8c:	68f8      	ldr	r0, [r7, #12]
  406e8e:	4c03      	ldr	r4, [pc, #12]	; (406e9c <chdrv_read_word+0x24>)
  406e90:	47a0      	blx	r4
  406e92:	4603      	mov	r3, r0
}
  406e94:	4618      	mov	r0, r3
  406e96:	3714      	adds	r7, #20
  406e98:	46bd      	mov	sp, r7
  406e9a:	bd90      	pop	{r4, r7, pc}
  406e9c:	004027f5 	.word	0x004027f5

00406ea0 <chdrv_group_measure_rtc>:
 *
 * \note The calibration pulse is sent to all devices in the group at the same time.  Therefore 
 * all connected devices will see the same reference pulse length.
 * 
 */
void chdrv_group_measure_rtc(ch_group_t *grp_ptr) {
  406ea0:	b580      	push	{r7, lr}
  406ea2:	b084      	sub	sp, #16
  406ea4:	af00      	add	r7, sp, #0
  406ea6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	const uint32_t pulselength = grp_ptr->rtc_cal_pulse_ms;
  406ea8:	687b      	ldr	r3, [r7, #4]
  406eaa:	88db      	ldrh	r3, [r3, #6]
  406eac:	60bb      	str	r3, [r7, #8]

	/* Configure the host's side of the IO pin as a low output */
	chbsp_group_io_clear(grp_ptr);
  406eae:	6878      	ldr	r0, [r7, #4]
  406eb0:	4b3d      	ldr	r3, [pc, #244]	; (406fa8 <chdrv_group_measure_rtc+0x108>)
  406eb2:	4798      	blx	r3
	chbsp_group_set_io_dir_out(grp_ptr);
  406eb4:	6878      	ldr	r0, [r7, #4]
  406eb6:	4b3d      	ldr	r3, [pc, #244]	; (406fac <chdrv_group_measure_rtc+0x10c>)
  406eb8:	4798      	blx	r3

	/* Set up RTC calibration */
	for (i = 0; i < grp_ptr->num_ports; i++) {
  406eba:	2300      	movs	r3, #0
  406ebc:	73fb      	strb	r3, [r7, #15]
  406ebe:	e017      	b.n	406ef0 <chdrv_group_measure_rtc+0x50>
		if (grp_ptr->device[i]->sensor_connected) {
  406ec0:	7bfa      	ldrb	r2, [r7, #15]
  406ec2:	687b      	ldr	r3, [r7, #4]
  406ec4:	3206      	adds	r2, #6
  406ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406eca:	7fdb      	ldrb	r3, [r3, #31]
  406ecc:	2b00      	cmp	r3, #0
  406ece:	d00c      	beq.n	406eea <chdrv_group_measure_rtc+0x4a>
			grp_ptr->device[i]->prepare_pulse_timer(grp_ptr->device[i]);
  406ed0:	7bfa      	ldrb	r2, [r7, #15]
  406ed2:	687b      	ldr	r3, [r7, #4]
  406ed4:	3206      	adds	r2, #6
  406ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406edc:	7bf9      	ldrb	r1, [r7, #15]
  406ede:	687a      	ldr	r2, [r7, #4]
  406ee0:	3106      	adds	r1, #6
  406ee2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406ee6:	4610      	mov	r0, r2
  406ee8:	4798      	blx	r3
	for (i = 0; i < grp_ptr->num_ports; i++) {
  406eea:	7bfb      	ldrb	r3, [r7, #15]
  406eec:	3301      	adds	r3, #1
  406eee:	73fb      	strb	r3, [r7, #15]
  406ef0:	687b      	ldr	r3, [r7, #4]
  406ef2:	781b      	ldrb	r3, [r3, #0]
  406ef4:	7bfa      	ldrb	r2, [r7, #15]
  406ef6:	429a      	cmp	r2, r3
  406ef8:	d3e2      	bcc.n	406ec0 <chdrv_group_measure_rtc+0x20>
		}
	}

	/* Trigger a pulse on the IO pin */
	chbsp_group_io_set(grp_ptr);
  406efa:	6878      	ldr	r0, [r7, #4]
  406efc:	4b2c      	ldr	r3, [pc, #176]	; (406fb0 <chdrv_group_measure_rtc+0x110>)
  406efe:	4798      	blx	r3
	chbsp_delay_ms(pulselength);
  406f00:	68b8      	ldr	r0, [r7, #8]
  406f02:	4b2c      	ldr	r3, [pc, #176]	; (406fb4 <chdrv_group_measure_rtc+0x114>)
  406f04:	4798      	blx	r3
	chbsp_group_io_clear(grp_ptr);
  406f06:	6878      	ldr	r0, [r7, #4]
  406f08:	4b27      	ldr	r3, [pc, #156]	; (406fa8 <chdrv_group_measure_rtc+0x108>)
  406f0a:	4798      	blx	r3

	/* Keep the IO low for at least 50 us to allow the ASIC FW to deactivate the PT logic.
	   It will be set as input later once we will expect INT from the CHx01. */
	chbsp_delay_us(100);
  406f0c:	2064      	movs	r0, #100	; 0x64
  406f0e:	4b2a      	ldr	r3, [pc, #168]	; (406fb8 <chdrv_group_measure_rtc+0x118>)
  406f10:	4798      	blx	r3

	for (i = 0; i < grp_ptr->num_ports; i++) {
  406f12:	2300      	movs	r3, #0
  406f14:	73fb      	strb	r3, [r7, #15]
  406f16:	e03e      	b.n	406f96 <chdrv_group_measure_rtc+0xf6>
		if (grp_ptr->device[i]->sensor_connected) {
  406f18:	7bfa      	ldrb	r2, [r7, #15]
  406f1a:	687b      	ldr	r3, [r7, #4]
  406f1c:	3206      	adds	r2, #6
  406f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f22:	7fdb      	ldrb	r3, [r3, #31]
  406f24:	2b00      	cmp	r3, #0
  406f26:	d033      	beq.n	406f90 <chdrv_group_measure_rtc+0xf0>
			grp_ptr->device[i]->store_pt_result(grp_ptr->device[i]);
  406f28:	7bfa      	ldrb	r2, [r7, #15]
  406f2a:	687b      	ldr	r3, [r7, #4]
  406f2c:	3206      	adds	r2, #6
  406f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406f34:	7bf9      	ldrb	r1, [r7, #15]
  406f36:	687a      	ldr	r2, [r7, #4]
  406f38:	3106      	adds	r1, #6
  406f3a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406f3e:	4610      	mov	r0, r2
  406f40:	4798      	blx	r3
			grp_ptr->device[i]->store_op_freq(grp_ptr->device[i]);
  406f42:	7bfa      	ldrb	r2, [r7, #15]
  406f44:	687b      	ldr	r3, [r7, #4]
  406f46:	3206      	adds	r2, #6
  406f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406f4e:	7bf9      	ldrb	r1, [r7, #15]
  406f50:	687a      	ldr	r2, [r7, #4]
  406f52:	3106      	adds	r1, #6
  406f54:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406f58:	4610      	mov	r0, r2
  406f5a:	4798      	blx	r3
			grp_ptr->device[i]->store_bandwidth(grp_ptr->device[i]);
  406f5c:	7bfa      	ldrb	r2, [r7, #15]
  406f5e:	687b      	ldr	r3, [r7, #4]
  406f60:	3206      	adds	r2, #6
  406f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406f68:	7bf9      	ldrb	r1, [r7, #15]
  406f6a:	687a      	ldr	r2, [r7, #4]
  406f6c:	3106      	adds	r1, #6
  406f6e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406f72:	4610      	mov	r0, r2
  406f74:	4798      	blx	r3
			grp_ptr->device[i]->store_scalefactor(grp_ptr->device[i]);
  406f76:	7bfa      	ldrb	r2, [r7, #15]
  406f78:	687b      	ldr	r3, [r7, #4]
  406f7a:	3206      	adds	r2, #6
  406f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406f82:	7bf9      	ldrb	r1, [r7, #15]
  406f84:	687a      	ldr	r2, [r7, #4]
  406f86:	3106      	adds	r1, #6
  406f88:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406f8c:	4610      	mov	r0, r2
  406f8e:	4798      	blx	r3
	for (i = 0; i < grp_ptr->num_ports; i++) {
  406f90:	7bfb      	ldrb	r3, [r7, #15]
  406f92:	3301      	adds	r3, #1
  406f94:	73fb      	strb	r3, [r7, #15]
  406f96:	687b      	ldr	r3, [r7, #4]
  406f98:	781b      	ldrb	r3, [r3, #0]
  406f9a:	7bfa      	ldrb	r2, [r7, #15]
  406f9c:	429a      	cmp	r2, r3
  406f9e:	d3bb      	bcc.n	406f18 <chdrv_group_measure_rtc+0x78>
		}
	}
}
  406fa0:	bf00      	nop
  406fa2:	3710      	adds	r7, #16
  406fa4:	46bd      	mov	sp, r7
  406fa6:	bd80      	pop	{r7, pc}
  406fa8:	00402271 	.word	0x00402271
  406fac:	00402045 	.word	0x00402045
  406fb0:	004022f1 	.word	0x004022f1
  406fb4:	00402581 	.word	0x00402581
  406fb8:	004024d9 	.word	0x004024d9

00406fbc <chdrv_group_i2c_queue>:
 * \param data 		pointer to buffer to receive data or containing data to send
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_group_i2c_queue(ch_group_t *grp_ptr, ch_dev_t *dev_ptr, uint8_t rd_wrb, uint8_t type, 
						  uint16_t addr, uint16_t nbytes, uint8_t *data) {
  406fbc:	b580      	push	{r7, lr}
  406fbe:	b088      	sub	sp, #32
  406fc0:	af00      	add	r7, sp, #0
  406fc2:	60f8      	str	r0, [r7, #12]
  406fc4:	60b9      	str	r1, [r7, #8]
  406fc6:	4611      	mov	r1, r2
  406fc8:	461a      	mov	r2, r3
  406fca:	460b      	mov	r3, r1
  406fcc:	71fb      	strb	r3, [r7, #7]
  406fce:	4613      	mov	r3, r2
  406fd0:	71bb      	strb	r3, [r7, #6]

	uint8_t bus_num = ch_get_i2c_bus(dev_ptr);
  406fd2:	68b8      	ldr	r0, [r7, #8]
  406fd4:	4b1e      	ldr	r3, [pc, #120]	; (407050 <chdrv_group_i2c_queue+0x94>)
  406fd6:	4798      	blx	r3
  406fd8:	4603      	mov	r3, r0
  406fda:	76fb      	strb	r3, [r7, #27]
	int	ret_val;

	chdrv_i2c_queue_t *q = &(grp_ptr->i2c_queue[bus_num]);
  406fdc:	7efa      	ldrb	r2, [r7, #27]
  406fde:	4613      	mov	r3, r2
  406fe0:	011b      	lsls	r3, r3, #4
  406fe2:	4413      	add	r3, r2
  406fe4:	009b      	lsls	r3, r3, #2
  406fe6:	3328      	adds	r3, #40	; 0x28
  406fe8:	68fa      	ldr	r2, [r7, #12]
  406fea:	4413      	add	r3, r2
  406fec:	3304      	adds	r3, #4
  406fee:	617b      	str	r3, [r7, #20]
	chdrv_i2c_transaction_t *t = &(q->transaction[q->len]);
  406ff0:	697b      	ldr	r3, [r7, #20]
  406ff2:	789b      	ldrb	r3, [r3, #2]
  406ff4:	011b      	lsls	r3, r3, #4
  406ff6:	697a      	ldr	r2, [r7, #20]
  406ff8:	4413      	add	r3, r2
  406ffa:	3304      	adds	r3, #4
  406ffc:	613b      	str	r3, [r7, #16]

	if (q->len < CHDRV_MAX_I2C_QUEUE_LENGTH) {
  406ffe:	697b      	ldr	r3, [r7, #20]
  407000:	789b      	ldrb	r3, [r3, #2]
  407002:	2b03      	cmp	r3, #3
  407004:	d81d      	bhi.n	407042 <chdrv_group_i2c_queue+0x86>
		t->databuf = data;
  407006:	693b      	ldr	r3, [r7, #16]
  407008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40700a:	60da      	str	r2, [r3, #12]
		t->dev_ptr = dev_ptr;
  40700c:	693b      	ldr	r3, [r7, #16]
  40700e:	68ba      	ldr	r2, [r7, #8]
  407010:	609a      	str	r2, [r3, #8]
		t->addr = addr;
  407012:	693b      	ldr	r3, [r7, #16]
  407014:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  407016:	809a      	strh	r2, [r3, #4]
		t->nbytes = nbytes;
  407018:	693b      	ldr	r3, [r7, #16]
  40701a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  40701c:	80da      	strh	r2, [r3, #6]
		t->rd_wrb = rd_wrb;
  40701e:	693b      	ldr	r3, [r7, #16]
  407020:	79fa      	ldrb	r2, [r7, #7]
  407022:	705a      	strb	r2, [r3, #1]
		t->type = type;
  407024:	693b      	ldr	r3, [r7, #16]
  407026:	79ba      	ldrb	r2, [r7, #6]
  407028:	701a      	strb	r2, [r3, #0]
		t->xfer_num = 0;
  40702a:	693b      	ldr	r3, [r7, #16]
  40702c:	2200      	movs	r2, #0
  40702e:	709a      	strb	r2, [r3, #2]
		q->len++;
  407030:	697b      	ldr	r3, [r7, #20]
  407032:	789b      	ldrb	r3, [r3, #2]
  407034:	3301      	adds	r3, #1
  407036:	b2da      	uxtb	r2, r3
  407038:	697b      	ldr	r3, [r7, #20]
  40703a:	709a      	strb	r2, [r3, #2]
		ret_val = 0;
  40703c:	2300      	movs	r3, #0
  40703e:	61fb      	str	r3, [r7, #28]
  407040:	e001      	b.n	407046 <chdrv_group_i2c_queue+0x8a>
	} else {
		ret_val = 1;
  407042:	2301      	movs	r3, #1
  407044:	61fb      	str	r3, [r7, #28]
	}

	return ret_val;
  407046:	69fb      	ldr	r3, [r7, #28]
}
  407048:	4618      	mov	r0, r3
  40704a:	3720      	adds	r7, #32
  40704c:	46bd      	mov	sp, r7
  40704e:	bd80      	pop	{r7, pc}
  407050:	00405971 	.word	0x00405971

00407054 <chdrv_group_i2c_irq_handler>:
 *
 * Call this function once from your I2C interrupt handler each time it executes.
 * It will call the user's callback routine (grp_ptr->io_complete_callback) when all transactions 
 * are complete.
 */
void chdrv_group_i2c_irq_handler(ch_group_t *grp_ptr, uint8_t i2c_bus_index) {
  407054:	b590      	push	{r4, r7, lr}
  407056:	b08d      	sub	sp, #52	; 0x34
  407058:	af00      	add	r7, sp, #0
  40705a:	6078      	str	r0, [r7, #4]
  40705c:	460b      	mov	r3, r1
  40705e:	70fb      	strb	r3, [r7, #3]
	int i;
	int transactions_pending;
	chdrv_i2c_queue_t *q = &(grp_ptr->i2c_queue[i2c_bus_index]);
  407060:	78fa      	ldrb	r2, [r7, #3]
  407062:	4613      	mov	r3, r2
  407064:	011b      	lsls	r3, r3, #4
  407066:	4413      	add	r3, r2
  407068:	009b      	lsls	r3, r3, #2
  40706a:	3328      	adds	r3, #40	; 0x28
  40706c:	687a      	ldr	r2, [r7, #4]
  40706e:	4413      	add	r3, r2
  407070:	3304      	adds	r3, #4
  407072:	623b      	str	r3, [r7, #32]
	chdrv_i2c_transaction_t *t = &(q->transaction[q->idx]);
  407074:	6a3b      	ldr	r3, [r7, #32]
  407076:	78db      	ldrb	r3, [r3, #3]
  407078:	011b      	lsls	r3, r3, #4
  40707a:	6a3a      	ldr	r2, [r7, #32]
  40707c:	4413      	add	r3, r2
  40707e:	3304      	adds	r3, #4
  407080:	61fb      	str	r3, [r7, #28]
	ch_dev_t *dev_ptr = q->transaction[q->idx].dev_ptr;
  407082:	6a3b      	ldr	r3, [r7, #32]
  407084:	78db      	ldrb	r3, [r3, #3]
  407086:	6a3a      	ldr	r2, [r7, #32]
  407088:	011b      	lsls	r3, r3, #4
  40708a:	4413      	add	r3, r2
  40708c:	330c      	adds	r3, #12
  40708e:	681b      	ldr	r3, [r3, #0]
  407090:	61bb      	str	r3, [r7, #24]


    chbsp_program_disable(dev_ptr);					// de-assert PROG pin, possibly only briefly
  407092:	69b8      	ldr	r0, [r7, #24]
  407094:	4b8c      	ldr	r3, [pc, #560]	; (4072c8 <chdrv_group_i2c_irq_handler+0x274>)
  407096:	4798      	blx	r3

    if (q->idx < q->len) {
  407098:	6a3b      	ldr	r3, [r7, #32]
  40709a:	78da      	ldrb	r2, [r3, #3]
  40709c:	6a3b      	ldr	r3, [r7, #32]
  40709e:	789b      	ldrb	r3, [r3, #2]
  4070a0:	429a      	cmp	r2, r3
  4070a2:	f080 80bf 	bcs.w	407224 <chdrv_group_i2c_irq_handler+0x1d0>
    	dev_ptr = q->transaction[q->idx].dev_ptr;
  4070a6:	6a3b      	ldr	r3, [r7, #32]
  4070a8:	78db      	ldrb	r3, [r3, #3]
  4070aa:	6a3a      	ldr	r2, [r7, #32]
  4070ac:	011b      	lsls	r3, r3, #4
  4070ae:	4413      	add	r3, r2
  4070b0:	330c      	adds	r3, #12
  4070b2:	681b      	ldr	r3, [r3, #0]
  4070b4:	61bb      	str	r3, [r7, #24]
		q->running = 1;
  4070b6:	6a3b      	ldr	r3, [r7, #32]
  4070b8:	2201      	movs	r2, #1
  4070ba:	705a      	strb	r2, [r3, #1]

		if (t->type == CHDRV_NB_TRANS_TYPE_EXTERNAL) {
  4070bc:	69fb      	ldr	r3, [r7, #28]
  4070be:	781b      	ldrb	r3, [r3, #0]
  4070c0:	2b02      	cmp	r3, #2
  4070c2:	d10f      	bne.n	4070e4 <chdrv_group_i2c_irq_handler+0x90>
			/* Externally-requested transfer */

			(q->idx)++;
  4070c4:	6a3b      	ldr	r3, [r7, #32]
  4070c6:	78db      	ldrb	r3, [r3, #3]
  4070c8:	3301      	adds	r3, #1
  4070ca:	b2da      	uxtb	r2, r3
  4070cc:	6a3b      	ldr	r3, [r7, #32]
  4070ce:	70da      	strb	r2, [r3, #3]
			chbsp_external_i2c_irq_handler(t);
  4070d0:	69f8      	ldr	r0, [r7, #28]
  4070d2:	4b7e      	ldr	r3, [pc, #504]	; (4072cc <chdrv_group_i2c_irq_handler+0x278>)
  4070d4:	4798      	blx	r3
    		t->xfer_num++;			// count this transfer
  4070d6:	69fb      	ldr	r3, [r7, #28]
  4070d8:	789b      	ldrb	r3, [r3, #2]
  4070da:	3301      	adds	r3, #1
  4070dc:	b2da      	uxtb	r2, r3
  4070de:	69fb      	ldr	r3, [r7, #28]
  4070e0:	709a      	strb	r2, [r3, #2]
  4070e2:	e09c      	b.n	40721e <chdrv_group_i2c_irq_handler+0x1ca>

		} else if (t->type == CHDRV_NB_TRANS_TYPE_PROG) {
  4070e4:	69fb      	ldr	r3, [r7, #28]
  4070e6:	781b      	ldrb	r3, [r3, #0]
  4070e8:	2b01      	cmp	r3, #1
  4070ea:	d16d      	bne.n	4071c8 <chdrv_group_i2c_irq_handler+0x174>
			/* Programming interface transfer */

			/* programming interface has max transfer size - check if still more to do during this transaction */
			uint8_t total_xfers = (t->nbytes + (CH_PROG_XFER_SIZE - 1)) / CH_PROG_XFER_SIZE;
  4070ec:	69fb      	ldr	r3, [r7, #28]
  4070ee:	88db      	ldrh	r3, [r3, #6]
  4070f0:	33ff      	adds	r3, #255	; 0xff
  4070f2:	2b00      	cmp	r3, #0
  4070f4:	da00      	bge.n	4070f8 <chdrv_group_i2c_irq_handler+0xa4>
  4070f6:	33ff      	adds	r3, #255	; 0xff
  4070f8:	121b      	asrs	r3, r3, #8
  4070fa:	75fb      	strb	r3, [r7, #23]


			if (t->xfer_num < total_xfers) {
  4070fc:	69fb      	ldr	r3, [r7, #28]
  4070fe:	789b      	ldrb	r3, [r3, #2]
  407100:	7dfa      	ldrb	r2, [r7, #23]
  407102:	429a      	cmp	r2, r3
  407104:	f240 808b 	bls.w	40721e <chdrv_group_i2c_irq_handler+0x1ca>
				/* still need to complete this transaction */

				uint16_t bytes_left;
				uint16_t xfer_bytes;

				bytes_left = (t->nbytes - (t->xfer_num * CH_PROG_XFER_SIZE));
  407108:	69fb      	ldr	r3, [r7, #28]
  40710a:	88da      	ldrh	r2, [r3, #6]
  40710c:	69fb      	ldr	r3, [r7, #28]
  40710e:	789b      	ldrb	r3, [r3, #2]
  407110:	b29b      	uxth	r3, r3
  407112:	021b      	lsls	r3, r3, #8
  407114:	b29b      	uxth	r3, r3
  407116:	1ad3      	subs	r3, r2, r3
  407118:	82bb      	strh	r3, [r7, #20]

				if (t->rd_wrb) {			// only read operations supported for now
  40711a:	69fb      	ldr	r3, [r7, #28]
  40711c:	785b      	ldrb	r3, [r3, #1]
  40711e:	2b00      	cmp	r3, #0
  407120:	d040      	beq.n	4071a4 <chdrv_group_i2c_irq_handler+0x150>

					if (grp_ptr->i2c_drv_flags & I2C_DRV_FLAG_RESET_AFTER_NB) {
  407122:	687b      	ldr	r3, [r7, #4]
  407124:	889b      	ldrh	r3, [r3, #4]
  407126:	f003 0301 	and.w	r3, r3, #1
  40712a:	2b00      	cmp	r3, #0
  40712c:	d002      	beq.n	407134 <chdrv_group_i2c_irq_handler+0xe0>
			    		chbsp_i2c_reset(dev_ptr);					// reset I2C bus if BSP says it's needed */
  40712e:	69b8      	ldr	r0, [r7, #24]
  407130:	4b67      	ldr	r3, [pc, #412]	; (4072d0 <chdrv_group_i2c_irq_handler+0x27c>)
  407132:	4798      	blx	r3
					}

					chbsp_program_enable(dev_ptr);					// assert PROG pin
  407134:	69b8      	ldr	r0, [r7, #24]
  407136:	4b67      	ldr	r3, [pc, #412]	; (4072d4 <chdrv_group_i2c_irq_handler+0x280>)
  407138:	4798      	blx	r3

	        		uint8_t message[] = { (0x80 | CH_PROG_REG_CTL), 0x09 };      // read burst command
  40713a:	4b67      	ldr	r3, [pc, #412]	; (4072d8 <chdrv_group_i2c_irq_handler+0x284>)
  40713c:	881b      	ldrh	r3, [r3, #0]
  40713e:	81bb      	strh	r3, [r7, #12]

	        		if (bytes_left > CH_PROG_XFER_SIZE) {
  407140:	8abb      	ldrh	r3, [r7, #20]
  407142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  407146:	d903      	bls.n	407150 <chdrv_group_i2c_irq_handler+0xfc>
	                		xfer_bytes = CH_PROG_XFER_SIZE;
  407148:	f44f 7380 	mov.w	r3, #256	; 0x100
  40714c:	84fb      	strh	r3, [r7, #38]	; 0x26
  40714e:	e001      	b.n	407154 <chdrv_group_i2c_irq_handler+0x100>
	        		} else {
	                		xfer_bytes = bytes_left;
  407150:	8abb      	ldrh	r3, [r7, #20]
  407152:	84fb      	strh	r3, [r7, #38]	; 0x26
	        		}
	        		chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR, (t->addr + (t->xfer_num * CH_PROG_XFER_SIZE)));
  407154:	69fb      	ldr	r3, [r7, #28]
  407156:	889a      	ldrh	r2, [r3, #4]
  407158:	69fb      	ldr	r3, [r7, #28]
  40715a:	789b      	ldrb	r3, [r3, #2]
  40715c:	b29b      	uxth	r3, r3
  40715e:	021b      	lsls	r3, r3, #8
  407160:	b29b      	uxth	r3, r3
  407162:	4413      	add	r3, r2
  407164:	b29b      	uxth	r3, r3
  407166:	461a      	mov	r2, r3
  407168:	2105      	movs	r1, #5
  40716a:	69b8      	ldr	r0, [r7, #24]
  40716c:	4b5b      	ldr	r3, [pc, #364]	; (4072dc <chdrv_group_i2c_irq_handler+0x288>)
  40716e:	4798      	blx	r3
	        		chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (xfer_bytes - 1));
  407170:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  407172:	3b01      	subs	r3, #1
  407174:	b29b      	uxth	r3, r3
  407176:	461a      	mov	r2, r3
  407178:	2107      	movs	r1, #7
  40717a:	69b8      	ldr	r0, [r7, #24]
  40717c:	4b57      	ldr	r3, [pc, #348]	; (4072dc <chdrv_group_i2c_irq_handler+0x288>)
  40717e:	4798      	blx	r3
	        		(void) chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
  407180:	f107 030c 	add.w	r3, r7, #12
  407184:	2202      	movs	r2, #2
  407186:	4619      	mov	r1, r3
  407188:	69b8      	ldr	r0, [r7, #24]
  40718a:	4b55      	ldr	r3, [pc, #340]	; (4072e0 <chdrv_group_i2c_irq_handler+0x28c>)
  40718c:	4798      	blx	r3
	        		(void) chdrv_prog_i2c_read_nb(dev_ptr, (t->databuf + (t->xfer_num * CH_PROG_XFER_SIZE)), xfer_bytes);
  40718e:	69fb      	ldr	r3, [r7, #28]
  407190:	68db      	ldr	r3, [r3, #12]
  407192:	69fa      	ldr	r2, [r7, #28]
  407194:	7892      	ldrb	r2, [r2, #2]
  407196:	0212      	lsls	r2, r2, #8
  407198:	4413      	add	r3, r2
  40719a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  40719c:	4619      	mov	r1, r3
  40719e:	69b8      	ldr	r0, [r7, #24]
  4071a0:	4b50      	ldr	r3, [pc, #320]	; (4072e4 <chdrv_group_i2c_irq_handler+0x290>)
  4071a2:	4798      	blx	r3
				}

	    		t->xfer_num++;			// count this transfer
  4071a4:	69fb      	ldr	r3, [r7, #28]
  4071a6:	789b      	ldrb	r3, [r3, #2]
  4071a8:	3301      	adds	r3, #1
  4071aa:	b2da      	uxtb	r2, r3
  4071ac:	69fb      	ldr	r3, [r7, #28]
  4071ae:	709a      	strb	r2, [r3, #2]

	    		/* if this is the last transfer in this transaction, advance queue index */
	    		if (t->xfer_num >= total_xfers) {
  4071b0:	69fb      	ldr	r3, [r7, #28]
  4071b2:	789b      	ldrb	r3, [r3, #2]
  4071b4:	7dfa      	ldrb	r2, [r7, #23]
  4071b6:	429a      	cmp	r2, r3
  4071b8:	d831      	bhi.n	40721e <chdrv_group_i2c_irq_handler+0x1ca>
					(q->idx)++;
  4071ba:	6a3b      	ldr	r3, [r7, #32]
  4071bc:	78db      	ldrb	r3, [r3, #3]
  4071be:	3301      	adds	r3, #1
  4071c0:	b2da      	uxtb	r2, r3
  4071c2:	6a3b      	ldr	r3, [r7, #32]
  4071c4:	70da      	strb	r2, [r3, #3]
  4071c6:	e02a      	b.n	40721e <chdrv_group_i2c_irq_handler+0x1ca>

			}

		} else {
			/* Standard transfer */
			if (t->rd_wrb) {
  4071c8:	69fb      	ldr	r3, [r7, #28]
  4071ca:	785b      	ldrb	r3, [r3, #1]
  4071cc:	2b00      	cmp	r3, #0
  4071ce:	d010      	beq.n	4071f2 <chdrv_group_i2c_irq_handler+0x19e>
				(q->idx)++;
  4071d0:	6a3b      	ldr	r3, [r7, #32]
  4071d2:	78db      	ldrb	r3, [r3, #3]
  4071d4:	3301      	adds	r3, #1
  4071d6:	b2da      	uxtb	r2, r3
  4071d8:	6a3b      	ldr	r3, [r7, #32]
  4071da:	70da      	strb	r2, [r3, #3]
				chbsp_i2c_mem_read_nb(t->dev_ptr, t->addr, t->databuf, t->nbytes);
  4071dc:	69fb      	ldr	r3, [r7, #28]
  4071de:	6898      	ldr	r0, [r3, #8]
  4071e0:	69fb      	ldr	r3, [r7, #28]
  4071e2:	8899      	ldrh	r1, [r3, #4]
  4071e4:	69fb      	ldr	r3, [r7, #28]
  4071e6:	68da      	ldr	r2, [r3, #12]
  4071e8:	69fb      	ldr	r3, [r7, #28]
  4071ea:	88db      	ldrh	r3, [r3, #6]
  4071ec:	4c3e      	ldr	r4, [pc, #248]	; (4072e8 <chdrv_group_i2c_irq_handler+0x294>)
  4071ee:	47a0      	blx	r4
  4071f0:	e00f      	b.n	407212 <chdrv_group_i2c_irq_handler+0x1be>

			} else {
				(q->idx)++;
  4071f2:	6a3b      	ldr	r3, [r7, #32]
  4071f4:	78db      	ldrb	r3, [r3, #3]
  4071f6:	3301      	adds	r3, #1
  4071f8:	b2da      	uxtb	r2, r3
  4071fa:	6a3b      	ldr	r3, [r7, #32]
  4071fc:	70da      	strb	r2, [r3, #3]
				chbsp_i2c_mem_write_nb(t->dev_ptr, t->addr, t->databuf, t->nbytes);
  4071fe:	69fb      	ldr	r3, [r7, #28]
  407200:	6898      	ldr	r0, [r3, #8]
  407202:	69fb      	ldr	r3, [r7, #28]
  407204:	8899      	ldrh	r1, [r3, #4]
  407206:	69fb      	ldr	r3, [r7, #28]
  407208:	68da      	ldr	r2, [r3, #12]
  40720a:	69fb      	ldr	r3, [r7, #28]
  40720c:	88db      	ldrh	r3, [r3, #6]
  40720e:	4c37      	ldr	r4, [pc, #220]	; (4072ec <chdrv_group_i2c_irq_handler+0x298>)
  407210:	47a0      	blx	r4
			}
    		t->xfer_num++;			// count this transfer
  407212:	69fb      	ldr	r3, [r7, #28]
  407214:	789b      	ldrb	r3, [r3, #2]
  407216:	3301      	adds	r3, #1
  407218:	b2da      	uxtb	r2, r3
  40721a:	69fb      	ldr	r3, [r7, #28]
  40721c:	709a      	strb	r2, [r3, #2]
		}
		transactions_pending = 1;
  40721e:	2301      	movs	r3, #1
  407220:	62bb      	str	r3, [r7, #40]	; 0x28
  407222:	e040      	b.n	4072a6 <chdrv_group_i2c_irq_handler+0x252>
	} else {

		if (q->idx >= 1) {
  407224:	6a3b      	ldr	r3, [r7, #32]
  407226:	78db      	ldrb	r3, [r3, #3]
  407228:	2b00      	cmp	r3, #0
  40722a:	d017      	beq.n	40725c <chdrv_group_i2c_irq_handler+0x208>
			dev_ptr = q->transaction[(q->idx - 1)].dev_ptr;		// get dev_ptr for previous completed transaction
  40722c:	6a3b      	ldr	r3, [r7, #32]
  40722e:	78db      	ldrb	r3, [r3, #3]
  407230:	3b01      	subs	r3, #1
  407232:	6a3a      	ldr	r2, [r7, #32]
  407234:	011b      	lsls	r3, r3, #4
  407236:	4413      	add	r3, r2
  407238:	330c      	adds	r3, #12
  40723a:	681b      	ldr	r3, [r3, #0]
  40723c:	61bb      	str	r3, [r7, #24]
			if (dev_ptr != NULL) {
  40723e:	69bb      	ldr	r3, [r7, #24]
  407240:	2b00      	cmp	r3, #0
  407242:	d00b      	beq.n	40725c <chdrv_group_i2c_irq_handler+0x208>
			    chbsp_program_disable(dev_ptr);					// de-assert PROG pin for completed transaction
  407244:	69b8      	ldr	r0, [r7, #24]
  407246:	4b20      	ldr	r3, [pc, #128]	; (4072c8 <chdrv_group_i2c_irq_handler+0x274>)
  407248:	4798      	blx	r3

					if (grp_ptr->i2c_drv_flags & I2C_DRV_FLAG_RESET_AFTER_NB) {
  40724a:	687b      	ldr	r3, [r7, #4]
  40724c:	889b      	ldrh	r3, [r3, #4]
  40724e:	f003 0301 	and.w	r3, r3, #1
  407252:	2b00      	cmp	r3, #0
  407254:	d002      	beq.n	40725c <chdrv_group_i2c_irq_handler+0x208>
			    		chbsp_i2c_reset(dev_ptr);				// reset I2C bus if BSP requires it
  407256:	69b8      	ldr	r0, [r7, #24]
  407258:	4b1d      	ldr	r3, [pc, #116]	; (4072d0 <chdrv_group_i2c_irq_handler+0x27c>)
  40725a:	4798      	blx	r3
					}
			}
		}

		q->len = 0;
  40725c:	6a3b      	ldr	r3, [r7, #32]
  40725e:	2200      	movs	r2, #0
  407260:	709a      	strb	r2, [r3, #2]
		q->idx = 0;
  407262:	6a3b      	ldr	r3, [r7, #32]
  407264:	2200      	movs	r2, #0
  407266:	70da      	strb	r2, [r3, #3]
		q->running = 0;
  407268:	6a3b      	ldr	r3, [r7, #32]
  40726a:	2200      	movs	r2, #0
  40726c:	705a      	strb	r2, [r3, #1]
		transactions_pending = 0;
  40726e:	2300      	movs	r3, #0
  407270:	62bb      	str	r3, [r7, #40]	; 0x28

		for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
  407272:	2300      	movs	r3, #0
  407274:	62fb      	str	r3, [r7, #44]	; 0x2c
  407276:	e010      	b.n	40729a <chdrv_group_i2c_irq_handler+0x246>
			if (grp_ptr->i2c_queue[i].len) {
  407278:	6879      	ldr	r1, [r7, #4]
  40727a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40727c:	4613      	mov	r3, r2
  40727e:	011b      	lsls	r3, r3, #4
  407280:	4413      	add	r3, r2
  407282:	009b      	lsls	r3, r3, #2
  407284:	440b      	add	r3, r1
  407286:	332e      	adds	r3, #46	; 0x2e
  407288:	781b      	ldrb	r3, [r3, #0]
  40728a:	2b00      	cmp	r3, #0
  40728c:	d002      	beq.n	407294 <chdrv_group_i2c_irq_handler+0x240>
				transactions_pending = 1;
  40728e:	2301      	movs	r3, #1
  407290:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
  407292:	e008      	b.n	4072a6 <chdrv_group_i2c_irq_handler+0x252>
		for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
  407294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  407296:	3301      	adds	r3, #1
  407298:	62fb      	str	r3, [r7, #44]	; 0x2c
  40729a:	687b      	ldr	r3, [r7, #4]
  40729c:	785b      	ldrb	r3, [r3, #1]
  40729e:	461a      	mov	r2, r3
  4072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4072a2:	429a      	cmp	r2, r3
  4072a4:	dce8      	bgt.n	407278 <chdrv_group_i2c_irq_handler+0x224>
			}
		}
	}

	if (!transactions_pending) {
  4072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4072a8:	2b00      	cmp	r3, #0
  4072aa:	d108      	bne.n	4072be <chdrv_group_i2c_irq_handler+0x26a>
		ch_io_complete_callback_t func_ptr = grp_ptr->io_complete_callback;
  4072ac:	687b      	ldr	r3, [r7, #4]
  4072ae:	695b      	ldr	r3, [r3, #20]
  4072b0:	613b      	str	r3, [r7, #16]

		if (func_ptr != NULL) {
  4072b2:	693b      	ldr	r3, [r7, #16]
  4072b4:	2b00      	cmp	r3, #0
  4072b6:	d002      	beq.n	4072be <chdrv_group_i2c_irq_handler+0x26a>
			(*func_ptr)(grp_ptr);
  4072b8:	693b      	ldr	r3, [r7, #16]
  4072ba:	6878      	ldr	r0, [r7, #4]
  4072bc:	4798      	blx	r3
		}
	}

}
  4072be:	bf00      	nop
  4072c0:	3734      	adds	r7, #52	; 0x34
  4072c2:	46bd      	mov	sp, r7
  4072c4:	bd90      	pop	{r4, r7, pc}
  4072c6:	bf00      	nop
  4072c8:	00401fd5 	.word	0x00401fd5
  4072cc:	00405703 	.word	0x00405703
  4072d0:	00402b01 	.word	0x00402b01
  4072d4:	00401f9d 	.word	0x00401f9d
  4072d8:	0040cc94 	.word	0x0040cc94
  4072dc:	004074b1 	.word	0x004074b1
  4072e0:	00406cfd 	.word	0x00406cfd
  4072e4:	00406d6d 	.word	0x00406d6d
  4072e8:	004029a5 	.word	0x004029a5
  4072ec:	00402761 	.word	0x00402761

004072f0 <chdrv_wait_for_lock>:
 * \return 0 if startup sequence finished, non-zero if startup sequence timed out or sensor is not connected
 *
 * After the sensor is programmed, it executes an internal start-up and self-test sequence. This function waits the
 * specified time in milliseconds for the sensor to finish this sequence.
 */
int chdrv_wait_for_lock(ch_dev_t *dev_ptr, uint16_t timeout_ms) {
  4072f0:	b580      	push	{r7, lr}
  4072f2:	b084      	sub	sp, #16
  4072f4:	af00      	add	r7, sp, #0
  4072f6:	6078      	str	r0, [r7, #4]
  4072f8:	460b      	mov	r3, r1
  4072fa:	807b      	strh	r3, [r7, #2]
	uint32_t start_time = chbsp_timestamp_ms();
  4072fc:	4b14      	ldr	r3, [pc, #80]	; (407350 <chdrv_wait_for_lock+0x60>)
  4072fe:	4798      	blx	r3
  407300:	60b8      	str	r0, [r7, #8]
	int ch_err = !(dev_ptr->sensor_connected);
  407302:	687b      	ldr	r3, [r7, #4]
  407304:	7fdb      	ldrb	r3, [r3, #31]
  407306:	2b00      	cmp	r3, #0
  407308:	bf0c      	ite	eq
  40730a:	2301      	moveq	r3, #1
  40730c:	2300      	movne	r3, #0
  40730e:	b2db      	uxtb	r3, r3
  407310:	60fb      	str	r3, [r7, #12]

	while (!ch_err && !(dev_ptr->get_locked_state(dev_ptr))) {
  407312:	e00e      	b.n	407332 <chdrv_wait_for_lock+0x42>
		chbsp_delay_ms(10);
  407314:	200a      	movs	r0, #10
  407316:	4b0f      	ldr	r3, [pc, #60]	; (407354 <chdrv_wait_for_lock+0x64>)
  407318:	4798      	blx	r3
		ch_err = ((chbsp_timestamp_ms() - start_time) > timeout_ms);
  40731a:	4b0d      	ldr	r3, [pc, #52]	; (407350 <chdrv_wait_for_lock+0x60>)
  40731c:	4798      	blx	r3
  40731e:	4602      	mov	r2, r0
  407320:	68bb      	ldr	r3, [r7, #8]
  407322:	1ad2      	subs	r2, r2, r3
  407324:	887b      	ldrh	r3, [r7, #2]
  407326:	429a      	cmp	r2, r3
  407328:	bf8c      	ite	hi
  40732a:	2301      	movhi	r3, #1
  40732c:	2300      	movls	r3, #0
  40732e:	b2db      	uxtb	r3, r3
  407330:	60fb      	str	r3, [r7, #12]
	while (!ch_err && !(dev_ptr->get_locked_state(dev_ptr))) {
  407332:	68fb      	ldr	r3, [r7, #12]
  407334:	2b00      	cmp	r3, #0
  407336:	d106      	bne.n	407346 <chdrv_wait_for_lock+0x56>
  407338:	687b      	ldr	r3, [r7, #4]
  40733a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40733c:	6878      	ldr	r0, [r7, #4]
  40733e:	4798      	blx	r3
  407340:	4603      	mov	r3, r0
  407342:	2b00      	cmp	r3, #0
  407344:	d0e6      	beq.n	407314 <chdrv_wait_for_lock+0x24>
		snprintf(cbuf, sizeof(cbuf), "Sensor %hhu initialization timed out or missing\n", dev_ptr->io_index);
		chbsp_print_str(cbuf);
	}
#endif

	return ch_err;
  407346:	68fb      	ldr	r3, [r7, #12]
}
  407348:	4618      	mov	r0, r3
  40734a:	3710      	adds	r7, #16
  40734c:	46bd      	mov	sp, r7
  40734e:	bd80      	pop	{r7, pc}
  407350:	00402e71 	.word	0x00402e71
  407354:	00402581 	.word	0x00402581

00407358 <chdrv_group_wait_for_lock>:
 *
 * After each sensor is programmed, it executes an internal start-up and self-test sequence. This 
 * function waits for all sensor devices to finish this sequence.  For each device, the maximum 
 * time to wait is \a CHDRV_FREQLOCK_TIMEOUT_MS milliseconds.
 */
int chdrv_group_wait_for_lock(ch_group_t *grp_ptr) {
  407358:	b580      	push	{r7, lr}
  40735a:	b086      	sub	sp, #24
  40735c:	af00      	add	r7, sp, #0
  40735e:	6078      	str	r0, [r7, #4]
	int ch_err = 0;
  407360:	2300      	movs	r3, #0
  407362:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
  407364:	2300      	movs	r3, #0
  407366:	74fb      	strb	r3, [r7, #19]
  407368:	e014      	b.n	407394 <chdrv_group_wait_for_lock+0x3c>
		ch_dev_t *dev_ptr = grp_ptr->device[i];
  40736a:	7cfa      	ldrb	r2, [r7, #19]
  40736c:	687b      	ldr	r3, [r7, #4]
  40736e:	3206      	adds	r2, #6
  407370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407374:	60fb      	str	r3, [r7, #12]

		if (dev_ptr->sensor_connected) {
  407376:	68fb      	ldr	r3, [r7, #12]
  407378:	7fdb      	ldrb	r3, [r3, #31]
  40737a:	2b00      	cmp	r3, #0
  40737c:	d007      	beq.n	40738e <chdrv_group_wait_for_lock+0x36>
			ch_err |= chdrv_wait_for_lock(dev_ptr, CHDRV_FREQLOCK_TIMEOUT_MS);
  40737e:	2164      	movs	r1, #100	; 0x64
  407380:	68f8      	ldr	r0, [r7, #12]
  407382:	4b09      	ldr	r3, [pc, #36]	; (4073a8 <chdrv_group_wait_for_lock+0x50>)
  407384:	4798      	blx	r3
  407386:	4602      	mov	r2, r0
  407388:	697b      	ldr	r3, [r7, #20]
  40738a:	4313      	orrs	r3, r2
  40738c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
  40738e:	7cfb      	ldrb	r3, [r7, #19]
  407390:	3301      	adds	r3, #1
  407392:	74fb      	strb	r3, [r7, #19]
  407394:	687b      	ldr	r3, [r7, #4]
  407396:	781b      	ldrb	r3, [r3, #0]
  407398:	7cfa      	ldrb	r2, [r7, #19]
  40739a:	429a      	cmp	r2, r3
  40739c:	d3e5      	bcc.n	40736a <chdrv_group_wait_for_lock+0x12>
		}
	}
	return ch_err;
  40739e:	697b      	ldr	r3, [r7, #20]
}
  4073a0:	4618      	mov	r0, r3
  4073a2:	3718      	adds	r7, #24
  4073a4:	46bd      	mov	sp, r7
  4073a6:	bd80      	pop	{r7, pc}
  4073a8:	004072f1 	.word	0x004072f1

004073ac <chdrv_group_hw_trigger>:
 * \return 0 if success, non-zero if \a grp_ptr pointer is invalid
 *
 * This function starts a triggered measurement on each sensor in a group, by briefly asserting the INT line to each device.  
 * Each sensor must have already been placed in hardware triggered mode before this function is called.
 */
int chdrv_group_hw_trigger(ch_group_t *grp_ptr) {
  4073ac:	b580      	push	{r7, lr}
  4073ae:	b086      	sub	sp, #24
  4073b0:	af00      	add	r7, sp, #0
  4073b2:	6078      	str	r0, [r7, #4]
	int ch_err = !grp_ptr;
  4073b4:	687b      	ldr	r3, [r7, #4]
  4073b6:	2b00      	cmp	r3, #0
  4073b8:	bf0c      	ite	eq
  4073ba:	2301      	moveq	r3, #1
  4073bc:	2300      	movne	r3, #0
  4073be:	b2db      	uxtb	r3, r3
  4073c0:	613b      	str	r3, [r7, #16]
	ch_dev_t *dev_ptr;
	uint8_t dev_num;

	if (!ch_err) {
  4073c2:	693b      	ldr	r3, [r7, #16]
  4073c4:	2b00      	cmp	r3, #0
  4073c6:	d15e      	bne.n	407486 <chdrv_group_hw_trigger+0xda>
		//Disable pin interrupt before triggering pulse
		chbsp_group_io_interrupt_disable(grp_ptr);
  4073c8:	6878      	ldr	r0, [r7, #4]
  4073ca:	4b31      	ldr	r3, [pc, #196]	; (407490 <chdrv_group_hw_trigger+0xe4>)
  4073cc:	4798      	blx	r3

		// Set INT pin as output
		chbsp_group_set_io_dir_out(grp_ptr);
  4073ce:	6878      	ldr	r0, [r7, #4]
  4073d0:	4b30      	ldr	r3, [pc, #192]	; (407494 <chdrv_group_hw_trigger+0xe8>)
  4073d2:	4798      	blx	r3

		if (grp_ptr->pretrig_delay_us == 0) {
  4073d4:	687b      	ldr	r3, [r7, #4]
  4073d6:	891b      	ldrh	r3, [r3, #8]
  4073d8:	2b00      	cmp	r3, #0
  4073da:	d109      	bne.n	4073f0 <chdrv_group_hw_trigger+0x44>
			/* No pre-trigger delay - trigger rx-only and tx/rx nodes together */
			chbsp_group_io_set(grp_ptr);
  4073dc:	6878      	ldr	r0, [r7, #4]
  4073de:	4b2e      	ldr	r3, [pc, #184]	; (407498 <chdrv_group_hw_trigger+0xec>)
  4073e0:	4798      	blx	r3
			chbsp_delay_us(CHDRV_TRIGGER_PULSE_US);
  4073e2:	2005      	movs	r0, #5
  4073e4:	4b2d      	ldr	r3, [pc, #180]	; (40749c <chdrv_group_hw_trigger+0xf0>)
  4073e6:	4798      	blx	r3
			chbsp_group_io_clear(grp_ptr);
  4073e8:	6878      	ldr	r0, [r7, #4]
  4073ea:	4b2d      	ldr	r3, [pc, #180]	; (4074a0 <chdrv_group_hw_trigger+0xf4>)
  4073ec:	4798      	blx	r3
  4073ee:	e041      	b.n	407474 <chdrv_group_hw_trigger+0xc8>

		} else {
			/* Pre-trigger rx-only nodes, delay, then trigger tx/rx nodes */

			// Pre-trigger any rx-only nodes
			for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  4073f0:	2300      	movs	r3, #0
  4073f2:	75fb      	strb	r3, [r7, #23]
  4073f4:	e00f      	b.n	407416 <chdrv_group_hw_trigger+0x6a>
				dev_ptr = grp_ptr->device[dev_num];
  4073f6:	7dfa      	ldrb	r2, [r7, #23]
  4073f8:	687b      	ldr	r3, [r7, #4]
  4073fa:	3206      	adds	r2, #6
  4073fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407400:	60fb      	str	r3, [r7, #12]

				if (dev_ptr->mode == CH_MODE_TRIGGERED_RX_ONLY) {	// if rx-only mode
  407402:	68fb      	ldr	r3, [r7, #12]
  407404:	791b      	ldrb	r3, [r3, #4]
  407406:	2b20      	cmp	r3, #32
  407408:	d102      	bne.n	407410 <chdrv_group_hw_trigger+0x64>
					chbsp_io_set(dev_ptr);							//  trigger this sensor
  40740a:	68f8      	ldr	r0, [r7, #12]
  40740c:	4b25      	ldr	r3, [pc, #148]	; (4074a4 <chdrv_group_hw_trigger+0xf8>)
  40740e:	4798      	blx	r3
			for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  407410:	7dfb      	ldrb	r3, [r7, #23]
  407412:	3301      	adds	r3, #1
  407414:	75fb      	strb	r3, [r7, #23]
  407416:	687b      	ldr	r3, [r7, #4]
  407418:	781b      	ldrb	r3, [r3, #0]
  40741a:	7dfa      	ldrb	r2, [r7, #23]
  40741c:	429a      	cmp	r2, r3
  40741e:	d3ea      	bcc.n	4073f6 <chdrv_group_hw_trigger+0x4a>
				}
			}

			chbsp_delay_us(CHDRV_TRIGGER_PULSE_US);
  407420:	2005      	movs	r0, #5
  407422:	4b1e      	ldr	r3, [pc, #120]	; (40749c <chdrv_group_hw_trigger+0xf0>)
  407424:	4798      	blx	r3
			chbsp_group_io_clear(grp_ptr);
  407426:	6878      	ldr	r0, [r7, #4]
  407428:	4b1d      	ldr	r3, [pc, #116]	; (4074a0 <chdrv_group_hw_trigger+0xf4>)
  40742a:	4798      	blx	r3

			// Delay before triggering tx/rx node(s)
			chbsp_delay_us(grp_ptr->pretrig_delay_us - (CHDRV_TRIGGER_PULSE_US + CHDRV_DELAY_OVERHEAD_US)); 
  40742c:	687b      	ldr	r3, [r7, #4]
  40742e:	891b      	ldrh	r3, [r3, #8]
  407430:	3b11      	subs	r3, #17
  407432:	4618      	mov	r0, r3
  407434:	4b19      	ldr	r3, [pc, #100]	; (40749c <chdrv_group_hw_trigger+0xf0>)
  407436:	4798      	blx	r3

			// Trigger any tx/rx nodes
			for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  407438:	2300      	movs	r3, #0
  40743a:	75fb      	strb	r3, [r7, #23]
  40743c:	e00f      	b.n	40745e <chdrv_group_hw_trigger+0xb2>
				dev_ptr = grp_ptr->device[dev_num];
  40743e:	7dfa      	ldrb	r2, [r7, #23]
  407440:	687b      	ldr	r3, [r7, #4]
  407442:	3206      	adds	r2, #6
  407444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407448:	60fb      	str	r3, [r7, #12]

				if (dev_ptr->mode == CH_MODE_TRIGGERED_TX_RX) {		// if tx/rx mode
  40744a:	68fb      	ldr	r3, [r7, #12]
  40744c:	791b      	ldrb	r3, [r3, #4]
  40744e:	2b10      	cmp	r3, #16
  407450:	d102      	bne.n	407458 <chdrv_group_hw_trigger+0xac>
					chbsp_io_set(dev_ptr);							//  trigger this sensor
  407452:	68f8      	ldr	r0, [r7, #12]
  407454:	4b13      	ldr	r3, [pc, #76]	; (4074a4 <chdrv_group_hw_trigger+0xf8>)
  407456:	4798      	blx	r3
			for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  407458:	7dfb      	ldrb	r3, [r7, #23]
  40745a:	3301      	adds	r3, #1
  40745c:	75fb      	strb	r3, [r7, #23]
  40745e:	687b      	ldr	r3, [r7, #4]
  407460:	781b      	ldrb	r3, [r3, #0]
  407462:	7dfa      	ldrb	r2, [r7, #23]
  407464:	429a      	cmp	r2, r3
  407466:	d3ea      	bcc.n	40743e <chdrv_group_hw_trigger+0x92>
				}
			}

			chbsp_delay_us(CHDRV_TRIGGER_PULSE_US);
  407468:	2005      	movs	r0, #5
  40746a:	4b0c      	ldr	r3, [pc, #48]	; (40749c <chdrv_group_hw_trigger+0xf0>)
  40746c:	4798      	blx	r3
			chbsp_group_io_clear(grp_ptr);
  40746e:	6878      	ldr	r0, [r7, #4]
  407470:	4b0b      	ldr	r3, [pc, #44]	; (4074a0 <chdrv_group_hw_trigger+0xf4>)
  407472:	4798      	blx	r3
		}

		// Delay a bit before re-enabling pin interrupt to avoid possibly triggering on falling-edge noise
		chbsp_delay_us(10);
  407474:	200a      	movs	r0, #10
  407476:	4b09      	ldr	r3, [pc, #36]	; (40749c <chdrv_group_hw_trigger+0xf0>)
  407478:	4798      	blx	r3

		chbsp_group_set_io_dir_in(grp_ptr);
  40747a:	6878      	ldr	r0, [r7, #4]
  40747c:	4b0a      	ldr	r3, [pc, #40]	; (4074a8 <chdrv_group_hw_trigger+0xfc>)
  40747e:	4798      	blx	r3
		chbsp_group_io_interrupt_enable(grp_ptr);
  407480:	6878      	ldr	r0, [r7, #4]
  407482:	4b0a      	ldr	r3, [pc, #40]	; (4074ac <chdrv_group_hw_trigger+0x100>)
  407484:	4798      	blx	r3
	}
	return ch_err;
  407486:	693b      	ldr	r3, [r7, #16]
}
  407488:	4618      	mov	r0, r3
  40748a:	3718      	adds	r7, #24
  40748c:	46bd      	mov	sp, r7
  40748e:	bd80      	pop	{r7, pc}
  407490:	0040241d 	.word	0x0040241d
  407494:	00402045 	.word	0x00402045
  407498:	004022f1 	.word	0x004022f1
  40749c:	004024d9 	.word	0x004024d9
  4074a0:	00402271 	.word	0x00402271
  4074a4:	004024a5 	.word	0x004024a5
  4074a8:	004020c5 	.word	0x004020c5
  4074ac:	00402371 	.word	0x00402371

004074b0 <chdrv_prog_write>:
 *
 * \return 0 if write to sensor succeeded, non-zero otherwise
 *
 * This local function writes a value to a sensor programming register.
 */
int chdrv_prog_write(ch_dev_t *dev_ptr, uint8_t reg_addr, uint16_t data) {
  4074b0:	b580      	push	{r7, lr}
  4074b2:	b084      	sub	sp, #16
  4074b4:	af00      	add	r7, sp, #0
  4074b6:	6078      	str	r0, [r7, #4]
  4074b8:	460b      	mov	r3, r1
  4074ba:	70fb      	strb	r3, [r7, #3]
  4074bc:	4613      	mov	r3, r2
  4074be:	803b      	strh	r3, [r7, #0]
	/* Set register address write bit */
	reg_addr |= 0x80;
  4074c0:	78fb      	ldrb	r3, [r7, #3]
  4074c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4074c6:	70fb      	strb	r3, [r7, #3]
	
	/* Write the register address, followed by the value to be written */
	uint8_t message[] = { reg_addr, (uint8_t) data, (uint8_t) (data >> 8) };
  4074c8:	78fb      	ldrb	r3, [r7, #3]
  4074ca:	733b      	strb	r3, [r7, #12]
  4074cc:	883b      	ldrh	r3, [r7, #0]
  4074ce:	b2db      	uxtb	r3, r3
  4074d0:	737b      	strb	r3, [r7, #13]
  4074d2:	883b      	ldrh	r3, [r7, #0]
  4074d4:	0a1b      	lsrs	r3, r3, #8
  4074d6:	b29b      	uxth	r3, r3
  4074d8:	b2db      	uxtb	r3, r3
  4074da:	73bb      	strb	r3, [r7, #14]

	/* For the 2-byte registers, we also need to also write MSB after the LSB */
	return chdrv_prog_i2c_write(dev_ptr, message, (1 + CH_PROG_SIZEOF(reg_addr)));
  4074dc:	78fb      	ldrb	r3, [r7, #3]
  4074de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4074e2:	2b00      	cmp	r3, #0
  4074e4:	d001      	beq.n	4074ea <chdrv_prog_write+0x3a>
  4074e6:	2202      	movs	r2, #2
  4074e8:	e000      	b.n	4074ec <chdrv_prog_write+0x3c>
  4074ea:	2203      	movs	r2, #3
  4074ec:	f107 030c 	add.w	r3, r7, #12
  4074f0:	4619      	mov	r1, r3
  4074f2:	6878      	ldr	r0, [r7, #4]
  4074f4:	4b03      	ldr	r3, [pc, #12]	; (407504 <chdrv_prog_write+0x54>)
  4074f6:	4798      	blx	r3
  4074f8:	4603      	mov	r3, r0
}
  4074fa:	4618      	mov	r0, r3
  4074fc:	3710      	adds	r7, #16
  4074fe:	46bd      	mov	sp, r7
  407500:	bd80      	pop	{r7, pc}
  407502:	bf00      	nop
  407504:	00406cfd 	.word	0x00406cfd

00407508 <chdrv_prog_mem_write>:
 * \return 0 if write to sensor succeeded, non-zero otherwise
 *
 * This function writes to sensor memory using the low-level programming interface.  The type 
 * of write is automatically determined based on data length and target address alignment.
 */
int chdrv_prog_mem_write(ch_dev_t *dev_ptr, uint16_t addr, uint8_t *message, uint16_t nbytes) {
  407508:	b580      	push	{r7, lr}
  40750a:	b088      	sub	sp, #32
  40750c:	af00      	add	r7, sp, #0
  40750e:	60f8      	str	r0, [r7, #12]
  407510:	607a      	str	r2, [r7, #4]
  407512:	461a      	mov	r2, r3
  407514:	460b      	mov	r3, r1
  407516:	817b      	strh	r3, [r7, #10]
  407518:	4613      	mov	r3, r2
  40751a:	813b      	strh	r3, [r7, #8]
	int ch_err = (nbytes == 0);
  40751c:	893b      	ldrh	r3, [r7, #8]
  40751e:	2b00      	cmp	r3, #0
  407520:	bf0c      	ite	eq
  407522:	2301      	moveq	r3, #1
  407524:	2300      	movne	r3, #0
  407526:	b2db      	uxtb	r3, r3
  407528:	61fb      	str	r3, [r7, #28]

	if (!ch_err) {
  40752a:	69fb      	ldr	r3, [r7, #28]
  40752c:	2b00      	cmp	r3, #0
  40752e:	d106      	bne.n	40753e <chdrv_prog_mem_write+0x36>
		ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR, addr);
  407530:	897b      	ldrh	r3, [r7, #10]
  407532:	461a      	mov	r2, r3
  407534:	2105      	movs	r1, #5
  407536:	68f8      	ldr	r0, [r7, #12]
  407538:	4b30      	ldr	r3, [pc, #192]	; (4075fc <chdrv_prog_mem_write+0xf4>)
  40753a:	4798      	blx	r3
  40753c:	61f8      	str	r0, [r7, #28]
	}

	if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
  40753e:	893b      	ldrh	r3, [r7, #8]
  407540:	2b01      	cmp	r3, #1
  407542:	d007      	beq.n	407554 <chdrv_prog_mem_write+0x4c>
  407544:	893b      	ldrh	r3, [r7, #8]
  407546:	2b02      	cmp	r3, #2
  407548:	d12c      	bne.n	4075a4 <chdrv_prog_mem_write+0x9c>
  40754a:	897b      	ldrh	r3, [r7, #10]
  40754c:	f003 0301 	and.w	r3, r3, #1
  407550:	2b00      	cmp	r3, #0
  407552:	d127      	bne.n	4075a4 <chdrv_prog_mem_write+0x9c>
		uint16_t data = message[0] | (message[1] << 8);
  407554:	687b      	ldr	r3, [r7, #4]
  407556:	781b      	ldrb	r3, [r3, #0]
  407558:	b21a      	sxth	r2, r3
  40755a:	687b      	ldr	r3, [r7, #4]
  40755c:	3301      	adds	r3, #1
  40755e:	781b      	ldrb	r3, [r3, #0]
  407560:	021b      	lsls	r3, r3, #8
  407562:	b21b      	sxth	r3, r3
  407564:	4313      	orrs	r3, r2
  407566:	b21b      	sxth	r3, r3
  407568:	837b      	strh	r3, [r7, #26]
		if (!ch_err) {
  40756a:	69fb      	ldr	r3, [r7, #28]
  40756c:	2b00      	cmp	r3, #0
  40756e:	d106      	bne.n	40757e <chdrv_prog_mem_write+0x76>
			ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_DATA, data);
  407570:	8b7b      	ldrh	r3, [r7, #26]
  407572:	461a      	mov	r2, r3
  407574:	2106      	movs	r1, #6
  407576:	68f8      	ldr	r0, [r7, #12]
  407578:	4b20      	ldr	r3, [pc, #128]	; (4075fc <chdrv_prog_mem_write+0xf4>)
  40757a:	4798      	blx	r3
  40757c:	61f8      	str	r0, [r7, #28]
		}
		if (!ch_err) {
  40757e:	69fb      	ldr	r3, [r7, #28]
  407580:	2b00      	cmp	r3, #0
  407582:	d134      	bne.n	4075ee <chdrv_prog_mem_write+0xe6>
			uint8_t opcode = (0x03 | ((nbytes == 1) ? 0x08 : 0x00));			// XXX need define
  407584:	893b      	ldrh	r3, [r7, #8]
  407586:	2b01      	cmp	r3, #1
  407588:	d101      	bne.n	40758e <chdrv_prog_mem_write+0x86>
  40758a:	230b      	movs	r3, #11
  40758c:	e000      	b.n	407590 <chdrv_prog_mem_write+0x88>
  40758e:	2303      	movs	r3, #3
  407590:	767b      	strb	r3, [r7, #25]

			ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CTL, opcode);
  407592:	7e7b      	ldrb	r3, [r7, #25]
  407594:	b29b      	uxth	r3, r3
  407596:	461a      	mov	r2, r3
  407598:	2144      	movs	r1, #68	; 0x44
  40759a:	68f8      	ldr	r0, [r7, #12]
  40759c:	4b17      	ldr	r3, [pc, #92]	; (4075fc <chdrv_prog_mem_write+0xf4>)
  40759e:	4798      	blx	r3
  4075a0:	61f8      	str	r0, [r7, #28]
	if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
  4075a2:	e024      	b.n	4075ee <chdrv_prog_mem_write+0xe6>
		}
	} else {
		const uint8_t burst_hdr[2] = {0xC4, 0x0B};			// XXX need define
  4075a4:	4b16      	ldr	r3, [pc, #88]	; (407600 <chdrv_prog_mem_write+0xf8>)
  4075a6:	881b      	ldrh	r3, [r3, #0]
  4075a8:	82bb      	strh	r3, [r7, #20]

		if (!ch_err) {
  4075aa:	69fb      	ldr	r3, [r7, #28]
  4075ac:	2b00      	cmp	r3, #0
  4075ae:	d108      	bne.n	4075c2 <chdrv_prog_mem_write+0xba>
			ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (nbytes - 1));
  4075b0:	893b      	ldrh	r3, [r7, #8]
  4075b2:	3b01      	subs	r3, #1
  4075b4:	b29b      	uxth	r3, r3
  4075b6:	461a      	mov	r2, r3
  4075b8:	2107      	movs	r1, #7
  4075ba:	68f8      	ldr	r0, [r7, #12]
  4075bc:	4b0f      	ldr	r3, [pc, #60]	; (4075fc <chdrv_prog_mem_write+0xf4>)
  4075be:	4798      	blx	r3
  4075c0:	61f8      	str	r0, [r7, #28]
		}
		if (!ch_err) {
  4075c2:	69fb      	ldr	r3, [r7, #28]
  4075c4:	2b00      	cmp	r3, #0
  4075c6:	d107      	bne.n	4075d8 <chdrv_prog_mem_write+0xd0>
			ch_err = chdrv_prog_i2c_write(dev_ptr, (uint8_t *) burst_hdr, sizeof(burst_hdr));
  4075c8:	f107 0314 	add.w	r3, r7, #20
  4075cc:	2202      	movs	r2, #2
  4075ce:	4619      	mov	r1, r3
  4075d0:	68f8      	ldr	r0, [r7, #12]
  4075d2:	4b0c      	ldr	r3, [pc, #48]	; (407604 <chdrv_prog_mem_write+0xfc>)
  4075d4:	4798      	blx	r3
  4075d6:	61f8      	str	r0, [r7, #28]
		}
		if (!ch_err) {
  4075d8:	69fb      	ldr	r3, [r7, #28]
  4075da:	2b00      	cmp	r3, #0
  4075dc:	d108      	bne.n	4075f0 <chdrv_prog_mem_write+0xe8>
			ch_err = chdrv_prog_i2c_write(dev_ptr, message, nbytes);
  4075de:	893b      	ldrh	r3, [r7, #8]
  4075e0:	461a      	mov	r2, r3
  4075e2:	6879      	ldr	r1, [r7, #4]
  4075e4:	68f8      	ldr	r0, [r7, #12]
  4075e6:	4b07      	ldr	r3, [pc, #28]	; (407604 <chdrv_prog_mem_write+0xfc>)
  4075e8:	4798      	blx	r3
  4075ea:	61f8      	str	r0, [r7, #28]
  4075ec:	e000      	b.n	4075f0 <chdrv_prog_mem_write+0xe8>
	if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
  4075ee:	bf00      	nop
		}
	}
	return ch_err;
  4075f0:	69fb      	ldr	r3, [r7, #28]
}
  4075f2:	4618      	mov	r0, r3
  4075f4:	3720      	adds	r7, #32
  4075f6:	46bd      	mov	sp, r7
  4075f8:	bd80      	pop	{r7, pc}
  4075fa:	bf00      	nop
  4075fc:	004074b1 	.word	0x004074b1
  407600:	0040cc98 	.word	0x0040cc98
  407604:	00406cfd 	.word	0x00406cfd

00407608 <chdrv_prog_read>:
 *
 * \return 0 if read from sensor succeeded, non-zero otherwise
 *
 * This local function reads a value from a sensor programming register.
 */
static int chdrv_prog_read(ch_dev_t *dev_ptr, uint8_t reg_addr, uint16_t *data) {
  407608:	b580      	push	{r7, lr}
  40760a:	b088      	sub	sp, #32
  40760c:	af00      	add	r7, sp, #0
  40760e:	60f8      	str	r0, [r7, #12]
  407610:	460b      	mov	r3, r1
  407612:	607a      	str	r2, [r7, #4]
  407614:	72fb      	strb	r3, [r7, #11]
	uint8_t nbytes = CH_PROG_SIZEOF(reg_addr);
  407616:	7afb      	ldrb	r3, [r7, #11]
  407618:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40761c:	2b00      	cmp	r3, #0
  40761e:	d001      	beq.n	407624 <chdrv_prog_read+0x1c>
  407620:	2301      	movs	r3, #1
  407622:	e000      	b.n	407626 <chdrv_prog_read+0x1e>
  407624:	2302      	movs	r3, #2
  407626:	76fb      	strb	r3, [r7, #27]

	uint8_t read_data[2];
	uint8_t message[1] = { 0x7F & reg_addr };
  407628:	7afb      	ldrb	r3, [r7, #11]
  40762a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40762e:	b2db      	uxtb	r3, r3
  407630:	753b      	strb	r3, [r7, #20]

	int ch_err = chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
  407632:	f107 0314 	add.w	r3, r7, #20
  407636:	2201      	movs	r2, #1
  407638:	4619      	mov	r1, r3
  40763a:	68f8      	ldr	r0, [r7, #12]
  40763c:	4b14      	ldr	r3, [pc, #80]	; (407690 <chdrv_prog_read+0x88>)
  40763e:	4798      	blx	r3
  407640:	61f8      	str	r0, [r7, #28]

	if (!ch_err) {
  407642:	69fb      	ldr	r3, [r7, #28]
  407644:	2b00      	cmp	r3, #0
  407646:	d108      	bne.n	40765a <chdrv_prog_read+0x52>
		ch_err = chdrv_prog_i2c_read(dev_ptr, read_data, nbytes);
  407648:	7efb      	ldrb	r3, [r7, #27]
  40764a:	b29a      	uxth	r2, r3
  40764c:	f107 0318 	add.w	r3, r7, #24
  407650:	4619      	mov	r1, r3
  407652:	68f8      	ldr	r0, [r7, #12]
  407654:	4b0f      	ldr	r3, [pc, #60]	; (407694 <chdrv_prog_read+0x8c>)
  407656:	4798      	blx	r3
  407658:	61f8      	str	r0, [r7, #28]
	}

	if (!ch_err) {
  40765a:	69fb      	ldr	r3, [r7, #28]
  40765c:	2b00      	cmp	r3, #0
  40765e:	d111      	bne.n	407684 <chdrv_prog_read+0x7c>
		*data = read_data[0];
  407660:	7e3b      	ldrb	r3, [r7, #24]
  407662:	b29a      	uxth	r2, r3
  407664:	687b      	ldr	r3, [r7, #4]
  407666:	801a      	strh	r2, [r3, #0]
		if (nbytes > 1) {
  407668:	7efb      	ldrb	r3, [r7, #27]
  40766a:	2b01      	cmp	r3, #1
  40766c:	d90a      	bls.n	407684 <chdrv_prog_read+0x7c>
			*data |= (((uint16_t) read_data[1]) << 8);
  40766e:	687b      	ldr	r3, [r7, #4]
  407670:	881b      	ldrh	r3, [r3, #0]
  407672:	b21a      	sxth	r2, r3
  407674:	7e7b      	ldrb	r3, [r7, #25]
  407676:	021b      	lsls	r3, r3, #8
  407678:	b21b      	sxth	r3, r3
  40767a:	4313      	orrs	r3, r2
  40767c:	b21b      	sxth	r3, r3
  40767e:	b29a      	uxth	r2, r3
  407680:	687b      	ldr	r3, [r7, #4]
  407682:	801a      	strh	r2, [r3, #0]
		}
	}

	return ch_err;
  407684:	69fb      	ldr	r3, [r7, #28]
}
  407686:	4618      	mov	r0, r3
  407688:	3720      	adds	r7, #32
  40768a:	46bd      	mov	sp, r7
  40768c:	bd80      	pop	{r7, pc}
  40768e:	bf00      	nop
  407690:	00406cfd 	.word	0x00406cfd
  407694:	00406d35 	.word	0x00406d35

00407698 <chdrv_write_firmware>:
 *
 * This local function writes the sensor firmware image to the device.
 */
/*!
 */
static int chdrv_write_firmware(ch_dev_t *dev_ptr) {
  407698:	b580      	push	{r7, lr}
  40769a:	b084      	sub	sp, #16
  40769c:	af00      	add	r7, sp, #0
  40769e:	6078      	str	r0, [r7, #4]
	ch_fw_load_func_t func_ptr = dev_ptr->api_funcs.fw_load;	// pointer to firmware load function
  4076a0:	687b      	ldr	r3, [r7, #4]
  4076a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  4076a4:	60bb      	str	r3, [r7, #8]
	int ch_err = ((func_ptr == NULL) || (!dev_ptr->sensor_connected));
  4076a6:	68bb      	ldr	r3, [r7, #8]
  4076a8:	2b00      	cmp	r3, #0
  4076aa:	d003      	beq.n	4076b4 <chdrv_write_firmware+0x1c>
  4076ac:	687b      	ldr	r3, [r7, #4]
  4076ae:	7fdb      	ldrb	r3, [r3, #31]
  4076b0:	2b00      	cmp	r3, #0
  4076b2:	d101      	bne.n	4076b8 <chdrv_write_firmware+0x20>
  4076b4:	2301      	movs	r3, #1
  4076b6:	e000      	b.n	4076ba <chdrv_write_firmware+0x22>
  4076b8:	2300      	movs	r3, #0
  4076ba:	60fb      	str	r3, [r7, #12]
	if (!ch_err) {
		chbsp_print_str("chdrv_write_firmware\n");
	}
#endif

	if (!ch_err) {
  4076bc:	68fb      	ldr	r3, [r7, #12]
  4076be:	2b00      	cmp	r3, #0
  4076c0:	d10a      	bne.n	4076d8 <chdrv_write_firmware+0x40>
#ifdef CHDRV_DEBUG
		chbsp_print_str("Programming Chirp sensor...\n");
		prog_time = chbsp_timestamp_ms();
#endif
		if (func_ptr != NULL) {
  4076c2:	68bb      	ldr	r3, [r7, #8]
  4076c4:	2b00      	cmp	r3, #0
  4076c6:	d005      	beq.n	4076d4 <chdrv_write_firmware+0x3c>
			ch_err = (*func_ptr)(dev_ptr);
  4076c8:	68bb      	ldr	r3, [r7, #8]
  4076ca:	6878      	ldr	r0, [r7, #4]
  4076cc:	4798      	blx	r3
  4076ce:	4603      	mov	r3, r0
  4076d0:	60fb      	str	r3, [r7, #12]
  4076d2:	e001      	b.n	4076d8 <chdrv_write_firmware+0x40>
		} else {
			ch_err = 1;			// indicate error
  4076d4:	2301      	movs	r3, #1
  4076d6:	60fb      	str	r3, [r7, #12]
		snprintf(cbuf, sizeof(cbuf), "Wrote %u bytes in %lu ms.\n", CH101_FW_SIZE, prog_time);
		chbsp_print_str(cbuf);
	}
#endif

	return ch_err;
  4076d8:	68fb      	ldr	r3, [r7, #12]
}
  4076da:	4618      	mov	r0, r3
  4076dc:	3710      	adds	r7, #16
  4076de:	46bd      	mov	sp, r7
  4076e0:	bd80      	pop	{r7, pc}
	...

004076e4 <chdrv_init_ram>:
 *
 * \return 0 if memory write succeeded, non-zero otherwise
 *
 * This local function initializes memory locations in the Chirp sensor, as required by the firmware image.
 */
static int chdrv_init_ram(ch_dev_t *dev_ptr) {
  4076e4:	b590      	push	{r4, r7, lr}
  4076e6:	b085      	sub	sp, #20
  4076e8:	af00      	add	r7, sp, #0
  4076ea:	6078      	str	r0, [r7, #4]
	int ch_err = ! dev_ptr || ! dev_ptr->sensor_connected;
  4076ec:	687b      	ldr	r3, [r7, #4]
  4076ee:	2b00      	cmp	r3, #0
  4076f0:	d003      	beq.n	4076fa <chdrv_init_ram+0x16>
  4076f2:	687b      	ldr	r3, [r7, #4]
  4076f4:	7fdb      	ldrb	r3, [r3, #31]
  4076f6:	2b00      	cmp	r3, #0
  4076f8:	d101      	bne.n	4076fe <chdrv_init_ram+0x1a>
  4076fa:	2301      	movs	r3, #1
  4076fc:	e000      	b.n	407700 <chdrv_init_ram+0x1c>
  4076fe:	2300      	movs	r3, #0
  407700:	60fb      	str	r3, [r7, #12]
	if (!ch_err) {
		chbsp_print_str("chdrv_init_ram\n");
	}
#endif

	if ((!ch_err) && (dev_ptr->get_fw_ram_init_size() != 0)) {		// if size is not zero, ram init data exists
  407702:	68fb      	ldr	r3, [r7, #12]
  407704:	2b00      	cmp	r3, #0
  407706:	d11a      	bne.n	40773e <chdrv_init_ram+0x5a>
  407708:	687b      	ldr	r3, [r7, #4]
  40770a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40770c:	4798      	blx	r3
  40770e:	4603      	mov	r3, r0
  407710:	2b00      	cmp	r3, #0
  407712:	d014      	beq.n	40773e <chdrv_init_ram+0x5a>
		uint16_t ram_address;
		uint16_t ram_bytecount;

		ram_address = dev_ptr->get_fw_ram_init_addr();
  407714:	687b      	ldr	r3, [r7, #4]
  407716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  407718:	4798      	blx	r3
  40771a:	4603      	mov	r3, r0
  40771c:	817b      	strh	r3, [r7, #10]
		ram_bytecount = dev_ptr->get_fw_ram_init_size();
  40771e:	687b      	ldr	r3, [r7, #4]
  407720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  407722:	4798      	blx	r3
  407724:	4603      	mov	r3, r0
  407726:	813b      	strh	r3, [r7, #8]

		if (!ch_err) {
  407728:	68fb      	ldr	r3, [r7, #12]
  40772a:	2b00      	cmp	r3, #0
  40772c:	d107      	bne.n	40773e <chdrv_init_ram+0x5a>
#ifdef CHDRV_DEBUG
			chbsp_print_str("Loading RAM init data...\n");
			prog_time = chbsp_timestamp_ms();
#endif
			ch_err = chdrv_prog_mem_write(dev_ptr, ram_address, (uint8_t *) dev_ptr->ram_init, ram_bytecount);
  40772e:	687b      	ldr	r3, [r7, #4]
  407730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  407732:	893b      	ldrh	r3, [r7, #8]
  407734:	8979      	ldrh	r1, [r7, #10]
  407736:	6878      	ldr	r0, [r7, #4]
  407738:	4c03      	ldr	r4, [pc, #12]	; (407748 <chdrv_init_ram+0x64>)
  40773a:	47a0      	blx	r4
  40773c:	60f8      	str	r0, [r7, #12]
				chbsp_print_str(cbuf);
			}
#endif
		}
	}
	return ch_err;
  40773e:	68fb      	ldr	r3, [r7, #12]
}
  407740:	4618      	mov	r0, r3
  407742:	3714      	adds	r7, #20
  407744:	46bd      	mov	sp, r7
  407746:	bd90      	pop	{r4, r7, pc}
  407748:	00407509 	.word	0x00407509

0040774c <chdrv_reset_and_halt>:
 *
 * This function resets and halts a sensor device by writing to the control registers.
 *
 * In order for the device to respond, the PROG pin for the device must be asserted before this function is called. 
 */
static int chdrv_reset_and_halt(ch_dev_t * dev_ptr) {
  40774c:	b580      	push	{r7, lr}
  40774e:	b084      	sub	sp, #16
  407750:	af00      	add	r7, sp, #0
  407752:	6078      	str	r0, [r7, #4]
	int ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 0x40);    	// reset asic			// XXX need define
  407754:	2240      	movs	r2, #64	; 0x40
  407756:	2142      	movs	r1, #66	; 0x42
  407758:	6878      	ldr	r0, [r7, #4]
  40775a:	4b08      	ldr	r3, [pc, #32]	; (40777c <chdrv_reset_and_halt+0x30>)
  40775c:	4798      	blx	r3
  40775e:	60f8      	str	r0, [r7, #12]

	ch_err |= chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 0x11);   		// halt asic and disable watchdog;			// XXX need define
  407760:	2211      	movs	r2, #17
  407762:	2142      	movs	r1, #66	; 0x42
  407764:	6878      	ldr	r0, [r7, #4]
  407766:	4b05      	ldr	r3, [pc, #20]	; (40777c <chdrv_reset_and_halt+0x30>)
  407768:	4798      	blx	r3
  40776a:	4602      	mov	r2, r0
  40776c:	68fb      	ldr	r3, [r7, #12]
  40776e:	4313      	orrs	r3, r2
  407770:	60fb      	str	r3, [r7, #12]

	return ch_err;
  407772:	68fb      	ldr	r3, [r7, #12]
}
  407774:	4618      	mov	r0, r3
  407776:	3710      	adds	r7, #16
  407778:	46bd      	mov	sp, r7
  40777a:	bd80      	pop	{r7, pc}
  40777c:	004074b1 	.word	0x004074b1

00407780 <chdrv_prog_ping>:
 * This function checks for a sensor sensor on the I2C bus by attempting to reset, halt, and read from the device using
 * the programming interface I2C address (0x45). 
 *
 * In order for the device to respond, the PROG pin for the device must be asserted before this function is called. 
 */
int chdrv_prog_ping(ch_dev_t *dev_ptr) {
  407780:	b580      	push	{r7, lr}
  407782:	b084      	sub	sp, #16
  407784:	af00      	add	r7, sp, #0
  407786:	6078      	str	r0, [r7, #4]
	// Try a dummy write to the sensor to make sure it's connected and working
	uint16_t tmp;
	int ch_err;

    ch_err = chdrv_reset_and_halt(dev_ptr);
  407788:	6878      	ldr	r0, [r7, #4]
  40778a:	4b0c      	ldr	r3, [pc, #48]	; (4077bc <chdrv_prog_ping+0x3c>)
  40778c:	4798      	blx	r3
  40778e:	60f8      	str	r0, [r7, #12]

    ch_err |= chdrv_prog_read(dev_ptr, CH_PROG_REG_PING, &tmp);
  407790:	f107 030a 	add.w	r3, r7, #10
  407794:	461a      	mov	r2, r3
  407796:	2100      	movs	r1, #0
  407798:	6878      	ldr	r0, [r7, #4]
  40779a:	4b09      	ldr	r3, [pc, #36]	; (4077c0 <chdrv_prog_ping+0x40>)
  40779c:	4798      	blx	r3
  40779e:	4602      	mov	r2, r0
  4077a0:	68fb      	ldr	r3, [r7, #12]
  4077a2:	4313      	orrs	r3, r2
  4077a4:	60fb      	str	r3, [r7, #12]
		snprintf(cbuf, sizeof(cbuf), "Test I2C read: %04X\n", tmp);
		chbsp_print_str(cbuf);
	}
#endif

	return !(ch_err);
  4077a6:	68fb      	ldr	r3, [r7, #12]
  4077a8:	2b00      	cmp	r3, #0
  4077aa:	bf0c      	ite	eq
  4077ac:	2301      	moveq	r3, #1
  4077ae:	2300      	movne	r3, #0
  4077b0:	b2db      	uxtb	r3, r3
}
  4077b2:	4618      	mov	r0, r3
  4077b4:	3710      	adds	r7, #16
  4077b6:	46bd      	mov	sp, r7
  4077b8:	bd80      	pop	{r7, pc}
  4077ba:	bf00      	nop
  4077bc:	0040774d 	.word	0x0040774d
  4077c0:	00407609 	.word	0x00407609

004077c4 <chdrv_detect_and_program>:
 * Once started, the sensor device will begin an internal initialization and self-test sequence.  The \a chdrv_wait_for_lock()
 * function may be used to wait for this sequence to complete.
 *
 * \note This routine will leave the PROG pin de-asserted when it completes.
 */
int chdrv_detect_and_program(ch_dev_t *dev_ptr) {
  4077c4:	b590      	push	{r4, r7, lr}
  4077c6:	b087      	sub	sp, #28
  4077c8:	af00      	add	r7, sp, #0
  4077ca:	6078      	str	r0, [r7, #4]
	int ch_err = ! dev_ptr;
  4077cc:	687b      	ldr	r3, [r7, #4]
  4077ce:	2b00      	cmp	r3, #0
  4077d0:	bf0c      	ite	eq
  4077d2:	2301      	moveq	r3, #1
  4077d4:	2300      	movne	r3, #0
  4077d6:	b2db      	uxtb	r3, r3
  4077d8:	617b      	str	r3, [r7, #20]
	if (ch_err) {
  4077da:	697b      	ldr	r3, [r7, #20]
  4077dc:	2b00      	cmp	r3, #0
  4077de:	d001      	beq.n	4077e4 <chdrv_detect_and_program+0x20>
		return ch_err;
  4077e0:	697b      	ldr	r3, [r7, #20]
  4077e2:	e08c      	b.n	4078fe <chdrv_detect_and_program+0x13a>
	}

	chbsp_program_enable(dev_ptr);					// assert PROG pin
  4077e4:	6878      	ldr	r0, [r7, #4]
  4077e6:	4b48      	ldr	r3, [pc, #288]	; (407908 <chdrv_detect_and_program+0x144>)
  4077e8:	4798      	blx	r3

	if (chdrv_prog_ping(dev_ptr)) {					// if device found
  4077ea:	6878      	ldr	r0, [r7, #4]
  4077ec:	4b47      	ldr	r3, [pc, #284]	; (40790c <chdrv_detect_and_program+0x148>)
  4077ee:	4798      	blx	r3
  4077f0:	4603      	mov	r3, r0
  4077f2:	2b00      	cmp	r3, #0
  4077f4:	d06d      	beq.n	4078d2 <chdrv_detect_and_program+0x10e>
		dev_ptr->sensor_connected = 1;
  4077f6:	687b      	ldr	r3, [r7, #4]
  4077f8:	2201      	movs	r2, #1
  4077fa:	77da      	strb	r2, [r3, #31]

		// Call device discovery hook routine, if any
		chdrv_discovery_hook_t hook_ptr = dev_ptr->group->disco_hook;
  4077fc:	687b      	ldr	r3, [r7, #4]
  4077fe:	681b      	ldr	r3, [r3, #0]
  407800:	68db      	ldr	r3, [r3, #12]
  407802:	613b      	str	r3, [r7, #16]
		if (hook_ptr != NULL) {
  407804:	693b      	ldr	r3, [r7, #16]
  407806:	2b00      	cmp	r3, #0
  407808:	d004      	beq.n	407814 <chdrv_detect_and_program+0x50>
			ch_err = (*hook_ptr)(dev_ptr);		// hook routine can return error, will abort device init
  40780a:	693b      	ldr	r3, [r7, #16]
  40780c:	6878      	ldr	r0, [r7, #4]
  40780e:	4798      	blx	r3
  407810:	4603      	mov	r3, r0
  407812:	617b      	str	r3, [r7, #20]
			snprintf(cbuf, sizeof(cbuf), "PROG_STAT: 0x%02X\n", prog_stat);
			chbsp_print_str(cbuf);
		}
#endif

		ch_err = chdrv_init_ram(dev_ptr) ||                // init ram values
  407814:	6878      	ldr	r0, [r7, #4]
  407816:	4b3e      	ldr	r3, [pc, #248]	; (407910 <chdrv_detect_and_program+0x14c>)
  407818:	4798      	blx	r3
  40781a:	4603      	mov	r3, r0
				 chdrv_write_firmware(dev_ptr) ||          // transfer program
  40781c:	2b00      	cmp	r3, #0
  40781e:	d10b      	bne.n	407838 <chdrv_detect_and_program+0x74>
  407820:	6878      	ldr	r0, [r7, #4]
  407822:	4b3c      	ldr	r3, [pc, #240]	; (407914 <chdrv_detect_and_program+0x150>)
  407824:	4798      	blx	r3
  407826:	4603      	mov	r3, r0
		ch_err = chdrv_init_ram(dev_ptr) ||                // init ram values
  407828:	2b00      	cmp	r3, #0
  40782a:	d105      	bne.n	407838 <chdrv_detect_and_program+0x74>
				 chdrv_reset_and_halt(dev_ptr); 			// reset asic, since it was running mystery code before halt
  40782c:	6878      	ldr	r0, [r7, #4]
  40782e:	4b3a      	ldr	r3, [pc, #232]	; (407918 <chdrv_detect_and_program+0x154>)
  407830:	4798      	blx	r3
  407832:	4603      	mov	r3, r0
				 chdrv_write_firmware(dev_ptr) ||          // transfer program
  407834:	2b00      	cmp	r3, #0
  407836:	d001      	beq.n	40783c <chdrv_detect_and_program+0x78>
  407838:	2301      	movs	r3, #1
  40783a:	e000      	b.n	40783e <chdrv_detect_and_program+0x7a>
  40783c:	2300      	movs	r3, #0
		ch_err = chdrv_init_ram(dev_ptr) ||                // init ram values
  40783e:	617b      	str	r3, [r7, #20]
			snprintf(cbuf, sizeof(cbuf), "Changing I2C address to %u\n", dev_ptr->i2c_address);
			chbsp_print_str(cbuf);
		}
#endif

		if (!ch_err ) {
  407840:	697b      	ldr	r3, [r7, #20]
  407842:	2b00      	cmp	r3, #0
  407844:	d109      	bne.n	40785a <chdrv_detect_and_program+0x96>
			ch_err = chdrv_prog_mem_write(dev_ptr, 0x01C5, &dev_ptr->i2c_address, 1);			// XXX need define
  407846:	687b      	ldr	r3, [r7, #4]
  407848:	f103 0218 	add.w	r2, r3, #24
  40784c:	2301      	movs	r3, #1
  40784e:	f240 11c5 	movw	r1, #453	; 0x1c5
  407852:	6878      	ldr	r0, [r7, #4]
  407854:	4c31      	ldr	r4, [pc, #196]	; (40791c <chdrv_detect_and_program+0x158>)
  407856:	47a0      	blx	r4
  407858:	6178      	str	r0, [r7, #20]
		}

		/* Run charge pumps */
		if (!ch_err) {
  40785a:	697b      	ldr	r3, [r7, #20]
  40785c:	2b00      	cmp	r3, #0
  40785e:	d12e      	bne.n	4078be <chdrv_detect_and_program+0xfa>
			uint16_t write_val;
			write_val = 0x0200;			// XXX need defines
  407860:	f44f 7300 	mov.w	r3, #512	; 0x200
  407864:	81fb      	strh	r3, [r7, #14]
            ch_err |= chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *)&write_val, 2);		// PMUT.CNTRL4 = HVVSS_FON
  407866:	f107 020e 	add.w	r2, r7, #14
  40786a:	2302      	movs	r3, #2
  40786c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  407870:	6878      	ldr	r0, [r7, #4]
  407872:	4c2a      	ldr	r4, [pc, #168]	; (40791c <chdrv_detect_and_program+0x158>)
  407874:	47a0      	blx	r4
  407876:	4602      	mov	r2, r0
  407878:	697b      	ldr	r3, [r7, #20]
  40787a:	4313      	orrs	r3, r2
  40787c:	617b      	str	r3, [r7, #20]
			chbsp_delay_ms(5);
  40787e:	2005      	movs	r0, #5
  407880:	4b27      	ldr	r3, [pc, #156]	; (407920 <chdrv_detect_and_program+0x15c>)
  407882:	4798      	blx	r3
			write_val = 0x0600;
  407884:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  407888:	81fb      	strh	r3, [r7, #14]
            ch_err = chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *)&write_val, 2);		// PMUT.CNTRL4 = (HVVSS_FON | HVVDD_FON)
  40788a:	f107 020e 	add.w	r2, r7, #14
  40788e:	2302      	movs	r3, #2
  407890:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  407894:	6878      	ldr	r0, [r7, #4]
  407896:	4c21      	ldr	r4, [pc, #132]	; (40791c <chdrv_detect_and_program+0x158>)
  407898:	47a0      	blx	r4
  40789a:	6178      	str	r0, [r7, #20]
			chbsp_delay_ms(5);
  40789c:	2005      	movs	r0, #5
  40789e:	4b20      	ldr	r3, [pc, #128]	; (407920 <chdrv_detect_and_program+0x15c>)
  4078a0:	4798      	blx	r3
			write_val = 0x0000;
  4078a2:	2300      	movs	r3, #0
  4078a4:	81fb      	strh	r3, [r7, #14]
			ch_err |= chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *)&write_val, 2);		// PMUT.CNTRL4 = 0
  4078a6:	f107 020e 	add.w	r2, r7, #14
  4078aa:	2302      	movs	r3, #2
  4078ac:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  4078b0:	6878      	ldr	r0, [r7, #4]
  4078b2:	4c1a      	ldr	r4, [pc, #104]	; (40791c <chdrv_detect_and_program+0x158>)
  4078b4:	47a0      	blx	r4
  4078b6:	4602      	mov	r2, r0
  4078b8:	697b      	ldr	r3, [r7, #20]
  4078ba:	4313      	orrs	r3, r2
  4078bc:	617b      	str	r3, [r7, #20]
		}

		if (!ch_err ) {
  4078be:	697b      	ldr	r3, [r7, #20]
  4078c0:	2b00      	cmp	r3, #0
  4078c2:	d109      	bne.n	4078d8 <chdrv_detect_and_program+0x114>
			ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 2);	// Exit programming mode and run the chip
  4078c4:	2202      	movs	r2, #2
  4078c6:	2142      	movs	r1, #66	; 0x42
  4078c8:	6878      	ldr	r0, [r7, #4]
  4078ca:	4b16      	ldr	r3, [pc, #88]	; (407924 <chdrv_detect_and_program+0x160>)
  4078cc:	4798      	blx	r3
  4078ce:	6178      	str	r0, [r7, #20]
  4078d0:	e002      	b.n	4078d8 <chdrv_detect_and_program+0x114>
		}
	} else {
		dev_ptr->sensor_connected = 0;				// prog_ping failed - no device found
  4078d2:	687b      	ldr	r3, [r7, #4]
  4078d4:	2200      	movs	r2, #0
  4078d6:	77da      	strb	r2, [r3, #31]
	}

	chbsp_program_disable(dev_ptr);				// de-assert PROG pin
  4078d8:	6878      	ldr	r0, [r7, #4]
  4078da:	4b13      	ldr	r3, [pc, #76]	; (407928 <chdrv_detect_and_program+0x164>)
  4078dc:	4798      	blx	r3

	if (ch_err) { 								// if error, reinitialize I2C bus associated with this device
  4078de:	697b      	ldr	r3, [r7, #20]
  4078e0:	2b00      	cmp	r3, #0
  4078e2:	d005      	beq.n	4078f0 <chdrv_detect_and_program+0x12c>
		chbsp_debug_toggle(CHDRV_DEBUG_PIN_NUM);
  4078e4:	2000      	movs	r0, #0
  4078e6:	4b11      	ldr	r3, [pc, #68]	; (40792c <chdrv_detect_and_program+0x168>)
  4078e8:	4798      	blx	r3
		chbsp_i2c_reset(dev_ptr);
  4078ea:	6878      	ldr	r0, [r7, #4]
  4078ec:	4b10      	ldr	r3, [pc, #64]	; (407930 <chdrv_detect_and_program+0x16c>)
  4078ee:	4798      	blx	r3
	}

	if (ch_err) {
  4078f0:	697b      	ldr	r3, [r7, #20]
  4078f2:	2b00      	cmp	r3, #0
  4078f4:	d002      	beq.n	4078fc <chdrv_detect_and_program+0x138>
		dev_ptr->sensor_connected = 0;     		// only marked as connected if no errors
  4078f6:	687b      	ldr	r3, [r7, #4]
  4078f8:	2200      	movs	r2, #0
  4078fa:	77da      	strb	r2, [r3, #31]
	}

	return ch_err;
  4078fc:	697b      	ldr	r3, [r7, #20]
}
  4078fe:	4618      	mov	r0, r3
  407900:	371c      	adds	r7, #28
  407902:	46bd      	mov	sp, r7
  407904:	bd90      	pop	{r4, r7, pc}
  407906:	bf00      	nop
  407908:	00401f9d 	.word	0x00401f9d
  40790c:	00407781 	.word	0x00407781
  407910:	004076e5 	.word	0x004076e5
  407914:	00407699 	.word	0x00407699
  407918:	0040774d 	.word	0x0040774d
  40791c:	00407509 	.word	0x00407509
  407920:	00402581 	.word	0x00402581
  407924:	004074b1 	.word	0x004074b1
  407928:	00401fd5 	.word	0x00401fd5
  40792c:	004056ed 	.word	0x004056ed
  407930:	00402b01 	.word	0x00402b01

00407934 <chdrv_set_idle>:
 * on the given bus are halted in programming mode (i.e. PROG line is asserted).
 *
 * \note This routine writes to all devices simultaneously, so I2C signalling (i.e. ack's) on the bus may be driven by multiple
 * slaves at once.
 */
int chdrv_set_idle(ch_dev_t * dev_ptr) {
  407934:	b590      	push	{r4, r7, lr}
  407936:	b087      	sub	sp, #28
  407938:	af00      	add	r7, sp, #0
  40793a:	6078      	str	r0, [r7, #4]
	const uint16_t idle_loop[2] = {0x4003,0xFFFC}; 		// XXX need define
  40793c:	4b13      	ldr	r3, [pc, #76]	; (40798c <chdrv_set_idle+0x58>)
  40793e:	681b      	ldr	r3, [r3, #0]
  407940:	613b      	str	r3, [r7, #16]

	int ch_err = chdrv_prog_mem_write(dev_ptr, 0xFFFC, (uint8_t *) &idle_loop[0], sizeof(idle_loop));
  407942:	f107 0210 	add.w	r2, r7, #16
  407946:	2304      	movs	r3, #4
  407948:	f64f 71fc 	movw	r1, #65532	; 0xfffc
  40794c:	6878      	ldr	r0, [r7, #4]
  40794e:	4c10      	ldr	r4, [pc, #64]	; (407990 <chdrv_set_idle+0x5c>)
  407950:	47a0      	blx	r4
  407952:	6178      	str	r0, [r7, #20]
	if (!ch_err) {
  407954:	697b      	ldr	r3, [r7, #20]
  407956:	2b00      	cmp	r3, #0
  407958:	d103      	bne.n	407962 <chdrv_set_idle+0x2e>
		ch_err = chdrv_reset_and_halt(dev_ptr);
  40795a:	6878      	ldr	r0, [r7, #4]
  40795c:	4b0d      	ldr	r3, [pc, #52]	; (407994 <chdrv_set_idle+0x60>)
  40795e:	4798      	blx	r3
  407960:	6178      	str	r0, [r7, #20]
	}

	// keep wdt stopped after we exit programming mode
	uint16_t val = 0x5a80;			// XXX need define
  407962:	f44f 43b5 	mov.w	r3, #23168	; 0x5a80
  407966:	81fb      	strh	r3, [r7, #14]
	if (!ch_err) {
  407968:	697b      	ldr	r3, [r7, #20]
  40796a:	2b00      	cmp	r3, #0
  40796c:	d108      	bne.n	407980 <chdrv_set_idle+0x4c>
		ch_err = chdrv_prog_mem_write(dev_ptr, 0x0120, (uint8_t *)&val, sizeof(val));			// XXX need define
  40796e:	f107 020e 	add.w	r2, r7, #14
  407972:	2302      	movs	r3, #2
  407974:	f44f 7190 	mov.w	r1, #288	; 0x120
  407978:	6878      	ldr	r0, [r7, #4]
  40797a:	4c05      	ldr	r4, [pc, #20]	; (407990 <chdrv_set_idle+0x5c>)
  40797c:	47a0      	blx	r4
  40797e:	6178      	str	r0, [r7, #20]
	}

	return ch_err;
  407980:	697b      	ldr	r3, [r7, #20]
}
  407982:	4618      	mov	r0, r3
  407984:	371c      	adds	r7, #28
  407986:	46bd      	mov	sp, r7
  407988:	bd90      	pop	{r4, r7, pc}
  40798a:	bf00      	nop
  40798c:	0040cc9c 	.word	0x0040cc9c
  407990:	00407509 	.word	0x00407509
  407994:	0040774d 	.word	0x0040774d

00407998 <chdrv_group_detect_and_program>:
 * Once started, each sensor device will begin an internal initialization and self-test sequence.  The 
 * \a chdrv_group_wait_for_lock() function may be used to wait for this sequence to complete on all devices in the group.
 *
 * \note This routine will leave the PROG pin de-asserted for all devices in the group when it completes.
 */
int chdrv_group_detect_and_program(ch_group_t *grp_ptr) {
  407998:	b580      	push	{r7, lr}
  40799a:	b086      	sub	sp, #24
  40799c:	af00      	add	r7, sp, #0
  40799e:	6078      	str	r0, [r7, #4]
	int ch_err = 0;
  4079a0:	2300      	movs	r3, #0
  4079a2:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
  4079a4:	2300      	movs	r3, #0
  4079a6:	74fb      	strb	r3, [r7, #19]
  4079a8:	e01c      	b.n	4079e4 <chdrv_group_detect_and_program+0x4c>
		ch_dev_t *dev_ptr = grp_ptr->device[i];
  4079aa:	7cfa      	ldrb	r2, [r7, #19]
  4079ac:	687b      	ldr	r3, [r7, #4]
  4079ae:	3206      	adds	r2, #6
  4079b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4079b4:	60fb      	str	r3, [r7, #12]

		ch_err = chdrv_detect_and_program(dev_ptr);
  4079b6:	68f8      	ldr	r0, [r7, #12]
  4079b8:	4b10      	ldr	r3, [pc, #64]	; (4079fc <chdrv_group_detect_and_program+0x64>)
  4079ba:	4798      	blx	r3
  4079bc:	6178      	str	r0, [r7, #20]

		if (!ch_err && dev_ptr->sensor_connected) {
  4079be:	697b      	ldr	r3, [r7, #20]
  4079c0:	2b00      	cmp	r3, #0
  4079c2:	d109      	bne.n	4079d8 <chdrv_group_detect_and_program+0x40>
  4079c4:	68fb      	ldr	r3, [r7, #12]
  4079c6:	7fdb      	ldrb	r3, [r3, #31]
  4079c8:	2b00      	cmp	r3, #0
  4079ca:	d005      	beq.n	4079d8 <chdrv_group_detect_and_program+0x40>
			grp_ptr->sensor_count++;
  4079cc:	687b      	ldr	r3, [r7, #4]
  4079ce:	789b      	ldrb	r3, [r3, #2]
  4079d0:	3301      	adds	r3, #1
  4079d2:	b2da      	uxtb	r2, r3
  4079d4:	687b      	ldr	r3, [r7, #4]
  4079d6:	709a      	strb	r2, [r3, #2]
		}

		if (ch_err) {
  4079d8:	697b      	ldr	r3, [r7, #20]
  4079da:	2b00      	cmp	r3, #0
  4079dc:	d108      	bne.n	4079f0 <chdrv_group_detect_and_program+0x58>
	for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
  4079de:	7cfb      	ldrb	r3, [r7, #19]
  4079e0:	3301      	adds	r3, #1
  4079e2:	74fb      	strb	r3, [r7, #19]
  4079e4:	687b      	ldr	r3, [r7, #4]
  4079e6:	781b      	ldrb	r3, [r3, #0]
  4079e8:	7cfa      	ldrb	r2, [r7, #19]
  4079ea:	429a      	cmp	r2, r3
  4079ec:	d3dd      	bcc.n	4079aa <chdrv_group_detect_and_program+0x12>
  4079ee:	e000      	b.n	4079f2 <chdrv_group_detect_and_program+0x5a>
			break;
  4079f0:	bf00      	nop
		}
	}
	return ch_err;
  4079f2:	697b      	ldr	r3, [r7, #20]
}
  4079f4:	4618      	mov	r0, r3
  4079f6:	3718      	adds	r7, #24
  4079f8:	46bd      	mov	sp, r7
  4079fa:	bd80      	pop	{r7, pc}
  4079fc:	004077c5 	.word	0x004077c5

00407a00 <chdrv_group_prepare>:
 *
 * \return 0 if hardware initialization is successful, non-zero otherwise
 *
 * This function is called internally by \a chdrv_group_start().
 */
int chdrv_group_prepare(ch_group_t* grp_ptr) {
  407a00:	b580      	push	{r7, lr}
  407a02:	b084      	sub	sp, #16
  407a04:	af00      	add	r7, sp, #0
  407a06:	6078      	str	r0, [r7, #4]
	int ch_err = ! grp_ptr;
  407a08:	687b      	ldr	r3, [r7, #4]
  407a0a:	2b00      	cmp	r3, #0
  407a0c:	bf0c      	ite	eq
  407a0e:	2301      	moveq	r3, #1
  407a10:	2300      	movne	r3, #0
  407a12:	b2db      	uxtb	r3, r3
  407a14:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	if (!ch_err) {
  407a16:	68fb      	ldr	r3, [r7, #12]
  407a18:	2b00      	cmp	r3, #0
  407a1a:	d13b      	bne.n	407a94 <chdrv_group_prepare+0x94>
		grp_ptr->sensor_count = 0;
  407a1c:	687b      	ldr	r3, [r7, #4]
  407a1e:	2200      	movs	r2, #0
  407a20:	709a      	strb	r2, [r3, #2]

		for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
  407a22:	2300      	movs	r3, #0
  407a24:	72fb      	strb	r3, [r7, #11]
  407a26:	e02a      	b.n	407a7e <chdrv_group_prepare+0x7e>
			grp_ptr->i2c_queue[i].len = 0;
  407a28:	7afa      	ldrb	r2, [r7, #11]
  407a2a:	6879      	ldr	r1, [r7, #4]
  407a2c:	4613      	mov	r3, r2
  407a2e:	011b      	lsls	r3, r3, #4
  407a30:	4413      	add	r3, r2
  407a32:	009b      	lsls	r3, r3, #2
  407a34:	440b      	add	r3, r1
  407a36:	332e      	adds	r3, #46	; 0x2e
  407a38:	2200      	movs	r2, #0
  407a3a:	701a      	strb	r2, [r3, #0]
			grp_ptr->i2c_queue[i].idx = 0;
  407a3c:	7afa      	ldrb	r2, [r7, #11]
  407a3e:	6879      	ldr	r1, [r7, #4]
  407a40:	4613      	mov	r3, r2
  407a42:	011b      	lsls	r3, r3, #4
  407a44:	4413      	add	r3, r2
  407a46:	009b      	lsls	r3, r3, #2
  407a48:	440b      	add	r3, r1
  407a4a:	332f      	adds	r3, #47	; 0x2f
  407a4c:	2200      	movs	r2, #0
  407a4e:	701a      	strb	r2, [r3, #0]
			grp_ptr->i2c_queue[i].read_pending = 0;
  407a50:	7afa      	ldrb	r2, [r7, #11]
  407a52:	6879      	ldr	r1, [r7, #4]
  407a54:	4613      	mov	r3, r2
  407a56:	011b      	lsls	r3, r3, #4
  407a58:	4413      	add	r3, r2
  407a5a:	009b      	lsls	r3, r3, #2
  407a5c:	440b      	add	r3, r1
  407a5e:	332c      	adds	r3, #44	; 0x2c
  407a60:	2200      	movs	r2, #0
  407a62:	701a      	strb	r2, [r3, #0]
			grp_ptr->i2c_queue[i].running = 0;
  407a64:	7afa      	ldrb	r2, [r7, #11]
  407a66:	6879      	ldr	r1, [r7, #4]
  407a68:	4613      	mov	r3, r2
  407a6a:	011b      	lsls	r3, r3, #4
  407a6c:	4413      	add	r3, r2
  407a6e:	009b      	lsls	r3, r3, #2
  407a70:	440b      	add	r3, r1
  407a72:	332d      	adds	r3, #45	; 0x2d
  407a74:	2200      	movs	r2, #0
  407a76:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
  407a78:	7afb      	ldrb	r3, [r7, #11]
  407a7a:	3301      	adds	r3, #1
  407a7c:	72fb      	strb	r3, [r7, #11]
  407a7e:	687b      	ldr	r3, [r7, #4]
  407a80:	785b      	ldrb	r3, [r3, #1]
  407a82:	7afa      	ldrb	r2, [r7, #11]
  407a84:	429a      	cmp	r2, r3
  407a86:	d3cf      	bcc.n	407a28 <chdrv_group_prepare+0x28>
		}

		chbsp_group_pin_init(grp_ptr);
  407a88:	6878      	ldr	r0, [r7, #4]
  407a8a:	4b05      	ldr	r3, [pc, #20]	; (407aa0 <chdrv_group_prepare+0xa0>)
  407a8c:	4798      	blx	r3

		ch_err = chbsp_i2c_init();
  407a8e:	4b05      	ldr	r3, [pc, #20]	; (407aa4 <chdrv_group_prepare+0xa4>)
  407a90:	4798      	blx	r3
  407a92:	60f8      	str	r0, [r7, #12]
	}

	return ch_err;
  407a94:	68fb      	ldr	r3, [r7, #12]
}
  407a96:	4618      	mov	r0, r3
  407a98:	3710      	adds	r7, #16
  407a9a:	46bd      	mov	sp, r7
  407a9c:	bd80      	pop	{r7, pc}
  407a9e:	bf00      	nop
  407aa0:	00402145 	.word	0x00402145
  407aa4:	00402639 	.word	0x00402639

00407aa8 <chdrv_group_start>:
 *
 * This function assumes firmware-specific initialization has already been performed for each a ch_dev_t
 * descriptor for each sensor in the group.  See \a ch_init().
 */
#define CH_PROG_XFER_RETRY 4
int chdrv_group_start(ch_group_t *grp_ptr) {
  407aa8:	b580      	push	{r7, lr}
  407aaa:	b08a      	sub	sp, #40	; 0x28
  407aac:	af00      	add	r7, sp, #0
  407aae:	6078      	str	r0, [r7, #4]
	int ch_err = ! grp_ptr;
  407ab0:	687b      	ldr	r3, [r7, #4]
  407ab2:	2b00      	cmp	r3, #0
  407ab4:	bf0c      	ite	eq
  407ab6:	2301      	moveq	r3, #1
  407ab8:	2300      	movne	r3, #0
  407aba:	b2db      	uxtb	r3, r3
  407abc:	627b      	str	r3, [r7, #36]	; 0x24
	int i;
	uint8_t prog_tries = 0;
  407abe:	2300      	movs	r3, #0
  407ac0:	77fb      	strb	r3, [r7, #31]
#ifdef CHDRV_DEBUG
	char cbuf[80];
	const uint32_t start_time = chbsp_timestamp_ms();
#endif

	if (!ch_err) {
  407ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407ac4:	2b00      	cmp	r3, #0
  407ac6:	d103      	bne.n	407ad0 <chdrv_group_start+0x28>
		ch_err = chdrv_group_prepare(grp_ptr);
  407ac8:	6878      	ldr	r0, [r7, #4]
  407aca:	4b5d      	ldr	r3, [pc, #372]	; (407c40 <chdrv_group_start+0x198>)
  407acc:	4798      	blx	r3
  407ace:	6278      	str	r0, [r7, #36]	; 0x24
	}

	if (ch_err) {
  407ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407ad2:	2b00      	cmp	r3, #0
  407ad4:	d001      	beq.n	407ada <chdrv_group_start+0x32>
		return ch_err;
  407ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407ad8:	e0ad      	b.n	407c36 <chdrv_group_start+0x18e>
	}

RESET_AND_LOAD:
	do {
		chbsp_reset_assert();
  407ada:	4b5a      	ldr	r3, [pc, #360]	; (407c44 <chdrv_group_start+0x19c>)
  407adc:	4798      	blx	r3
		for (i = 0; i < grp_ptr->num_ports; i++) {
  407ade:	2300      	movs	r3, #0
  407ae0:	623b      	str	r3, [r7, #32]
  407ae2:	e00a      	b.n	407afa <chdrv_group_start+0x52>
			chbsp_program_enable(grp_ptr->device[i]);
  407ae4:	687b      	ldr	r3, [r7, #4]
  407ae6:	6a3a      	ldr	r2, [r7, #32]
  407ae8:	3206      	adds	r2, #6
  407aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407aee:	4618      	mov	r0, r3
  407af0:	4b55      	ldr	r3, [pc, #340]	; (407c48 <chdrv_group_start+0x1a0>)
  407af2:	4798      	blx	r3
		for (i = 0; i < grp_ptr->num_ports; i++) {
  407af4:	6a3b      	ldr	r3, [r7, #32]
  407af6:	3301      	adds	r3, #1
  407af8:	623b      	str	r3, [r7, #32]
  407afa:	687b      	ldr	r3, [r7, #4]
  407afc:	781b      	ldrb	r3, [r3, #0]
  407afe:	461a      	mov	r2, r3
  407b00:	6a3b      	ldr	r3, [r7, #32]
  407b02:	429a      	cmp	r2, r3
  407b04:	dcee      	bgt.n	407ae4 <chdrv_group_start+0x3c>
		}
		chbsp_delay_ms(1);
  407b06:	2001      	movs	r0, #1
  407b08:	4b50      	ldr	r3, [pc, #320]	; (407c4c <chdrv_group_start+0x1a4>)
  407b0a:	4798      	blx	r3
		chbsp_reset_release();
  407b0c:	4b50      	ldr	r3, [pc, #320]	; (407c50 <chdrv_group_start+0x1a8>)
  407b0e:	4798      	blx	r3

		 /* For every i2c bus, set the devices idle in parallel, then disable programming mode for all devices on that bus
		  * This is kludgey because we don't have a great way of iterating over the i2c buses */
		ch_dev_t * c_prev = grp_ptr->device[0];
  407b10:	687b      	ldr	r3, [r7, #4]
  407b12:	699b      	ldr	r3, [r3, #24]
  407b14:	61bb      	str	r3, [r7, #24]
		chdrv_set_idle(c_prev);
  407b16:	69b8      	ldr	r0, [r7, #24]
  407b18:	4b4e      	ldr	r3, [pc, #312]	; (407c54 <chdrv_group_start+0x1ac>)
  407b1a:	4798      	blx	r3
		for (i = 0; i < grp_ptr->num_ports; i++) {
  407b1c:	2300      	movs	r3, #0
  407b1e:	623b      	str	r3, [r7, #32]
  407b20:	e018      	b.n	407b54 <chdrv_group_start+0xac>
			ch_dev_t * c = grp_ptr->device[i];
  407b22:	687b      	ldr	r3, [r7, #4]
  407b24:	6a3a      	ldr	r2, [r7, #32]
  407b26:	3206      	adds	r2, #6
  407b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407b2c:	60fb      	str	r3, [r7, #12]

			if (c->i2c_bus_index != c_prev->i2c_bus_index) {
  407b2e:	68fb      	ldr	r3, [r7, #12]
  407b30:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
  407b34:	69bb      	ldr	r3, [r7, #24]
  407b36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  407b3a:	429a      	cmp	r2, r3
  407b3c:	d002      	beq.n	407b44 <chdrv_group_start+0x9c>
				chdrv_set_idle(c);
  407b3e:	68f8      	ldr	r0, [r7, #12]
  407b40:	4b44      	ldr	r3, [pc, #272]	; (407c54 <chdrv_group_start+0x1ac>)
  407b42:	4798      	blx	r3
			}

			chbsp_program_disable(c);
  407b44:	68f8      	ldr	r0, [r7, #12]
  407b46:	4b44      	ldr	r3, [pc, #272]	; (407c58 <chdrv_group_start+0x1b0>)
  407b48:	4798      	blx	r3
			c_prev = c;
  407b4a:	68fb      	ldr	r3, [r7, #12]
  407b4c:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < grp_ptr->num_ports; i++) {
  407b4e:	6a3b      	ldr	r3, [r7, #32]
  407b50:	3301      	adds	r3, #1
  407b52:	623b      	str	r3, [r7, #32]
  407b54:	687b      	ldr	r3, [r7, #4]
  407b56:	781b      	ldrb	r3, [r3, #0]
  407b58:	461a      	mov	r2, r3
  407b5a:	6a3b      	ldr	r3, [r7, #32]
  407b5c:	429a      	cmp	r2, r3
  407b5e:	dce0      	bgt.n	407b22 <chdrv_group_start+0x7a>
		}

		ch_err = chdrv_group_detect_and_program(grp_ptr);
  407b60:	6878      	ldr	r0, [r7, #4]
  407b62:	4b3e      	ldr	r3, [pc, #248]	; (407c5c <chdrv_group_start+0x1b4>)
  407b64:	4798      	blx	r3
  407b66:	6278      	str	r0, [r7, #36]	; 0x24

	} while (ch_err && prog_tries++ < CH_PROG_XFER_RETRY);
  407b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407b6a:	2b00      	cmp	r3, #0
  407b6c:	d004      	beq.n	407b78 <chdrv_group_start+0xd0>
  407b6e:	7ffb      	ldrb	r3, [r7, #31]
  407b70:	1c5a      	adds	r2, r3, #1
  407b72:	77fa      	strb	r2, [r7, #31]
  407b74:	2b03      	cmp	r3, #3
  407b76:	d9b0      	bls.n	407ada <chdrv_group_start+0x32>

	if (!ch_err) {
  407b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407b7a:	2b00      	cmp	r3, #0
  407b7c:	d107      	bne.n	407b8e <chdrv_group_start+0xe6>
		ch_err = (grp_ptr->sensor_count == 0);
  407b7e:	687b      	ldr	r3, [r7, #4]
  407b80:	789b      	ldrb	r3, [r3, #2]
  407b82:	2b00      	cmp	r3, #0
  407b84:	bf0c      	ite	eq
  407b86:	2301      	moveq	r3, #1
  407b88:	2300      	movne	r3, #0
  407b8a:	b2db      	uxtb	r3, r3
  407b8c:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}
#endif
	}

	if (!ch_err) {
  407b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407b90:	2b00      	cmp	r3, #0
  407b92:	d10c      	bne.n	407bae <chdrv_group_start+0x106>
		ch_err = chdrv_group_wait_for_lock(grp_ptr);
  407b94:	6878      	ldr	r0, [r7, #4]
  407b96:	4b32      	ldr	r3, [pc, #200]	; (407c60 <chdrv_group_start+0x1b8>)
  407b98:	4798      	blx	r3
  407b9a:	6278      	str	r0, [r7, #36]	; 0x24
		if(ch_err && prog_tries++ < CH_PROG_XFER_RETRY+1) {
  407b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407b9e:	2b00      	cmp	r3, #0
  407ba0:	d005      	beq.n	407bae <chdrv_group_start+0x106>
  407ba2:	7ffb      	ldrb	r3, [r7, #31]
  407ba4:	1c5a      	adds	r2, r3, #1
  407ba6:	77fa      	strb	r2, [r7, #31]
  407ba8:	2b04      	cmp	r3, #4
  407baa:	d800      	bhi.n	407bae <chdrv_group_start+0x106>
			goto RESET_AND_LOAD;
  407bac:	e795      	b.n	407ada <chdrv_group_start+0x32>
		}
	}

	if (!ch_err) {
  407bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407bb0:	2b00      	cmp	r3, #0
  407bb2:	d105      	bne.n	407bc0 <chdrv_group_start+0x118>
#ifdef CHDRV_DEBUG
		snprintf(cbuf, sizeof(cbuf), "Frequency locked, %lu ms\n", chbsp_timestamp_ms() - start_time);
		chbsp_print_str(cbuf);
#endif

		chbsp_delay_ms(1);
  407bb4:	2001      	movs	r0, #1
  407bb6:	4b25      	ldr	r3, [pc, #148]	; (407c4c <chdrv_group_start+0x1a4>)
  407bb8:	4798      	blx	r3

		chdrv_group_measure_rtc(grp_ptr);
  407bba:	6878      	ldr	r0, [r7, #4]
  407bbc:	4b29      	ldr	r3, [pc, #164]	; (407c64 <chdrv_group_start+0x1bc>)
  407bbe:	4798      	blx	r3
		}
#endif
	}

	/* Put counts of connected devices per bus in group struct */
	for (int bus_num = 0; bus_num < grp_ptr->num_i2c_buses; bus_num++) {
  407bc0:	2300      	movs	r3, #0
  407bc2:	617b      	str	r3, [r7, #20]
  407bc4:	e008      	b.n	407bd8 <chdrv_group_start+0x130>
		grp_ptr->num_connected[bus_num] = 0;						// init all counts
  407bc6:	687a      	ldr	r2, [r7, #4]
  407bc8:	697b      	ldr	r3, [r7, #20]
  407bca:	4413      	add	r3, r2
  407bcc:	3328      	adds	r3, #40	; 0x28
  407bce:	2200      	movs	r2, #0
  407bd0:	701a      	strb	r2, [r3, #0]
	for (int bus_num = 0; bus_num < grp_ptr->num_i2c_buses; bus_num++) {
  407bd2:	697b      	ldr	r3, [r7, #20]
  407bd4:	3301      	adds	r3, #1
  407bd6:	617b      	str	r3, [r7, #20]
  407bd8:	687b      	ldr	r3, [r7, #4]
  407bda:	785b      	ldrb	r3, [r3, #1]
  407bdc:	461a      	mov	r2, r3
  407bde:	697b      	ldr	r3, [r7, #20]
  407be0:	429a      	cmp	r2, r3
  407be2:	dcf0      	bgt.n	407bc6 <chdrv_group_start+0x11e>
	}

	for (int dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  407be4:	2300      	movs	r3, #0
  407be6:	613b      	str	r3, [r7, #16]
  407be8:	e01e      	b.n	407c28 <chdrv_group_start+0x180>
		ch_dev_t *dev_ptr = grp_ptr->device[dev_num];
  407bea:	687b      	ldr	r3, [r7, #4]
  407bec:	693a      	ldr	r2, [r7, #16]
  407bee:	3206      	adds	r2, #6
  407bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407bf4:	60bb      	str	r3, [r7, #8]

		if (dev_ptr->sensor_connected) {
  407bf6:	68bb      	ldr	r3, [r7, #8]
  407bf8:	7fdb      	ldrb	r3, [r3, #31]
  407bfa:	2b00      	cmp	r3, #0
  407bfc:	d011      	beq.n	407c22 <chdrv_group_start+0x17a>
			grp_ptr->num_connected[dev_ptr->i2c_bus_index] += 1;	// count one more on this bus
  407bfe:	68bb      	ldr	r3, [r7, #8]
  407c00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  407c04:	4619      	mov	r1, r3
  407c06:	68bb      	ldr	r3, [r7, #8]
  407c08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  407c0c:	461a      	mov	r2, r3
  407c0e:	687b      	ldr	r3, [r7, #4]
  407c10:	4413      	add	r3, r2
  407c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
  407c16:	3301      	adds	r3, #1
  407c18:	b2da      	uxtb	r2, r3
  407c1a:	687b      	ldr	r3, [r7, #4]
  407c1c:	440b      	add	r3, r1
  407c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (int dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  407c22:	693b      	ldr	r3, [r7, #16]
  407c24:	3301      	adds	r3, #1
  407c26:	613b      	str	r3, [r7, #16]
  407c28:	687b      	ldr	r3, [r7, #4]
  407c2a:	781b      	ldrb	r3, [r3, #0]
  407c2c:	461a      	mov	r2, r3
  407c2e:	693b      	ldr	r3, [r7, #16]
  407c30:	429a      	cmp	r2, r3
  407c32:	dcda      	bgt.n	407bea <chdrv_group_start+0x142>
		}
	}

	return ch_err;
  407c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  407c36:	4618      	mov	r0, r3
  407c38:	3728      	adds	r7, #40	; 0x28
  407c3a:	46bd      	mov	sp, r7
  407c3c:	bd80      	pop	{r7, pc}
  407c3e:	bf00      	nop
  407c40:	00407a01 	.word	0x00407a01
  407c44:	00401f75 	.word	0x00401f75
  407c48:	00401f9d 	.word	0x00401f9d
  407c4c:	00402581 	.word	0x00402581
  407c50:	00401f89 	.word	0x00401f89
  407c54:	00407935 	.word	0x00407935
  407c58:	00401fd5 	.word	0x00401fd5
  407c5c:	00407999 	.word	0x00407999
  407c60:	00407359 	.word	0x00407359
  407c64:	00406ea1 	.word	0x00406ea1

00407c68 <chdrv_pretrigger_delay_set>:
 * This function sets a delay interval that will be inserted between triggering rx-only sensor
 * and tx/rx sensors.  This delay allows the rx-only sensor(s) to settle from any startup disruption
 * (e.g. PMUT "ringdown") before the ultrasound pulse is generated by the tx node.
 *
 */
void chdrv_pretrigger_delay_set(ch_group_t *grp_ptr, uint16_t delay_us){
  407c68:	b480      	push	{r7}
  407c6a:	b083      	sub	sp, #12
  407c6c:	af00      	add	r7, sp, #0
  407c6e:	6078      	str	r0, [r7, #4]
  407c70:	460b      	mov	r3, r1
  407c72:	807b      	strh	r3, [r7, #2]

	grp_ptr->pretrig_delay_us = delay_us;
  407c74:	687b      	ldr	r3, [r7, #4]
  407c76:	887a      	ldrh	r2, [r7, #2]
  407c78:	811a      	strh	r2, [r3, #8]
}
  407c7a:	bf00      	nop
  407c7c:	370c      	adds	r7, #12
  407c7e:	46bd      	mov	sp, r7
  407c80:	f85d 7b04 	ldr.w	r7, [sp], #4
  407c84:	4770      	bx	lr

00407c86 <sqrt_int32>:
  407c86:	b480      	push	{r7}
  407c88:	b087      	sub	sp, #28
  407c8a:	af00      	add	r7, sp, #0
  407c8c:	6078      	str	r0, [r7, #4]
  407c8e:	687b      	ldr	r3, [r7, #4]
  407c90:	60fb      	str	r3, [r7, #12]
  407c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  407c96:	613b      	str	r3, [r7, #16]
  407c98:	2300      	movs	r3, #0
  407c9a:	617b      	str	r3, [r7, #20]
  407c9c:	e015      	b.n	407cca <sqrt_int32+0x44>
  407c9e:	697a      	ldr	r2, [r7, #20]
  407ca0:	693b      	ldr	r3, [r7, #16]
  407ca2:	4413      	add	r3, r2
  407ca4:	60bb      	str	r3, [r7, #8]
  407ca6:	697b      	ldr	r3, [r7, #20]
  407ca8:	085b      	lsrs	r3, r3, #1
  407caa:	617b      	str	r3, [r7, #20]
  407cac:	68fa      	ldr	r2, [r7, #12]
  407cae:	68bb      	ldr	r3, [r7, #8]
  407cb0:	429a      	cmp	r2, r3
  407cb2:	d307      	bcc.n	407cc4 <sqrt_int32+0x3e>
  407cb4:	68fa      	ldr	r2, [r7, #12]
  407cb6:	68bb      	ldr	r3, [r7, #8]
  407cb8:	1ad3      	subs	r3, r2, r3
  407cba:	60fb      	str	r3, [r7, #12]
  407cbc:	697a      	ldr	r2, [r7, #20]
  407cbe:	693b      	ldr	r3, [r7, #16]
  407cc0:	4413      	add	r3, r2
  407cc2:	617b      	str	r3, [r7, #20]
  407cc4:	693b      	ldr	r3, [r7, #16]
  407cc6:	089b      	lsrs	r3, r3, #2
  407cc8:	613b      	str	r3, [r7, #16]
  407cca:	693b      	ldr	r3, [r7, #16]
  407ccc:	2b00      	cmp	r3, #0
  407cce:	d1e6      	bne.n	407c9e <sqrt_int32+0x18>
  407cd0:	697b      	ldr	r3, [r7, #20]
  407cd2:	4618      	mov	r0, r3
  407cd4:	371c      	adds	r7, #28
  407cd6:	46bd      	mov	sp, r7
  407cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  407cdc:	4770      	bx	lr
	...

00407ce0 <NVIC_EnableIRQ>:
  407ce0:	b480      	push	{r7}
  407ce2:	b083      	sub	sp, #12
  407ce4:	af00      	add	r7, sp, #0
  407ce6:	4603      	mov	r3, r0
  407ce8:	71fb      	strb	r3, [r7, #7]
  407cea:	4909      	ldr	r1, [pc, #36]	; (407d10 <NVIC_EnableIRQ+0x30>)
  407cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407cf0:	095b      	lsrs	r3, r3, #5
  407cf2:	79fa      	ldrb	r2, [r7, #7]
  407cf4:	f002 021f 	and.w	r2, r2, #31
  407cf8:	2001      	movs	r0, #1
  407cfa:	fa00 f202 	lsl.w	r2, r0, r2
  407cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407d02:	bf00      	nop
  407d04:	370c      	adds	r7, #12
  407d06:	46bd      	mov	sp, r7
  407d08:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d0c:	4770      	bx	lr
  407d0e:	bf00      	nop
  407d10:	e000e100 	.word	0xe000e100

00407d14 <NVIC_DisableIRQ>:
  407d14:	b480      	push	{r7}
  407d16:	b083      	sub	sp, #12
  407d18:	af00      	add	r7, sp, #0
  407d1a:	4603      	mov	r3, r0
  407d1c:	71fb      	strb	r3, [r7, #7]
  407d1e:	4909      	ldr	r1, [pc, #36]	; (407d44 <NVIC_DisableIRQ+0x30>)
  407d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407d24:	095b      	lsrs	r3, r3, #5
  407d26:	79fa      	ldrb	r2, [r7, #7]
  407d28:	f002 021f 	and.w	r2, r2, #31
  407d2c:	2001      	movs	r0, #1
  407d2e:	fa00 f202 	lsl.w	r2, r0, r2
  407d32:	3320      	adds	r3, #32
  407d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407d38:	bf00      	nop
  407d3a:	370c      	adds	r7, #12
  407d3c:	46bd      	mov	sp, r7
  407d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d42:	4770      	bx	lr
  407d44:	e000e100 	.word	0xe000e100

00407d48 <NVIC_ClearPendingIRQ>:
  407d48:	b480      	push	{r7}
  407d4a:	b083      	sub	sp, #12
  407d4c:	af00      	add	r7, sp, #0
  407d4e:	4603      	mov	r3, r0
  407d50:	71fb      	strb	r3, [r7, #7]
  407d52:	4909      	ldr	r1, [pc, #36]	; (407d78 <NVIC_ClearPendingIRQ+0x30>)
  407d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407d58:	095b      	lsrs	r3, r3, #5
  407d5a:	79fa      	ldrb	r2, [r7, #7]
  407d5c:	f002 021f 	and.w	r2, r2, #31
  407d60:	2001      	movs	r0, #1
  407d62:	fa00 f202 	lsl.w	r2, r0, r2
  407d66:	3360      	adds	r3, #96	; 0x60
  407d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407d6c:	bf00      	nop
  407d6e:	370c      	adds	r7, #12
  407d70:	46bd      	mov	sp, r7
  407d72:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d76:	4770      	bx	lr
  407d78:	e000e100 	.word	0xe000e100

00407d7c <NVIC_SetPriority>:
  407d7c:	b480      	push	{r7}
  407d7e:	b083      	sub	sp, #12
  407d80:	af00      	add	r7, sp, #0
  407d82:	4603      	mov	r3, r0
  407d84:	6039      	str	r1, [r7, #0]
  407d86:	71fb      	strb	r3, [r7, #7]
  407d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407d8c:	2b00      	cmp	r3, #0
  407d8e:	da0b      	bge.n	407da8 <NVIC_SetPriority+0x2c>
  407d90:	490d      	ldr	r1, [pc, #52]	; (407dc8 <NVIC_SetPriority+0x4c>)
  407d92:	79fb      	ldrb	r3, [r7, #7]
  407d94:	f003 030f 	and.w	r3, r3, #15
  407d98:	3b04      	subs	r3, #4
  407d9a:	683a      	ldr	r2, [r7, #0]
  407d9c:	b2d2      	uxtb	r2, r2
  407d9e:	0112      	lsls	r2, r2, #4
  407da0:	b2d2      	uxtb	r2, r2
  407da2:	440b      	add	r3, r1
  407da4:	761a      	strb	r2, [r3, #24]
  407da6:	e009      	b.n	407dbc <NVIC_SetPriority+0x40>
  407da8:	4908      	ldr	r1, [pc, #32]	; (407dcc <NVIC_SetPriority+0x50>)
  407daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407dae:	683a      	ldr	r2, [r7, #0]
  407db0:	b2d2      	uxtb	r2, r2
  407db2:	0112      	lsls	r2, r2, #4
  407db4:	b2d2      	uxtb	r2, r2
  407db6:	440b      	add	r3, r1
  407db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  407dbc:	bf00      	nop
  407dbe:	370c      	adds	r7, #12
  407dc0:	46bd      	mov	sp, r7
  407dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  407dc6:	4770      	bx	lr
  407dc8:	e000ed00 	.word	0xe000ed00
  407dcc:	e000e100 	.word	0xe000e100

00407dd0 <osc_get_rate>:
  407dd0:	b480      	push	{r7}
  407dd2:	b083      	sub	sp, #12
  407dd4:	af00      	add	r7, sp, #0
  407dd6:	6078      	str	r0, [r7, #4]
  407dd8:	687b      	ldr	r3, [r7, #4]
  407dda:	2b07      	cmp	r3, #7
  407ddc:	d825      	bhi.n	407e2a <osc_get_rate+0x5a>
  407dde:	a201      	add	r2, pc, #4	; (adr r2, 407de4 <osc_get_rate+0x14>)
  407de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407de4:	00407e05 	.word	0x00407e05
  407de8:	00407e0b 	.word	0x00407e0b
  407dec:	00407e11 	.word	0x00407e11
  407df0:	00407e17 	.word	0x00407e17
  407df4:	00407e1b 	.word	0x00407e1b
  407df8:	00407e1f 	.word	0x00407e1f
  407dfc:	00407e23 	.word	0x00407e23
  407e00:	00407e27 	.word	0x00407e27
  407e04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  407e08:	e010      	b.n	407e2c <osc_get_rate+0x5c>
  407e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407e0e:	e00d      	b.n	407e2c <osc_get_rate+0x5c>
  407e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407e14:	e00a      	b.n	407e2c <osc_get_rate+0x5c>
  407e16:	4b08      	ldr	r3, [pc, #32]	; (407e38 <osc_get_rate+0x68>)
  407e18:	e008      	b.n	407e2c <osc_get_rate+0x5c>
  407e1a:	4b08      	ldr	r3, [pc, #32]	; (407e3c <osc_get_rate+0x6c>)
  407e1c:	e006      	b.n	407e2c <osc_get_rate+0x5c>
  407e1e:	4b08      	ldr	r3, [pc, #32]	; (407e40 <osc_get_rate+0x70>)
  407e20:	e004      	b.n	407e2c <osc_get_rate+0x5c>
  407e22:	2300      	movs	r3, #0
  407e24:	e002      	b.n	407e2c <osc_get_rate+0x5c>
  407e26:	2300      	movs	r3, #0
  407e28:	e000      	b.n	407e2c <osc_get_rate+0x5c>
  407e2a:	2300      	movs	r3, #0
  407e2c:	4618      	mov	r0, r3
  407e2e:	370c      	adds	r7, #12
  407e30:	46bd      	mov	sp, r7
  407e32:	f85d 7b04 	ldr.w	r7, [sp], #4
  407e36:	4770      	bx	lr
  407e38:	007a1200 	.word	0x007a1200
  407e3c:	00f42400 	.word	0x00f42400
  407e40:	016e3600 	.word	0x016e3600

00407e44 <sysclk_get_main_hz>:
  407e44:	b580      	push	{r7, lr}
  407e46:	af00      	add	r7, sp, #0
  407e48:	2001      	movs	r0, #1
  407e4a:	4b04      	ldr	r3, [pc, #16]	; (407e5c <sysclk_get_main_hz+0x18>)
  407e4c:	4798      	blx	r3
  407e4e:	4602      	mov	r2, r0
  407e50:	f640 634e 	movw	r3, #3662	; 0xe4e
  407e54:	fb03 f302 	mul.w	r3, r3, r2
  407e58:	4618      	mov	r0, r3
  407e5a:	bd80      	pop	{r7, pc}
  407e5c:	00407dd1 	.word	0x00407dd1

00407e60 <sysclk_get_peripheral_hz>:
  407e60:	b580      	push	{r7, lr}
  407e62:	af00      	add	r7, sp, #0
  407e64:	4b02      	ldr	r3, [pc, #8]	; (407e70 <sysclk_get_peripheral_hz+0x10>)
  407e66:	4798      	blx	r3
  407e68:	4603      	mov	r3, r0
  407e6a:	4618      	mov	r0, r3
  407e6c:	bd80      	pop	{r7, pc}
  407e6e:	bf00      	nop
  407e70:	00407e45 	.word	0x00407e45

00407e74 <i2c_master_initialize1>:
  407e74:	b580      	push	{r7, lr}
  407e76:	af00      	add	r7, sp, #0
  407e78:	4810      	ldr	r0, [pc, #64]	; (407ebc <i2c_master_initialize1+0x48>)
  407e7a:	4b11      	ldr	r3, [pc, #68]	; (407ec0 <i2c_master_initialize1+0x4c>)
  407e7c:	4798      	blx	r3
  407e7e:	2103      	movs	r1, #3
  407e80:	480e      	ldr	r0, [pc, #56]	; (407ebc <i2c_master_initialize1+0x48>)
  407e82:	4b10      	ldr	r3, [pc, #64]	; (407ec4 <i2c_master_initialize1+0x50>)
  407e84:	4798      	blx	r3
  407e86:	4b10      	ldr	r3, [pc, #64]	; (407ec8 <i2c_master_initialize1+0x54>)
  407e88:	4798      	blx	r3
  407e8a:	4602      	mov	r2, r0
  407e8c:	4b0f      	ldr	r3, [pc, #60]	; (407ecc <i2c_master_initialize1+0x58>)
  407e8e:	601a      	str	r2, [r3, #0]
  407e90:	4b0e      	ldr	r3, [pc, #56]	; (407ecc <i2c_master_initialize1+0x58>)
  407e92:	4a0f      	ldr	r2, [pc, #60]	; (407ed0 <i2c_master_initialize1+0x5c>)
  407e94:	605a      	str	r2, [r3, #4]
  407e96:	490d      	ldr	r1, [pc, #52]	; (407ecc <i2c_master_initialize1+0x58>)
  407e98:	480e      	ldr	r0, [pc, #56]	; (407ed4 <i2c_master_initialize1+0x60>)
  407e9a:	4b0f      	ldr	r3, [pc, #60]	; (407ed8 <i2c_master_initialize1+0x64>)
  407e9c:	4798      	blx	r3
  407e9e:	2009      	movs	r0, #9
  407ea0:	4b0e      	ldr	r3, [pc, #56]	; (407edc <i2c_master_initialize1+0x68>)
  407ea2:	4798      	blx	r3
  407ea4:	2009      	movs	r0, #9
  407ea6:	4b0e      	ldr	r3, [pc, #56]	; (407ee0 <i2c_master_initialize1+0x6c>)
  407ea8:	4798      	blx	r3
  407eaa:	2101      	movs	r1, #1
  407eac:	2009      	movs	r0, #9
  407eae:	4b0d      	ldr	r3, [pc, #52]	; (407ee4 <i2c_master_initialize1+0x70>)
  407eb0:	4798      	blx	r3
  407eb2:	2009      	movs	r0, #9
  407eb4:	4b0c      	ldr	r3, [pc, #48]	; (407ee8 <i2c_master_initialize1+0x74>)
  407eb6:	4798      	blx	r3
  407eb8:	bf00      	nop
  407eba:	bd80      	pop	{r7, pc}
  407ebc:	40020000 	.word	0x40020000
  407ec0:	004037d1 	.word	0x004037d1
  407ec4:	00403939 	.word	0x00403939
  407ec8:	00407e61 	.word	0x00407e61
  407ecc:	2000090c 	.word	0x2000090c
  407ed0:	00061a80 	.word	0x00061a80
  407ed4:	40020600 	.word	0x40020600
  407ed8:	00404a29 	.word	0x00404a29
  407edc:	00407d15 	.word	0x00407d15
  407ee0:	00407d49 	.word	0x00407d49
  407ee4:	00407d7d 	.word	0x00407d7d
  407ee8:	00407ce1 	.word	0x00407ce1

00407eec <i2c_master_initialize3>:
  407eec:	b580      	push	{r7, lr}
  407eee:	af00      	add	r7, sp, #0
  407ef0:	4810      	ldr	r0, [pc, #64]	; (407f34 <i2c_master_initialize3+0x48>)
  407ef2:	4b11      	ldr	r3, [pc, #68]	; (407f38 <i2c_master_initialize3+0x4c>)
  407ef4:	4798      	blx	r3
  407ef6:	2103      	movs	r1, #3
  407ef8:	480e      	ldr	r0, [pc, #56]	; (407f34 <i2c_master_initialize3+0x48>)
  407efa:	4b10      	ldr	r3, [pc, #64]	; (407f3c <i2c_master_initialize3+0x50>)
  407efc:	4798      	blx	r3
  407efe:	4b10      	ldr	r3, [pc, #64]	; (407f40 <i2c_master_initialize3+0x54>)
  407f00:	4798      	blx	r3
  407f02:	4602      	mov	r2, r0
  407f04:	4b0f      	ldr	r3, [pc, #60]	; (407f44 <i2c_master_initialize3+0x58>)
  407f06:	601a      	str	r2, [r3, #0]
  407f08:	4b0e      	ldr	r3, [pc, #56]	; (407f44 <i2c_master_initialize3+0x58>)
  407f0a:	4a0f      	ldr	r2, [pc, #60]	; (407f48 <i2c_master_initialize3+0x5c>)
  407f0c:	605a      	str	r2, [r3, #4]
  407f0e:	490d      	ldr	r1, [pc, #52]	; (407f44 <i2c_master_initialize3+0x58>)
  407f10:	480e      	ldr	r0, [pc, #56]	; (407f4c <i2c_master_initialize3+0x60>)
  407f12:	4b0f      	ldr	r3, [pc, #60]	; (407f50 <i2c_master_initialize3+0x64>)
  407f14:	4798      	blx	r3
  407f16:	2013      	movs	r0, #19
  407f18:	4b0e      	ldr	r3, [pc, #56]	; (407f54 <i2c_master_initialize3+0x68>)
  407f1a:	4798      	blx	r3
  407f1c:	2013      	movs	r0, #19
  407f1e:	4b0e      	ldr	r3, [pc, #56]	; (407f58 <i2c_master_initialize3+0x6c>)
  407f20:	4798      	blx	r3
  407f22:	2101      	movs	r1, #1
  407f24:	2013      	movs	r0, #19
  407f26:	4b0d      	ldr	r3, [pc, #52]	; (407f5c <i2c_master_initialize3+0x70>)
  407f28:	4798      	blx	r3
  407f2a:	2013      	movs	r0, #19
  407f2c:	4b0c      	ldr	r3, [pc, #48]	; (407f60 <i2c_master_initialize3+0x74>)
  407f2e:	4798      	blx	r3
  407f30:	bf00      	nop
  407f32:	bd80      	pop	{r7, pc}
  407f34:	40018000 	.word	0x40018000
  407f38:	004037d1 	.word	0x004037d1
  407f3c:	00403939 	.word	0x00403939
  407f40:	00407e61 	.word	0x00407e61
  407f44:	2000090c 	.word	0x2000090c
  407f48:	00061a80 	.word	0x00061a80
  407f4c:	40018600 	.word	0x40018600
  407f50:	00404a29 	.word	0x00404a29
  407f54:	00407d15 	.word	0x00407d15
  407f58:	00407d49 	.word	0x00407d49
  407f5c:	00407d7d 	.word	0x00407d7d
  407f60:	00407ce1 	.word	0x00407ce1

00407f64 <i2c_master_init>:
  407f64:	b580      	push	{r7, lr}
  407f66:	af00      	add	r7, sp, #0
  407f68:	4b0c      	ldr	r3, [pc, #48]	; (407f9c <i2c_master_init+0x38>)
  407f6a:	4798      	blx	r3
  407f6c:	4b0c      	ldr	r3, [pc, #48]	; (407fa0 <i2c_master_init+0x3c>)
  407f6e:	4798      	blx	r3
  407f70:	2200      	movs	r2, #0
  407f72:	2118      	movs	r1, #24
  407f74:	480b      	ldr	r0, [pc, #44]	; (407fa4 <i2c_master_init+0x40>)
  407f76:	4b0c      	ldr	r3, [pc, #48]	; (407fa8 <i2c_master_init+0x44>)
  407f78:	4798      	blx	r3
  407f7a:	2200      	movs	r2, #0
  407f7c:	2118      	movs	r1, #24
  407f7e:	4809      	ldr	r0, [pc, #36]	; (407fa4 <i2c_master_init+0x40>)
  407f80:	4b0a      	ldr	r3, [pc, #40]	; (407fac <i2c_master_init+0x48>)
  407f82:	4798      	blx	r3
  407f84:	2200      	movs	r2, #0
  407f86:	210c      	movs	r1, #12
  407f88:	4809      	ldr	r0, [pc, #36]	; (407fb0 <i2c_master_init+0x4c>)
  407f8a:	4b07      	ldr	r3, [pc, #28]	; (407fa8 <i2c_master_init+0x44>)
  407f8c:	4798      	blx	r3
  407f8e:	2200      	movs	r2, #0
  407f90:	210c      	movs	r1, #12
  407f92:	4807      	ldr	r0, [pc, #28]	; (407fb0 <i2c_master_init+0x4c>)
  407f94:	4b05      	ldr	r3, [pc, #20]	; (407fac <i2c_master_init+0x48>)
  407f96:	4798      	blx	r3
  407f98:	bf00      	nop
  407f9a:	bd80      	pop	{r7, pc}
  407f9c:	00407e75 	.word	0x00407e75
  407fa0:	00407eed 	.word	0x00407eed
  407fa4:	400e0e00 	.word	0x400e0e00
  407fa8:	00403c4d 	.word	0x00403c4d
  407fac:	004039df 	.word	0x004039df
  407fb0:	400e1000 	.word	0x400e1000

00407fb4 <i2c_master_read_register1>:
  407fb4:	b580      	push	{r7, lr}
  407fb6:	b088      	sub	sp, #32
  407fb8:	af00      	add	r7, sp, #0
  407fba:	603b      	str	r3, [r7, #0]
  407fbc:	4603      	mov	r3, r0
  407fbe:	71fb      	strb	r3, [r7, #7]
  407fc0:	460b      	mov	r3, r1
  407fc2:	71bb      	strb	r3, [r7, #6]
  407fc4:	4613      	mov	r3, r2
  407fc6:	80bb      	strh	r3, [r7, #4]
  407fc8:	79fb      	ldrb	r3, [r7, #7]
  407fca:	773b      	strb	r3, [r7, #28]
  407fcc:	79bb      	ldrb	r3, [r7, #6]
  407fce:	733b      	strb	r3, [r7, #12]
  407fd0:	2301      	movs	r3, #1
  407fd2:	613b      	str	r3, [r7, #16]
  407fd4:	683b      	ldr	r3, [r7, #0]
  407fd6:	617b      	str	r3, [r7, #20]
  407fd8:	88bb      	ldrh	r3, [r7, #4]
  407fda:	61bb      	str	r3, [r7, #24]
  407fdc:	f107 030c 	add.w	r3, r7, #12
  407fe0:	4619      	mov	r1, r3
  407fe2:	4806      	ldr	r0, [pc, #24]	; (407ffc <i2c_master_read_register1+0x48>)
  407fe4:	4b06      	ldr	r3, [pc, #24]	; (408000 <i2c_master_read_register1+0x4c>)
  407fe6:	4798      	blx	r3
  407fe8:	4603      	mov	r3, r0
  407fea:	2b00      	cmp	r3, #0
  407fec:	d101      	bne.n	407ff2 <i2c_master_read_register1+0x3e>
  407fee:	2300      	movs	r3, #0
  407ff0:	e000      	b.n	407ff4 <i2c_master_read_register1+0x40>
  407ff2:	2308      	movs	r3, #8
  407ff4:	4618      	mov	r0, r3
  407ff6:	3720      	adds	r7, #32
  407ff8:	46bd      	mov	sp, r7
  407ffa:	bd80      	pop	{r7, pc}
  407ffc:	40020600 	.word	0x40020600
  408000:	00404bdd 	.word	0x00404bdd

00408004 <i2c_master_read_register1_raw>:
  408004:	b580      	push	{r7, lr}
  408006:	b088      	sub	sp, #32
  408008:	af00      	add	r7, sp, #0
  40800a:	4603      	mov	r3, r0
  40800c:	603a      	str	r2, [r7, #0]
  40800e:	71fb      	strb	r3, [r7, #7]
  408010:	460b      	mov	r3, r1
  408012:	80bb      	strh	r3, [r7, #4]
  408014:	79fb      	ldrb	r3, [r7, #7]
  408016:	773b      	strb	r3, [r7, #28]
  408018:	2300      	movs	r3, #0
  40801a:	613b      	str	r3, [r7, #16]
  40801c:	683b      	ldr	r3, [r7, #0]
  40801e:	617b      	str	r3, [r7, #20]
  408020:	88bb      	ldrh	r3, [r7, #4]
  408022:	61bb      	str	r3, [r7, #24]
  408024:	f107 030c 	add.w	r3, r7, #12
  408028:	4619      	mov	r1, r3
  40802a:	4806      	ldr	r0, [pc, #24]	; (408044 <i2c_master_read_register1_raw+0x40>)
  40802c:	4b06      	ldr	r3, [pc, #24]	; (408048 <i2c_master_read_register1_raw+0x44>)
  40802e:	4798      	blx	r3
  408030:	4603      	mov	r3, r0
  408032:	2b00      	cmp	r3, #0
  408034:	d101      	bne.n	40803a <i2c_master_read_register1_raw+0x36>
  408036:	2300      	movs	r3, #0
  408038:	e000      	b.n	40803c <i2c_master_read_register1_raw+0x38>
  40803a:	2308      	movs	r3, #8
  40803c:	4618      	mov	r0, r3
  40803e:	3720      	adds	r7, #32
  408040:	46bd      	mov	sp, r7
  408042:	bd80      	pop	{r7, pc}
  408044:	40020600 	.word	0x40020600
  408048:	00404bdd 	.word	0x00404bdd

0040804c <i2c_master_read_register3>:
  40804c:	b580      	push	{r7, lr}
  40804e:	b088      	sub	sp, #32
  408050:	af00      	add	r7, sp, #0
  408052:	603b      	str	r3, [r7, #0]
  408054:	4603      	mov	r3, r0
  408056:	71fb      	strb	r3, [r7, #7]
  408058:	460b      	mov	r3, r1
  40805a:	71bb      	strb	r3, [r7, #6]
  40805c:	4613      	mov	r3, r2
  40805e:	80bb      	strh	r3, [r7, #4]
  408060:	79fb      	ldrb	r3, [r7, #7]
  408062:	773b      	strb	r3, [r7, #28]
  408064:	79bb      	ldrb	r3, [r7, #6]
  408066:	733b      	strb	r3, [r7, #12]
  408068:	2301      	movs	r3, #1
  40806a:	613b      	str	r3, [r7, #16]
  40806c:	683b      	ldr	r3, [r7, #0]
  40806e:	617b      	str	r3, [r7, #20]
  408070:	88bb      	ldrh	r3, [r7, #4]
  408072:	61bb      	str	r3, [r7, #24]
  408074:	f107 030c 	add.w	r3, r7, #12
  408078:	4619      	mov	r1, r3
  40807a:	4806      	ldr	r0, [pc, #24]	; (408094 <i2c_master_read_register3+0x48>)
  40807c:	4b06      	ldr	r3, [pc, #24]	; (408098 <i2c_master_read_register3+0x4c>)
  40807e:	4798      	blx	r3
  408080:	4603      	mov	r3, r0
  408082:	2b00      	cmp	r3, #0
  408084:	d101      	bne.n	40808a <i2c_master_read_register3+0x3e>
  408086:	2300      	movs	r3, #0
  408088:	e000      	b.n	40808c <i2c_master_read_register3+0x40>
  40808a:	2308      	movs	r3, #8
  40808c:	4618      	mov	r0, r3
  40808e:	3720      	adds	r7, #32
  408090:	46bd      	mov	sp, r7
  408092:	bd80      	pop	{r7, pc}
  408094:	40018600 	.word	0x40018600
  408098:	00404bdd 	.word	0x00404bdd

0040809c <i2c_master_read_register3_raw>:
  40809c:	b580      	push	{r7, lr}
  40809e:	b088      	sub	sp, #32
  4080a0:	af00      	add	r7, sp, #0
  4080a2:	4603      	mov	r3, r0
  4080a4:	603a      	str	r2, [r7, #0]
  4080a6:	71fb      	strb	r3, [r7, #7]
  4080a8:	460b      	mov	r3, r1
  4080aa:	80bb      	strh	r3, [r7, #4]
  4080ac:	79fb      	ldrb	r3, [r7, #7]
  4080ae:	773b      	strb	r3, [r7, #28]
  4080b0:	2300      	movs	r3, #0
  4080b2:	613b      	str	r3, [r7, #16]
  4080b4:	683b      	ldr	r3, [r7, #0]
  4080b6:	617b      	str	r3, [r7, #20]
  4080b8:	88bb      	ldrh	r3, [r7, #4]
  4080ba:	61bb      	str	r3, [r7, #24]
  4080bc:	f107 030c 	add.w	r3, r7, #12
  4080c0:	4619      	mov	r1, r3
  4080c2:	4806      	ldr	r0, [pc, #24]	; (4080dc <i2c_master_read_register3_raw+0x40>)
  4080c4:	4b06      	ldr	r3, [pc, #24]	; (4080e0 <i2c_master_read_register3_raw+0x44>)
  4080c6:	4798      	blx	r3
  4080c8:	4603      	mov	r3, r0
  4080ca:	2b00      	cmp	r3, #0
  4080cc:	d101      	bne.n	4080d2 <i2c_master_read_register3_raw+0x36>
  4080ce:	2300      	movs	r3, #0
  4080d0:	e000      	b.n	4080d4 <i2c_master_read_register3_raw+0x38>
  4080d2:	2308      	movs	r3, #8
  4080d4:	4618      	mov	r0, r3
  4080d6:	3720      	adds	r7, #32
  4080d8:	46bd      	mov	sp, r7
  4080da:	bd80      	pop	{r7, pc}
  4080dc:	40018600 	.word	0x40018600
  4080e0:	00404bdd 	.word	0x00404bdd

004080e4 <i2c_master_write_register1>:
  4080e4:	b580      	push	{r7, lr}
  4080e6:	b088      	sub	sp, #32
  4080e8:	af00      	add	r7, sp, #0
  4080ea:	603b      	str	r3, [r7, #0]
  4080ec:	4603      	mov	r3, r0
  4080ee:	71fb      	strb	r3, [r7, #7]
  4080f0:	460b      	mov	r3, r1
  4080f2:	71bb      	strb	r3, [r7, #6]
  4080f4:	4613      	mov	r3, r2
  4080f6:	80bb      	strh	r3, [r7, #4]
  4080f8:	79fb      	ldrb	r3, [r7, #7]
  4080fa:	773b      	strb	r3, [r7, #28]
  4080fc:	79bb      	ldrb	r3, [r7, #6]
  4080fe:	733b      	strb	r3, [r7, #12]
  408100:	2301      	movs	r3, #1
  408102:	613b      	str	r3, [r7, #16]
  408104:	683b      	ldr	r3, [r7, #0]
  408106:	617b      	str	r3, [r7, #20]
  408108:	88bb      	ldrh	r3, [r7, #4]
  40810a:	61bb      	str	r3, [r7, #24]
  40810c:	f107 030c 	add.w	r3, r7, #12
  408110:	4619      	mov	r1, r3
  408112:	4804      	ldr	r0, [pc, #16]	; (408124 <i2c_master_write_register1+0x40>)
  408114:	4b04      	ldr	r3, [pc, #16]	; (408128 <i2c_master_write_register1+0x44>)
  408116:	4798      	blx	r3
  408118:	4603      	mov	r3, r0
  40811a:	4618      	mov	r0, r3
  40811c:	3720      	adds	r7, #32
  40811e:	46bd      	mov	sp, r7
  408120:	bd80      	pop	{r7, pc}
  408122:	bf00      	nop
  408124:	40020600 	.word	0x40020600
  408128:	00404ce9 	.word	0x00404ce9

0040812c <i2c_master_write_register1_raw>:
  40812c:	b580      	push	{r7, lr}
  40812e:	b088      	sub	sp, #32
  408130:	af00      	add	r7, sp, #0
  408132:	4603      	mov	r3, r0
  408134:	603a      	str	r2, [r7, #0]
  408136:	71fb      	strb	r3, [r7, #7]
  408138:	460b      	mov	r3, r1
  40813a:	80bb      	strh	r3, [r7, #4]
  40813c:	79fb      	ldrb	r3, [r7, #7]
  40813e:	773b      	strb	r3, [r7, #28]
  408140:	2300      	movs	r3, #0
  408142:	613b      	str	r3, [r7, #16]
  408144:	683b      	ldr	r3, [r7, #0]
  408146:	617b      	str	r3, [r7, #20]
  408148:	88bb      	ldrh	r3, [r7, #4]
  40814a:	61bb      	str	r3, [r7, #24]
  40814c:	f107 030c 	add.w	r3, r7, #12
  408150:	4619      	mov	r1, r3
  408152:	4804      	ldr	r0, [pc, #16]	; (408164 <i2c_master_write_register1_raw+0x38>)
  408154:	4b04      	ldr	r3, [pc, #16]	; (408168 <i2c_master_write_register1_raw+0x3c>)
  408156:	4798      	blx	r3
  408158:	4603      	mov	r3, r0
  40815a:	4618      	mov	r0, r3
  40815c:	3720      	adds	r7, #32
  40815e:	46bd      	mov	sp, r7
  408160:	bd80      	pop	{r7, pc}
  408162:	bf00      	nop
  408164:	40020600 	.word	0x40020600
  408168:	00404ce9 	.word	0x00404ce9

0040816c <i2c_master_write_register3>:
  40816c:	b580      	push	{r7, lr}
  40816e:	b088      	sub	sp, #32
  408170:	af00      	add	r7, sp, #0
  408172:	603b      	str	r3, [r7, #0]
  408174:	4603      	mov	r3, r0
  408176:	71fb      	strb	r3, [r7, #7]
  408178:	460b      	mov	r3, r1
  40817a:	71bb      	strb	r3, [r7, #6]
  40817c:	4613      	mov	r3, r2
  40817e:	80bb      	strh	r3, [r7, #4]
  408180:	79fb      	ldrb	r3, [r7, #7]
  408182:	773b      	strb	r3, [r7, #28]
  408184:	79bb      	ldrb	r3, [r7, #6]
  408186:	733b      	strb	r3, [r7, #12]
  408188:	2301      	movs	r3, #1
  40818a:	613b      	str	r3, [r7, #16]
  40818c:	683b      	ldr	r3, [r7, #0]
  40818e:	617b      	str	r3, [r7, #20]
  408190:	88bb      	ldrh	r3, [r7, #4]
  408192:	61bb      	str	r3, [r7, #24]
  408194:	f107 030c 	add.w	r3, r7, #12
  408198:	4619      	mov	r1, r3
  40819a:	4804      	ldr	r0, [pc, #16]	; (4081ac <i2c_master_write_register3+0x40>)
  40819c:	4b04      	ldr	r3, [pc, #16]	; (4081b0 <i2c_master_write_register3+0x44>)
  40819e:	4798      	blx	r3
  4081a0:	4603      	mov	r3, r0
  4081a2:	4618      	mov	r0, r3
  4081a4:	3720      	adds	r7, #32
  4081a6:	46bd      	mov	sp, r7
  4081a8:	bd80      	pop	{r7, pc}
  4081aa:	bf00      	nop
  4081ac:	40018600 	.word	0x40018600
  4081b0:	00404ce9 	.word	0x00404ce9

004081b4 <i2c_master_write_register3_raw>:
  4081b4:	b580      	push	{r7, lr}
  4081b6:	b088      	sub	sp, #32
  4081b8:	af00      	add	r7, sp, #0
  4081ba:	4603      	mov	r3, r0
  4081bc:	603a      	str	r2, [r7, #0]
  4081be:	71fb      	strb	r3, [r7, #7]
  4081c0:	460b      	mov	r3, r1
  4081c2:	80bb      	strh	r3, [r7, #4]
  4081c4:	79fb      	ldrb	r3, [r7, #7]
  4081c6:	773b      	strb	r3, [r7, #28]
  4081c8:	2300      	movs	r3, #0
  4081ca:	613b      	str	r3, [r7, #16]
  4081cc:	683b      	ldr	r3, [r7, #0]
  4081ce:	617b      	str	r3, [r7, #20]
  4081d0:	88bb      	ldrh	r3, [r7, #4]
  4081d2:	61bb      	str	r3, [r7, #24]
  4081d4:	f107 030c 	add.w	r3, r7, #12
  4081d8:	4619      	mov	r1, r3
  4081da:	4804      	ldr	r0, [pc, #16]	; (4081ec <i2c_master_write_register3_raw+0x38>)
  4081dc:	4b04      	ldr	r3, [pc, #16]	; (4081f0 <i2c_master_write_register3_raw+0x3c>)
  4081de:	4798      	blx	r3
  4081e0:	4603      	mov	r3, r0
  4081e2:	4618      	mov	r0, r3
  4081e4:	3720      	adds	r7, #32
  4081e6:	46bd      	mov	sp, r7
  4081e8:	bd80      	pop	{r7, pc}
  4081ea:	bf00      	nop
  4081ec:	40018600 	.word	0x40018600
  4081f0:	00404ce9 	.word	0x00404ce9

004081f4 <osc_get_rate>:
  4081f4:	b480      	push	{r7}
  4081f6:	b083      	sub	sp, #12
  4081f8:	af00      	add	r7, sp, #0
  4081fa:	6078      	str	r0, [r7, #4]
  4081fc:	687b      	ldr	r3, [r7, #4]
  4081fe:	2b07      	cmp	r3, #7
  408200:	d825      	bhi.n	40824e <osc_get_rate+0x5a>
  408202:	a201      	add	r2, pc, #4	; (adr r2, 408208 <osc_get_rate+0x14>)
  408204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408208:	00408229 	.word	0x00408229
  40820c:	0040822f 	.word	0x0040822f
  408210:	00408235 	.word	0x00408235
  408214:	0040823b 	.word	0x0040823b
  408218:	0040823f 	.word	0x0040823f
  40821c:	00408243 	.word	0x00408243
  408220:	00408247 	.word	0x00408247
  408224:	0040824b 	.word	0x0040824b
  408228:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40822c:	e010      	b.n	408250 <osc_get_rate+0x5c>
  40822e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408232:	e00d      	b.n	408250 <osc_get_rate+0x5c>
  408234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408238:	e00a      	b.n	408250 <osc_get_rate+0x5c>
  40823a:	4b08      	ldr	r3, [pc, #32]	; (40825c <osc_get_rate+0x68>)
  40823c:	e008      	b.n	408250 <osc_get_rate+0x5c>
  40823e:	4b08      	ldr	r3, [pc, #32]	; (408260 <osc_get_rate+0x6c>)
  408240:	e006      	b.n	408250 <osc_get_rate+0x5c>
  408242:	4b08      	ldr	r3, [pc, #32]	; (408264 <osc_get_rate+0x70>)
  408244:	e004      	b.n	408250 <osc_get_rate+0x5c>
  408246:	2300      	movs	r3, #0
  408248:	e002      	b.n	408250 <osc_get_rate+0x5c>
  40824a:	2300      	movs	r3, #0
  40824c:	e000      	b.n	408250 <osc_get_rate+0x5c>
  40824e:	2300      	movs	r3, #0
  408250:	4618      	mov	r0, r3
  408252:	370c      	adds	r7, #12
  408254:	46bd      	mov	sp, r7
  408256:	f85d 7b04 	ldr.w	r7, [sp], #4
  40825a:	4770      	bx	lr
  40825c:	007a1200 	.word	0x007a1200
  408260:	00f42400 	.word	0x00f42400
  408264:	016e3600 	.word	0x016e3600

00408268 <sysclk_get_main_hz>:
  408268:	b580      	push	{r7, lr}
  40826a:	af00      	add	r7, sp, #0
  40826c:	2001      	movs	r0, #1
  40826e:	4b04      	ldr	r3, [pc, #16]	; (408280 <sysclk_get_main_hz+0x18>)
  408270:	4798      	blx	r3
  408272:	4602      	mov	r2, r0
  408274:	f640 634e 	movw	r3, #3662	; 0xe4e
  408278:	fb03 f302 	mul.w	r3, r3, r2
  40827c:	4618      	mov	r0, r3
  40827e:	bd80      	pop	{r7, pc}
  408280:	004081f5 	.word	0x004081f5

00408284 <sysclk_get_peripheral_hz>:
  408284:	b580      	push	{r7, lr}
  408286:	af00      	add	r7, sp, #0
  408288:	4b02      	ldr	r3, [pc, #8]	; (408294 <sysclk_get_peripheral_hz+0x10>)
  40828a:	4798      	blx	r3
  40828c:	4603      	mov	r3, r0
  40828e:	4618      	mov	r0, r3
  408290:	bd80      	pop	{r7, pc}
  408292:	bf00      	nop
  408294:	00408269 	.word	0x00408269

00408298 <sysclk_enable_peripheral_clock>:
  408298:	b580      	push	{r7, lr}
  40829a:	b082      	sub	sp, #8
  40829c:	af00      	add	r7, sp, #0
  40829e:	6078      	str	r0, [r7, #4]
  4082a0:	6878      	ldr	r0, [r7, #4]
  4082a2:	4b03      	ldr	r3, [pc, #12]	; (4082b0 <sysclk_enable_peripheral_clock+0x18>)
  4082a4:	4798      	blx	r3
  4082a6:	bf00      	nop
  4082a8:	3708      	adds	r7, #8
  4082aa:	46bd      	mov	sp, r7
  4082ac:	bd80      	pop	{r7, pc}
  4082ae:	bf00      	nop
  4082b0:	00404305 	.word	0x00404305

004082b4 <ioport_disable_pin>:
  4082b4:	b480      	push	{r7}
  4082b6:	b089      	sub	sp, #36	; 0x24
  4082b8:	af00      	add	r7, sp, #0
  4082ba:	6078      	str	r0, [r7, #4]
  4082bc:	687b      	ldr	r3, [r7, #4]
  4082be:	61fb      	str	r3, [r7, #28]
  4082c0:	69fb      	ldr	r3, [r7, #28]
  4082c2:	61bb      	str	r3, [r7, #24]
  4082c4:	69bb      	ldr	r3, [r7, #24]
  4082c6:	095a      	lsrs	r2, r3, #5
  4082c8:	69fb      	ldr	r3, [r7, #28]
  4082ca:	617b      	str	r3, [r7, #20]
  4082cc:	697b      	ldr	r3, [r7, #20]
  4082ce:	f003 031f 	and.w	r3, r3, #31
  4082d2:	2101      	movs	r1, #1
  4082d4:	fa01 f303 	lsl.w	r3, r1, r3
  4082d8:	613a      	str	r2, [r7, #16]
  4082da:	60fb      	str	r3, [r7, #12]
  4082dc:	693b      	ldr	r3, [r7, #16]
  4082de:	60bb      	str	r3, [r7, #8]
  4082e0:	68bb      	ldr	r3, [r7, #8]
  4082e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4082e6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4082ea:	025b      	lsls	r3, r3, #9
  4082ec:	461a      	mov	r2, r3
  4082ee:	68fb      	ldr	r3, [r7, #12]
  4082f0:	6053      	str	r3, [r2, #4]
  4082f2:	bf00      	nop
  4082f4:	3724      	adds	r7, #36	; 0x24
  4082f6:	46bd      	mov	sp, r7
  4082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4082fc:	4770      	bx	lr

004082fe <ioport_disable_port>:
  4082fe:	b480      	push	{r7}
  408300:	b087      	sub	sp, #28
  408302:	af00      	add	r7, sp, #0
  408304:	6078      	str	r0, [r7, #4]
  408306:	6039      	str	r1, [r7, #0]
  408308:	687b      	ldr	r3, [r7, #4]
  40830a:	617b      	str	r3, [r7, #20]
  40830c:	683b      	ldr	r3, [r7, #0]
  40830e:	613b      	str	r3, [r7, #16]
  408310:	697b      	ldr	r3, [r7, #20]
  408312:	60fb      	str	r3, [r7, #12]
  408314:	68fb      	ldr	r3, [r7, #12]
  408316:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40831a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40831e:	025b      	lsls	r3, r3, #9
  408320:	461a      	mov	r2, r3
  408322:	693b      	ldr	r3, [r7, #16]
  408324:	6053      	str	r3, [r2, #4]
  408326:	bf00      	nop
  408328:	371c      	adds	r7, #28
  40832a:	46bd      	mov	sp, r7
  40832c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408330:	4770      	bx	lr

00408332 <ioport_set_port_mode>:
  408332:	b480      	push	{r7}
  408334:	b08b      	sub	sp, #44	; 0x2c
  408336:	af00      	add	r7, sp, #0
  408338:	60f8      	str	r0, [r7, #12]
  40833a:	60b9      	str	r1, [r7, #8]
  40833c:	607a      	str	r2, [r7, #4]
  40833e:	68fb      	ldr	r3, [r7, #12]
  408340:	627b      	str	r3, [r7, #36]	; 0x24
  408342:	68bb      	ldr	r3, [r7, #8]
  408344:	623b      	str	r3, [r7, #32]
  408346:	687b      	ldr	r3, [r7, #4]
  408348:	61fb      	str	r3, [r7, #28]
  40834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40834c:	61bb      	str	r3, [r7, #24]
  40834e:	69bb      	ldr	r3, [r7, #24]
  408350:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  408354:	f203 7307 	addw	r3, r3, #1799	; 0x707
  408358:	025b      	lsls	r3, r3, #9
  40835a:	617b      	str	r3, [r7, #20]
  40835c:	69fb      	ldr	r3, [r7, #28]
  40835e:	f003 0308 	and.w	r3, r3, #8
  408362:	2b00      	cmp	r3, #0
  408364:	d003      	beq.n	40836e <ioport_set_port_mode+0x3c>
  408366:	697b      	ldr	r3, [r7, #20]
  408368:	6a3a      	ldr	r2, [r7, #32]
  40836a:	665a      	str	r2, [r3, #100]	; 0x64
  40836c:	e002      	b.n	408374 <ioport_set_port_mode+0x42>
  40836e:	697b      	ldr	r3, [r7, #20]
  408370:	6a3a      	ldr	r2, [r7, #32]
  408372:	661a      	str	r2, [r3, #96]	; 0x60
  408374:	69fb      	ldr	r3, [r7, #28]
  408376:	f003 0310 	and.w	r3, r3, #16
  40837a:	2b00      	cmp	r3, #0
  40837c:	d004      	beq.n	408388 <ioport_set_port_mode+0x56>
  40837e:	697b      	ldr	r3, [r7, #20]
  408380:	6a3a      	ldr	r2, [r7, #32]
  408382:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  408386:	e003      	b.n	408390 <ioport_set_port_mode+0x5e>
  408388:	697b      	ldr	r3, [r7, #20]
  40838a:	6a3a      	ldr	r2, [r7, #32]
  40838c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  408390:	69fb      	ldr	r3, [r7, #28]
  408392:	f003 0320 	and.w	r3, r3, #32
  408396:	2b00      	cmp	r3, #0
  408398:	d003      	beq.n	4083a2 <ioport_set_port_mode+0x70>
  40839a:	697b      	ldr	r3, [r7, #20]
  40839c:	6a3a      	ldr	r2, [r7, #32]
  40839e:	651a      	str	r2, [r3, #80]	; 0x50
  4083a0:	e002      	b.n	4083a8 <ioport_set_port_mode+0x76>
  4083a2:	697b      	ldr	r3, [r7, #20]
  4083a4:	6a3a      	ldr	r2, [r7, #32]
  4083a6:	655a      	str	r2, [r3, #84]	; 0x54
  4083a8:	69fb      	ldr	r3, [r7, #28]
  4083aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4083ae:	2b00      	cmp	r3, #0
  4083b0:	d003      	beq.n	4083ba <ioport_set_port_mode+0x88>
  4083b2:	697b      	ldr	r3, [r7, #20]
  4083b4:	6a3a      	ldr	r2, [r7, #32]
  4083b6:	621a      	str	r2, [r3, #32]
  4083b8:	e002      	b.n	4083c0 <ioport_set_port_mode+0x8e>
  4083ba:	697b      	ldr	r3, [r7, #20]
  4083bc:	6a3a      	ldr	r2, [r7, #32]
  4083be:	625a      	str	r2, [r3, #36]	; 0x24
  4083c0:	69fb      	ldr	r3, [r7, #28]
  4083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4083c6:	2b00      	cmp	r3, #0
  4083c8:	d004      	beq.n	4083d4 <ioport_set_port_mode+0xa2>
  4083ca:	697b      	ldr	r3, [r7, #20]
  4083cc:	6a3a      	ldr	r2, [r7, #32]
  4083ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4083d2:	e003      	b.n	4083dc <ioport_set_port_mode+0xaa>
  4083d4:	697b      	ldr	r3, [r7, #20]
  4083d6:	6a3a      	ldr	r2, [r7, #32]
  4083d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4083dc:	69fb      	ldr	r3, [r7, #28]
  4083de:	f003 0301 	and.w	r3, r3, #1
  4083e2:	2b00      	cmp	r3, #0
  4083e4:	d006      	beq.n	4083f4 <ioport_set_port_mode+0xc2>
  4083e6:	697b      	ldr	r3, [r7, #20]
  4083e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4083ea:	6a3b      	ldr	r3, [r7, #32]
  4083ec:	431a      	orrs	r2, r3
  4083ee:	697b      	ldr	r3, [r7, #20]
  4083f0:	671a      	str	r2, [r3, #112]	; 0x70
  4083f2:	e006      	b.n	408402 <ioport_set_port_mode+0xd0>
  4083f4:	697b      	ldr	r3, [r7, #20]
  4083f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4083f8:	6a3b      	ldr	r3, [r7, #32]
  4083fa:	43db      	mvns	r3, r3
  4083fc:	401a      	ands	r2, r3
  4083fe:	697b      	ldr	r3, [r7, #20]
  408400:	671a      	str	r2, [r3, #112]	; 0x70
  408402:	69fb      	ldr	r3, [r7, #28]
  408404:	f003 0302 	and.w	r3, r3, #2
  408408:	2b00      	cmp	r3, #0
  40840a:	d006      	beq.n	40841a <ioport_set_port_mode+0xe8>
  40840c:	697b      	ldr	r3, [r7, #20]
  40840e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408410:	6a3b      	ldr	r3, [r7, #32]
  408412:	431a      	orrs	r2, r3
  408414:	697b      	ldr	r3, [r7, #20]
  408416:	675a      	str	r2, [r3, #116]	; 0x74
  408418:	e006      	b.n	408428 <ioport_set_port_mode+0xf6>
  40841a:	697b      	ldr	r3, [r7, #20]
  40841c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40841e:	6a3b      	ldr	r3, [r7, #32]
  408420:	43db      	mvns	r3, r3
  408422:	401a      	ands	r2, r3
  408424:	697b      	ldr	r3, [r7, #20]
  408426:	675a      	str	r2, [r3, #116]	; 0x74
  408428:	bf00      	nop
  40842a:	372c      	adds	r7, #44	; 0x2c
  40842c:	46bd      	mov	sp, r7
  40842e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408432:	4770      	bx	lr

00408434 <ioport_set_pin_mode>:
  408434:	b480      	push	{r7}
  408436:	b08d      	sub	sp, #52	; 0x34
  408438:	af00      	add	r7, sp, #0
  40843a:	6078      	str	r0, [r7, #4]
  40843c:	6039      	str	r1, [r7, #0]
  40843e:	687b      	ldr	r3, [r7, #4]
  408440:	62fb      	str	r3, [r7, #44]	; 0x2c
  408442:	683b      	ldr	r3, [r7, #0]
  408444:	62bb      	str	r3, [r7, #40]	; 0x28
  408446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408448:	627b      	str	r3, [r7, #36]	; 0x24
  40844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40844c:	095a      	lsrs	r2, r3, #5
  40844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408450:	623b      	str	r3, [r7, #32]
  408452:	6a3b      	ldr	r3, [r7, #32]
  408454:	f003 031f 	and.w	r3, r3, #31
  408458:	2101      	movs	r1, #1
  40845a:	fa01 f303 	lsl.w	r3, r1, r3
  40845e:	61fa      	str	r2, [r7, #28]
  408460:	61bb      	str	r3, [r7, #24]
  408462:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408464:	617b      	str	r3, [r7, #20]
  408466:	69fb      	ldr	r3, [r7, #28]
  408468:	613b      	str	r3, [r7, #16]
  40846a:	693b      	ldr	r3, [r7, #16]
  40846c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  408470:	f203 7307 	addw	r3, r3, #1799	; 0x707
  408474:	025b      	lsls	r3, r3, #9
  408476:	60fb      	str	r3, [r7, #12]
  408478:	697b      	ldr	r3, [r7, #20]
  40847a:	f003 0308 	and.w	r3, r3, #8
  40847e:	2b00      	cmp	r3, #0
  408480:	d003      	beq.n	40848a <ioport_set_pin_mode+0x56>
  408482:	68fb      	ldr	r3, [r7, #12]
  408484:	69ba      	ldr	r2, [r7, #24]
  408486:	665a      	str	r2, [r3, #100]	; 0x64
  408488:	e002      	b.n	408490 <ioport_set_pin_mode+0x5c>
  40848a:	68fb      	ldr	r3, [r7, #12]
  40848c:	69ba      	ldr	r2, [r7, #24]
  40848e:	661a      	str	r2, [r3, #96]	; 0x60
  408490:	697b      	ldr	r3, [r7, #20]
  408492:	f003 0310 	and.w	r3, r3, #16
  408496:	2b00      	cmp	r3, #0
  408498:	d004      	beq.n	4084a4 <ioport_set_pin_mode+0x70>
  40849a:	68fb      	ldr	r3, [r7, #12]
  40849c:	69ba      	ldr	r2, [r7, #24]
  40849e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4084a2:	e003      	b.n	4084ac <ioport_set_pin_mode+0x78>
  4084a4:	68fb      	ldr	r3, [r7, #12]
  4084a6:	69ba      	ldr	r2, [r7, #24]
  4084a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  4084ac:	697b      	ldr	r3, [r7, #20]
  4084ae:	f003 0320 	and.w	r3, r3, #32
  4084b2:	2b00      	cmp	r3, #0
  4084b4:	d003      	beq.n	4084be <ioport_set_pin_mode+0x8a>
  4084b6:	68fb      	ldr	r3, [r7, #12]
  4084b8:	69ba      	ldr	r2, [r7, #24]
  4084ba:	651a      	str	r2, [r3, #80]	; 0x50
  4084bc:	e002      	b.n	4084c4 <ioport_set_pin_mode+0x90>
  4084be:	68fb      	ldr	r3, [r7, #12]
  4084c0:	69ba      	ldr	r2, [r7, #24]
  4084c2:	655a      	str	r2, [r3, #84]	; 0x54
  4084c4:	697b      	ldr	r3, [r7, #20]
  4084c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4084ca:	2b00      	cmp	r3, #0
  4084cc:	d003      	beq.n	4084d6 <ioport_set_pin_mode+0xa2>
  4084ce:	68fb      	ldr	r3, [r7, #12]
  4084d0:	69ba      	ldr	r2, [r7, #24]
  4084d2:	621a      	str	r2, [r3, #32]
  4084d4:	e002      	b.n	4084dc <ioport_set_pin_mode+0xa8>
  4084d6:	68fb      	ldr	r3, [r7, #12]
  4084d8:	69ba      	ldr	r2, [r7, #24]
  4084da:	625a      	str	r2, [r3, #36]	; 0x24
  4084dc:	697b      	ldr	r3, [r7, #20]
  4084de:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4084e2:	2b00      	cmp	r3, #0
  4084e4:	d004      	beq.n	4084f0 <ioport_set_pin_mode+0xbc>
  4084e6:	68fb      	ldr	r3, [r7, #12]
  4084e8:	69ba      	ldr	r2, [r7, #24]
  4084ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4084ee:	e003      	b.n	4084f8 <ioport_set_pin_mode+0xc4>
  4084f0:	68fb      	ldr	r3, [r7, #12]
  4084f2:	69ba      	ldr	r2, [r7, #24]
  4084f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4084f8:	697b      	ldr	r3, [r7, #20]
  4084fa:	f003 0301 	and.w	r3, r3, #1
  4084fe:	2b00      	cmp	r3, #0
  408500:	d006      	beq.n	408510 <ioport_set_pin_mode+0xdc>
  408502:	68fb      	ldr	r3, [r7, #12]
  408504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408506:	69bb      	ldr	r3, [r7, #24]
  408508:	431a      	orrs	r2, r3
  40850a:	68fb      	ldr	r3, [r7, #12]
  40850c:	671a      	str	r2, [r3, #112]	; 0x70
  40850e:	e006      	b.n	40851e <ioport_set_pin_mode+0xea>
  408510:	68fb      	ldr	r3, [r7, #12]
  408512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408514:	69bb      	ldr	r3, [r7, #24]
  408516:	43db      	mvns	r3, r3
  408518:	401a      	ands	r2, r3
  40851a:	68fb      	ldr	r3, [r7, #12]
  40851c:	671a      	str	r2, [r3, #112]	; 0x70
  40851e:	697b      	ldr	r3, [r7, #20]
  408520:	f003 0302 	and.w	r3, r3, #2
  408524:	2b00      	cmp	r3, #0
  408526:	d006      	beq.n	408536 <ioport_set_pin_mode+0x102>
  408528:	68fb      	ldr	r3, [r7, #12]
  40852a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40852c:	69bb      	ldr	r3, [r7, #24]
  40852e:	431a      	orrs	r2, r3
  408530:	68fb      	ldr	r3, [r7, #12]
  408532:	675a      	str	r2, [r3, #116]	; 0x74
  408534:	e006      	b.n	408544 <ioport_set_pin_mode+0x110>
  408536:	68fb      	ldr	r3, [r7, #12]
  408538:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40853a:	69bb      	ldr	r3, [r7, #24]
  40853c:	43db      	mvns	r3, r3
  40853e:	401a      	ands	r2, r3
  408540:	68fb      	ldr	r3, [r7, #12]
  408542:	675a      	str	r2, [r3, #116]	; 0x74
  408544:	bf00      	nop
  408546:	3734      	adds	r7, #52	; 0x34
  408548:	46bd      	mov	sp, r7
  40854a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40854e:	4770      	bx	lr

00408550 <usart_serial_init>:
  408550:	b580      	push	{r7, lr}
  408552:	b088      	sub	sp, #32
  408554:	af00      	add	r7, sp, #0
  408556:	6078      	str	r0, [r7, #4]
  408558:	6039      	str	r1, [r7, #0]
  40855a:	683b      	ldr	r3, [r7, #0]
  40855c:	681b      	ldr	r3, [r3, #0]
  40855e:	60bb      	str	r3, [r7, #8]
  408560:	683b      	ldr	r3, [r7, #0]
  408562:	685b      	ldr	r3, [r3, #4]
  408564:	60fb      	str	r3, [r7, #12]
  408566:	683b      	ldr	r3, [r7, #0]
  408568:	689b      	ldr	r3, [r3, #8]
  40856a:	613b      	str	r3, [r7, #16]
  40856c:	683b      	ldr	r3, [r7, #0]
  40856e:	68db      	ldr	r3, [r3, #12]
  408570:	617b      	str	r3, [r7, #20]
  408572:	2300      	movs	r3, #0
  408574:	61bb      	str	r3, [r7, #24]
  408576:	687b      	ldr	r3, [r7, #4]
  408578:	4a69      	ldr	r2, [pc, #420]	; (408720 <usart_serial_init+0x1d0>)
  40857a:	4293      	cmp	r3, r2
  40857c:	d115      	bne.n	4085aa <usart_serial_init+0x5a>
  40857e:	4869      	ldr	r0, [pc, #420]	; (408724 <usart_serial_init+0x1d4>)
  408580:	4b69      	ldr	r3, [pc, #420]	; (408728 <usart_serial_init+0x1d8>)
  408582:	4798      	blx	r3
  408584:	2101      	movs	r1, #1
  408586:	4867      	ldr	r0, [pc, #412]	; (408724 <usart_serial_init+0x1d4>)
  408588:	4b68      	ldr	r3, [pc, #416]	; (40872c <usart_serial_init+0x1dc>)
  40858a:	4798      	blx	r3
  40858c:	4b68      	ldr	r3, [pc, #416]	; (408730 <usart_serial_init+0x1e0>)
  40858e:	4798      	blx	r3
  408590:	4602      	mov	r2, r0
  408592:	f107 0308 	add.w	r3, r7, #8
  408596:	4619      	mov	r1, r3
  408598:	6878      	ldr	r0, [r7, #4]
  40859a:	4b66      	ldr	r3, [pc, #408]	; (408734 <usart_serial_init+0x1e4>)
  40859c:	4798      	blx	r3
  40859e:	6878      	ldr	r0, [r7, #4]
  4085a0:	4b65      	ldr	r3, [pc, #404]	; (408738 <usart_serial_init+0x1e8>)
  4085a2:	4798      	blx	r3
  4085a4:	6878      	ldr	r0, [r7, #4]
  4085a6:	4b65      	ldr	r3, [pc, #404]	; (40873c <usart_serial_init+0x1ec>)
  4085a8:	4798      	blx	r3
  4085aa:	687b      	ldr	r3, [r7, #4]
  4085ac:	4a64      	ldr	r2, [pc, #400]	; (408740 <usart_serial_init+0x1f0>)
  4085ae:	4293      	cmp	r3, r2
  4085b0:	d115      	bne.n	4085de <usart_serial_init+0x8e>
  4085b2:	4864      	ldr	r0, [pc, #400]	; (408744 <usart_serial_init+0x1f4>)
  4085b4:	4b5c      	ldr	r3, [pc, #368]	; (408728 <usart_serial_init+0x1d8>)
  4085b6:	4798      	blx	r3
  4085b8:	2101      	movs	r1, #1
  4085ba:	4862      	ldr	r0, [pc, #392]	; (408744 <usart_serial_init+0x1f4>)
  4085bc:	4b5b      	ldr	r3, [pc, #364]	; (40872c <usart_serial_init+0x1dc>)
  4085be:	4798      	blx	r3
  4085c0:	4b5b      	ldr	r3, [pc, #364]	; (408730 <usart_serial_init+0x1e0>)
  4085c2:	4798      	blx	r3
  4085c4:	4602      	mov	r2, r0
  4085c6:	f107 0308 	add.w	r3, r7, #8
  4085ca:	4619      	mov	r1, r3
  4085cc:	6878      	ldr	r0, [r7, #4]
  4085ce:	4b59      	ldr	r3, [pc, #356]	; (408734 <usart_serial_init+0x1e4>)
  4085d0:	4798      	blx	r3
  4085d2:	6878      	ldr	r0, [r7, #4]
  4085d4:	4b58      	ldr	r3, [pc, #352]	; (408738 <usart_serial_init+0x1e8>)
  4085d6:	4798      	blx	r3
  4085d8:	6878      	ldr	r0, [r7, #4]
  4085da:	4b58      	ldr	r3, [pc, #352]	; (40873c <usart_serial_init+0x1ec>)
  4085dc:	4798      	blx	r3
  4085de:	687b      	ldr	r3, [r7, #4]
  4085e0:	4a59      	ldr	r2, [pc, #356]	; (408748 <usart_serial_init+0x1f8>)
  4085e2:	4293      	cmp	r3, r2
  4085e4:	d115      	bne.n	408612 <usart_serial_init+0xc2>
  4085e6:	4859      	ldr	r0, [pc, #356]	; (40874c <usart_serial_init+0x1fc>)
  4085e8:	4b4f      	ldr	r3, [pc, #316]	; (408728 <usart_serial_init+0x1d8>)
  4085ea:	4798      	blx	r3
  4085ec:	2101      	movs	r1, #1
  4085ee:	4857      	ldr	r0, [pc, #348]	; (40874c <usart_serial_init+0x1fc>)
  4085f0:	4b4e      	ldr	r3, [pc, #312]	; (40872c <usart_serial_init+0x1dc>)
  4085f2:	4798      	blx	r3
  4085f4:	4b4e      	ldr	r3, [pc, #312]	; (408730 <usart_serial_init+0x1e0>)
  4085f6:	4798      	blx	r3
  4085f8:	4602      	mov	r2, r0
  4085fa:	f107 0308 	add.w	r3, r7, #8
  4085fe:	4619      	mov	r1, r3
  408600:	6878      	ldr	r0, [r7, #4]
  408602:	4b4c      	ldr	r3, [pc, #304]	; (408734 <usart_serial_init+0x1e4>)
  408604:	4798      	blx	r3
  408606:	6878      	ldr	r0, [r7, #4]
  408608:	4b4b      	ldr	r3, [pc, #300]	; (408738 <usart_serial_init+0x1e8>)
  40860a:	4798      	blx	r3
  40860c:	6878      	ldr	r0, [r7, #4]
  40860e:	4b4b      	ldr	r3, [pc, #300]	; (40873c <usart_serial_init+0x1ec>)
  408610:	4798      	blx	r3
  408612:	687b      	ldr	r3, [r7, #4]
  408614:	4a4e      	ldr	r2, [pc, #312]	; (408750 <usart_serial_init+0x200>)
  408616:	4293      	cmp	r3, r2
  408618:	d115      	bne.n	408646 <usart_serial_init+0xf6>
  40861a:	484e      	ldr	r0, [pc, #312]	; (408754 <usart_serial_init+0x204>)
  40861c:	4b42      	ldr	r3, [pc, #264]	; (408728 <usart_serial_init+0x1d8>)
  40861e:	4798      	blx	r3
  408620:	2101      	movs	r1, #1
  408622:	484c      	ldr	r0, [pc, #304]	; (408754 <usart_serial_init+0x204>)
  408624:	4b41      	ldr	r3, [pc, #260]	; (40872c <usart_serial_init+0x1dc>)
  408626:	4798      	blx	r3
  408628:	4b41      	ldr	r3, [pc, #260]	; (408730 <usart_serial_init+0x1e0>)
  40862a:	4798      	blx	r3
  40862c:	4602      	mov	r2, r0
  40862e:	f107 0308 	add.w	r3, r7, #8
  408632:	4619      	mov	r1, r3
  408634:	6878      	ldr	r0, [r7, #4]
  408636:	4b3f      	ldr	r3, [pc, #252]	; (408734 <usart_serial_init+0x1e4>)
  408638:	4798      	blx	r3
  40863a:	6878      	ldr	r0, [r7, #4]
  40863c:	4b3e      	ldr	r3, [pc, #248]	; (408738 <usart_serial_init+0x1e8>)
  40863e:	4798      	blx	r3
  408640:	6878      	ldr	r0, [r7, #4]
  408642:	4b3e      	ldr	r3, [pc, #248]	; (40873c <usart_serial_init+0x1ec>)
  408644:	4798      	blx	r3
  408646:	687b      	ldr	r3, [r7, #4]
  408648:	4a43      	ldr	r2, [pc, #268]	; (408758 <usart_serial_init+0x208>)
  40864a:	4293      	cmp	r3, r2
  40864c:	d115      	bne.n	40867a <usart_serial_init+0x12a>
  40864e:	4843      	ldr	r0, [pc, #268]	; (40875c <usart_serial_init+0x20c>)
  408650:	4b35      	ldr	r3, [pc, #212]	; (408728 <usart_serial_init+0x1d8>)
  408652:	4798      	blx	r3
  408654:	2101      	movs	r1, #1
  408656:	4841      	ldr	r0, [pc, #260]	; (40875c <usart_serial_init+0x20c>)
  408658:	4b34      	ldr	r3, [pc, #208]	; (40872c <usart_serial_init+0x1dc>)
  40865a:	4798      	blx	r3
  40865c:	4b34      	ldr	r3, [pc, #208]	; (408730 <usart_serial_init+0x1e0>)
  40865e:	4798      	blx	r3
  408660:	4602      	mov	r2, r0
  408662:	f107 0308 	add.w	r3, r7, #8
  408666:	4619      	mov	r1, r3
  408668:	6878      	ldr	r0, [r7, #4]
  40866a:	4b32      	ldr	r3, [pc, #200]	; (408734 <usart_serial_init+0x1e4>)
  40866c:	4798      	blx	r3
  40866e:	6878      	ldr	r0, [r7, #4]
  408670:	4b31      	ldr	r3, [pc, #196]	; (408738 <usart_serial_init+0x1e8>)
  408672:	4798      	blx	r3
  408674:	6878      	ldr	r0, [r7, #4]
  408676:	4b31      	ldr	r3, [pc, #196]	; (40873c <usart_serial_init+0x1ec>)
  408678:	4798      	blx	r3
  40867a:	687b      	ldr	r3, [r7, #4]
  40867c:	4a38      	ldr	r2, [pc, #224]	; (408760 <usart_serial_init+0x210>)
  40867e:	4293      	cmp	r3, r2
  408680:	d115      	bne.n	4086ae <usart_serial_init+0x15e>
  408682:	4838      	ldr	r0, [pc, #224]	; (408764 <usart_serial_init+0x214>)
  408684:	4b28      	ldr	r3, [pc, #160]	; (408728 <usart_serial_init+0x1d8>)
  408686:	4798      	blx	r3
  408688:	2101      	movs	r1, #1
  40868a:	4836      	ldr	r0, [pc, #216]	; (408764 <usart_serial_init+0x214>)
  40868c:	4b27      	ldr	r3, [pc, #156]	; (40872c <usart_serial_init+0x1dc>)
  40868e:	4798      	blx	r3
  408690:	4b27      	ldr	r3, [pc, #156]	; (408730 <usart_serial_init+0x1e0>)
  408692:	4798      	blx	r3
  408694:	4602      	mov	r2, r0
  408696:	f107 0308 	add.w	r3, r7, #8
  40869a:	4619      	mov	r1, r3
  40869c:	6878      	ldr	r0, [r7, #4]
  40869e:	4b25      	ldr	r3, [pc, #148]	; (408734 <usart_serial_init+0x1e4>)
  4086a0:	4798      	blx	r3
  4086a2:	6878      	ldr	r0, [r7, #4]
  4086a4:	4b24      	ldr	r3, [pc, #144]	; (408738 <usart_serial_init+0x1e8>)
  4086a6:	4798      	blx	r3
  4086a8:	6878      	ldr	r0, [r7, #4]
  4086aa:	4b24      	ldr	r3, [pc, #144]	; (40873c <usart_serial_init+0x1ec>)
  4086ac:	4798      	blx	r3
  4086ae:	687b      	ldr	r3, [r7, #4]
  4086b0:	4a2d      	ldr	r2, [pc, #180]	; (408768 <usart_serial_init+0x218>)
  4086b2:	4293      	cmp	r3, r2
  4086b4:	d115      	bne.n	4086e2 <usart_serial_init+0x192>
  4086b6:	482d      	ldr	r0, [pc, #180]	; (40876c <usart_serial_init+0x21c>)
  4086b8:	4b1b      	ldr	r3, [pc, #108]	; (408728 <usart_serial_init+0x1d8>)
  4086ba:	4798      	blx	r3
  4086bc:	2101      	movs	r1, #1
  4086be:	482b      	ldr	r0, [pc, #172]	; (40876c <usart_serial_init+0x21c>)
  4086c0:	4b1a      	ldr	r3, [pc, #104]	; (40872c <usart_serial_init+0x1dc>)
  4086c2:	4798      	blx	r3
  4086c4:	4b1a      	ldr	r3, [pc, #104]	; (408730 <usart_serial_init+0x1e0>)
  4086c6:	4798      	blx	r3
  4086c8:	4602      	mov	r2, r0
  4086ca:	f107 0308 	add.w	r3, r7, #8
  4086ce:	4619      	mov	r1, r3
  4086d0:	6878      	ldr	r0, [r7, #4]
  4086d2:	4b18      	ldr	r3, [pc, #96]	; (408734 <usart_serial_init+0x1e4>)
  4086d4:	4798      	blx	r3
  4086d6:	6878      	ldr	r0, [r7, #4]
  4086d8:	4b17      	ldr	r3, [pc, #92]	; (408738 <usart_serial_init+0x1e8>)
  4086da:	4798      	blx	r3
  4086dc:	6878      	ldr	r0, [r7, #4]
  4086de:	4b17      	ldr	r3, [pc, #92]	; (40873c <usart_serial_init+0x1ec>)
  4086e0:	4798      	blx	r3
  4086e2:	687b      	ldr	r3, [r7, #4]
  4086e4:	4a22      	ldr	r2, [pc, #136]	; (408770 <usart_serial_init+0x220>)
  4086e6:	4293      	cmp	r3, r2
  4086e8:	d115      	bne.n	408716 <usart_serial_init+0x1c6>
  4086ea:	4822      	ldr	r0, [pc, #136]	; (408774 <usart_serial_init+0x224>)
  4086ec:	4b0e      	ldr	r3, [pc, #56]	; (408728 <usart_serial_init+0x1d8>)
  4086ee:	4798      	blx	r3
  4086f0:	2101      	movs	r1, #1
  4086f2:	4820      	ldr	r0, [pc, #128]	; (408774 <usart_serial_init+0x224>)
  4086f4:	4b0d      	ldr	r3, [pc, #52]	; (40872c <usart_serial_init+0x1dc>)
  4086f6:	4798      	blx	r3
  4086f8:	4b0d      	ldr	r3, [pc, #52]	; (408730 <usart_serial_init+0x1e0>)
  4086fa:	4798      	blx	r3
  4086fc:	4602      	mov	r2, r0
  4086fe:	f107 0308 	add.w	r3, r7, #8
  408702:	4619      	mov	r1, r3
  408704:	6878      	ldr	r0, [r7, #4]
  408706:	4b0b      	ldr	r3, [pc, #44]	; (408734 <usart_serial_init+0x1e4>)
  408708:	4798      	blx	r3
  40870a:	6878      	ldr	r0, [r7, #4]
  40870c:	4b0a      	ldr	r3, [pc, #40]	; (408738 <usart_serial_init+0x1e8>)
  40870e:	4798      	blx	r3
  408710:	6878      	ldr	r0, [r7, #4]
  408712:	4b0a      	ldr	r3, [pc, #40]	; (40873c <usart_serial_init+0x1ec>)
  408714:	4798      	blx	r3
  408716:	bf00      	nop
  408718:	3720      	adds	r7, #32
  40871a:	46bd      	mov	sp, r7
  40871c:	bd80      	pop	{r7, pc}
  40871e:	bf00      	nop
  408720:	4000c200 	.word	0x4000c200
  408724:	4000c000 	.word	0x4000c000
  408728:	004037d1 	.word	0x004037d1
  40872c:	00403939 	.word	0x00403939
  408730:	00408285 	.word	0x00408285
  408734:	00404f8d 	.word	0x00404f8d
  408738:	00405011 	.word	0x00405011
  40873c:	00405045 	.word	0x00405045
  408740:	40020200 	.word	0x40020200
  408744:	40020000 	.word	0x40020000
  408748:	40024200 	.word	0x40024200
  40874c:	40024000 	.word	0x40024000
  408750:	40018200 	.word	0x40018200
  408754:	40018000 	.word	0x40018000
  408758:	4001c200 	.word	0x4001c200
  40875c:	4001c000 	.word	0x4001c000
  408760:	40008200 	.word	0x40008200
  408764:	40008000 	.word	0x40008000
  408768:	40040200 	.word	0x40040200
  40876c:	40040000 	.word	0x40040000
  408770:	40034200 	.word	0x40034200
  408774:	40034000 	.word	0x40034000

00408778 <usart_serial_putchar>:
  408778:	b580      	push	{r7, lr}
  40877a:	b082      	sub	sp, #8
  40877c:	af00      	add	r7, sp, #0
  40877e:	6078      	str	r0, [r7, #4]
  408780:	460b      	mov	r3, r1
  408782:	70fb      	strb	r3, [r7, #3]
  408784:	687b      	ldr	r3, [r7, #4]
  408786:	4a3e      	ldr	r2, [pc, #248]	; (408880 <usart_serial_putchar+0x108>)
  408788:	4293      	cmp	r3, r2
  40878a:	d10a      	bne.n	4087a2 <usart_serial_putchar+0x2a>
  40878c:	bf00      	nop
  40878e:	78fb      	ldrb	r3, [r7, #3]
  408790:	4619      	mov	r1, r3
  408792:	6878      	ldr	r0, [r7, #4]
  408794:	4b3b      	ldr	r3, [pc, #236]	; (408884 <usart_serial_putchar+0x10c>)
  408796:	4798      	blx	r3
  408798:	4603      	mov	r3, r0
  40879a:	2b00      	cmp	r3, #0
  40879c:	d1f7      	bne.n	40878e <usart_serial_putchar+0x16>
  40879e:	2301      	movs	r3, #1
  4087a0:	e069      	b.n	408876 <usart_serial_putchar+0xfe>
  4087a2:	687b      	ldr	r3, [r7, #4]
  4087a4:	4a38      	ldr	r2, [pc, #224]	; (408888 <usart_serial_putchar+0x110>)
  4087a6:	4293      	cmp	r3, r2
  4087a8:	d10a      	bne.n	4087c0 <usart_serial_putchar+0x48>
  4087aa:	bf00      	nop
  4087ac:	78fb      	ldrb	r3, [r7, #3]
  4087ae:	4619      	mov	r1, r3
  4087b0:	6878      	ldr	r0, [r7, #4]
  4087b2:	4b34      	ldr	r3, [pc, #208]	; (408884 <usart_serial_putchar+0x10c>)
  4087b4:	4798      	blx	r3
  4087b6:	4603      	mov	r3, r0
  4087b8:	2b00      	cmp	r3, #0
  4087ba:	d1f7      	bne.n	4087ac <usart_serial_putchar+0x34>
  4087bc:	2301      	movs	r3, #1
  4087be:	e05a      	b.n	408876 <usart_serial_putchar+0xfe>
  4087c0:	687b      	ldr	r3, [r7, #4]
  4087c2:	4a32      	ldr	r2, [pc, #200]	; (40888c <usart_serial_putchar+0x114>)
  4087c4:	4293      	cmp	r3, r2
  4087c6:	d10a      	bne.n	4087de <usart_serial_putchar+0x66>
  4087c8:	bf00      	nop
  4087ca:	78fb      	ldrb	r3, [r7, #3]
  4087cc:	4619      	mov	r1, r3
  4087ce:	6878      	ldr	r0, [r7, #4]
  4087d0:	4b2c      	ldr	r3, [pc, #176]	; (408884 <usart_serial_putchar+0x10c>)
  4087d2:	4798      	blx	r3
  4087d4:	4603      	mov	r3, r0
  4087d6:	2b00      	cmp	r3, #0
  4087d8:	d1f7      	bne.n	4087ca <usart_serial_putchar+0x52>
  4087da:	2301      	movs	r3, #1
  4087dc:	e04b      	b.n	408876 <usart_serial_putchar+0xfe>
  4087de:	687b      	ldr	r3, [r7, #4]
  4087e0:	4a2b      	ldr	r2, [pc, #172]	; (408890 <usart_serial_putchar+0x118>)
  4087e2:	4293      	cmp	r3, r2
  4087e4:	d10a      	bne.n	4087fc <usart_serial_putchar+0x84>
  4087e6:	bf00      	nop
  4087e8:	78fb      	ldrb	r3, [r7, #3]
  4087ea:	4619      	mov	r1, r3
  4087ec:	6878      	ldr	r0, [r7, #4]
  4087ee:	4b25      	ldr	r3, [pc, #148]	; (408884 <usart_serial_putchar+0x10c>)
  4087f0:	4798      	blx	r3
  4087f2:	4603      	mov	r3, r0
  4087f4:	2b00      	cmp	r3, #0
  4087f6:	d1f7      	bne.n	4087e8 <usart_serial_putchar+0x70>
  4087f8:	2301      	movs	r3, #1
  4087fa:	e03c      	b.n	408876 <usart_serial_putchar+0xfe>
  4087fc:	687b      	ldr	r3, [r7, #4]
  4087fe:	4a25      	ldr	r2, [pc, #148]	; (408894 <usart_serial_putchar+0x11c>)
  408800:	4293      	cmp	r3, r2
  408802:	d10a      	bne.n	40881a <usart_serial_putchar+0xa2>
  408804:	bf00      	nop
  408806:	78fb      	ldrb	r3, [r7, #3]
  408808:	4619      	mov	r1, r3
  40880a:	6878      	ldr	r0, [r7, #4]
  40880c:	4b1d      	ldr	r3, [pc, #116]	; (408884 <usart_serial_putchar+0x10c>)
  40880e:	4798      	blx	r3
  408810:	4603      	mov	r3, r0
  408812:	2b00      	cmp	r3, #0
  408814:	d1f7      	bne.n	408806 <usart_serial_putchar+0x8e>
  408816:	2301      	movs	r3, #1
  408818:	e02d      	b.n	408876 <usart_serial_putchar+0xfe>
  40881a:	687b      	ldr	r3, [r7, #4]
  40881c:	4a1e      	ldr	r2, [pc, #120]	; (408898 <usart_serial_putchar+0x120>)
  40881e:	4293      	cmp	r3, r2
  408820:	d10a      	bne.n	408838 <usart_serial_putchar+0xc0>
  408822:	bf00      	nop
  408824:	78fb      	ldrb	r3, [r7, #3]
  408826:	4619      	mov	r1, r3
  408828:	6878      	ldr	r0, [r7, #4]
  40882a:	4b16      	ldr	r3, [pc, #88]	; (408884 <usart_serial_putchar+0x10c>)
  40882c:	4798      	blx	r3
  40882e:	4603      	mov	r3, r0
  408830:	2b00      	cmp	r3, #0
  408832:	d1f7      	bne.n	408824 <usart_serial_putchar+0xac>
  408834:	2301      	movs	r3, #1
  408836:	e01e      	b.n	408876 <usart_serial_putchar+0xfe>
  408838:	687b      	ldr	r3, [r7, #4]
  40883a:	4a18      	ldr	r2, [pc, #96]	; (40889c <usart_serial_putchar+0x124>)
  40883c:	4293      	cmp	r3, r2
  40883e:	d10a      	bne.n	408856 <usart_serial_putchar+0xde>
  408840:	bf00      	nop
  408842:	78fb      	ldrb	r3, [r7, #3]
  408844:	4619      	mov	r1, r3
  408846:	6878      	ldr	r0, [r7, #4]
  408848:	4b0e      	ldr	r3, [pc, #56]	; (408884 <usart_serial_putchar+0x10c>)
  40884a:	4798      	blx	r3
  40884c:	4603      	mov	r3, r0
  40884e:	2b00      	cmp	r3, #0
  408850:	d1f7      	bne.n	408842 <usart_serial_putchar+0xca>
  408852:	2301      	movs	r3, #1
  408854:	e00f      	b.n	408876 <usart_serial_putchar+0xfe>
  408856:	687b      	ldr	r3, [r7, #4]
  408858:	4a11      	ldr	r2, [pc, #68]	; (4088a0 <usart_serial_putchar+0x128>)
  40885a:	4293      	cmp	r3, r2
  40885c:	d10a      	bne.n	408874 <usart_serial_putchar+0xfc>
  40885e:	bf00      	nop
  408860:	78fb      	ldrb	r3, [r7, #3]
  408862:	4619      	mov	r1, r3
  408864:	6878      	ldr	r0, [r7, #4]
  408866:	4b07      	ldr	r3, [pc, #28]	; (408884 <usart_serial_putchar+0x10c>)
  408868:	4798      	blx	r3
  40886a:	4603      	mov	r3, r0
  40886c:	2b00      	cmp	r3, #0
  40886e:	d1f7      	bne.n	408860 <usart_serial_putchar+0xe8>
  408870:	2301      	movs	r3, #1
  408872:	e000      	b.n	408876 <usart_serial_putchar+0xfe>
  408874:	2300      	movs	r3, #0
  408876:	4618      	mov	r0, r3
  408878:	3708      	adds	r7, #8
  40887a:	46bd      	mov	sp, r7
  40887c:	bd80      	pop	{r7, pc}
  40887e:	bf00      	nop
  408880:	4000c200 	.word	0x4000c200
  408884:	004050b1 	.word	0x004050b1
  408888:	40020200 	.word	0x40020200
  40888c:	40024200 	.word	0x40024200
  408890:	40018200 	.word	0x40018200
  408894:	4001c200 	.word	0x4001c200
  408898:	40008200 	.word	0x40008200
  40889c:	40040200 	.word	0x40040200
  4088a0:	40034200 	.word	0x40034200

004088a4 <usart_serial_getchar>:
  4088a4:	b580      	push	{r7, lr}
  4088a6:	b084      	sub	sp, #16
  4088a8:	af00      	add	r7, sp, #0
  4088aa:	6078      	str	r0, [r7, #4]
  4088ac:	6039      	str	r1, [r7, #0]
  4088ae:	2300      	movs	r3, #0
  4088b0:	60fb      	str	r3, [r7, #12]
  4088b2:	687b      	ldr	r3, [r7, #4]
  4088b4:	4a49      	ldr	r2, [pc, #292]	; (4089dc <usart_serial_getchar+0x138>)
  4088b6:	4293      	cmp	r3, r2
  4088b8:	d10d      	bne.n	4088d6 <usart_serial_getchar+0x32>
  4088ba:	bf00      	nop
  4088bc:	f107 030c 	add.w	r3, r7, #12
  4088c0:	4619      	mov	r1, r3
  4088c2:	6878      	ldr	r0, [r7, #4]
  4088c4:	4b46      	ldr	r3, [pc, #280]	; (4089e0 <usart_serial_getchar+0x13c>)
  4088c6:	4798      	blx	r3
  4088c8:	4603      	mov	r3, r0
  4088ca:	2b00      	cmp	r3, #0
  4088cc:	d1f6      	bne.n	4088bc <usart_serial_getchar+0x18>
  4088ce:	68fb      	ldr	r3, [r7, #12]
  4088d0:	b2da      	uxtb	r2, r3
  4088d2:	683b      	ldr	r3, [r7, #0]
  4088d4:	701a      	strb	r2, [r3, #0]
  4088d6:	687b      	ldr	r3, [r7, #4]
  4088d8:	4a42      	ldr	r2, [pc, #264]	; (4089e4 <usart_serial_getchar+0x140>)
  4088da:	4293      	cmp	r3, r2
  4088dc:	d10d      	bne.n	4088fa <usart_serial_getchar+0x56>
  4088de:	bf00      	nop
  4088e0:	f107 030c 	add.w	r3, r7, #12
  4088e4:	4619      	mov	r1, r3
  4088e6:	6878      	ldr	r0, [r7, #4]
  4088e8:	4b3d      	ldr	r3, [pc, #244]	; (4089e0 <usart_serial_getchar+0x13c>)
  4088ea:	4798      	blx	r3
  4088ec:	4603      	mov	r3, r0
  4088ee:	2b00      	cmp	r3, #0
  4088f0:	d1f6      	bne.n	4088e0 <usart_serial_getchar+0x3c>
  4088f2:	68fb      	ldr	r3, [r7, #12]
  4088f4:	b2da      	uxtb	r2, r3
  4088f6:	683b      	ldr	r3, [r7, #0]
  4088f8:	701a      	strb	r2, [r3, #0]
  4088fa:	687b      	ldr	r3, [r7, #4]
  4088fc:	4a3a      	ldr	r2, [pc, #232]	; (4089e8 <usart_serial_getchar+0x144>)
  4088fe:	4293      	cmp	r3, r2
  408900:	d10d      	bne.n	40891e <usart_serial_getchar+0x7a>
  408902:	bf00      	nop
  408904:	f107 030c 	add.w	r3, r7, #12
  408908:	4619      	mov	r1, r3
  40890a:	6878      	ldr	r0, [r7, #4]
  40890c:	4b34      	ldr	r3, [pc, #208]	; (4089e0 <usart_serial_getchar+0x13c>)
  40890e:	4798      	blx	r3
  408910:	4603      	mov	r3, r0
  408912:	2b00      	cmp	r3, #0
  408914:	d1f6      	bne.n	408904 <usart_serial_getchar+0x60>
  408916:	68fb      	ldr	r3, [r7, #12]
  408918:	b2da      	uxtb	r2, r3
  40891a:	683b      	ldr	r3, [r7, #0]
  40891c:	701a      	strb	r2, [r3, #0]
  40891e:	687b      	ldr	r3, [r7, #4]
  408920:	4a32      	ldr	r2, [pc, #200]	; (4089ec <usart_serial_getchar+0x148>)
  408922:	4293      	cmp	r3, r2
  408924:	d10d      	bne.n	408942 <usart_serial_getchar+0x9e>
  408926:	bf00      	nop
  408928:	f107 030c 	add.w	r3, r7, #12
  40892c:	4619      	mov	r1, r3
  40892e:	6878      	ldr	r0, [r7, #4]
  408930:	4b2b      	ldr	r3, [pc, #172]	; (4089e0 <usart_serial_getchar+0x13c>)
  408932:	4798      	blx	r3
  408934:	4603      	mov	r3, r0
  408936:	2b00      	cmp	r3, #0
  408938:	d1f6      	bne.n	408928 <usart_serial_getchar+0x84>
  40893a:	68fb      	ldr	r3, [r7, #12]
  40893c:	b2da      	uxtb	r2, r3
  40893e:	683b      	ldr	r3, [r7, #0]
  408940:	701a      	strb	r2, [r3, #0]
  408942:	687b      	ldr	r3, [r7, #4]
  408944:	4a2a      	ldr	r2, [pc, #168]	; (4089f0 <usart_serial_getchar+0x14c>)
  408946:	4293      	cmp	r3, r2
  408948:	d10d      	bne.n	408966 <usart_serial_getchar+0xc2>
  40894a:	bf00      	nop
  40894c:	f107 030c 	add.w	r3, r7, #12
  408950:	4619      	mov	r1, r3
  408952:	6878      	ldr	r0, [r7, #4]
  408954:	4b22      	ldr	r3, [pc, #136]	; (4089e0 <usart_serial_getchar+0x13c>)
  408956:	4798      	blx	r3
  408958:	4603      	mov	r3, r0
  40895a:	2b00      	cmp	r3, #0
  40895c:	d1f6      	bne.n	40894c <usart_serial_getchar+0xa8>
  40895e:	68fb      	ldr	r3, [r7, #12]
  408960:	b2da      	uxtb	r2, r3
  408962:	683b      	ldr	r3, [r7, #0]
  408964:	701a      	strb	r2, [r3, #0]
  408966:	687b      	ldr	r3, [r7, #4]
  408968:	4a22      	ldr	r2, [pc, #136]	; (4089f4 <usart_serial_getchar+0x150>)
  40896a:	4293      	cmp	r3, r2
  40896c:	d10d      	bne.n	40898a <usart_serial_getchar+0xe6>
  40896e:	bf00      	nop
  408970:	f107 030c 	add.w	r3, r7, #12
  408974:	4619      	mov	r1, r3
  408976:	6878      	ldr	r0, [r7, #4]
  408978:	4b19      	ldr	r3, [pc, #100]	; (4089e0 <usart_serial_getchar+0x13c>)
  40897a:	4798      	blx	r3
  40897c:	4603      	mov	r3, r0
  40897e:	2b00      	cmp	r3, #0
  408980:	d1f6      	bne.n	408970 <usart_serial_getchar+0xcc>
  408982:	68fb      	ldr	r3, [r7, #12]
  408984:	b2da      	uxtb	r2, r3
  408986:	683b      	ldr	r3, [r7, #0]
  408988:	701a      	strb	r2, [r3, #0]
  40898a:	687b      	ldr	r3, [r7, #4]
  40898c:	4a1a      	ldr	r2, [pc, #104]	; (4089f8 <usart_serial_getchar+0x154>)
  40898e:	4293      	cmp	r3, r2
  408990:	d10d      	bne.n	4089ae <usart_serial_getchar+0x10a>
  408992:	bf00      	nop
  408994:	f107 030c 	add.w	r3, r7, #12
  408998:	4619      	mov	r1, r3
  40899a:	6878      	ldr	r0, [r7, #4]
  40899c:	4b10      	ldr	r3, [pc, #64]	; (4089e0 <usart_serial_getchar+0x13c>)
  40899e:	4798      	blx	r3
  4089a0:	4603      	mov	r3, r0
  4089a2:	2b00      	cmp	r3, #0
  4089a4:	d1f6      	bne.n	408994 <usart_serial_getchar+0xf0>
  4089a6:	68fb      	ldr	r3, [r7, #12]
  4089a8:	b2da      	uxtb	r2, r3
  4089aa:	683b      	ldr	r3, [r7, #0]
  4089ac:	701a      	strb	r2, [r3, #0]
  4089ae:	687b      	ldr	r3, [r7, #4]
  4089b0:	4a12      	ldr	r2, [pc, #72]	; (4089fc <usart_serial_getchar+0x158>)
  4089b2:	4293      	cmp	r3, r2
  4089b4:	d10d      	bne.n	4089d2 <usart_serial_getchar+0x12e>
  4089b6:	bf00      	nop
  4089b8:	f107 030c 	add.w	r3, r7, #12
  4089bc:	4619      	mov	r1, r3
  4089be:	6878      	ldr	r0, [r7, #4]
  4089c0:	4b07      	ldr	r3, [pc, #28]	; (4089e0 <usart_serial_getchar+0x13c>)
  4089c2:	4798      	blx	r3
  4089c4:	4603      	mov	r3, r0
  4089c6:	2b00      	cmp	r3, #0
  4089c8:	d1f6      	bne.n	4089b8 <usart_serial_getchar+0x114>
  4089ca:	68fb      	ldr	r3, [r7, #12]
  4089cc:	b2da      	uxtb	r2, r3
  4089ce:	683b      	ldr	r3, [r7, #0]
  4089d0:	701a      	strb	r2, [r3, #0]
  4089d2:	bf00      	nop
  4089d4:	3710      	adds	r7, #16
  4089d6:	46bd      	mov	sp, r7
  4089d8:	bd80      	pop	{r7, pc}
  4089da:	bf00      	nop
  4089dc:	4000c200 	.word	0x4000c200
  4089e0:	004050e3 	.word	0x004050e3
  4089e4:	40020200 	.word	0x40020200
  4089e8:	40024200 	.word	0x40024200
  4089ec:	40018200 	.word	0x40018200
  4089f0:	4001c200 	.word	0x4001c200
  4089f4:	40008200 	.word	0x40008200
  4089f8:	40040200 	.word	0x40040200
  4089fc:	40034200 	.word	0x40034200

00408a00 <stdio_serial_init>:
  408a00:	b580      	push	{r7, lr}
  408a02:	b082      	sub	sp, #8
  408a04:	af00      	add	r7, sp, #0
  408a06:	6078      	str	r0, [r7, #4]
  408a08:	6039      	str	r1, [r7, #0]
  408a0a:	4a0f      	ldr	r2, [pc, #60]	; (408a48 <stdio_serial_init+0x48>)
  408a0c:	687b      	ldr	r3, [r7, #4]
  408a0e:	6013      	str	r3, [r2, #0]
  408a10:	4b0e      	ldr	r3, [pc, #56]	; (408a4c <stdio_serial_init+0x4c>)
  408a12:	4a0f      	ldr	r2, [pc, #60]	; (408a50 <stdio_serial_init+0x50>)
  408a14:	601a      	str	r2, [r3, #0]
  408a16:	4b0f      	ldr	r3, [pc, #60]	; (408a54 <stdio_serial_init+0x54>)
  408a18:	4a0f      	ldr	r2, [pc, #60]	; (408a58 <stdio_serial_init+0x58>)
  408a1a:	601a      	str	r2, [r3, #0]
  408a1c:	6839      	ldr	r1, [r7, #0]
  408a1e:	6878      	ldr	r0, [r7, #4]
  408a20:	4b0e      	ldr	r3, [pc, #56]	; (408a5c <stdio_serial_init+0x5c>)
  408a22:	4798      	blx	r3
  408a24:	4b0e      	ldr	r3, [pc, #56]	; (408a60 <stdio_serial_init+0x60>)
  408a26:	681b      	ldr	r3, [r3, #0]
  408a28:	689b      	ldr	r3, [r3, #8]
  408a2a:	2100      	movs	r1, #0
  408a2c:	4618      	mov	r0, r3
  408a2e:	4b0d      	ldr	r3, [pc, #52]	; (408a64 <stdio_serial_init+0x64>)
  408a30:	4798      	blx	r3
  408a32:	4b0b      	ldr	r3, [pc, #44]	; (408a60 <stdio_serial_init+0x60>)
  408a34:	681b      	ldr	r3, [r3, #0]
  408a36:	685b      	ldr	r3, [r3, #4]
  408a38:	2100      	movs	r1, #0
  408a3a:	4618      	mov	r0, r3
  408a3c:	4b09      	ldr	r3, [pc, #36]	; (408a64 <stdio_serial_init+0x64>)
  408a3e:	4798      	blx	r3
  408a40:	bf00      	nop
  408a42:	3708      	adds	r7, #8
  408a44:	46bd      	mov	sp, r7
  408a46:	bd80      	pop	{r7, pc}
  408a48:	20000880 	.word	0x20000880
  408a4c:	2000087c 	.word	0x2000087c
  408a50:	00408779 	.word	0x00408779
  408a54:	20000878 	.word	0x20000878
  408a58:	004088a5 	.word	0x004088a5
  408a5c:	00408551 	.word	0x00408551
  408a60:	20000178 	.word	0x20000178
  408a64:	00409461 	.word	0x00409461

00408a68 <configure_console>:
  408a68:	b590      	push	{r4, r7, lr}
  408a6a:	b085      	sub	sp, #20
  408a6c:	af00      	add	r7, sp, #0
  408a6e:	2201      	movs	r2, #1
  408a70:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408a74:	2000      	movs	r0, #0
  408a76:	4b18      	ldr	r3, [pc, #96]	; (408ad8 <configure_console+0x70>)
  408a78:	4798      	blx	r3
  408a7a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408a7e:	2000      	movs	r0, #0
  408a80:	4b16      	ldr	r3, [pc, #88]	; (408adc <configure_console+0x74>)
  408a82:	4798      	blx	r3
  408a84:	2101      	movs	r1, #1
  408a86:	201b      	movs	r0, #27
  408a88:	4b15      	ldr	r3, [pc, #84]	; (408ae0 <configure_console+0x78>)
  408a8a:	4798      	blx	r3
  408a8c:	201b      	movs	r0, #27
  408a8e:	4b15      	ldr	r3, [pc, #84]	; (408ae4 <configure_console+0x7c>)
  408a90:	4798      	blx	r3
  408a92:	2101      	movs	r1, #1
  408a94:	201c      	movs	r0, #28
  408a96:	4b12      	ldr	r3, [pc, #72]	; (408ae0 <configure_console+0x78>)
  408a98:	4798      	blx	r3
  408a9a:	201c      	movs	r0, #28
  408a9c:	4b11      	ldr	r3, [pc, #68]	; (408ae4 <configure_console+0x7c>)
  408a9e:	4798      	blx	r3
  408aa0:	4b11      	ldr	r3, [pc, #68]	; (408ae8 <configure_console+0x80>)
  408aa2:	463c      	mov	r4, r7
  408aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  408aa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  408aaa:	2007      	movs	r0, #7
  408aac:	4b0f      	ldr	r3, [pc, #60]	; (408aec <configure_console+0x84>)
  408aae:	4798      	blx	r3
  408ab0:	463b      	mov	r3, r7
  408ab2:	4619      	mov	r1, r3
  408ab4:	480e      	ldr	r0, [pc, #56]	; (408af0 <configure_console+0x88>)
  408ab6:	4b0f      	ldr	r3, [pc, #60]	; (408af4 <configure_console+0x8c>)
  408ab8:	4798      	blx	r3
  408aba:	463b      	mov	r3, r7
  408abc:	4619      	mov	r1, r3
  408abe:	480c      	ldr	r0, [pc, #48]	; (408af0 <configure_console+0x88>)
  408ac0:	4b0d      	ldr	r3, [pc, #52]	; (408af8 <configure_console+0x90>)
  408ac2:	4798      	blx	r3
  408ac4:	480a      	ldr	r0, [pc, #40]	; (408af0 <configure_console+0x88>)
  408ac6:	4b0d      	ldr	r3, [pc, #52]	; (408afc <configure_console+0x94>)
  408ac8:	4798      	blx	r3
  408aca:	4809      	ldr	r0, [pc, #36]	; (408af0 <configure_console+0x88>)
  408acc:	4b0c      	ldr	r3, [pc, #48]	; (408b00 <configure_console+0x98>)
  408ace:	4798      	blx	r3
  408ad0:	bf00      	nop
  408ad2:	3714      	adds	r7, #20
  408ad4:	46bd      	mov	sp, r7
  408ad6:	bd90      	pop	{r4, r7, pc}
  408ad8:	00408333 	.word	0x00408333
  408adc:	004082ff 	.word	0x004082ff
  408ae0:	00408435 	.word	0x00408435
  408ae4:	004082b5 	.word	0x004082b5
  408ae8:	0040cca0 	.word	0x0040cca0
  408aec:	00408299 	.word	0x00408299
  408af0:	40034200 	.word	0x40034200
  408af4:	00408551 	.word	0x00408551
  408af8:	00408a01 	.word	0x00408a01
  408afc:	00405045 	.word	0x00405045
  408b00:	00405011 	.word	0x00405011

00408b04 <__libc_init_array>:
  408b04:	b570      	push	{r4, r5, r6, lr}
  408b06:	4e0d      	ldr	r6, [pc, #52]	; (408b3c <__libc_init_array+0x38>)
  408b08:	4c0d      	ldr	r4, [pc, #52]	; (408b40 <__libc_init_array+0x3c>)
  408b0a:	1ba4      	subs	r4, r4, r6
  408b0c:	10a4      	asrs	r4, r4, #2
  408b0e:	2500      	movs	r5, #0
  408b10:	42a5      	cmp	r5, r4
  408b12:	d109      	bne.n	408b28 <__libc_init_array+0x24>
  408b14:	4e0b      	ldr	r6, [pc, #44]	; (408b44 <__libc_init_array+0x40>)
  408b16:	4c0c      	ldr	r4, [pc, #48]	; (408b48 <__libc_init_array+0x44>)
  408b18:	f004 fa2a 	bl	40cf70 <_init>
  408b1c:	1ba4      	subs	r4, r4, r6
  408b1e:	10a4      	asrs	r4, r4, #2
  408b20:	2500      	movs	r5, #0
  408b22:	42a5      	cmp	r5, r4
  408b24:	d105      	bne.n	408b32 <__libc_init_array+0x2e>
  408b26:	bd70      	pop	{r4, r5, r6, pc}
  408b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  408b2c:	4798      	blx	r3
  408b2e:	3501      	adds	r5, #1
  408b30:	e7ee      	b.n	408b10 <__libc_init_array+0xc>
  408b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  408b36:	4798      	blx	r3
  408b38:	3501      	adds	r5, #1
  408b3a:	e7f2      	b.n	408b22 <__libc_init_array+0x1e>
  408b3c:	0040cf7c 	.word	0x0040cf7c
  408b40:	0040cf7c 	.word	0x0040cf7c
  408b44:	0040cf7c 	.word	0x0040cf7c
  408b48:	0040cf80 	.word	0x0040cf80

00408b4c <memcpy>:
  408b4c:	b510      	push	{r4, lr}
  408b4e:	1e43      	subs	r3, r0, #1
  408b50:	440a      	add	r2, r1
  408b52:	4291      	cmp	r1, r2
  408b54:	d100      	bne.n	408b58 <memcpy+0xc>
  408b56:	bd10      	pop	{r4, pc}
  408b58:	f811 4b01 	ldrb.w	r4, [r1], #1
  408b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
  408b60:	e7f7      	b.n	408b52 <memcpy+0x6>

00408b62 <memset>:
  408b62:	4402      	add	r2, r0
  408b64:	4603      	mov	r3, r0
  408b66:	4293      	cmp	r3, r2
  408b68:	d100      	bne.n	408b6c <memset+0xa>
  408b6a:	4770      	bx	lr
  408b6c:	f803 1b01 	strb.w	r1, [r3], #1
  408b70:	e7f9      	b.n	408b66 <memset+0x4>

00408b72 <__cvt>:
  408b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408b76:	b088      	sub	sp, #32
  408b78:	2b00      	cmp	r3, #0
  408b7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
  408b7c:	9912      	ldr	r1, [sp, #72]	; 0x48
  408b7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  408b80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  408b84:	461e      	mov	r6, r3
  408b86:	f027 0720 	bic.w	r7, r7, #32
  408b8a:	bfbb      	ittet	lt
  408b8c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  408b90:	461e      	movlt	r6, r3
  408b92:	2300      	movge	r3, #0
  408b94:	232d      	movlt	r3, #45	; 0x2d
  408b96:	2f46      	cmp	r7, #70	; 0x46
  408b98:	4614      	mov	r4, r2
  408b9a:	700b      	strb	r3, [r1, #0]
  408b9c:	d004      	beq.n	408ba8 <__cvt+0x36>
  408b9e:	2f45      	cmp	r7, #69	; 0x45
  408ba0:	d100      	bne.n	408ba4 <__cvt+0x32>
  408ba2:	3501      	adds	r5, #1
  408ba4:	2302      	movs	r3, #2
  408ba6:	e000      	b.n	408baa <__cvt+0x38>
  408ba8:	2303      	movs	r3, #3
  408baa:	aa07      	add	r2, sp, #28
  408bac:	9204      	str	r2, [sp, #16]
  408bae:	aa06      	add	r2, sp, #24
  408bb0:	9203      	str	r2, [sp, #12]
  408bb2:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  408bb6:	4622      	mov	r2, r4
  408bb8:	4633      	mov	r3, r6
  408bba:	f000 fd9d 	bl	4096f8 <_dtoa_r>
  408bbe:	2f47      	cmp	r7, #71	; 0x47
  408bc0:	4680      	mov	r8, r0
  408bc2:	d102      	bne.n	408bca <__cvt+0x58>
  408bc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408bc6:	07db      	lsls	r3, r3, #31
  408bc8:	d526      	bpl.n	408c18 <__cvt+0xa6>
  408bca:	2f46      	cmp	r7, #70	; 0x46
  408bcc:	eb08 0905 	add.w	r9, r8, r5
  408bd0:	d111      	bne.n	408bf6 <__cvt+0x84>
  408bd2:	f898 3000 	ldrb.w	r3, [r8]
  408bd6:	2b30      	cmp	r3, #48	; 0x30
  408bd8:	d10a      	bne.n	408bf0 <__cvt+0x7e>
  408bda:	2200      	movs	r2, #0
  408bdc:	2300      	movs	r3, #0
  408bde:	4620      	mov	r0, r4
  408be0:	4631      	mov	r1, r6
  408be2:	f003 f82b 	bl	40bc3c <__aeabi_dcmpeq>
  408be6:	b918      	cbnz	r0, 408bf0 <__cvt+0x7e>
  408be8:	f1c5 0501 	rsb	r5, r5, #1
  408bec:	f8ca 5000 	str.w	r5, [sl]
  408bf0:	f8da 3000 	ldr.w	r3, [sl]
  408bf4:	4499      	add	r9, r3
  408bf6:	2200      	movs	r2, #0
  408bf8:	2300      	movs	r3, #0
  408bfa:	4620      	mov	r0, r4
  408bfc:	4631      	mov	r1, r6
  408bfe:	f003 f81d 	bl	40bc3c <__aeabi_dcmpeq>
  408c02:	b938      	cbnz	r0, 408c14 <__cvt+0xa2>
  408c04:	2230      	movs	r2, #48	; 0x30
  408c06:	9b07      	ldr	r3, [sp, #28]
  408c08:	4599      	cmp	r9, r3
  408c0a:	d905      	bls.n	408c18 <__cvt+0xa6>
  408c0c:	1c59      	adds	r1, r3, #1
  408c0e:	9107      	str	r1, [sp, #28]
  408c10:	701a      	strb	r2, [r3, #0]
  408c12:	e7f8      	b.n	408c06 <__cvt+0x94>
  408c14:	f8cd 901c 	str.w	r9, [sp, #28]
  408c18:	9b07      	ldr	r3, [sp, #28]
  408c1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  408c1c:	eba3 0308 	sub.w	r3, r3, r8
  408c20:	4640      	mov	r0, r8
  408c22:	6013      	str	r3, [r2, #0]
  408c24:	b008      	add	sp, #32
  408c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00408c2a <__exponent>:
  408c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  408c2c:	4603      	mov	r3, r0
  408c2e:	2900      	cmp	r1, #0
  408c30:	bfb8      	it	lt
  408c32:	4249      	neglt	r1, r1
  408c34:	f803 2b02 	strb.w	r2, [r3], #2
  408c38:	bfb4      	ite	lt
  408c3a:	222d      	movlt	r2, #45	; 0x2d
  408c3c:	222b      	movge	r2, #43	; 0x2b
  408c3e:	2909      	cmp	r1, #9
  408c40:	7042      	strb	r2, [r0, #1]
  408c42:	dd20      	ble.n	408c86 <__exponent+0x5c>
  408c44:	f10d 0207 	add.w	r2, sp, #7
  408c48:	4617      	mov	r7, r2
  408c4a:	260a      	movs	r6, #10
  408c4c:	fb91 f5f6 	sdiv	r5, r1, r6
  408c50:	fb06 1115 	mls	r1, r6, r5, r1
  408c54:	3130      	adds	r1, #48	; 0x30
  408c56:	2d09      	cmp	r5, #9
  408c58:	f802 1c01 	strb.w	r1, [r2, #-1]
  408c5c:	f102 34ff 	add.w	r4, r2, #4294967295
  408c60:	4629      	mov	r1, r5
  408c62:	dc09      	bgt.n	408c78 <__exponent+0x4e>
  408c64:	3130      	adds	r1, #48	; 0x30
  408c66:	3a02      	subs	r2, #2
  408c68:	f804 1c01 	strb.w	r1, [r4, #-1]
  408c6c:	42ba      	cmp	r2, r7
  408c6e:	461c      	mov	r4, r3
  408c70:	d304      	bcc.n	408c7c <__exponent+0x52>
  408c72:	1a20      	subs	r0, r4, r0
  408c74:	b003      	add	sp, #12
  408c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408c78:	4622      	mov	r2, r4
  408c7a:	e7e7      	b.n	408c4c <__exponent+0x22>
  408c7c:	f812 1b01 	ldrb.w	r1, [r2], #1
  408c80:	f803 1b01 	strb.w	r1, [r3], #1
  408c84:	e7f2      	b.n	408c6c <__exponent+0x42>
  408c86:	2230      	movs	r2, #48	; 0x30
  408c88:	461c      	mov	r4, r3
  408c8a:	4411      	add	r1, r2
  408c8c:	f804 2b02 	strb.w	r2, [r4], #2
  408c90:	7059      	strb	r1, [r3, #1]
  408c92:	e7ee      	b.n	408c72 <__exponent+0x48>

00408c94 <_printf_float>:
  408c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408c98:	b091      	sub	sp, #68	; 0x44
  408c9a:	460c      	mov	r4, r1
  408c9c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  408c9e:	4693      	mov	fp, r2
  408ca0:	461e      	mov	r6, r3
  408ca2:	4605      	mov	r5, r0
  408ca4:	f001 fc76 	bl	40a594 <_localeconv_r>
  408ca8:	6803      	ldr	r3, [r0, #0]
  408caa:	9309      	str	r3, [sp, #36]	; 0x24
  408cac:	4618      	mov	r0, r3
  408cae:	f000 fc8d 	bl	4095cc <strlen>
  408cb2:	2300      	movs	r3, #0
  408cb4:	930e      	str	r3, [sp, #56]	; 0x38
  408cb6:	683b      	ldr	r3, [r7, #0]
  408cb8:	900a      	str	r0, [sp, #40]	; 0x28
  408cba:	3307      	adds	r3, #7
  408cbc:	f023 0307 	bic.w	r3, r3, #7
  408cc0:	f103 0208 	add.w	r2, r3, #8
  408cc4:	f894 8018 	ldrb.w	r8, [r4, #24]
  408cc8:	f8d4 a000 	ldr.w	sl, [r4]
  408ccc:	603a      	str	r2, [r7, #0]
  408cce:	e9d3 2300 	ldrd	r2, r3, [r3]
  408cd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  408cd6:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  408cda:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  408cdc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  408ce0:	930b      	str	r3, [sp, #44]	; 0x2c
  408ce2:	f04f 32ff 	mov.w	r2, #4294967295
  408ce6:	4ba6      	ldr	r3, [pc, #664]	; (408f80 <_printf_float+0x2ec>)
  408ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408cea:	4638      	mov	r0, r7
  408cec:	f002 ffd8 	bl	40bca0 <__aeabi_dcmpun>
  408cf0:	2800      	cmp	r0, #0
  408cf2:	f040 81f7 	bne.w	4090e4 <_printf_float+0x450>
  408cf6:	f04f 32ff 	mov.w	r2, #4294967295
  408cfa:	4ba1      	ldr	r3, [pc, #644]	; (408f80 <_printf_float+0x2ec>)
  408cfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408cfe:	4638      	mov	r0, r7
  408d00:	f002 ffb0 	bl	40bc64 <__aeabi_dcmple>
  408d04:	2800      	cmp	r0, #0
  408d06:	f040 81ed 	bne.w	4090e4 <_printf_float+0x450>
  408d0a:	2200      	movs	r2, #0
  408d0c:	2300      	movs	r3, #0
  408d0e:	4638      	mov	r0, r7
  408d10:	4649      	mov	r1, r9
  408d12:	f002 ff9d 	bl	40bc50 <__aeabi_dcmplt>
  408d16:	b110      	cbz	r0, 408d1e <_printf_float+0x8a>
  408d18:	232d      	movs	r3, #45	; 0x2d
  408d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  408d1e:	4b99      	ldr	r3, [pc, #612]	; (408f84 <_printf_float+0x2f0>)
  408d20:	4f99      	ldr	r7, [pc, #612]	; (408f88 <_printf_float+0x2f4>)
  408d22:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  408d26:	bf98      	it	ls
  408d28:	461f      	movls	r7, r3
  408d2a:	2303      	movs	r3, #3
  408d2c:	6123      	str	r3, [r4, #16]
  408d2e:	f02a 0304 	bic.w	r3, sl, #4
  408d32:	6023      	str	r3, [r4, #0]
  408d34:	f04f 0900 	mov.w	r9, #0
  408d38:	9600      	str	r6, [sp, #0]
  408d3a:	465b      	mov	r3, fp
  408d3c:	aa0f      	add	r2, sp, #60	; 0x3c
  408d3e:	4621      	mov	r1, r4
  408d40:	4628      	mov	r0, r5
  408d42:	f000 f9df 	bl	409104 <_printf_common>
  408d46:	3001      	adds	r0, #1
  408d48:	f040 809a 	bne.w	408e80 <_printf_float+0x1ec>
  408d4c:	f04f 30ff 	mov.w	r0, #4294967295
  408d50:	b011      	add	sp, #68	; 0x44
  408d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d56:	6862      	ldr	r2, [r4, #4]
  408d58:	1c53      	adds	r3, r2, #1
  408d5a:	a80e      	add	r0, sp, #56	; 0x38
  408d5c:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  408d60:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  408d64:	d141      	bne.n	408dea <_printf_float+0x156>
  408d66:	2206      	movs	r2, #6
  408d68:	6062      	str	r2, [r4, #4]
  408d6a:	6023      	str	r3, [r4, #0]
  408d6c:	2100      	movs	r1, #0
  408d6e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  408d72:	9301      	str	r3, [sp, #4]
  408d74:	6863      	ldr	r3, [r4, #4]
  408d76:	9005      	str	r0, [sp, #20]
  408d78:	9202      	str	r2, [sp, #8]
  408d7a:	9300      	str	r3, [sp, #0]
  408d7c:	463a      	mov	r2, r7
  408d7e:	464b      	mov	r3, r9
  408d80:	9106      	str	r1, [sp, #24]
  408d82:	f8cd 8010 	str.w	r8, [sp, #16]
  408d86:	f8cd e00c 	str.w	lr, [sp, #12]
  408d8a:	4628      	mov	r0, r5
  408d8c:	f7ff fef1 	bl	408b72 <__cvt>
  408d90:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  408d94:	2b47      	cmp	r3, #71	; 0x47
  408d96:	4607      	mov	r7, r0
  408d98:	d109      	bne.n	408dae <_printf_float+0x11a>
  408d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408d9c:	1cd8      	adds	r0, r3, #3
  408d9e:	db02      	blt.n	408da6 <_printf_float+0x112>
  408da0:	6862      	ldr	r2, [r4, #4]
  408da2:	4293      	cmp	r3, r2
  408da4:	dd59      	ble.n	408e5a <_printf_float+0x1c6>
  408da6:	f1a8 0802 	sub.w	r8, r8, #2
  408daa:	fa5f f888 	uxtb.w	r8, r8
  408dae:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  408db2:	990d      	ldr	r1, [sp, #52]	; 0x34
  408db4:	d836      	bhi.n	408e24 <_printf_float+0x190>
  408db6:	3901      	subs	r1, #1
  408db8:	4642      	mov	r2, r8
  408dba:	f104 0050 	add.w	r0, r4, #80	; 0x50
  408dbe:	910d      	str	r1, [sp, #52]	; 0x34
  408dc0:	f7ff ff33 	bl	408c2a <__exponent>
  408dc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408dc6:	1883      	adds	r3, r0, r2
  408dc8:	2a01      	cmp	r2, #1
  408dca:	4681      	mov	r9, r0
  408dcc:	6123      	str	r3, [r4, #16]
  408dce:	dc02      	bgt.n	408dd6 <_printf_float+0x142>
  408dd0:	6822      	ldr	r2, [r4, #0]
  408dd2:	07d1      	lsls	r1, r2, #31
  408dd4:	d501      	bpl.n	408dda <_printf_float+0x146>
  408dd6:	3301      	adds	r3, #1
  408dd8:	6123      	str	r3, [r4, #16]
  408dda:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  408dde:	2b00      	cmp	r3, #0
  408de0:	d0aa      	beq.n	408d38 <_printf_float+0xa4>
  408de2:	232d      	movs	r3, #45	; 0x2d
  408de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  408de8:	e7a6      	b.n	408d38 <_printf_float+0xa4>
  408dea:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  408dee:	d002      	beq.n	408df6 <_printf_float+0x162>
  408df0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  408df4:	d1b9      	bne.n	408d6a <_printf_float+0xd6>
  408df6:	b19a      	cbz	r2, 408e20 <_printf_float+0x18c>
  408df8:	2100      	movs	r1, #0
  408dfa:	9106      	str	r1, [sp, #24]
  408dfc:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  408e00:	e88d 000c 	stmia.w	sp, {r2, r3}
  408e04:	6023      	str	r3, [r4, #0]
  408e06:	9005      	str	r0, [sp, #20]
  408e08:	463a      	mov	r2, r7
  408e0a:	f8cd 8010 	str.w	r8, [sp, #16]
  408e0e:	f8cd e00c 	str.w	lr, [sp, #12]
  408e12:	9102      	str	r1, [sp, #8]
  408e14:	464b      	mov	r3, r9
  408e16:	4628      	mov	r0, r5
  408e18:	f7ff feab 	bl	408b72 <__cvt>
  408e1c:	4607      	mov	r7, r0
  408e1e:	e7bc      	b.n	408d9a <_printf_float+0x106>
  408e20:	2201      	movs	r2, #1
  408e22:	e7a1      	b.n	408d68 <_printf_float+0xd4>
  408e24:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  408e28:	d119      	bne.n	408e5e <_printf_float+0x1ca>
  408e2a:	2900      	cmp	r1, #0
  408e2c:	6863      	ldr	r3, [r4, #4]
  408e2e:	dd0c      	ble.n	408e4a <_printf_float+0x1b6>
  408e30:	6121      	str	r1, [r4, #16]
  408e32:	b913      	cbnz	r3, 408e3a <_printf_float+0x1a6>
  408e34:	6822      	ldr	r2, [r4, #0]
  408e36:	07d2      	lsls	r2, r2, #31
  408e38:	d502      	bpl.n	408e40 <_printf_float+0x1ac>
  408e3a:	3301      	adds	r3, #1
  408e3c:	440b      	add	r3, r1
  408e3e:	6123      	str	r3, [r4, #16]
  408e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408e42:	65a3      	str	r3, [r4, #88]	; 0x58
  408e44:	f04f 0900 	mov.w	r9, #0
  408e48:	e7c7      	b.n	408dda <_printf_float+0x146>
  408e4a:	b913      	cbnz	r3, 408e52 <_printf_float+0x1be>
  408e4c:	6822      	ldr	r2, [r4, #0]
  408e4e:	07d0      	lsls	r0, r2, #31
  408e50:	d501      	bpl.n	408e56 <_printf_float+0x1c2>
  408e52:	3302      	adds	r3, #2
  408e54:	e7f3      	b.n	408e3e <_printf_float+0x1aa>
  408e56:	2301      	movs	r3, #1
  408e58:	e7f1      	b.n	408e3e <_printf_float+0x1aa>
  408e5a:	f04f 0867 	mov.w	r8, #103	; 0x67
  408e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408e62:	4293      	cmp	r3, r2
  408e64:	db05      	blt.n	408e72 <_printf_float+0x1de>
  408e66:	6822      	ldr	r2, [r4, #0]
  408e68:	6123      	str	r3, [r4, #16]
  408e6a:	07d1      	lsls	r1, r2, #31
  408e6c:	d5e8      	bpl.n	408e40 <_printf_float+0x1ac>
  408e6e:	3301      	adds	r3, #1
  408e70:	e7e5      	b.n	408e3e <_printf_float+0x1aa>
  408e72:	2b00      	cmp	r3, #0
  408e74:	bfd4      	ite	le
  408e76:	f1c3 0302 	rsble	r3, r3, #2
  408e7a:	2301      	movgt	r3, #1
  408e7c:	4413      	add	r3, r2
  408e7e:	e7de      	b.n	408e3e <_printf_float+0x1aa>
  408e80:	6823      	ldr	r3, [r4, #0]
  408e82:	055a      	lsls	r2, r3, #21
  408e84:	d407      	bmi.n	408e96 <_printf_float+0x202>
  408e86:	6923      	ldr	r3, [r4, #16]
  408e88:	463a      	mov	r2, r7
  408e8a:	4659      	mov	r1, fp
  408e8c:	4628      	mov	r0, r5
  408e8e:	47b0      	blx	r6
  408e90:	3001      	adds	r0, #1
  408e92:	d12a      	bne.n	408eea <_printf_float+0x256>
  408e94:	e75a      	b.n	408d4c <_printf_float+0xb8>
  408e96:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  408e9a:	f240 80dc 	bls.w	409056 <_printf_float+0x3c2>
  408e9e:	2200      	movs	r2, #0
  408ea0:	2300      	movs	r3, #0
  408ea2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  408ea6:	f002 fec9 	bl	40bc3c <__aeabi_dcmpeq>
  408eaa:	2800      	cmp	r0, #0
  408eac:	d039      	beq.n	408f22 <_printf_float+0x28e>
  408eae:	2301      	movs	r3, #1
  408eb0:	4a36      	ldr	r2, [pc, #216]	; (408f8c <_printf_float+0x2f8>)
  408eb2:	4659      	mov	r1, fp
  408eb4:	4628      	mov	r0, r5
  408eb6:	47b0      	blx	r6
  408eb8:	3001      	adds	r0, #1
  408eba:	f43f af47 	beq.w	408d4c <_printf_float+0xb8>
  408ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408ec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408ec2:	429a      	cmp	r2, r3
  408ec4:	db02      	blt.n	408ecc <_printf_float+0x238>
  408ec6:	6823      	ldr	r3, [r4, #0]
  408ec8:	07d8      	lsls	r0, r3, #31
  408eca:	d50e      	bpl.n	408eea <_printf_float+0x256>
  408ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408ed0:	4659      	mov	r1, fp
  408ed2:	4628      	mov	r0, r5
  408ed4:	47b0      	blx	r6
  408ed6:	3001      	adds	r0, #1
  408ed8:	f43f af38 	beq.w	408d4c <_printf_float+0xb8>
  408edc:	2700      	movs	r7, #0
  408ede:	f104 081a 	add.w	r8, r4, #26
  408ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408ee4:	3b01      	subs	r3, #1
  408ee6:	429f      	cmp	r7, r3
  408ee8:	db11      	blt.n	408f0e <_printf_float+0x27a>
  408eea:	6823      	ldr	r3, [r4, #0]
  408eec:	079f      	lsls	r7, r3, #30
  408eee:	d508      	bpl.n	408f02 <_printf_float+0x26e>
  408ef0:	2700      	movs	r7, #0
  408ef2:	f104 0819 	add.w	r8, r4, #25
  408ef6:	68e3      	ldr	r3, [r4, #12]
  408ef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408efa:	1a9b      	subs	r3, r3, r2
  408efc:	429f      	cmp	r7, r3
  408efe:	f2c0 80e7 	blt.w	4090d0 <_printf_float+0x43c>
  408f02:	68e0      	ldr	r0, [r4, #12]
  408f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408f06:	4298      	cmp	r0, r3
  408f08:	bfb8      	it	lt
  408f0a:	4618      	movlt	r0, r3
  408f0c:	e720      	b.n	408d50 <_printf_float+0xbc>
  408f0e:	2301      	movs	r3, #1
  408f10:	4642      	mov	r2, r8
  408f12:	4659      	mov	r1, fp
  408f14:	4628      	mov	r0, r5
  408f16:	47b0      	blx	r6
  408f18:	3001      	adds	r0, #1
  408f1a:	f43f af17 	beq.w	408d4c <_printf_float+0xb8>
  408f1e:	3701      	adds	r7, #1
  408f20:	e7df      	b.n	408ee2 <_printf_float+0x24e>
  408f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408f24:	2b00      	cmp	r3, #0
  408f26:	dc33      	bgt.n	408f90 <_printf_float+0x2fc>
  408f28:	2301      	movs	r3, #1
  408f2a:	4a18      	ldr	r2, [pc, #96]	; (408f8c <_printf_float+0x2f8>)
  408f2c:	4659      	mov	r1, fp
  408f2e:	4628      	mov	r0, r5
  408f30:	47b0      	blx	r6
  408f32:	3001      	adds	r0, #1
  408f34:	f43f af0a 	beq.w	408d4c <_printf_float+0xb8>
  408f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408f3a:	b923      	cbnz	r3, 408f46 <_printf_float+0x2b2>
  408f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408f3e:	b913      	cbnz	r3, 408f46 <_printf_float+0x2b2>
  408f40:	6823      	ldr	r3, [r4, #0]
  408f42:	07d9      	lsls	r1, r3, #31
  408f44:	d5d1      	bpl.n	408eea <_printf_float+0x256>
  408f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408f4a:	4659      	mov	r1, fp
  408f4c:	4628      	mov	r0, r5
  408f4e:	47b0      	blx	r6
  408f50:	3001      	adds	r0, #1
  408f52:	f43f aefb 	beq.w	408d4c <_printf_float+0xb8>
  408f56:	f04f 0800 	mov.w	r8, #0
  408f5a:	f104 091a 	add.w	r9, r4, #26
  408f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408f60:	425b      	negs	r3, r3
  408f62:	4598      	cmp	r8, r3
  408f64:	db01      	blt.n	408f6a <_printf_float+0x2d6>
  408f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408f68:	e78e      	b.n	408e88 <_printf_float+0x1f4>
  408f6a:	2301      	movs	r3, #1
  408f6c:	464a      	mov	r2, r9
  408f6e:	4659      	mov	r1, fp
  408f70:	4628      	mov	r0, r5
  408f72:	47b0      	blx	r6
  408f74:	3001      	adds	r0, #1
  408f76:	f43f aee9 	beq.w	408d4c <_printf_float+0xb8>
  408f7a:	f108 0801 	add.w	r8, r8, #1
  408f7e:	e7ee      	b.n	408f5e <_printf_float+0x2ca>
  408f80:	7fefffff 	.word	0x7fefffff
  408f84:	0040ccb4 	.word	0x0040ccb4
  408f88:	0040ccb8 	.word	0x0040ccb8
  408f8c:	0040ccc4 	.word	0x0040ccc4
  408f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
  408f94:	429a      	cmp	r2, r3
  408f96:	bfa8      	it	ge
  408f98:	461a      	movge	r2, r3
  408f9a:	2a00      	cmp	r2, #0
  408f9c:	4690      	mov	r8, r2
  408f9e:	dc36      	bgt.n	40900e <_printf_float+0x37a>
  408fa0:	f104 031a 	add.w	r3, r4, #26
  408fa4:	f04f 0a00 	mov.w	sl, #0
  408fa8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  408fac:	930b      	str	r3, [sp, #44]	; 0x2c
  408fae:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  408fb2:	eba9 0308 	sub.w	r3, r9, r8
  408fb6:	459a      	cmp	sl, r3
  408fb8:	db31      	blt.n	40901e <_printf_float+0x38a>
  408fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408fbe:	429a      	cmp	r2, r3
  408fc0:	db38      	blt.n	409034 <_printf_float+0x3a0>
  408fc2:	6823      	ldr	r3, [r4, #0]
  408fc4:	07da      	lsls	r2, r3, #31
  408fc6:	d435      	bmi.n	409034 <_printf_float+0x3a0>
  408fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408fca:	990d      	ldr	r1, [sp, #52]	; 0x34
  408fcc:	eba3 0209 	sub.w	r2, r3, r9
  408fd0:	eba3 0801 	sub.w	r8, r3, r1
  408fd4:	4590      	cmp	r8, r2
  408fd6:	bfa8      	it	ge
  408fd8:	4690      	movge	r8, r2
  408fda:	f1b8 0f00 	cmp.w	r8, #0
  408fde:	dc31      	bgt.n	409044 <_printf_float+0x3b0>
  408fe0:	2700      	movs	r7, #0
  408fe2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  408fe6:	f104 091a 	add.w	r9, r4, #26
  408fea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408fee:	1a9b      	subs	r3, r3, r2
  408ff0:	eba3 0308 	sub.w	r3, r3, r8
  408ff4:	429f      	cmp	r7, r3
  408ff6:	f6bf af78 	bge.w	408eea <_printf_float+0x256>
  408ffa:	2301      	movs	r3, #1
  408ffc:	464a      	mov	r2, r9
  408ffe:	4659      	mov	r1, fp
  409000:	4628      	mov	r0, r5
  409002:	47b0      	blx	r6
  409004:	3001      	adds	r0, #1
  409006:	f43f aea1 	beq.w	408d4c <_printf_float+0xb8>
  40900a:	3701      	adds	r7, #1
  40900c:	e7ed      	b.n	408fea <_printf_float+0x356>
  40900e:	4613      	mov	r3, r2
  409010:	4659      	mov	r1, fp
  409012:	463a      	mov	r2, r7
  409014:	4628      	mov	r0, r5
  409016:	47b0      	blx	r6
  409018:	3001      	adds	r0, #1
  40901a:	d1c1      	bne.n	408fa0 <_printf_float+0x30c>
  40901c:	e696      	b.n	408d4c <_printf_float+0xb8>
  40901e:	2301      	movs	r3, #1
  409020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409022:	4659      	mov	r1, fp
  409024:	4628      	mov	r0, r5
  409026:	47b0      	blx	r6
  409028:	3001      	adds	r0, #1
  40902a:	f43f ae8f 	beq.w	408d4c <_printf_float+0xb8>
  40902e:	f10a 0a01 	add.w	sl, sl, #1
  409032:	e7bc      	b.n	408fae <_printf_float+0x31a>
  409034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409036:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409038:	4659      	mov	r1, fp
  40903a:	4628      	mov	r0, r5
  40903c:	47b0      	blx	r6
  40903e:	3001      	adds	r0, #1
  409040:	d1c2      	bne.n	408fc8 <_printf_float+0x334>
  409042:	e683      	b.n	408d4c <_printf_float+0xb8>
  409044:	4643      	mov	r3, r8
  409046:	eb07 0209 	add.w	r2, r7, r9
  40904a:	4659      	mov	r1, fp
  40904c:	4628      	mov	r0, r5
  40904e:	47b0      	blx	r6
  409050:	3001      	adds	r0, #1
  409052:	d1c5      	bne.n	408fe0 <_printf_float+0x34c>
  409054:	e67a      	b.n	408d4c <_printf_float+0xb8>
  409056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409058:	2a01      	cmp	r2, #1
  40905a:	dc01      	bgt.n	409060 <_printf_float+0x3cc>
  40905c:	07db      	lsls	r3, r3, #31
  40905e:	d534      	bpl.n	4090ca <_printf_float+0x436>
  409060:	2301      	movs	r3, #1
  409062:	463a      	mov	r2, r7
  409064:	4659      	mov	r1, fp
  409066:	4628      	mov	r0, r5
  409068:	47b0      	blx	r6
  40906a:	3001      	adds	r0, #1
  40906c:	f43f ae6e 	beq.w	408d4c <_printf_float+0xb8>
  409070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409072:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409074:	4659      	mov	r1, fp
  409076:	4628      	mov	r0, r5
  409078:	47b0      	blx	r6
  40907a:	3001      	adds	r0, #1
  40907c:	f43f ae66 	beq.w	408d4c <_printf_float+0xb8>
  409080:	2200      	movs	r2, #0
  409082:	2300      	movs	r3, #0
  409084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  409088:	f002 fdd8 	bl	40bc3c <__aeabi_dcmpeq>
  40908c:	b150      	cbz	r0, 4090a4 <_printf_float+0x410>
  40908e:	2700      	movs	r7, #0
  409090:	f104 081a 	add.w	r8, r4, #26
  409094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409096:	3b01      	subs	r3, #1
  409098:	429f      	cmp	r7, r3
  40909a:	db0c      	blt.n	4090b6 <_printf_float+0x422>
  40909c:	464b      	mov	r3, r9
  40909e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4090a2:	e6f2      	b.n	408e8a <_printf_float+0x1f6>
  4090a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4090a6:	1c7a      	adds	r2, r7, #1
  4090a8:	3b01      	subs	r3, #1
  4090aa:	4659      	mov	r1, fp
  4090ac:	4628      	mov	r0, r5
  4090ae:	47b0      	blx	r6
  4090b0:	3001      	adds	r0, #1
  4090b2:	d1f3      	bne.n	40909c <_printf_float+0x408>
  4090b4:	e64a      	b.n	408d4c <_printf_float+0xb8>
  4090b6:	2301      	movs	r3, #1
  4090b8:	4642      	mov	r2, r8
  4090ba:	4659      	mov	r1, fp
  4090bc:	4628      	mov	r0, r5
  4090be:	47b0      	blx	r6
  4090c0:	3001      	adds	r0, #1
  4090c2:	f43f ae43 	beq.w	408d4c <_printf_float+0xb8>
  4090c6:	3701      	adds	r7, #1
  4090c8:	e7e4      	b.n	409094 <_printf_float+0x400>
  4090ca:	2301      	movs	r3, #1
  4090cc:	463a      	mov	r2, r7
  4090ce:	e7ec      	b.n	4090aa <_printf_float+0x416>
  4090d0:	2301      	movs	r3, #1
  4090d2:	4642      	mov	r2, r8
  4090d4:	4659      	mov	r1, fp
  4090d6:	4628      	mov	r0, r5
  4090d8:	47b0      	blx	r6
  4090da:	3001      	adds	r0, #1
  4090dc:	f43f ae36 	beq.w	408d4c <_printf_float+0xb8>
  4090e0:	3701      	adds	r7, #1
  4090e2:	e708      	b.n	408ef6 <_printf_float+0x262>
  4090e4:	463a      	mov	r2, r7
  4090e6:	464b      	mov	r3, r9
  4090e8:	4638      	mov	r0, r7
  4090ea:	4649      	mov	r1, r9
  4090ec:	f002 fdd8 	bl	40bca0 <__aeabi_dcmpun>
  4090f0:	2800      	cmp	r0, #0
  4090f2:	f43f ae30 	beq.w	408d56 <_printf_float+0xc2>
  4090f6:	4b01      	ldr	r3, [pc, #4]	; (4090fc <_printf_float+0x468>)
  4090f8:	4f01      	ldr	r7, [pc, #4]	; (409100 <_printf_float+0x46c>)
  4090fa:	e612      	b.n	408d22 <_printf_float+0x8e>
  4090fc:	0040ccbc 	.word	0x0040ccbc
  409100:	0040ccc0 	.word	0x0040ccc0

00409104 <_printf_common>:
  409104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409108:	4691      	mov	r9, r2
  40910a:	461f      	mov	r7, r3
  40910c:	688a      	ldr	r2, [r1, #8]
  40910e:	690b      	ldr	r3, [r1, #16]
  409110:	f8dd 8020 	ldr.w	r8, [sp, #32]
  409114:	4293      	cmp	r3, r2
  409116:	bfb8      	it	lt
  409118:	4613      	movlt	r3, r2
  40911a:	f8c9 3000 	str.w	r3, [r9]
  40911e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  409122:	4606      	mov	r6, r0
  409124:	460c      	mov	r4, r1
  409126:	b112      	cbz	r2, 40912e <_printf_common+0x2a>
  409128:	3301      	adds	r3, #1
  40912a:	f8c9 3000 	str.w	r3, [r9]
  40912e:	6823      	ldr	r3, [r4, #0]
  409130:	0699      	lsls	r1, r3, #26
  409132:	bf42      	ittt	mi
  409134:	f8d9 3000 	ldrmi.w	r3, [r9]
  409138:	3302      	addmi	r3, #2
  40913a:	f8c9 3000 	strmi.w	r3, [r9]
  40913e:	6825      	ldr	r5, [r4, #0]
  409140:	f015 0506 	ands.w	r5, r5, #6
  409144:	d107      	bne.n	409156 <_printf_common+0x52>
  409146:	f104 0a19 	add.w	sl, r4, #25
  40914a:	68e3      	ldr	r3, [r4, #12]
  40914c:	f8d9 2000 	ldr.w	r2, [r9]
  409150:	1a9b      	subs	r3, r3, r2
  409152:	429d      	cmp	r5, r3
  409154:	db29      	blt.n	4091aa <_printf_common+0xa6>
  409156:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40915a:	6822      	ldr	r2, [r4, #0]
  40915c:	3300      	adds	r3, #0
  40915e:	bf18      	it	ne
  409160:	2301      	movne	r3, #1
  409162:	0692      	lsls	r2, r2, #26
  409164:	d42e      	bmi.n	4091c4 <_printf_common+0xc0>
  409166:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40916a:	4639      	mov	r1, r7
  40916c:	4630      	mov	r0, r6
  40916e:	47c0      	blx	r8
  409170:	3001      	adds	r0, #1
  409172:	d021      	beq.n	4091b8 <_printf_common+0xb4>
  409174:	6823      	ldr	r3, [r4, #0]
  409176:	68e5      	ldr	r5, [r4, #12]
  409178:	f8d9 2000 	ldr.w	r2, [r9]
  40917c:	f003 0306 	and.w	r3, r3, #6
  409180:	2b04      	cmp	r3, #4
  409182:	bf08      	it	eq
  409184:	1aad      	subeq	r5, r5, r2
  409186:	68a3      	ldr	r3, [r4, #8]
  409188:	6922      	ldr	r2, [r4, #16]
  40918a:	bf0c      	ite	eq
  40918c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  409190:	2500      	movne	r5, #0
  409192:	4293      	cmp	r3, r2
  409194:	bfc4      	itt	gt
  409196:	1a9b      	subgt	r3, r3, r2
  409198:	18ed      	addgt	r5, r5, r3
  40919a:	f04f 0900 	mov.w	r9, #0
  40919e:	341a      	adds	r4, #26
  4091a0:	454d      	cmp	r5, r9
  4091a2:	d11b      	bne.n	4091dc <_printf_common+0xd8>
  4091a4:	2000      	movs	r0, #0
  4091a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4091aa:	2301      	movs	r3, #1
  4091ac:	4652      	mov	r2, sl
  4091ae:	4639      	mov	r1, r7
  4091b0:	4630      	mov	r0, r6
  4091b2:	47c0      	blx	r8
  4091b4:	3001      	adds	r0, #1
  4091b6:	d103      	bne.n	4091c0 <_printf_common+0xbc>
  4091b8:	f04f 30ff 	mov.w	r0, #4294967295
  4091bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4091c0:	3501      	adds	r5, #1
  4091c2:	e7c2      	b.n	40914a <_printf_common+0x46>
  4091c4:	18e1      	adds	r1, r4, r3
  4091c6:	1c5a      	adds	r2, r3, #1
  4091c8:	2030      	movs	r0, #48	; 0x30
  4091ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4091ce:	4422      	add	r2, r4
  4091d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4091d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4091d8:	3302      	adds	r3, #2
  4091da:	e7c4      	b.n	409166 <_printf_common+0x62>
  4091dc:	2301      	movs	r3, #1
  4091de:	4622      	mov	r2, r4
  4091e0:	4639      	mov	r1, r7
  4091e2:	4630      	mov	r0, r6
  4091e4:	47c0      	blx	r8
  4091e6:	3001      	adds	r0, #1
  4091e8:	d0e6      	beq.n	4091b8 <_printf_common+0xb4>
  4091ea:	f109 0901 	add.w	r9, r9, #1
  4091ee:	e7d7      	b.n	4091a0 <_printf_common+0x9c>

004091f0 <_printf_i>:
  4091f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4091f4:	4617      	mov	r7, r2
  4091f6:	7e0a      	ldrb	r2, [r1, #24]
  4091f8:	b085      	sub	sp, #20
  4091fa:	2a6e      	cmp	r2, #110	; 0x6e
  4091fc:	4698      	mov	r8, r3
  4091fe:	4606      	mov	r6, r0
  409200:	460c      	mov	r4, r1
  409202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409204:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  409208:	f000 80bc 	beq.w	409384 <_printf_i+0x194>
  40920c:	d81a      	bhi.n	409244 <_printf_i+0x54>
  40920e:	2a63      	cmp	r2, #99	; 0x63
  409210:	d02e      	beq.n	409270 <_printf_i+0x80>
  409212:	d80a      	bhi.n	40922a <_printf_i+0x3a>
  409214:	2a00      	cmp	r2, #0
  409216:	f000 80c8 	beq.w	4093aa <_printf_i+0x1ba>
  40921a:	2a58      	cmp	r2, #88	; 0x58
  40921c:	f000 808a 	beq.w	409334 <_printf_i+0x144>
  409220:	f104 0542 	add.w	r5, r4, #66	; 0x42
  409224:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  409228:	e02a      	b.n	409280 <_printf_i+0x90>
  40922a:	2a64      	cmp	r2, #100	; 0x64
  40922c:	d001      	beq.n	409232 <_printf_i+0x42>
  40922e:	2a69      	cmp	r2, #105	; 0x69
  409230:	d1f6      	bne.n	409220 <_printf_i+0x30>
  409232:	6821      	ldr	r1, [r4, #0]
  409234:	681a      	ldr	r2, [r3, #0]
  409236:	f011 0f80 	tst.w	r1, #128	; 0x80
  40923a:	d023      	beq.n	409284 <_printf_i+0x94>
  40923c:	1d11      	adds	r1, r2, #4
  40923e:	6019      	str	r1, [r3, #0]
  409240:	6813      	ldr	r3, [r2, #0]
  409242:	e027      	b.n	409294 <_printf_i+0xa4>
  409244:	2a73      	cmp	r2, #115	; 0x73
  409246:	f000 80b4 	beq.w	4093b2 <_printf_i+0x1c2>
  40924a:	d808      	bhi.n	40925e <_printf_i+0x6e>
  40924c:	2a6f      	cmp	r2, #111	; 0x6f
  40924e:	d02a      	beq.n	4092a6 <_printf_i+0xb6>
  409250:	2a70      	cmp	r2, #112	; 0x70
  409252:	d1e5      	bne.n	409220 <_printf_i+0x30>
  409254:	680a      	ldr	r2, [r1, #0]
  409256:	f042 0220 	orr.w	r2, r2, #32
  40925a:	600a      	str	r2, [r1, #0]
  40925c:	e003      	b.n	409266 <_printf_i+0x76>
  40925e:	2a75      	cmp	r2, #117	; 0x75
  409260:	d021      	beq.n	4092a6 <_printf_i+0xb6>
  409262:	2a78      	cmp	r2, #120	; 0x78
  409264:	d1dc      	bne.n	409220 <_printf_i+0x30>
  409266:	2278      	movs	r2, #120	; 0x78
  409268:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  40926c:	496e      	ldr	r1, [pc, #440]	; (409428 <_printf_i+0x238>)
  40926e:	e064      	b.n	40933a <_printf_i+0x14a>
  409270:	681a      	ldr	r2, [r3, #0]
  409272:	f101 0542 	add.w	r5, r1, #66	; 0x42
  409276:	1d11      	adds	r1, r2, #4
  409278:	6019      	str	r1, [r3, #0]
  40927a:	6813      	ldr	r3, [r2, #0]
  40927c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  409280:	2301      	movs	r3, #1
  409282:	e0a3      	b.n	4093cc <_printf_i+0x1dc>
  409284:	f011 0f40 	tst.w	r1, #64	; 0x40
  409288:	f102 0104 	add.w	r1, r2, #4
  40928c:	6019      	str	r1, [r3, #0]
  40928e:	d0d7      	beq.n	409240 <_printf_i+0x50>
  409290:	f9b2 3000 	ldrsh.w	r3, [r2]
  409294:	2b00      	cmp	r3, #0
  409296:	da03      	bge.n	4092a0 <_printf_i+0xb0>
  409298:	222d      	movs	r2, #45	; 0x2d
  40929a:	425b      	negs	r3, r3
  40929c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4092a0:	4962      	ldr	r1, [pc, #392]	; (40942c <_printf_i+0x23c>)
  4092a2:	220a      	movs	r2, #10
  4092a4:	e017      	b.n	4092d6 <_printf_i+0xe6>
  4092a6:	6820      	ldr	r0, [r4, #0]
  4092a8:	6819      	ldr	r1, [r3, #0]
  4092aa:	f010 0f80 	tst.w	r0, #128	; 0x80
  4092ae:	d003      	beq.n	4092b8 <_printf_i+0xc8>
  4092b0:	1d08      	adds	r0, r1, #4
  4092b2:	6018      	str	r0, [r3, #0]
  4092b4:	680b      	ldr	r3, [r1, #0]
  4092b6:	e006      	b.n	4092c6 <_printf_i+0xd6>
  4092b8:	f010 0f40 	tst.w	r0, #64	; 0x40
  4092bc:	f101 0004 	add.w	r0, r1, #4
  4092c0:	6018      	str	r0, [r3, #0]
  4092c2:	d0f7      	beq.n	4092b4 <_printf_i+0xc4>
  4092c4:	880b      	ldrh	r3, [r1, #0]
  4092c6:	4959      	ldr	r1, [pc, #356]	; (40942c <_printf_i+0x23c>)
  4092c8:	2a6f      	cmp	r2, #111	; 0x6f
  4092ca:	bf14      	ite	ne
  4092cc:	220a      	movne	r2, #10
  4092ce:	2208      	moveq	r2, #8
  4092d0:	2000      	movs	r0, #0
  4092d2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4092d6:	6865      	ldr	r5, [r4, #4]
  4092d8:	60a5      	str	r5, [r4, #8]
  4092da:	2d00      	cmp	r5, #0
  4092dc:	f2c0 809c 	blt.w	409418 <_printf_i+0x228>
  4092e0:	6820      	ldr	r0, [r4, #0]
  4092e2:	f020 0004 	bic.w	r0, r0, #4
  4092e6:	6020      	str	r0, [r4, #0]
  4092e8:	2b00      	cmp	r3, #0
  4092ea:	d13f      	bne.n	40936c <_printf_i+0x17c>
  4092ec:	2d00      	cmp	r5, #0
  4092ee:	f040 8095 	bne.w	40941c <_printf_i+0x22c>
  4092f2:	4675      	mov	r5, lr
  4092f4:	2a08      	cmp	r2, #8
  4092f6:	d10b      	bne.n	409310 <_printf_i+0x120>
  4092f8:	6823      	ldr	r3, [r4, #0]
  4092fa:	07da      	lsls	r2, r3, #31
  4092fc:	d508      	bpl.n	409310 <_printf_i+0x120>
  4092fe:	6923      	ldr	r3, [r4, #16]
  409300:	6862      	ldr	r2, [r4, #4]
  409302:	429a      	cmp	r2, r3
  409304:	bfde      	ittt	le
  409306:	2330      	movle	r3, #48	; 0x30
  409308:	f805 3c01 	strble.w	r3, [r5, #-1]
  40930c:	f105 35ff 	addle.w	r5, r5, #4294967295
  409310:	ebae 0305 	sub.w	r3, lr, r5
  409314:	6123      	str	r3, [r4, #16]
  409316:	f8cd 8000 	str.w	r8, [sp]
  40931a:	463b      	mov	r3, r7
  40931c:	aa03      	add	r2, sp, #12
  40931e:	4621      	mov	r1, r4
  409320:	4630      	mov	r0, r6
  409322:	f7ff feef 	bl	409104 <_printf_common>
  409326:	3001      	adds	r0, #1
  409328:	d155      	bne.n	4093d6 <_printf_i+0x1e6>
  40932a:	f04f 30ff 	mov.w	r0, #4294967295
  40932e:	b005      	add	sp, #20
  409330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409334:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  409338:	493c      	ldr	r1, [pc, #240]	; (40942c <_printf_i+0x23c>)
  40933a:	6822      	ldr	r2, [r4, #0]
  40933c:	6818      	ldr	r0, [r3, #0]
  40933e:	f012 0f80 	tst.w	r2, #128	; 0x80
  409342:	f100 0504 	add.w	r5, r0, #4
  409346:	601d      	str	r5, [r3, #0]
  409348:	d001      	beq.n	40934e <_printf_i+0x15e>
  40934a:	6803      	ldr	r3, [r0, #0]
  40934c:	e002      	b.n	409354 <_printf_i+0x164>
  40934e:	0655      	lsls	r5, r2, #25
  409350:	d5fb      	bpl.n	40934a <_printf_i+0x15a>
  409352:	8803      	ldrh	r3, [r0, #0]
  409354:	07d0      	lsls	r0, r2, #31
  409356:	bf44      	itt	mi
  409358:	f042 0220 	orrmi.w	r2, r2, #32
  40935c:	6022      	strmi	r2, [r4, #0]
  40935e:	b91b      	cbnz	r3, 409368 <_printf_i+0x178>
  409360:	6822      	ldr	r2, [r4, #0]
  409362:	f022 0220 	bic.w	r2, r2, #32
  409366:	6022      	str	r2, [r4, #0]
  409368:	2210      	movs	r2, #16
  40936a:	e7b1      	b.n	4092d0 <_printf_i+0xe0>
  40936c:	4675      	mov	r5, lr
  40936e:	fbb3 f0f2 	udiv	r0, r3, r2
  409372:	fb02 3310 	mls	r3, r2, r0, r3
  409376:	5ccb      	ldrb	r3, [r1, r3]
  409378:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40937c:	4603      	mov	r3, r0
  40937e:	2800      	cmp	r0, #0
  409380:	d1f5      	bne.n	40936e <_printf_i+0x17e>
  409382:	e7b7      	b.n	4092f4 <_printf_i+0x104>
  409384:	6808      	ldr	r0, [r1, #0]
  409386:	681a      	ldr	r2, [r3, #0]
  409388:	6949      	ldr	r1, [r1, #20]
  40938a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40938e:	d004      	beq.n	40939a <_printf_i+0x1aa>
  409390:	1d10      	adds	r0, r2, #4
  409392:	6018      	str	r0, [r3, #0]
  409394:	6813      	ldr	r3, [r2, #0]
  409396:	6019      	str	r1, [r3, #0]
  409398:	e007      	b.n	4093aa <_printf_i+0x1ba>
  40939a:	f010 0f40 	tst.w	r0, #64	; 0x40
  40939e:	f102 0004 	add.w	r0, r2, #4
  4093a2:	6018      	str	r0, [r3, #0]
  4093a4:	6813      	ldr	r3, [r2, #0]
  4093a6:	d0f6      	beq.n	409396 <_printf_i+0x1a6>
  4093a8:	8019      	strh	r1, [r3, #0]
  4093aa:	2300      	movs	r3, #0
  4093ac:	6123      	str	r3, [r4, #16]
  4093ae:	4675      	mov	r5, lr
  4093b0:	e7b1      	b.n	409316 <_printf_i+0x126>
  4093b2:	681a      	ldr	r2, [r3, #0]
  4093b4:	1d11      	adds	r1, r2, #4
  4093b6:	6019      	str	r1, [r3, #0]
  4093b8:	6815      	ldr	r5, [r2, #0]
  4093ba:	6862      	ldr	r2, [r4, #4]
  4093bc:	2100      	movs	r1, #0
  4093be:	4628      	mov	r0, r5
  4093c0:	f001 f966 	bl	40a690 <memchr>
  4093c4:	b108      	cbz	r0, 4093ca <_printf_i+0x1da>
  4093c6:	1b40      	subs	r0, r0, r5
  4093c8:	6060      	str	r0, [r4, #4]
  4093ca:	6863      	ldr	r3, [r4, #4]
  4093cc:	6123      	str	r3, [r4, #16]
  4093ce:	2300      	movs	r3, #0
  4093d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4093d4:	e79f      	b.n	409316 <_printf_i+0x126>
  4093d6:	6923      	ldr	r3, [r4, #16]
  4093d8:	462a      	mov	r2, r5
  4093da:	4639      	mov	r1, r7
  4093dc:	4630      	mov	r0, r6
  4093de:	47c0      	blx	r8
  4093e0:	3001      	adds	r0, #1
  4093e2:	d0a2      	beq.n	40932a <_printf_i+0x13a>
  4093e4:	6823      	ldr	r3, [r4, #0]
  4093e6:	079b      	lsls	r3, r3, #30
  4093e8:	d507      	bpl.n	4093fa <_printf_i+0x20a>
  4093ea:	2500      	movs	r5, #0
  4093ec:	f104 0919 	add.w	r9, r4, #25
  4093f0:	68e3      	ldr	r3, [r4, #12]
  4093f2:	9a03      	ldr	r2, [sp, #12]
  4093f4:	1a9b      	subs	r3, r3, r2
  4093f6:	429d      	cmp	r5, r3
  4093f8:	db05      	blt.n	409406 <_printf_i+0x216>
  4093fa:	68e0      	ldr	r0, [r4, #12]
  4093fc:	9b03      	ldr	r3, [sp, #12]
  4093fe:	4298      	cmp	r0, r3
  409400:	bfb8      	it	lt
  409402:	4618      	movlt	r0, r3
  409404:	e793      	b.n	40932e <_printf_i+0x13e>
  409406:	2301      	movs	r3, #1
  409408:	464a      	mov	r2, r9
  40940a:	4639      	mov	r1, r7
  40940c:	4630      	mov	r0, r6
  40940e:	47c0      	blx	r8
  409410:	3001      	adds	r0, #1
  409412:	d08a      	beq.n	40932a <_printf_i+0x13a>
  409414:	3501      	adds	r5, #1
  409416:	e7eb      	b.n	4093f0 <_printf_i+0x200>
  409418:	2b00      	cmp	r3, #0
  40941a:	d1a7      	bne.n	40936c <_printf_i+0x17c>
  40941c:	780b      	ldrb	r3, [r1, #0]
  40941e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  409422:	f104 0542 	add.w	r5, r4, #66	; 0x42
  409426:	e765      	b.n	4092f4 <_printf_i+0x104>
  409428:	0040ccd7 	.word	0x0040ccd7
  40942c:	0040ccc6 	.word	0x0040ccc6

00409430 <iprintf>:
  409430:	b40f      	push	{r0, r1, r2, r3}
  409432:	4b0a      	ldr	r3, [pc, #40]	; (40945c <iprintf+0x2c>)
  409434:	b513      	push	{r0, r1, r4, lr}
  409436:	681c      	ldr	r4, [r3, #0]
  409438:	b124      	cbz	r4, 409444 <iprintf+0x14>
  40943a:	69a3      	ldr	r3, [r4, #24]
  40943c:	b913      	cbnz	r3, 409444 <iprintf+0x14>
  40943e:	4620      	mov	r0, r4
  409440:	f001 f81e 	bl	40a480 <__sinit>
  409444:	ab05      	add	r3, sp, #20
  409446:	9a04      	ldr	r2, [sp, #16]
  409448:	68a1      	ldr	r1, [r4, #8]
  40944a:	9301      	str	r3, [sp, #4]
  40944c:	4620      	mov	r0, r4
  40944e:	f001 fd21 	bl	40ae94 <_vfiprintf_r>
  409452:	b002      	add	sp, #8
  409454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409458:	b004      	add	sp, #16
  40945a:	4770      	bx	lr
  40945c:	20000178 	.word	0x20000178

00409460 <setbuf>:
  409460:	2900      	cmp	r1, #0
  409462:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409466:	bf0c      	ite	eq
  409468:	2202      	moveq	r2, #2
  40946a:	2200      	movne	r2, #0
  40946c:	f000 b800 	b.w	409470 <setvbuf>

00409470 <setvbuf>:
  409470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  409474:	461d      	mov	r5, r3
  409476:	4b51      	ldr	r3, [pc, #324]	; (4095bc <setvbuf+0x14c>)
  409478:	681e      	ldr	r6, [r3, #0]
  40947a:	4604      	mov	r4, r0
  40947c:	460f      	mov	r7, r1
  40947e:	4690      	mov	r8, r2
  409480:	b126      	cbz	r6, 40948c <setvbuf+0x1c>
  409482:	69b3      	ldr	r3, [r6, #24]
  409484:	b913      	cbnz	r3, 40948c <setvbuf+0x1c>
  409486:	4630      	mov	r0, r6
  409488:	f000 fffa 	bl	40a480 <__sinit>
  40948c:	4b4c      	ldr	r3, [pc, #304]	; (4095c0 <setvbuf+0x150>)
  40948e:	429c      	cmp	r4, r3
  409490:	d152      	bne.n	409538 <setvbuf+0xc8>
  409492:	6874      	ldr	r4, [r6, #4]
  409494:	f1b8 0f02 	cmp.w	r8, #2
  409498:	d006      	beq.n	4094a8 <setvbuf+0x38>
  40949a:	f1b8 0f01 	cmp.w	r8, #1
  40949e:	f200 8089 	bhi.w	4095b4 <setvbuf+0x144>
  4094a2:	2d00      	cmp	r5, #0
  4094a4:	f2c0 8086 	blt.w	4095b4 <setvbuf+0x144>
  4094a8:	4621      	mov	r1, r4
  4094aa:	4630      	mov	r0, r6
  4094ac:	f000 ff7e 	bl	40a3ac <_fflush_r>
  4094b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4094b2:	b141      	cbz	r1, 4094c6 <setvbuf+0x56>
  4094b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4094b8:	4299      	cmp	r1, r3
  4094ba:	d002      	beq.n	4094c2 <setvbuf+0x52>
  4094bc:	4630      	mov	r0, r6
  4094be:	f001 fc15 	bl	40acec <_free_r>
  4094c2:	2300      	movs	r3, #0
  4094c4:	6363      	str	r3, [r4, #52]	; 0x34
  4094c6:	2300      	movs	r3, #0
  4094c8:	61a3      	str	r3, [r4, #24]
  4094ca:	6063      	str	r3, [r4, #4]
  4094cc:	89a3      	ldrh	r3, [r4, #12]
  4094ce:	061b      	lsls	r3, r3, #24
  4094d0:	d503      	bpl.n	4094da <setvbuf+0x6a>
  4094d2:	6921      	ldr	r1, [r4, #16]
  4094d4:	4630      	mov	r0, r6
  4094d6:	f001 fc09 	bl	40acec <_free_r>
  4094da:	89a3      	ldrh	r3, [r4, #12]
  4094dc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4094e0:	f023 0303 	bic.w	r3, r3, #3
  4094e4:	f1b8 0f02 	cmp.w	r8, #2
  4094e8:	81a3      	strh	r3, [r4, #12]
  4094ea:	d05d      	beq.n	4095a8 <setvbuf+0x138>
  4094ec:	ab01      	add	r3, sp, #4
  4094ee:	466a      	mov	r2, sp
  4094f0:	4621      	mov	r1, r4
  4094f2:	4630      	mov	r0, r6
  4094f4:	f001 f85c 	bl	40a5b0 <__swhatbuf_r>
  4094f8:	89a3      	ldrh	r3, [r4, #12]
  4094fa:	4318      	orrs	r0, r3
  4094fc:	81a0      	strh	r0, [r4, #12]
  4094fe:	bb2d      	cbnz	r5, 40954c <setvbuf+0xdc>
  409500:	9d00      	ldr	r5, [sp, #0]
  409502:	4628      	mov	r0, r5
  409504:	f001 f8b8 	bl	40a678 <malloc>
  409508:	4607      	mov	r7, r0
  40950a:	2800      	cmp	r0, #0
  40950c:	d14e      	bne.n	4095ac <setvbuf+0x13c>
  40950e:	f8dd 9000 	ldr.w	r9, [sp]
  409512:	45a9      	cmp	r9, r5
  409514:	d13c      	bne.n	409590 <setvbuf+0x120>
  409516:	f04f 30ff 	mov.w	r0, #4294967295
  40951a:	89a3      	ldrh	r3, [r4, #12]
  40951c:	f043 0302 	orr.w	r3, r3, #2
  409520:	81a3      	strh	r3, [r4, #12]
  409522:	2300      	movs	r3, #0
  409524:	60a3      	str	r3, [r4, #8]
  409526:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40952a:	6023      	str	r3, [r4, #0]
  40952c:	6123      	str	r3, [r4, #16]
  40952e:	2301      	movs	r3, #1
  409530:	6163      	str	r3, [r4, #20]
  409532:	b003      	add	sp, #12
  409534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409538:	4b22      	ldr	r3, [pc, #136]	; (4095c4 <setvbuf+0x154>)
  40953a:	429c      	cmp	r4, r3
  40953c:	d101      	bne.n	409542 <setvbuf+0xd2>
  40953e:	68b4      	ldr	r4, [r6, #8]
  409540:	e7a8      	b.n	409494 <setvbuf+0x24>
  409542:	4b21      	ldr	r3, [pc, #132]	; (4095c8 <setvbuf+0x158>)
  409544:	429c      	cmp	r4, r3
  409546:	bf08      	it	eq
  409548:	68f4      	ldreq	r4, [r6, #12]
  40954a:	e7a3      	b.n	409494 <setvbuf+0x24>
  40954c:	2f00      	cmp	r7, #0
  40954e:	d0d8      	beq.n	409502 <setvbuf+0x92>
  409550:	69b3      	ldr	r3, [r6, #24]
  409552:	b913      	cbnz	r3, 40955a <setvbuf+0xea>
  409554:	4630      	mov	r0, r6
  409556:	f000 ff93 	bl	40a480 <__sinit>
  40955a:	f1b8 0f01 	cmp.w	r8, #1
  40955e:	bf08      	it	eq
  409560:	89a3      	ldrheq	r3, [r4, #12]
  409562:	6027      	str	r7, [r4, #0]
  409564:	bf04      	itt	eq
  409566:	f043 0301 	orreq.w	r3, r3, #1
  40956a:	81a3      	strheq	r3, [r4, #12]
  40956c:	89a3      	ldrh	r3, [r4, #12]
  40956e:	6127      	str	r7, [r4, #16]
  409570:	f013 0008 	ands.w	r0, r3, #8
  409574:	6165      	str	r5, [r4, #20]
  409576:	d01b      	beq.n	4095b0 <setvbuf+0x140>
  409578:	f013 0001 	ands.w	r0, r3, #1
  40957c:	bf18      	it	ne
  40957e:	426d      	negne	r5, r5
  409580:	f04f 0300 	mov.w	r3, #0
  409584:	bf1d      	ittte	ne
  409586:	60a3      	strne	r3, [r4, #8]
  409588:	61a5      	strne	r5, [r4, #24]
  40958a:	4618      	movne	r0, r3
  40958c:	60a5      	streq	r5, [r4, #8]
  40958e:	e7d0      	b.n	409532 <setvbuf+0xc2>
  409590:	4648      	mov	r0, r9
  409592:	f001 f871 	bl	40a678 <malloc>
  409596:	4607      	mov	r7, r0
  409598:	2800      	cmp	r0, #0
  40959a:	d0bc      	beq.n	409516 <setvbuf+0xa6>
  40959c:	89a3      	ldrh	r3, [r4, #12]
  40959e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4095a2:	81a3      	strh	r3, [r4, #12]
  4095a4:	464d      	mov	r5, r9
  4095a6:	e7d3      	b.n	409550 <setvbuf+0xe0>
  4095a8:	2000      	movs	r0, #0
  4095aa:	e7b6      	b.n	40951a <setvbuf+0xaa>
  4095ac:	46a9      	mov	r9, r5
  4095ae:	e7f5      	b.n	40959c <setvbuf+0x12c>
  4095b0:	60a0      	str	r0, [r4, #8]
  4095b2:	e7be      	b.n	409532 <setvbuf+0xc2>
  4095b4:	f04f 30ff 	mov.w	r0, #4294967295
  4095b8:	e7bb      	b.n	409532 <setvbuf+0xc2>
  4095ba:	bf00      	nop
  4095bc:	20000178 	.word	0x20000178
  4095c0:	0040cd18 	.word	0x0040cd18
  4095c4:	0040cd38 	.word	0x0040cd38
  4095c8:	0040ccf8 	.word	0x0040ccf8

004095cc <strlen>:
  4095cc:	4603      	mov	r3, r0
  4095ce:	f813 2b01 	ldrb.w	r2, [r3], #1
  4095d2:	2a00      	cmp	r2, #0
  4095d4:	d1fb      	bne.n	4095ce <strlen+0x2>
  4095d6:	1a18      	subs	r0, r3, r0
  4095d8:	3801      	subs	r0, #1
  4095da:	4770      	bx	lr

004095dc <quorem>:
  4095dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4095e0:	6903      	ldr	r3, [r0, #16]
  4095e2:	690c      	ldr	r4, [r1, #16]
  4095e4:	429c      	cmp	r4, r3
  4095e6:	4680      	mov	r8, r0
  4095e8:	f300 8082 	bgt.w	4096f0 <quorem+0x114>
  4095ec:	3c01      	subs	r4, #1
  4095ee:	f101 0714 	add.w	r7, r1, #20
  4095f2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4095f6:	f100 0614 	add.w	r6, r0, #20
  4095fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4095fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  409602:	eb06 030e 	add.w	r3, r6, lr
  409606:	3501      	adds	r5, #1
  409608:	eb07 090e 	add.w	r9, r7, lr
  40960c:	9301      	str	r3, [sp, #4]
  40960e:	fbb0 f5f5 	udiv	r5, r0, r5
  409612:	b395      	cbz	r5, 40967a <quorem+0x9e>
  409614:	f04f 0a00 	mov.w	sl, #0
  409618:	4638      	mov	r0, r7
  40961a:	46b4      	mov	ip, r6
  40961c:	46d3      	mov	fp, sl
  40961e:	f850 2b04 	ldr.w	r2, [r0], #4
  409622:	b293      	uxth	r3, r2
  409624:	fb05 a303 	mla	r3, r5, r3, sl
  409628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  40962c:	b29b      	uxth	r3, r3
  40962e:	ebab 0303 	sub.w	r3, fp, r3
  409632:	0c12      	lsrs	r2, r2, #16
  409634:	f8bc b000 	ldrh.w	fp, [ip]
  409638:	fb05 a202 	mla	r2, r5, r2, sl
  40963c:	fa13 f38b 	uxtah	r3, r3, fp
  409640:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  409644:	fa1f fb82 	uxth.w	fp, r2
  409648:	f8dc 2000 	ldr.w	r2, [ip]
  40964c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  409650:	eb02 4223 	add.w	r2, r2, r3, asr #16
  409654:	b29b      	uxth	r3, r3
  409656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40965a:	4581      	cmp	r9, r0
  40965c:	ea4f 4b22 	mov.w	fp, r2, asr #16
  409660:	f84c 3b04 	str.w	r3, [ip], #4
  409664:	d2db      	bcs.n	40961e <quorem+0x42>
  409666:	f856 300e 	ldr.w	r3, [r6, lr]
  40966a:	b933      	cbnz	r3, 40967a <quorem+0x9e>
  40966c:	9b01      	ldr	r3, [sp, #4]
  40966e:	3b04      	subs	r3, #4
  409670:	429e      	cmp	r6, r3
  409672:	461a      	mov	r2, r3
  409674:	d330      	bcc.n	4096d8 <quorem+0xfc>
  409676:	f8c8 4010 	str.w	r4, [r8, #16]
  40967a:	4640      	mov	r0, r8
  40967c:	f001 fa61 	bl	40ab42 <__mcmp>
  409680:	2800      	cmp	r0, #0
  409682:	db25      	blt.n	4096d0 <quorem+0xf4>
  409684:	3501      	adds	r5, #1
  409686:	4630      	mov	r0, r6
  409688:	f04f 0e00 	mov.w	lr, #0
  40968c:	f857 2b04 	ldr.w	r2, [r7], #4
  409690:	f8d0 c000 	ldr.w	ip, [r0]
  409694:	b293      	uxth	r3, r2
  409696:	ebae 0303 	sub.w	r3, lr, r3
  40969a:	0c12      	lsrs	r2, r2, #16
  40969c:	fa13 f38c 	uxtah	r3, r3, ip
  4096a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  4096a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4096a8:	b29b      	uxth	r3, r3
  4096aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4096ae:	45b9      	cmp	r9, r7
  4096b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
  4096b4:	f840 3b04 	str.w	r3, [r0], #4
  4096b8:	d2e8      	bcs.n	40968c <quorem+0xb0>
  4096ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  4096be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  4096c2:	b92a      	cbnz	r2, 4096d0 <quorem+0xf4>
  4096c4:	3b04      	subs	r3, #4
  4096c6:	429e      	cmp	r6, r3
  4096c8:	461a      	mov	r2, r3
  4096ca:	d30b      	bcc.n	4096e4 <quorem+0x108>
  4096cc:	f8c8 4010 	str.w	r4, [r8, #16]
  4096d0:	4628      	mov	r0, r5
  4096d2:	b003      	add	sp, #12
  4096d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4096d8:	6812      	ldr	r2, [r2, #0]
  4096da:	3b04      	subs	r3, #4
  4096dc:	2a00      	cmp	r2, #0
  4096de:	d1ca      	bne.n	409676 <quorem+0x9a>
  4096e0:	3c01      	subs	r4, #1
  4096e2:	e7c5      	b.n	409670 <quorem+0x94>
  4096e4:	6812      	ldr	r2, [r2, #0]
  4096e6:	3b04      	subs	r3, #4
  4096e8:	2a00      	cmp	r2, #0
  4096ea:	d1ef      	bne.n	4096cc <quorem+0xf0>
  4096ec:	3c01      	subs	r4, #1
  4096ee:	e7ea      	b.n	4096c6 <quorem+0xea>
  4096f0:	2000      	movs	r0, #0
  4096f2:	e7ee      	b.n	4096d2 <quorem+0xf6>
  4096f4:	0000      	movs	r0, r0
	...

004096f8 <_dtoa_r>:
  4096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4096fc:	6a46      	ldr	r6, [r0, #36]	; 0x24
  4096fe:	b095      	sub	sp, #84	; 0x54
  409700:	4604      	mov	r4, r0
  409702:	9d21      	ldr	r5, [sp, #132]	; 0x84
  409704:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409708:	b93e      	cbnz	r6, 40971a <_dtoa_r+0x22>
  40970a:	2010      	movs	r0, #16
  40970c:	f000 ffb4 	bl	40a678 <malloc>
  409710:	6260      	str	r0, [r4, #36]	; 0x24
  409712:	6046      	str	r6, [r0, #4]
  409714:	6086      	str	r6, [r0, #8]
  409716:	6006      	str	r6, [r0, #0]
  409718:	60c6      	str	r6, [r0, #12]
  40971a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40971c:	6819      	ldr	r1, [r3, #0]
  40971e:	b151      	cbz	r1, 409736 <_dtoa_r+0x3e>
  409720:	685a      	ldr	r2, [r3, #4]
  409722:	604a      	str	r2, [r1, #4]
  409724:	2301      	movs	r3, #1
  409726:	4093      	lsls	r3, r2
  409728:	608b      	str	r3, [r1, #8]
  40972a:	4620      	mov	r0, r4
  40972c:	f001 f834 	bl	40a798 <_Bfree>
  409730:	6a63      	ldr	r3, [r4, #36]	; 0x24
  409732:	2200      	movs	r2, #0
  409734:	601a      	str	r2, [r3, #0]
  409736:	9b03      	ldr	r3, [sp, #12]
  409738:	2b00      	cmp	r3, #0
  40973a:	bfbf      	itttt	lt
  40973c:	2301      	movlt	r3, #1
  40973e:	602b      	strlt	r3, [r5, #0]
  409740:	9b03      	ldrlt	r3, [sp, #12]
  409742:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  409746:	bfb2      	itee	lt
  409748:	9303      	strlt	r3, [sp, #12]
  40974a:	2300      	movge	r3, #0
  40974c:	602b      	strge	r3, [r5, #0]
  40974e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  409752:	4ba9      	ldr	r3, [pc, #676]	; (4099f8 <_dtoa_r+0x300>)
  409754:	ea33 0309 	bics.w	r3, r3, r9
  409758:	d11b      	bne.n	409792 <_dtoa_r+0x9a>
  40975a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40975c:	f242 730f 	movw	r3, #9999	; 0x270f
  409760:	6013      	str	r3, [r2, #0]
  409762:	9b02      	ldr	r3, [sp, #8]
  409764:	b923      	cbnz	r3, 409770 <_dtoa_r+0x78>
  409766:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40976a:	2800      	cmp	r0, #0
  40976c:	f000 8581 	beq.w	40a272 <_dtoa_r+0xb7a>
  409770:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409772:	b953      	cbnz	r3, 40978a <_dtoa_r+0x92>
  409774:	4ba1      	ldr	r3, [pc, #644]	; (4099fc <_dtoa_r+0x304>)
  409776:	e021      	b.n	4097bc <_dtoa_r+0xc4>
  409778:	4ba1      	ldr	r3, [pc, #644]	; (409a00 <_dtoa_r+0x308>)
  40977a:	9306      	str	r3, [sp, #24]
  40977c:	3308      	adds	r3, #8
  40977e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409780:	6013      	str	r3, [r2, #0]
  409782:	9806      	ldr	r0, [sp, #24]
  409784:	b015      	add	sp, #84	; 0x54
  409786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40978a:	4b9c      	ldr	r3, [pc, #624]	; (4099fc <_dtoa_r+0x304>)
  40978c:	9306      	str	r3, [sp, #24]
  40978e:	3303      	adds	r3, #3
  409790:	e7f5      	b.n	40977e <_dtoa_r+0x86>
  409792:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  409796:	2200      	movs	r2, #0
  409798:	2300      	movs	r3, #0
  40979a:	4630      	mov	r0, r6
  40979c:	4639      	mov	r1, r7
  40979e:	f002 fa4d 	bl	40bc3c <__aeabi_dcmpeq>
  4097a2:	4680      	mov	r8, r0
  4097a4:	b160      	cbz	r0, 4097c0 <_dtoa_r+0xc8>
  4097a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4097a8:	2301      	movs	r3, #1
  4097aa:	6013      	str	r3, [r2, #0]
  4097ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4097ae:	2b00      	cmp	r3, #0
  4097b0:	f000 855c 	beq.w	40a26c <_dtoa_r+0xb74>
  4097b4:	4b93      	ldr	r3, [pc, #588]	; (409a04 <_dtoa_r+0x30c>)
  4097b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4097b8:	6013      	str	r3, [r2, #0]
  4097ba:	3b01      	subs	r3, #1
  4097bc:	9306      	str	r3, [sp, #24]
  4097be:	e7e0      	b.n	409782 <_dtoa_r+0x8a>
  4097c0:	ab12      	add	r3, sp, #72	; 0x48
  4097c2:	9301      	str	r3, [sp, #4]
  4097c4:	ab13      	add	r3, sp, #76	; 0x4c
  4097c6:	9300      	str	r3, [sp, #0]
  4097c8:	4632      	mov	r2, r6
  4097ca:	463b      	mov	r3, r7
  4097cc:	4620      	mov	r0, r4
  4097ce:	f001 fa30 	bl	40ac32 <__d2b>
  4097d2:	f3c9 550a 	ubfx	r5, r9, #20, #11
  4097d6:	4682      	mov	sl, r0
  4097d8:	2d00      	cmp	r5, #0
  4097da:	d07c      	beq.n	4098d6 <_dtoa_r+0x1de>
  4097dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
  4097e0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4097e4:	4630      	mov	r0, r6
  4097e6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4097ea:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4097ee:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  4097f2:	2200      	movs	r2, #0
  4097f4:	4b84      	ldr	r3, [pc, #528]	; (409a08 <_dtoa_r+0x310>)
  4097f6:	f001 fe05 	bl	40b404 <__aeabi_dsub>
  4097fa:	a379      	add	r3, pc, #484	; (adr r3, 4099e0 <_dtoa_r+0x2e8>)
  4097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  409800:	f001 ffb4 	bl	40b76c <__aeabi_dmul>
  409804:	a378      	add	r3, pc, #480	; (adr r3, 4099e8 <_dtoa_r+0x2f0>)
  409806:	e9d3 2300 	ldrd	r2, r3, [r3]
  40980a:	f001 fdfd 	bl	40b408 <__adddf3>
  40980e:	4606      	mov	r6, r0
  409810:	4628      	mov	r0, r5
  409812:	460f      	mov	r7, r1
  409814:	f001 ff44 	bl	40b6a0 <__aeabi_i2d>
  409818:	a375      	add	r3, pc, #468	; (adr r3, 4099f0 <_dtoa_r+0x2f8>)
  40981a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40981e:	f001 ffa5 	bl	40b76c <__aeabi_dmul>
  409822:	4602      	mov	r2, r0
  409824:	460b      	mov	r3, r1
  409826:	4630      	mov	r0, r6
  409828:	4639      	mov	r1, r7
  40982a:	f001 fded 	bl	40b408 <__adddf3>
  40982e:	4606      	mov	r6, r0
  409830:	460f      	mov	r7, r1
  409832:	f002 fa4b 	bl	40bccc <__aeabi_d2iz>
  409836:	2200      	movs	r2, #0
  409838:	4683      	mov	fp, r0
  40983a:	2300      	movs	r3, #0
  40983c:	4630      	mov	r0, r6
  40983e:	4639      	mov	r1, r7
  409840:	f002 fa06 	bl	40bc50 <__aeabi_dcmplt>
  409844:	b158      	cbz	r0, 40985e <_dtoa_r+0x166>
  409846:	4658      	mov	r0, fp
  409848:	f001 ff2a 	bl	40b6a0 <__aeabi_i2d>
  40984c:	4602      	mov	r2, r0
  40984e:	460b      	mov	r3, r1
  409850:	4630      	mov	r0, r6
  409852:	4639      	mov	r1, r7
  409854:	f002 f9f2 	bl	40bc3c <__aeabi_dcmpeq>
  409858:	b908      	cbnz	r0, 40985e <_dtoa_r+0x166>
  40985a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40985e:	f1bb 0f16 	cmp.w	fp, #22
  409862:	d857      	bhi.n	409914 <_dtoa_r+0x21c>
  409864:	4969      	ldr	r1, [pc, #420]	; (409a0c <_dtoa_r+0x314>)
  409866:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40986a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40986e:	e9d1 0100 	ldrd	r0, r1, [r1]
  409872:	f002 fa0b 	bl	40bc8c <__aeabi_dcmpgt>
  409876:	2800      	cmp	r0, #0
  409878:	d04e      	beq.n	409918 <_dtoa_r+0x220>
  40987a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40987e:	2300      	movs	r3, #0
  409880:	930d      	str	r3, [sp, #52]	; 0x34
  409882:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409884:	1b5d      	subs	r5, r3, r5
  409886:	1e6b      	subs	r3, r5, #1
  409888:	9307      	str	r3, [sp, #28]
  40988a:	bf43      	ittte	mi
  40988c:	2300      	movmi	r3, #0
  40988e:	f1c5 0801 	rsbmi	r8, r5, #1
  409892:	9307      	strmi	r3, [sp, #28]
  409894:	f04f 0800 	movpl.w	r8, #0
  409898:	f1bb 0f00 	cmp.w	fp, #0
  40989c:	db3e      	blt.n	40991c <_dtoa_r+0x224>
  40989e:	9b07      	ldr	r3, [sp, #28]
  4098a0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  4098a4:	445b      	add	r3, fp
  4098a6:	9307      	str	r3, [sp, #28]
  4098a8:	2300      	movs	r3, #0
  4098aa:	9308      	str	r3, [sp, #32]
  4098ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4098ae:	2b09      	cmp	r3, #9
  4098b0:	f200 80b0 	bhi.w	409a14 <_dtoa_r+0x31c>
  4098b4:	2b05      	cmp	r3, #5
  4098b6:	bfc4      	itt	gt
  4098b8:	3b04      	subgt	r3, #4
  4098ba:	931e      	strgt	r3, [sp, #120]	; 0x78
  4098bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4098be:	f1a3 0302 	sub.w	r3, r3, #2
  4098c2:	bfcc      	ite	gt
  4098c4:	2600      	movgt	r6, #0
  4098c6:	2601      	movle	r6, #1
  4098c8:	2b03      	cmp	r3, #3
  4098ca:	f200 80af 	bhi.w	409a2c <_dtoa_r+0x334>
  4098ce:	e8df f003 	tbb	[pc, r3]
  4098d2:	8583      	.short	0x8583
  4098d4:	772d      	.short	0x772d
  4098d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4098d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4098da:	441d      	add	r5, r3
  4098dc:	f205 4332 	addw	r3, r5, #1074	; 0x432
  4098e0:	2b20      	cmp	r3, #32
  4098e2:	dd11      	ble.n	409908 <_dtoa_r+0x210>
  4098e4:	9a02      	ldr	r2, [sp, #8]
  4098e6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  4098ea:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4098ee:	fa22 f000 	lsr.w	r0, r2, r0
  4098f2:	fa09 f303 	lsl.w	r3, r9, r3
  4098f6:	4318      	orrs	r0, r3
  4098f8:	f001 fec2 	bl	40b680 <__aeabi_ui2d>
  4098fc:	2301      	movs	r3, #1
  4098fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409902:	3d01      	subs	r5, #1
  409904:	9310      	str	r3, [sp, #64]	; 0x40
  409906:	e774      	b.n	4097f2 <_dtoa_r+0xfa>
  409908:	f1c3 0020 	rsb	r0, r3, #32
  40990c:	9b02      	ldr	r3, [sp, #8]
  40990e:	fa03 f000 	lsl.w	r0, r3, r0
  409912:	e7f1      	b.n	4098f8 <_dtoa_r+0x200>
  409914:	2301      	movs	r3, #1
  409916:	e7b3      	b.n	409880 <_dtoa_r+0x188>
  409918:	900d      	str	r0, [sp, #52]	; 0x34
  40991a:	e7b2      	b.n	409882 <_dtoa_r+0x18a>
  40991c:	f1cb 0300 	rsb	r3, fp, #0
  409920:	9308      	str	r3, [sp, #32]
  409922:	2300      	movs	r3, #0
  409924:	eba8 080b 	sub.w	r8, r8, fp
  409928:	930c      	str	r3, [sp, #48]	; 0x30
  40992a:	e7bf      	b.n	4098ac <_dtoa_r+0x1b4>
  40992c:	2301      	movs	r3, #1
  40992e:	9309      	str	r3, [sp, #36]	; 0x24
  409930:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409932:	2b00      	cmp	r3, #0
  409934:	dd7d      	ble.n	409a32 <_dtoa_r+0x33a>
  409936:	9304      	str	r3, [sp, #16]
  409938:	4699      	mov	r9, r3
  40993a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40993c:	2200      	movs	r2, #0
  40993e:	606a      	str	r2, [r5, #4]
  409940:	2104      	movs	r1, #4
  409942:	f101 0214 	add.w	r2, r1, #20
  409946:	429a      	cmp	r2, r3
  409948:	d978      	bls.n	409a3c <_dtoa_r+0x344>
  40994a:	6869      	ldr	r1, [r5, #4]
  40994c:	4620      	mov	r0, r4
  40994e:	f000 feef 	bl	40a730 <_Balloc>
  409952:	6a63      	ldr	r3, [r4, #36]	; 0x24
  409954:	6028      	str	r0, [r5, #0]
  409956:	681b      	ldr	r3, [r3, #0]
  409958:	9306      	str	r3, [sp, #24]
  40995a:	f1b9 0f0e 	cmp.w	r9, #14
  40995e:	f200 80ee 	bhi.w	409b3e <_dtoa_r+0x446>
  409962:	2e00      	cmp	r6, #0
  409964:	f000 80eb 	beq.w	409b3e <_dtoa_r+0x446>
  409968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40996c:	f1bb 0f00 	cmp.w	fp, #0
  409970:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  409974:	dd77      	ble.n	409a66 <_dtoa_r+0x36e>
  409976:	4a25      	ldr	r2, [pc, #148]	; (409a0c <_dtoa_r+0x314>)
  409978:	f00b 030f 	and.w	r3, fp, #15
  40997c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  409980:	e9d3 2300 	ldrd	r2, r3, [r3]
  409984:	ea4f 162b 	mov.w	r6, fp, asr #4
  409988:	06f0      	lsls	r0, r6, #27
  40998a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40998e:	d55a      	bpl.n	409a46 <_dtoa_r+0x34e>
  409990:	4b1f      	ldr	r3, [pc, #124]	; (409a10 <_dtoa_r+0x318>)
  409992:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  409996:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40999a:	f002 f811 	bl	40b9c0 <__aeabi_ddiv>
  40999e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4099a2:	f006 060f 	and.w	r6, r6, #15
  4099a6:	2503      	movs	r5, #3
  4099a8:	4f19      	ldr	r7, [pc, #100]	; (409a10 <_dtoa_r+0x318>)
  4099aa:	2e00      	cmp	r6, #0
  4099ac:	d14d      	bne.n	409a4a <_dtoa_r+0x352>
  4099ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4099b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4099b6:	f002 f803 	bl	40b9c0 <__aeabi_ddiv>
  4099ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4099be:	e06c      	b.n	409a9a <_dtoa_r+0x3a2>
  4099c0:	2301      	movs	r3, #1
  4099c2:	9309      	str	r3, [sp, #36]	; 0x24
  4099c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4099c6:	445b      	add	r3, fp
  4099c8:	f103 0901 	add.w	r9, r3, #1
  4099cc:	9304      	str	r3, [sp, #16]
  4099ce:	464b      	mov	r3, r9
  4099d0:	2b01      	cmp	r3, #1
  4099d2:	bfb8      	it	lt
  4099d4:	2301      	movlt	r3, #1
  4099d6:	e7b0      	b.n	40993a <_dtoa_r+0x242>
  4099d8:	2300      	movs	r3, #0
  4099da:	e7a8      	b.n	40992e <_dtoa_r+0x236>
  4099dc:	2300      	movs	r3, #0
  4099de:	e7f0      	b.n	4099c2 <_dtoa_r+0x2ca>
  4099e0:	636f4361 	.word	0x636f4361
  4099e4:	3fd287a7 	.word	0x3fd287a7
  4099e8:	8b60c8b3 	.word	0x8b60c8b3
  4099ec:	3fc68a28 	.word	0x3fc68a28
  4099f0:	509f79fb 	.word	0x509f79fb
  4099f4:	3fd34413 	.word	0x3fd34413
  4099f8:	7ff00000 	.word	0x7ff00000
  4099fc:	0040ccf1 	.word	0x0040ccf1
  409a00:	0040cce8 	.word	0x0040cce8
  409a04:	0040ccc5 	.word	0x0040ccc5
  409a08:	3ff80000 	.word	0x3ff80000
  409a0c:	0040cd80 	.word	0x0040cd80
  409a10:	0040cd58 	.word	0x0040cd58
  409a14:	2601      	movs	r6, #1
  409a16:	2300      	movs	r3, #0
  409a18:	931e      	str	r3, [sp, #120]	; 0x78
  409a1a:	9609      	str	r6, [sp, #36]	; 0x24
  409a1c:	f04f 33ff 	mov.w	r3, #4294967295
  409a20:	9304      	str	r3, [sp, #16]
  409a22:	4699      	mov	r9, r3
  409a24:	2200      	movs	r2, #0
  409a26:	2312      	movs	r3, #18
  409a28:	921f      	str	r2, [sp, #124]	; 0x7c
  409a2a:	e786      	b.n	40993a <_dtoa_r+0x242>
  409a2c:	2301      	movs	r3, #1
  409a2e:	9309      	str	r3, [sp, #36]	; 0x24
  409a30:	e7f4      	b.n	409a1c <_dtoa_r+0x324>
  409a32:	2301      	movs	r3, #1
  409a34:	9304      	str	r3, [sp, #16]
  409a36:	4699      	mov	r9, r3
  409a38:	461a      	mov	r2, r3
  409a3a:	e7f5      	b.n	409a28 <_dtoa_r+0x330>
  409a3c:	686a      	ldr	r2, [r5, #4]
  409a3e:	3201      	adds	r2, #1
  409a40:	606a      	str	r2, [r5, #4]
  409a42:	0049      	lsls	r1, r1, #1
  409a44:	e77d      	b.n	409942 <_dtoa_r+0x24a>
  409a46:	2502      	movs	r5, #2
  409a48:	e7ae      	b.n	4099a8 <_dtoa_r+0x2b0>
  409a4a:	07f1      	lsls	r1, r6, #31
  409a4c:	d508      	bpl.n	409a60 <_dtoa_r+0x368>
  409a4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409a52:	e9d7 2300 	ldrd	r2, r3, [r7]
  409a56:	f001 fe89 	bl	40b76c <__aeabi_dmul>
  409a5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409a5e:	3501      	adds	r5, #1
  409a60:	1076      	asrs	r6, r6, #1
  409a62:	3708      	adds	r7, #8
  409a64:	e7a1      	b.n	4099aa <_dtoa_r+0x2b2>
  409a66:	f000 80a5 	beq.w	409bb4 <_dtoa_r+0x4bc>
  409a6a:	f1cb 0600 	rsb	r6, fp, #0
  409a6e:	4ba3      	ldr	r3, [pc, #652]	; (409cfc <_dtoa_r+0x604>)
  409a70:	4fa3      	ldr	r7, [pc, #652]	; (409d00 <_dtoa_r+0x608>)
  409a72:	f006 020f 	and.w	r2, r6, #15
  409a76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  409a82:	f001 fe73 	bl	40b76c <__aeabi_dmul>
  409a86:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409a8a:	1136      	asrs	r6, r6, #4
  409a8c:	2300      	movs	r3, #0
  409a8e:	2502      	movs	r5, #2
  409a90:	2e00      	cmp	r6, #0
  409a92:	f040 8084 	bne.w	409b9e <_dtoa_r+0x4a6>
  409a96:	2b00      	cmp	r3, #0
  409a98:	d18f      	bne.n	4099ba <_dtoa_r+0x2c2>
  409a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409a9c:	2b00      	cmp	r3, #0
  409a9e:	f000 808b 	beq.w	409bb8 <_dtoa_r+0x4c0>
  409aa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409aa6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  409aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409aae:	2200      	movs	r2, #0
  409ab0:	4b94      	ldr	r3, [pc, #592]	; (409d04 <_dtoa_r+0x60c>)
  409ab2:	f002 f8cd 	bl	40bc50 <__aeabi_dcmplt>
  409ab6:	2800      	cmp	r0, #0
  409ab8:	d07e      	beq.n	409bb8 <_dtoa_r+0x4c0>
  409aba:	f1b9 0f00 	cmp.w	r9, #0
  409abe:	d07b      	beq.n	409bb8 <_dtoa_r+0x4c0>
  409ac0:	9b04      	ldr	r3, [sp, #16]
  409ac2:	2b00      	cmp	r3, #0
  409ac4:	dd37      	ble.n	409b36 <_dtoa_r+0x43e>
  409ac6:	2200      	movs	r2, #0
  409ac8:	4b8f      	ldr	r3, [pc, #572]	; (409d08 <_dtoa_r+0x610>)
  409aca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409ace:	f001 fe4d 	bl	40b76c <__aeabi_dmul>
  409ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409ad6:	9e04      	ldr	r6, [sp, #16]
  409ad8:	f10b 37ff 	add.w	r7, fp, #4294967295
  409adc:	3501      	adds	r5, #1
  409ade:	4628      	mov	r0, r5
  409ae0:	f001 fdde 	bl	40b6a0 <__aeabi_i2d>
  409ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409ae8:	f001 fe40 	bl	40b76c <__aeabi_dmul>
  409aec:	4b87      	ldr	r3, [pc, #540]	; (409d0c <_dtoa_r+0x614>)
  409aee:	2200      	movs	r2, #0
  409af0:	f001 fc8a 	bl	40b408 <__adddf3>
  409af4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409afa:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  409afe:	950b      	str	r5, [sp, #44]	; 0x2c
  409b00:	2e00      	cmp	r6, #0
  409b02:	d15c      	bne.n	409bbe <_dtoa_r+0x4c6>
  409b04:	2200      	movs	r2, #0
  409b06:	4b82      	ldr	r3, [pc, #520]	; (409d10 <_dtoa_r+0x618>)
  409b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b0c:	f001 fc7a 	bl	40b404 <__aeabi_dsub>
  409b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409b12:	462b      	mov	r3, r5
  409b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409b18:	f002 f8b8 	bl	40bc8c <__aeabi_dcmpgt>
  409b1c:	2800      	cmp	r0, #0
  409b1e:	f040 82f7 	bne.w	40a110 <_dtoa_r+0xa18>
  409b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409b24:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  409b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b2c:	f002 f890 	bl	40bc50 <__aeabi_dcmplt>
  409b30:	2800      	cmp	r0, #0
  409b32:	f040 82eb 	bne.w	40a10c <_dtoa_r+0xa14>
  409b36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  409b3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409b40:	2b00      	cmp	r3, #0
  409b42:	f2c0 8151 	blt.w	409de8 <_dtoa_r+0x6f0>
  409b46:	f1bb 0f0e 	cmp.w	fp, #14
  409b4a:	f300 814d 	bgt.w	409de8 <_dtoa_r+0x6f0>
  409b4e:	4b6b      	ldr	r3, [pc, #428]	; (409cfc <_dtoa_r+0x604>)
  409b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  409b54:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b58:	e9cd 2304 	strd	r2, r3, [sp, #16]
  409b5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409b5e:	2b00      	cmp	r3, #0
  409b60:	f280 80da 	bge.w	409d18 <_dtoa_r+0x620>
  409b64:	f1b9 0f00 	cmp.w	r9, #0
  409b68:	f300 80d6 	bgt.w	409d18 <_dtoa_r+0x620>
  409b6c:	f040 82cd 	bne.w	40a10a <_dtoa_r+0xa12>
  409b70:	2200      	movs	r2, #0
  409b72:	4b67      	ldr	r3, [pc, #412]	; (409d10 <_dtoa_r+0x618>)
  409b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409b78:	f001 fdf8 	bl	40b76c <__aeabi_dmul>
  409b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409b80:	f002 f87a 	bl	40bc78 <__aeabi_dcmpge>
  409b84:	464e      	mov	r6, r9
  409b86:	464f      	mov	r7, r9
  409b88:	2800      	cmp	r0, #0
  409b8a:	f040 82a4 	bne.w	40a0d6 <_dtoa_r+0x9de>
  409b8e:	9b06      	ldr	r3, [sp, #24]
  409b90:	9a06      	ldr	r2, [sp, #24]
  409b92:	1c5d      	adds	r5, r3, #1
  409b94:	2331      	movs	r3, #49	; 0x31
  409b96:	7013      	strb	r3, [r2, #0]
  409b98:	f10b 0b01 	add.w	fp, fp, #1
  409b9c:	e29f      	b.n	40a0de <_dtoa_r+0x9e6>
  409b9e:	07f2      	lsls	r2, r6, #31
  409ba0:	d505      	bpl.n	409bae <_dtoa_r+0x4b6>
  409ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
  409ba6:	f001 fde1 	bl	40b76c <__aeabi_dmul>
  409baa:	3501      	adds	r5, #1
  409bac:	2301      	movs	r3, #1
  409bae:	1076      	asrs	r6, r6, #1
  409bb0:	3708      	adds	r7, #8
  409bb2:	e76d      	b.n	409a90 <_dtoa_r+0x398>
  409bb4:	2502      	movs	r5, #2
  409bb6:	e770      	b.n	409a9a <_dtoa_r+0x3a2>
  409bb8:	465f      	mov	r7, fp
  409bba:	464e      	mov	r6, r9
  409bbc:	e78f      	b.n	409ade <_dtoa_r+0x3e6>
  409bbe:	9a06      	ldr	r2, [sp, #24]
  409bc0:	4b4e      	ldr	r3, [pc, #312]	; (409cfc <_dtoa_r+0x604>)
  409bc2:	4432      	add	r2, r6
  409bc4:	9211      	str	r2, [sp, #68]	; 0x44
  409bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409bc8:	1e71      	subs	r1, r6, #1
  409bca:	2a00      	cmp	r2, #0
  409bcc:	d048      	beq.n	409c60 <_dtoa_r+0x568>
  409bce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  409bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  409bd6:	2000      	movs	r0, #0
  409bd8:	494e      	ldr	r1, [pc, #312]	; (409d14 <_dtoa_r+0x61c>)
  409bda:	f001 fef1 	bl	40b9c0 <__aeabi_ddiv>
  409bde:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409be2:	f001 fc0f 	bl	40b404 <__aeabi_dsub>
  409be6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409bea:	9d06      	ldr	r5, [sp, #24]
  409bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409bf0:	f002 f86c 	bl	40bccc <__aeabi_d2iz>
  409bf4:	4606      	mov	r6, r0
  409bf6:	f001 fd53 	bl	40b6a0 <__aeabi_i2d>
  409bfa:	4602      	mov	r2, r0
  409bfc:	460b      	mov	r3, r1
  409bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409c02:	f001 fbff 	bl	40b404 <__aeabi_dsub>
  409c06:	3630      	adds	r6, #48	; 0x30
  409c08:	f805 6b01 	strb.w	r6, [r5], #1
  409c0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409c14:	f002 f81c 	bl	40bc50 <__aeabi_dcmplt>
  409c18:	2800      	cmp	r0, #0
  409c1a:	d165      	bne.n	409ce8 <_dtoa_r+0x5f0>
  409c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409c20:	2000      	movs	r0, #0
  409c22:	4938      	ldr	r1, [pc, #224]	; (409d04 <_dtoa_r+0x60c>)
  409c24:	f001 fbee 	bl	40b404 <__aeabi_dsub>
  409c28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409c2c:	f002 f810 	bl	40bc50 <__aeabi_dcmplt>
  409c30:	2800      	cmp	r0, #0
  409c32:	f040 80b9 	bne.w	409da8 <_dtoa_r+0x6b0>
  409c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409c38:	429d      	cmp	r5, r3
  409c3a:	f43f af7c 	beq.w	409b36 <_dtoa_r+0x43e>
  409c3e:	2200      	movs	r2, #0
  409c40:	4b31      	ldr	r3, [pc, #196]	; (409d08 <_dtoa_r+0x610>)
  409c42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409c46:	f001 fd91 	bl	40b76c <__aeabi_dmul>
  409c4a:	2200      	movs	r2, #0
  409c4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409c50:	4b2d      	ldr	r3, [pc, #180]	; (409d08 <_dtoa_r+0x610>)
  409c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409c56:	f001 fd89 	bl	40b76c <__aeabi_dmul>
  409c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409c5e:	e7c5      	b.n	409bec <_dtoa_r+0x4f4>
  409c60:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  409c64:	e9d1 0100 	ldrd	r0, r1, [r1]
  409c68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409c6c:	f001 fd7e 	bl	40b76c <__aeabi_dmul>
  409c70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409c74:	9d06      	ldr	r5, [sp, #24]
  409c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409c7a:	f002 f827 	bl	40bccc <__aeabi_d2iz>
  409c7e:	4606      	mov	r6, r0
  409c80:	f001 fd0e 	bl	40b6a0 <__aeabi_i2d>
  409c84:	3630      	adds	r6, #48	; 0x30
  409c86:	4602      	mov	r2, r0
  409c88:	460b      	mov	r3, r1
  409c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409c8e:	f001 fbb9 	bl	40b404 <__aeabi_dsub>
  409c92:	f805 6b01 	strb.w	r6, [r5], #1
  409c96:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409c98:	42ab      	cmp	r3, r5
  409c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409c9e:	f04f 0200 	mov.w	r2, #0
  409ca2:	d125      	bne.n	409cf0 <_dtoa_r+0x5f8>
  409ca4:	4b1b      	ldr	r3, [pc, #108]	; (409d14 <_dtoa_r+0x61c>)
  409ca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409caa:	f001 fbad 	bl	40b408 <__adddf3>
  409cae:	4602      	mov	r2, r0
  409cb0:	460b      	mov	r3, r1
  409cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409cb6:	f001 ffe9 	bl	40bc8c <__aeabi_dcmpgt>
  409cba:	2800      	cmp	r0, #0
  409cbc:	d174      	bne.n	409da8 <_dtoa_r+0x6b0>
  409cbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409cc2:	2000      	movs	r0, #0
  409cc4:	4913      	ldr	r1, [pc, #76]	; (409d14 <_dtoa_r+0x61c>)
  409cc6:	f001 fb9d 	bl	40b404 <__aeabi_dsub>
  409cca:	4602      	mov	r2, r0
  409ccc:	460b      	mov	r3, r1
  409cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409cd2:	f001 ffbd 	bl	40bc50 <__aeabi_dcmplt>
  409cd6:	2800      	cmp	r0, #0
  409cd8:	f43f af2d 	beq.w	409b36 <_dtoa_r+0x43e>
  409cdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409ce0:	2b30      	cmp	r3, #48	; 0x30
  409ce2:	f105 32ff 	add.w	r2, r5, #4294967295
  409ce6:	d001      	beq.n	409cec <_dtoa_r+0x5f4>
  409ce8:	46bb      	mov	fp, r7
  409cea:	e04c      	b.n	409d86 <_dtoa_r+0x68e>
  409cec:	4615      	mov	r5, r2
  409cee:	e7f5      	b.n	409cdc <_dtoa_r+0x5e4>
  409cf0:	4b05      	ldr	r3, [pc, #20]	; (409d08 <_dtoa_r+0x610>)
  409cf2:	f001 fd3b 	bl	40b76c <__aeabi_dmul>
  409cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409cfa:	e7bc      	b.n	409c76 <_dtoa_r+0x57e>
  409cfc:	0040cd80 	.word	0x0040cd80
  409d00:	0040cd58 	.word	0x0040cd58
  409d04:	3ff00000 	.word	0x3ff00000
  409d08:	40240000 	.word	0x40240000
  409d0c:	401c0000 	.word	0x401c0000
  409d10:	40140000 	.word	0x40140000
  409d14:	3fe00000 	.word	0x3fe00000
  409d18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  409d1c:	9d06      	ldr	r5, [sp, #24]
  409d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  409d22:	4630      	mov	r0, r6
  409d24:	4639      	mov	r1, r7
  409d26:	f001 fe4b 	bl	40b9c0 <__aeabi_ddiv>
  409d2a:	f001 ffcf 	bl	40bccc <__aeabi_d2iz>
  409d2e:	4680      	mov	r8, r0
  409d30:	f001 fcb6 	bl	40b6a0 <__aeabi_i2d>
  409d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  409d38:	f001 fd18 	bl	40b76c <__aeabi_dmul>
  409d3c:	4602      	mov	r2, r0
  409d3e:	460b      	mov	r3, r1
  409d40:	4630      	mov	r0, r6
  409d42:	4639      	mov	r1, r7
  409d44:	f108 0630 	add.w	r6, r8, #48	; 0x30
  409d48:	f001 fb5c 	bl	40b404 <__aeabi_dsub>
  409d4c:	f805 6b01 	strb.w	r6, [r5], #1
  409d50:	9e06      	ldr	r6, [sp, #24]
  409d52:	1bae      	subs	r6, r5, r6
  409d54:	45b1      	cmp	r9, r6
  409d56:	4602      	mov	r2, r0
  409d58:	460b      	mov	r3, r1
  409d5a:	d138      	bne.n	409dce <_dtoa_r+0x6d6>
  409d5c:	f001 fb54 	bl	40b408 <__adddf3>
  409d60:	4606      	mov	r6, r0
  409d62:	460f      	mov	r7, r1
  409d64:	4602      	mov	r2, r0
  409d66:	460b      	mov	r3, r1
  409d68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409d6c:	f001 ff70 	bl	40bc50 <__aeabi_dcmplt>
  409d70:	b9c8      	cbnz	r0, 409da6 <_dtoa_r+0x6ae>
  409d72:	4632      	mov	r2, r6
  409d74:	463b      	mov	r3, r7
  409d76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409d7a:	f001 ff5f 	bl	40bc3c <__aeabi_dcmpeq>
  409d7e:	b110      	cbz	r0, 409d86 <_dtoa_r+0x68e>
  409d80:	f018 0f01 	tst.w	r8, #1
  409d84:	d10f      	bne.n	409da6 <_dtoa_r+0x6ae>
  409d86:	4651      	mov	r1, sl
  409d88:	4620      	mov	r0, r4
  409d8a:	f000 fd05 	bl	40a798 <_Bfree>
  409d8e:	2300      	movs	r3, #0
  409d90:	9a20      	ldr	r2, [sp, #128]	; 0x80
  409d92:	702b      	strb	r3, [r5, #0]
  409d94:	f10b 0301 	add.w	r3, fp, #1
  409d98:	6013      	str	r3, [r2, #0]
  409d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409d9c:	2b00      	cmp	r3, #0
  409d9e:	f43f acf0 	beq.w	409782 <_dtoa_r+0x8a>
  409da2:	601d      	str	r5, [r3, #0]
  409da4:	e4ed      	b.n	409782 <_dtoa_r+0x8a>
  409da6:	465f      	mov	r7, fp
  409da8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  409dac:	2a39      	cmp	r2, #57	; 0x39
  409dae:	f105 33ff 	add.w	r3, r5, #4294967295
  409db2:	d106      	bne.n	409dc2 <_dtoa_r+0x6ca>
  409db4:	9a06      	ldr	r2, [sp, #24]
  409db6:	429a      	cmp	r2, r3
  409db8:	d107      	bne.n	409dca <_dtoa_r+0x6d2>
  409dba:	2330      	movs	r3, #48	; 0x30
  409dbc:	7013      	strb	r3, [r2, #0]
  409dbe:	3701      	adds	r7, #1
  409dc0:	4613      	mov	r3, r2
  409dc2:	781a      	ldrb	r2, [r3, #0]
  409dc4:	3201      	adds	r2, #1
  409dc6:	701a      	strb	r2, [r3, #0]
  409dc8:	e78e      	b.n	409ce8 <_dtoa_r+0x5f0>
  409dca:	461d      	mov	r5, r3
  409dcc:	e7ec      	b.n	409da8 <_dtoa_r+0x6b0>
  409dce:	2200      	movs	r2, #0
  409dd0:	4bb4      	ldr	r3, [pc, #720]	; (40a0a4 <_dtoa_r+0x9ac>)
  409dd2:	f001 fccb 	bl	40b76c <__aeabi_dmul>
  409dd6:	2200      	movs	r2, #0
  409dd8:	2300      	movs	r3, #0
  409dda:	4606      	mov	r6, r0
  409ddc:	460f      	mov	r7, r1
  409dde:	f001 ff2d 	bl	40bc3c <__aeabi_dcmpeq>
  409de2:	2800      	cmp	r0, #0
  409de4:	d09b      	beq.n	409d1e <_dtoa_r+0x626>
  409de6:	e7ce      	b.n	409d86 <_dtoa_r+0x68e>
  409de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409dea:	2a00      	cmp	r2, #0
  409dec:	f000 8129 	beq.w	40a042 <_dtoa_r+0x94a>
  409df0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  409df2:	2a01      	cmp	r2, #1
  409df4:	f300 810e 	bgt.w	40a014 <_dtoa_r+0x91c>
  409df8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  409dfa:	2a00      	cmp	r2, #0
  409dfc:	f000 8106 	beq.w	40a00c <_dtoa_r+0x914>
  409e00:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409e04:	9e08      	ldr	r6, [sp, #32]
  409e06:	4645      	mov	r5, r8
  409e08:	9a07      	ldr	r2, [sp, #28]
  409e0a:	2101      	movs	r1, #1
  409e0c:	441a      	add	r2, r3
  409e0e:	4620      	mov	r0, r4
  409e10:	4498      	add	r8, r3
  409e12:	9207      	str	r2, [sp, #28]
  409e14:	f000 fd60 	bl	40a8d8 <__i2b>
  409e18:	4607      	mov	r7, r0
  409e1a:	2d00      	cmp	r5, #0
  409e1c:	dd0b      	ble.n	409e36 <_dtoa_r+0x73e>
  409e1e:	9b07      	ldr	r3, [sp, #28]
  409e20:	2b00      	cmp	r3, #0
  409e22:	dd08      	ble.n	409e36 <_dtoa_r+0x73e>
  409e24:	42ab      	cmp	r3, r5
  409e26:	9a07      	ldr	r2, [sp, #28]
  409e28:	bfa8      	it	ge
  409e2a:	462b      	movge	r3, r5
  409e2c:	eba8 0803 	sub.w	r8, r8, r3
  409e30:	1aed      	subs	r5, r5, r3
  409e32:	1ad3      	subs	r3, r2, r3
  409e34:	9307      	str	r3, [sp, #28]
  409e36:	9b08      	ldr	r3, [sp, #32]
  409e38:	b1fb      	cbz	r3, 409e7a <_dtoa_r+0x782>
  409e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409e3c:	2b00      	cmp	r3, #0
  409e3e:	f000 8104 	beq.w	40a04a <_dtoa_r+0x952>
  409e42:	2e00      	cmp	r6, #0
  409e44:	dd11      	ble.n	409e6a <_dtoa_r+0x772>
  409e46:	4639      	mov	r1, r7
  409e48:	4632      	mov	r2, r6
  409e4a:	4620      	mov	r0, r4
  409e4c:	f000 fdda 	bl	40aa04 <__pow5mult>
  409e50:	4652      	mov	r2, sl
  409e52:	4601      	mov	r1, r0
  409e54:	4607      	mov	r7, r0
  409e56:	4620      	mov	r0, r4
  409e58:	f000 fd47 	bl	40a8ea <__multiply>
  409e5c:	4651      	mov	r1, sl
  409e5e:	900a      	str	r0, [sp, #40]	; 0x28
  409e60:	4620      	mov	r0, r4
  409e62:	f000 fc99 	bl	40a798 <_Bfree>
  409e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409e68:	469a      	mov	sl, r3
  409e6a:	9b08      	ldr	r3, [sp, #32]
  409e6c:	1b9a      	subs	r2, r3, r6
  409e6e:	d004      	beq.n	409e7a <_dtoa_r+0x782>
  409e70:	4651      	mov	r1, sl
  409e72:	4620      	mov	r0, r4
  409e74:	f000 fdc6 	bl	40aa04 <__pow5mult>
  409e78:	4682      	mov	sl, r0
  409e7a:	2101      	movs	r1, #1
  409e7c:	4620      	mov	r0, r4
  409e7e:	f000 fd2b 	bl	40a8d8 <__i2b>
  409e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409e84:	2b00      	cmp	r3, #0
  409e86:	4606      	mov	r6, r0
  409e88:	f340 80e1 	ble.w	40a04e <_dtoa_r+0x956>
  409e8c:	461a      	mov	r2, r3
  409e8e:	4601      	mov	r1, r0
  409e90:	4620      	mov	r0, r4
  409e92:	f000 fdb7 	bl	40aa04 <__pow5mult>
  409e96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  409e98:	2b01      	cmp	r3, #1
  409e9a:	4606      	mov	r6, r0
  409e9c:	f340 80da 	ble.w	40a054 <_dtoa_r+0x95c>
  409ea0:	2300      	movs	r3, #0
  409ea2:	9308      	str	r3, [sp, #32]
  409ea4:	6933      	ldr	r3, [r6, #16]
  409ea6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  409eaa:	6918      	ldr	r0, [r3, #16]
  409eac:	f000 fcc6 	bl	40a83c <__hi0bits>
  409eb0:	f1c0 0020 	rsb	r0, r0, #32
  409eb4:	9b07      	ldr	r3, [sp, #28]
  409eb6:	4418      	add	r0, r3
  409eb8:	f010 001f 	ands.w	r0, r0, #31
  409ebc:	f000 80f0 	beq.w	40a0a0 <_dtoa_r+0x9a8>
  409ec0:	f1c0 0320 	rsb	r3, r0, #32
  409ec4:	2b04      	cmp	r3, #4
  409ec6:	f340 80e2 	ble.w	40a08e <_dtoa_r+0x996>
  409eca:	9b07      	ldr	r3, [sp, #28]
  409ecc:	f1c0 001c 	rsb	r0, r0, #28
  409ed0:	4480      	add	r8, r0
  409ed2:	4405      	add	r5, r0
  409ed4:	4403      	add	r3, r0
  409ed6:	9307      	str	r3, [sp, #28]
  409ed8:	f1b8 0f00 	cmp.w	r8, #0
  409edc:	dd05      	ble.n	409eea <_dtoa_r+0x7f2>
  409ede:	4651      	mov	r1, sl
  409ee0:	4642      	mov	r2, r8
  409ee2:	4620      	mov	r0, r4
  409ee4:	f000 fddc 	bl	40aaa0 <__lshift>
  409ee8:	4682      	mov	sl, r0
  409eea:	9b07      	ldr	r3, [sp, #28]
  409eec:	2b00      	cmp	r3, #0
  409eee:	dd05      	ble.n	409efc <_dtoa_r+0x804>
  409ef0:	4631      	mov	r1, r6
  409ef2:	461a      	mov	r2, r3
  409ef4:	4620      	mov	r0, r4
  409ef6:	f000 fdd3 	bl	40aaa0 <__lshift>
  409efa:	4606      	mov	r6, r0
  409efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409efe:	2b00      	cmp	r3, #0
  409f00:	f000 80d2 	beq.w	40a0a8 <_dtoa_r+0x9b0>
  409f04:	4631      	mov	r1, r6
  409f06:	4650      	mov	r0, sl
  409f08:	f000 fe1b 	bl	40ab42 <__mcmp>
  409f0c:	2800      	cmp	r0, #0
  409f0e:	f280 80cb 	bge.w	40a0a8 <_dtoa_r+0x9b0>
  409f12:	2300      	movs	r3, #0
  409f14:	4651      	mov	r1, sl
  409f16:	220a      	movs	r2, #10
  409f18:	4620      	mov	r0, r4
  409f1a:	f000 fc54 	bl	40a7c6 <__multadd>
  409f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409f20:	f10b 3bff 	add.w	fp, fp, #4294967295
  409f24:	4682      	mov	sl, r0
  409f26:	2b00      	cmp	r3, #0
  409f28:	f000 81aa 	beq.w	40a280 <_dtoa_r+0xb88>
  409f2c:	2300      	movs	r3, #0
  409f2e:	4639      	mov	r1, r7
  409f30:	220a      	movs	r2, #10
  409f32:	4620      	mov	r0, r4
  409f34:	f000 fc47 	bl	40a7c6 <__multadd>
  409f38:	9b04      	ldr	r3, [sp, #16]
  409f3a:	2b00      	cmp	r3, #0
  409f3c:	4607      	mov	r7, r0
  409f3e:	dc03      	bgt.n	409f48 <_dtoa_r+0x850>
  409f40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  409f42:	2b02      	cmp	r3, #2
  409f44:	f300 80b8 	bgt.w	40a0b8 <_dtoa_r+0x9c0>
  409f48:	2d00      	cmp	r5, #0
  409f4a:	dd05      	ble.n	409f58 <_dtoa_r+0x860>
  409f4c:	4639      	mov	r1, r7
  409f4e:	462a      	mov	r2, r5
  409f50:	4620      	mov	r0, r4
  409f52:	f000 fda5 	bl	40aaa0 <__lshift>
  409f56:	4607      	mov	r7, r0
  409f58:	9b08      	ldr	r3, [sp, #32]
  409f5a:	2b00      	cmp	r3, #0
  409f5c:	f000 8110 	beq.w	40a180 <_dtoa_r+0xa88>
  409f60:	6879      	ldr	r1, [r7, #4]
  409f62:	4620      	mov	r0, r4
  409f64:	f000 fbe4 	bl	40a730 <_Balloc>
  409f68:	693a      	ldr	r2, [r7, #16]
  409f6a:	3202      	adds	r2, #2
  409f6c:	4605      	mov	r5, r0
  409f6e:	0092      	lsls	r2, r2, #2
  409f70:	f107 010c 	add.w	r1, r7, #12
  409f74:	300c      	adds	r0, #12
  409f76:	f7fe fde9 	bl	408b4c <memcpy>
  409f7a:	2201      	movs	r2, #1
  409f7c:	4629      	mov	r1, r5
  409f7e:	4620      	mov	r0, r4
  409f80:	f000 fd8e 	bl	40aaa0 <__lshift>
  409f84:	9b02      	ldr	r3, [sp, #8]
  409f86:	f8dd 8018 	ldr.w	r8, [sp, #24]
  409f8a:	9707      	str	r7, [sp, #28]
  409f8c:	f003 0301 	and.w	r3, r3, #1
  409f90:	4607      	mov	r7, r0
  409f92:	9308      	str	r3, [sp, #32]
  409f94:	4631      	mov	r1, r6
  409f96:	4650      	mov	r0, sl
  409f98:	f7ff fb20 	bl	4095dc <quorem>
  409f9c:	9907      	ldr	r1, [sp, #28]
  409f9e:	4605      	mov	r5, r0
  409fa0:	f100 0930 	add.w	r9, r0, #48	; 0x30
  409fa4:	4650      	mov	r0, sl
  409fa6:	f000 fdcc 	bl	40ab42 <__mcmp>
  409faa:	463a      	mov	r2, r7
  409fac:	9002      	str	r0, [sp, #8]
  409fae:	4631      	mov	r1, r6
  409fb0:	4620      	mov	r0, r4
  409fb2:	f000 fde0 	bl	40ab76 <__mdiff>
  409fb6:	68c3      	ldr	r3, [r0, #12]
  409fb8:	4602      	mov	r2, r0
  409fba:	2b00      	cmp	r3, #0
  409fbc:	f040 80e2 	bne.w	40a184 <_dtoa_r+0xa8c>
  409fc0:	4601      	mov	r1, r0
  409fc2:	9009      	str	r0, [sp, #36]	; 0x24
  409fc4:	4650      	mov	r0, sl
  409fc6:	f000 fdbc 	bl	40ab42 <__mcmp>
  409fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409fcc:	4603      	mov	r3, r0
  409fce:	4611      	mov	r1, r2
  409fd0:	4620      	mov	r0, r4
  409fd2:	9309      	str	r3, [sp, #36]	; 0x24
  409fd4:	f000 fbe0 	bl	40a798 <_Bfree>
  409fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409fda:	2b00      	cmp	r3, #0
  409fdc:	f040 80d4 	bne.w	40a188 <_dtoa_r+0xa90>
  409fe0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  409fe2:	2a00      	cmp	r2, #0
  409fe4:	f040 80d0 	bne.w	40a188 <_dtoa_r+0xa90>
  409fe8:	9a08      	ldr	r2, [sp, #32]
  409fea:	2a00      	cmp	r2, #0
  409fec:	f040 80cc 	bne.w	40a188 <_dtoa_r+0xa90>
  409ff0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  409ff4:	f000 80e8 	beq.w	40a1c8 <_dtoa_r+0xad0>
  409ff8:	9b02      	ldr	r3, [sp, #8]
  409ffa:	2b00      	cmp	r3, #0
  409ffc:	dd01      	ble.n	40a002 <_dtoa_r+0x90a>
  409ffe:	f105 0931 	add.w	r9, r5, #49	; 0x31
  40a002:	f108 0501 	add.w	r5, r8, #1
  40a006:	f888 9000 	strb.w	r9, [r8]
  40a00a:	e06a      	b.n	40a0e2 <_dtoa_r+0x9ea>
  40a00c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a00e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40a012:	e6f7      	b.n	409e04 <_dtoa_r+0x70c>
  40a014:	9b08      	ldr	r3, [sp, #32]
  40a016:	f109 36ff 	add.w	r6, r9, #4294967295
  40a01a:	42b3      	cmp	r3, r6
  40a01c:	bfbf      	itttt	lt
  40a01e:	9b08      	ldrlt	r3, [sp, #32]
  40a020:	9608      	strlt	r6, [sp, #32]
  40a022:	1af2      	sublt	r2, r6, r3
  40a024:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  40a026:	bfb7      	itett	lt
  40a028:	189b      	addlt	r3, r3, r2
  40a02a:	1b9e      	subge	r6, r3, r6
  40a02c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40a02e:	2600      	movlt	r6, #0
  40a030:	f1b9 0f00 	cmp.w	r9, #0
  40a034:	bfb9      	ittee	lt
  40a036:	eba8 0509 	sublt.w	r5, r8, r9
  40a03a:	2300      	movlt	r3, #0
  40a03c:	4645      	movge	r5, r8
  40a03e:	464b      	movge	r3, r9
  40a040:	e6e2      	b.n	409e08 <_dtoa_r+0x710>
  40a042:	9e08      	ldr	r6, [sp, #32]
  40a044:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40a046:	4645      	mov	r5, r8
  40a048:	e6e7      	b.n	409e1a <_dtoa_r+0x722>
  40a04a:	9a08      	ldr	r2, [sp, #32]
  40a04c:	e710      	b.n	409e70 <_dtoa_r+0x778>
  40a04e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40a050:	2b01      	cmp	r3, #1
  40a052:	dc18      	bgt.n	40a086 <_dtoa_r+0x98e>
  40a054:	9b02      	ldr	r3, [sp, #8]
  40a056:	b9b3      	cbnz	r3, 40a086 <_dtoa_r+0x98e>
  40a058:	9b03      	ldr	r3, [sp, #12]
  40a05a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40a05e:	b9a3      	cbnz	r3, 40a08a <_dtoa_r+0x992>
  40a060:	9b03      	ldr	r3, [sp, #12]
  40a062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40a066:	0d1b      	lsrs	r3, r3, #20
  40a068:	051b      	lsls	r3, r3, #20
  40a06a:	b12b      	cbz	r3, 40a078 <_dtoa_r+0x980>
  40a06c:	9b07      	ldr	r3, [sp, #28]
  40a06e:	3301      	adds	r3, #1
  40a070:	9307      	str	r3, [sp, #28]
  40a072:	f108 0801 	add.w	r8, r8, #1
  40a076:	2301      	movs	r3, #1
  40a078:	9308      	str	r3, [sp, #32]
  40a07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a07c:	2b00      	cmp	r3, #0
  40a07e:	f47f af11 	bne.w	409ea4 <_dtoa_r+0x7ac>
  40a082:	2001      	movs	r0, #1
  40a084:	e716      	b.n	409eb4 <_dtoa_r+0x7bc>
  40a086:	2300      	movs	r3, #0
  40a088:	e7f6      	b.n	40a078 <_dtoa_r+0x980>
  40a08a:	9b02      	ldr	r3, [sp, #8]
  40a08c:	e7f4      	b.n	40a078 <_dtoa_r+0x980>
  40a08e:	f43f af23 	beq.w	409ed8 <_dtoa_r+0x7e0>
  40a092:	9a07      	ldr	r2, [sp, #28]
  40a094:	331c      	adds	r3, #28
  40a096:	441a      	add	r2, r3
  40a098:	4498      	add	r8, r3
  40a09a:	441d      	add	r5, r3
  40a09c:	4613      	mov	r3, r2
  40a09e:	e71a      	b.n	409ed6 <_dtoa_r+0x7de>
  40a0a0:	4603      	mov	r3, r0
  40a0a2:	e7f6      	b.n	40a092 <_dtoa_r+0x99a>
  40a0a4:	40240000 	.word	0x40240000
  40a0a8:	f1b9 0f00 	cmp.w	r9, #0
  40a0ac:	dc33      	bgt.n	40a116 <_dtoa_r+0xa1e>
  40a0ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40a0b0:	2b02      	cmp	r3, #2
  40a0b2:	dd30      	ble.n	40a116 <_dtoa_r+0xa1e>
  40a0b4:	f8cd 9010 	str.w	r9, [sp, #16]
  40a0b8:	9b04      	ldr	r3, [sp, #16]
  40a0ba:	b963      	cbnz	r3, 40a0d6 <_dtoa_r+0x9de>
  40a0bc:	4631      	mov	r1, r6
  40a0be:	2205      	movs	r2, #5
  40a0c0:	4620      	mov	r0, r4
  40a0c2:	f000 fb80 	bl	40a7c6 <__multadd>
  40a0c6:	4601      	mov	r1, r0
  40a0c8:	4606      	mov	r6, r0
  40a0ca:	4650      	mov	r0, sl
  40a0cc:	f000 fd39 	bl	40ab42 <__mcmp>
  40a0d0:	2800      	cmp	r0, #0
  40a0d2:	f73f ad5c 	bgt.w	409b8e <_dtoa_r+0x496>
  40a0d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40a0d8:	9d06      	ldr	r5, [sp, #24]
  40a0da:	ea6f 0b03 	mvn.w	fp, r3
  40a0de:	2300      	movs	r3, #0
  40a0e0:	9307      	str	r3, [sp, #28]
  40a0e2:	4631      	mov	r1, r6
  40a0e4:	4620      	mov	r0, r4
  40a0e6:	f000 fb57 	bl	40a798 <_Bfree>
  40a0ea:	2f00      	cmp	r7, #0
  40a0ec:	f43f ae4b 	beq.w	409d86 <_dtoa_r+0x68e>
  40a0f0:	9b07      	ldr	r3, [sp, #28]
  40a0f2:	b12b      	cbz	r3, 40a100 <_dtoa_r+0xa08>
  40a0f4:	42bb      	cmp	r3, r7
  40a0f6:	d003      	beq.n	40a100 <_dtoa_r+0xa08>
  40a0f8:	4619      	mov	r1, r3
  40a0fa:	4620      	mov	r0, r4
  40a0fc:	f000 fb4c 	bl	40a798 <_Bfree>
  40a100:	4639      	mov	r1, r7
  40a102:	4620      	mov	r0, r4
  40a104:	f000 fb48 	bl	40a798 <_Bfree>
  40a108:	e63d      	b.n	409d86 <_dtoa_r+0x68e>
  40a10a:	2600      	movs	r6, #0
  40a10c:	4637      	mov	r7, r6
  40a10e:	e7e2      	b.n	40a0d6 <_dtoa_r+0x9de>
  40a110:	46bb      	mov	fp, r7
  40a112:	4637      	mov	r7, r6
  40a114:	e53b      	b.n	409b8e <_dtoa_r+0x496>
  40a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a118:	f8cd 9010 	str.w	r9, [sp, #16]
  40a11c:	2b00      	cmp	r3, #0
  40a11e:	f47f af13 	bne.w	409f48 <_dtoa_r+0x850>
  40a122:	9d06      	ldr	r5, [sp, #24]
  40a124:	4631      	mov	r1, r6
  40a126:	4650      	mov	r0, sl
  40a128:	f7ff fa58 	bl	4095dc <quorem>
  40a12c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  40a130:	f805 9b01 	strb.w	r9, [r5], #1
  40a134:	9b06      	ldr	r3, [sp, #24]
  40a136:	9a04      	ldr	r2, [sp, #16]
  40a138:	1aeb      	subs	r3, r5, r3
  40a13a:	429a      	cmp	r2, r3
  40a13c:	f300 8083 	bgt.w	40a246 <_dtoa_r+0xb4e>
  40a140:	9b06      	ldr	r3, [sp, #24]
  40a142:	2a01      	cmp	r2, #1
  40a144:	bfac      	ite	ge
  40a146:	189b      	addge	r3, r3, r2
  40a148:	3301      	addlt	r3, #1
  40a14a:	4698      	mov	r8, r3
  40a14c:	2300      	movs	r3, #0
  40a14e:	9307      	str	r3, [sp, #28]
  40a150:	4651      	mov	r1, sl
  40a152:	2201      	movs	r2, #1
  40a154:	4620      	mov	r0, r4
  40a156:	f000 fca3 	bl	40aaa0 <__lshift>
  40a15a:	4631      	mov	r1, r6
  40a15c:	4682      	mov	sl, r0
  40a15e:	f000 fcf0 	bl	40ab42 <__mcmp>
  40a162:	2800      	cmp	r0, #0
  40a164:	dc35      	bgt.n	40a1d2 <_dtoa_r+0xada>
  40a166:	d102      	bne.n	40a16e <_dtoa_r+0xa76>
  40a168:	f019 0f01 	tst.w	r9, #1
  40a16c:	d131      	bne.n	40a1d2 <_dtoa_r+0xada>
  40a16e:	4645      	mov	r5, r8
  40a170:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a174:	2b30      	cmp	r3, #48	; 0x30
  40a176:	f105 32ff 	add.w	r2, r5, #4294967295
  40a17a:	d1b2      	bne.n	40a0e2 <_dtoa_r+0x9ea>
  40a17c:	4615      	mov	r5, r2
  40a17e:	e7f7      	b.n	40a170 <_dtoa_r+0xa78>
  40a180:	4638      	mov	r0, r7
  40a182:	e6ff      	b.n	409f84 <_dtoa_r+0x88c>
  40a184:	2301      	movs	r3, #1
  40a186:	e722      	b.n	409fce <_dtoa_r+0x8d6>
  40a188:	9a02      	ldr	r2, [sp, #8]
  40a18a:	2a00      	cmp	r2, #0
  40a18c:	db04      	blt.n	40a198 <_dtoa_r+0xaa0>
  40a18e:	d129      	bne.n	40a1e4 <_dtoa_r+0xaec>
  40a190:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40a192:	bb3a      	cbnz	r2, 40a1e4 <_dtoa_r+0xaec>
  40a194:	9a08      	ldr	r2, [sp, #32]
  40a196:	bb2a      	cbnz	r2, 40a1e4 <_dtoa_r+0xaec>
  40a198:	2b00      	cmp	r3, #0
  40a19a:	f77f af32 	ble.w	40a002 <_dtoa_r+0x90a>
  40a19e:	4651      	mov	r1, sl
  40a1a0:	2201      	movs	r2, #1
  40a1a2:	4620      	mov	r0, r4
  40a1a4:	f000 fc7c 	bl	40aaa0 <__lshift>
  40a1a8:	4631      	mov	r1, r6
  40a1aa:	4682      	mov	sl, r0
  40a1ac:	f000 fcc9 	bl	40ab42 <__mcmp>
  40a1b0:	2800      	cmp	r0, #0
  40a1b2:	dc05      	bgt.n	40a1c0 <_dtoa_r+0xac8>
  40a1b4:	f47f af25 	bne.w	40a002 <_dtoa_r+0x90a>
  40a1b8:	f019 0f01 	tst.w	r9, #1
  40a1bc:	f43f af21 	beq.w	40a002 <_dtoa_r+0x90a>
  40a1c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40a1c4:	f47f af1b 	bne.w	409ffe <_dtoa_r+0x906>
  40a1c8:	2339      	movs	r3, #57	; 0x39
  40a1ca:	f888 3000 	strb.w	r3, [r8]
  40a1ce:	f108 0801 	add.w	r8, r8, #1
  40a1d2:	4645      	mov	r5, r8
  40a1d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a1d8:	2b39      	cmp	r3, #57	; 0x39
  40a1da:	f105 32ff 	add.w	r2, r5, #4294967295
  40a1de:	d03a      	beq.n	40a256 <_dtoa_r+0xb5e>
  40a1e0:	3301      	adds	r3, #1
  40a1e2:	e03f      	b.n	40a264 <_dtoa_r+0xb6c>
  40a1e4:	2b00      	cmp	r3, #0
  40a1e6:	f108 0501 	add.w	r5, r8, #1
  40a1ea:	dd05      	ble.n	40a1f8 <_dtoa_r+0xb00>
  40a1ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40a1f0:	d0ea      	beq.n	40a1c8 <_dtoa_r+0xad0>
  40a1f2:	f109 0901 	add.w	r9, r9, #1
  40a1f6:	e706      	b.n	40a006 <_dtoa_r+0x90e>
  40a1f8:	9b06      	ldr	r3, [sp, #24]
  40a1fa:	9a04      	ldr	r2, [sp, #16]
  40a1fc:	f805 9c01 	strb.w	r9, [r5, #-1]
  40a200:	1aeb      	subs	r3, r5, r3
  40a202:	4293      	cmp	r3, r2
  40a204:	46a8      	mov	r8, r5
  40a206:	d0a3      	beq.n	40a150 <_dtoa_r+0xa58>
  40a208:	4651      	mov	r1, sl
  40a20a:	2300      	movs	r3, #0
  40a20c:	220a      	movs	r2, #10
  40a20e:	4620      	mov	r0, r4
  40a210:	f000 fad9 	bl	40a7c6 <__multadd>
  40a214:	9b07      	ldr	r3, [sp, #28]
  40a216:	9907      	ldr	r1, [sp, #28]
  40a218:	42bb      	cmp	r3, r7
  40a21a:	4682      	mov	sl, r0
  40a21c:	f04f 0300 	mov.w	r3, #0
  40a220:	f04f 020a 	mov.w	r2, #10
  40a224:	4620      	mov	r0, r4
  40a226:	d104      	bne.n	40a232 <_dtoa_r+0xb3a>
  40a228:	f000 facd 	bl	40a7c6 <__multadd>
  40a22c:	9007      	str	r0, [sp, #28]
  40a22e:	4607      	mov	r7, r0
  40a230:	e6b0      	b.n	409f94 <_dtoa_r+0x89c>
  40a232:	f000 fac8 	bl	40a7c6 <__multadd>
  40a236:	2300      	movs	r3, #0
  40a238:	9007      	str	r0, [sp, #28]
  40a23a:	220a      	movs	r2, #10
  40a23c:	4639      	mov	r1, r7
  40a23e:	4620      	mov	r0, r4
  40a240:	f000 fac1 	bl	40a7c6 <__multadd>
  40a244:	e7f3      	b.n	40a22e <_dtoa_r+0xb36>
  40a246:	4651      	mov	r1, sl
  40a248:	2300      	movs	r3, #0
  40a24a:	220a      	movs	r2, #10
  40a24c:	4620      	mov	r0, r4
  40a24e:	f000 faba 	bl	40a7c6 <__multadd>
  40a252:	4682      	mov	sl, r0
  40a254:	e766      	b.n	40a124 <_dtoa_r+0xa2c>
  40a256:	9b06      	ldr	r3, [sp, #24]
  40a258:	4293      	cmp	r3, r2
  40a25a:	d105      	bne.n	40a268 <_dtoa_r+0xb70>
  40a25c:	9a06      	ldr	r2, [sp, #24]
  40a25e:	f10b 0b01 	add.w	fp, fp, #1
  40a262:	2331      	movs	r3, #49	; 0x31
  40a264:	7013      	strb	r3, [r2, #0]
  40a266:	e73c      	b.n	40a0e2 <_dtoa_r+0x9ea>
  40a268:	4615      	mov	r5, r2
  40a26a:	e7b3      	b.n	40a1d4 <_dtoa_r+0xadc>
  40a26c:	4b09      	ldr	r3, [pc, #36]	; (40a294 <_dtoa_r+0xb9c>)
  40a26e:	f7ff baa5 	b.w	4097bc <_dtoa_r+0xc4>
  40a272:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a274:	2b00      	cmp	r3, #0
  40a276:	f47f aa7f 	bne.w	409778 <_dtoa_r+0x80>
  40a27a:	4b07      	ldr	r3, [pc, #28]	; (40a298 <_dtoa_r+0xba0>)
  40a27c:	f7ff ba9e 	b.w	4097bc <_dtoa_r+0xc4>
  40a280:	9b04      	ldr	r3, [sp, #16]
  40a282:	2b00      	cmp	r3, #0
  40a284:	f73f af4d 	bgt.w	40a122 <_dtoa_r+0xa2a>
  40a288:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40a28a:	2b02      	cmp	r3, #2
  40a28c:	f77f af49 	ble.w	40a122 <_dtoa_r+0xa2a>
  40a290:	e712      	b.n	40a0b8 <_dtoa_r+0x9c0>
  40a292:	bf00      	nop
  40a294:	0040ccc4 	.word	0x0040ccc4
  40a298:	0040cce8 	.word	0x0040cce8

0040a29c <__sflush_r>:
  40a29c:	898a      	ldrh	r2, [r1, #12]
  40a29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a2a2:	4605      	mov	r5, r0
  40a2a4:	0710      	lsls	r0, r2, #28
  40a2a6:	460c      	mov	r4, r1
  40a2a8:	d45a      	bmi.n	40a360 <__sflush_r+0xc4>
  40a2aa:	684b      	ldr	r3, [r1, #4]
  40a2ac:	2b00      	cmp	r3, #0
  40a2ae:	dc05      	bgt.n	40a2bc <__sflush_r+0x20>
  40a2b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  40a2b2:	2b00      	cmp	r3, #0
  40a2b4:	dc02      	bgt.n	40a2bc <__sflush_r+0x20>
  40a2b6:	2000      	movs	r0, #0
  40a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40a2be:	2e00      	cmp	r6, #0
  40a2c0:	d0f9      	beq.n	40a2b6 <__sflush_r+0x1a>
  40a2c2:	2300      	movs	r3, #0
  40a2c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  40a2c8:	682f      	ldr	r7, [r5, #0]
  40a2ca:	602b      	str	r3, [r5, #0]
  40a2cc:	d033      	beq.n	40a336 <__sflush_r+0x9a>
  40a2ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
  40a2d0:	89a3      	ldrh	r3, [r4, #12]
  40a2d2:	075a      	lsls	r2, r3, #29
  40a2d4:	d505      	bpl.n	40a2e2 <__sflush_r+0x46>
  40a2d6:	6863      	ldr	r3, [r4, #4]
  40a2d8:	1ac0      	subs	r0, r0, r3
  40a2da:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40a2dc:	b10b      	cbz	r3, 40a2e2 <__sflush_r+0x46>
  40a2de:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40a2e0:	1ac0      	subs	r0, r0, r3
  40a2e2:	2300      	movs	r3, #0
  40a2e4:	4602      	mov	r2, r0
  40a2e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40a2e8:	6a21      	ldr	r1, [r4, #32]
  40a2ea:	4628      	mov	r0, r5
  40a2ec:	47b0      	blx	r6
  40a2ee:	1c43      	adds	r3, r0, #1
  40a2f0:	89a3      	ldrh	r3, [r4, #12]
  40a2f2:	d106      	bne.n	40a302 <__sflush_r+0x66>
  40a2f4:	6829      	ldr	r1, [r5, #0]
  40a2f6:	291d      	cmp	r1, #29
  40a2f8:	d84b      	bhi.n	40a392 <__sflush_r+0xf6>
  40a2fa:	4a2b      	ldr	r2, [pc, #172]	; (40a3a8 <__sflush_r+0x10c>)
  40a2fc:	40ca      	lsrs	r2, r1
  40a2fe:	07d6      	lsls	r6, r2, #31
  40a300:	d547      	bpl.n	40a392 <__sflush_r+0xf6>
  40a302:	2200      	movs	r2, #0
  40a304:	6062      	str	r2, [r4, #4]
  40a306:	04d9      	lsls	r1, r3, #19
  40a308:	6922      	ldr	r2, [r4, #16]
  40a30a:	6022      	str	r2, [r4, #0]
  40a30c:	d504      	bpl.n	40a318 <__sflush_r+0x7c>
  40a30e:	1c42      	adds	r2, r0, #1
  40a310:	d101      	bne.n	40a316 <__sflush_r+0x7a>
  40a312:	682b      	ldr	r3, [r5, #0]
  40a314:	b903      	cbnz	r3, 40a318 <__sflush_r+0x7c>
  40a316:	6560      	str	r0, [r4, #84]	; 0x54
  40a318:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40a31a:	602f      	str	r7, [r5, #0]
  40a31c:	2900      	cmp	r1, #0
  40a31e:	d0ca      	beq.n	40a2b6 <__sflush_r+0x1a>
  40a320:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40a324:	4299      	cmp	r1, r3
  40a326:	d002      	beq.n	40a32e <__sflush_r+0x92>
  40a328:	4628      	mov	r0, r5
  40a32a:	f000 fcdf 	bl	40acec <_free_r>
  40a32e:	2000      	movs	r0, #0
  40a330:	6360      	str	r0, [r4, #52]	; 0x34
  40a332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a336:	6a21      	ldr	r1, [r4, #32]
  40a338:	2301      	movs	r3, #1
  40a33a:	4628      	mov	r0, r5
  40a33c:	47b0      	blx	r6
  40a33e:	1c41      	adds	r1, r0, #1
  40a340:	d1c6      	bne.n	40a2d0 <__sflush_r+0x34>
  40a342:	682b      	ldr	r3, [r5, #0]
  40a344:	2b00      	cmp	r3, #0
  40a346:	d0c3      	beq.n	40a2d0 <__sflush_r+0x34>
  40a348:	2b1d      	cmp	r3, #29
  40a34a:	d001      	beq.n	40a350 <__sflush_r+0xb4>
  40a34c:	2b16      	cmp	r3, #22
  40a34e:	d101      	bne.n	40a354 <__sflush_r+0xb8>
  40a350:	602f      	str	r7, [r5, #0]
  40a352:	e7b0      	b.n	40a2b6 <__sflush_r+0x1a>
  40a354:	89a3      	ldrh	r3, [r4, #12]
  40a356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a35a:	81a3      	strh	r3, [r4, #12]
  40a35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a360:	690f      	ldr	r7, [r1, #16]
  40a362:	2f00      	cmp	r7, #0
  40a364:	d0a7      	beq.n	40a2b6 <__sflush_r+0x1a>
  40a366:	0793      	lsls	r3, r2, #30
  40a368:	680e      	ldr	r6, [r1, #0]
  40a36a:	bf08      	it	eq
  40a36c:	694b      	ldreq	r3, [r1, #20]
  40a36e:	600f      	str	r7, [r1, #0]
  40a370:	bf18      	it	ne
  40a372:	2300      	movne	r3, #0
  40a374:	eba6 0807 	sub.w	r8, r6, r7
  40a378:	608b      	str	r3, [r1, #8]
  40a37a:	f1b8 0f00 	cmp.w	r8, #0
  40a37e:	dd9a      	ble.n	40a2b6 <__sflush_r+0x1a>
  40a380:	4643      	mov	r3, r8
  40a382:	463a      	mov	r2, r7
  40a384:	6a21      	ldr	r1, [r4, #32]
  40a386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  40a388:	4628      	mov	r0, r5
  40a38a:	47b0      	blx	r6
  40a38c:	2800      	cmp	r0, #0
  40a38e:	dc07      	bgt.n	40a3a0 <__sflush_r+0x104>
  40a390:	89a3      	ldrh	r3, [r4, #12]
  40a392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a396:	81a3      	strh	r3, [r4, #12]
  40a398:	f04f 30ff 	mov.w	r0, #4294967295
  40a39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a3a0:	4407      	add	r7, r0
  40a3a2:	eba8 0800 	sub.w	r8, r8, r0
  40a3a6:	e7e8      	b.n	40a37a <__sflush_r+0xde>
  40a3a8:	20400001 	.word	0x20400001

0040a3ac <_fflush_r>:
  40a3ac:	b538      	push	{r3, r4, r5, lr}
  40a3ae:	690b      	ldr	r3, [r1, #16]
  40a3b0:	4605      	mov	r5, r0
  40a3b2:	460c      	mov	r4, r1
  40a3b4:	b1db      	cbz	r3, 40a3ee <_fflush_r+0x42>
  40a3b6:	b118      	cbz	r0, 40a3c0 <_fflush_r+0x14>
  40a3b8:	6983      	ldr	r3, [r0, #24]
  40a3ba:	b90b      	cbnz	r3, 40a3c0 <_fflush_r+0x14>
  40a3bc:	f000 f860 	bl	40a480 <__sinit>
  40a3c0:	4b0c      	ldr	r3, [pc, #48]	; (40a3f4 <_fflush_r+0x48>)
  40a3c2:	429c      	cmp	r4, r3
  40a3c4:	d109      	bne.n	40a3da <_fflush_r+0x2e>
  40a3c6:	686c      	ldr	r4, [r5, #4]
  40a3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a3cc:	b17b      	cbz	r3, 40a3ee <_fflush_r+0x42>
  40a3ce:	4621      	mov	r1, r4
  40a3d0:	4628      	mov	r0, r5
  40a3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a3d6:	f7ff bf61 	b.w	40a29c <__sflush_r>
  40a3da:	4b07      	ldr	r3, [pc, #28]	; (40a3f8 <_fflush_r+0x4c>)
  40a3dc:	429c      	cmp	r4, r3
  40a3de:	d101      	bne.n	40a3e4 <_fflush_r+0x38>
  40a3e0:	68ac      	ldr	r4, [r5, #8]
  40a3e2:	e7f1      	b.n	40a3c8 <_fflush_r+0x1c>
  40a3e4:	4b05      	ldr	r3, [pc, #20]	; (40a3fc <_fflush_r+0x50>)
  40a3e6:	429c      	cmp	r4, r3
  40a3e8:	bf08      	it	eq
  40a3ea:	68ec      	ldreq	r4, [r5, #12]
  40a3ec:	e7ec      	b.n	40a3c8 <_fflush_r+0x1c>
  40a3ee:	2000      	movs	r0, #0
  40a3f0:	bd38      	pop	{r3, r4, r5, pc}
  40a3f2:	bf00      	nop
  40a3f4:	0040cd18 	.word	0x0040cd18
  40a3f8:	0040cd38 	.word	0x0040cd38
  40a3fc:	0040ccf8 	.word	0x0040ccf8

0040a400 <_cleanup_r>:
  40a400:	4901      	ldr	r1, [pc, #4]	; (40a408 <_cleanup_r+0x8>)
  40a402:	f000 b8a9 	b.w	40a558 <_fwalk_reent>
  40a406:	bf00      	nop
  40a408:	0040a3ad 	.word	0x0040a3ad

0040a40c <std.isra.0>:
  40a40c:	2300      	movs	r3, #0
  40a40e:	b510      	push	{r4, lr}
  40a410:	4604      	mov	r4, r0
  40a412:	6003      	str	r3, [r0, #0]
  40a414:	6043      	str	r3, [r0, #4]
  40a416:	6083      	str	r3, [r0, #8]
  40a418:	8181      	strh	r1, [r0, #12]
  40a41a:	6643      	str	r3, [r0, #100]	; 0x64
  40a41c:	81c2      	strh	r2, [r0, #14]
  40a41e:	6103      	str	r3, [r0, #16]
  40a420:	6143      	str	r3, [r0, #20]
  40a422:	6183      	str	r3, [r0, #24]
  40a424:	4619      	mov	r1, r3
  40a426:	2208      	movs	r2, #8
  40a428:	305c      	adds	r0, #92	; 0x5c
  40a42a:	f7fe fb9a 	bl	408b62 <memset>
  40a42e:	4b05      	ldr	r3, [pc, #20]	; (40a444 <std.isra.0+0x38>)
  40a430:	6263      	str	r3, [r4, #36]	; 0x24
  40a432:	4b05      	ldr	r3, [pc, #20]	; (40a448 <std.isra.0+0x3c>)
  40a434:	62a3      	str	r3, [r4, #40]	; 0x28
  40a436:	4b05      	ldr	r3, [pc, #20]	; (40a44c <std.isra.0+0x40>)
  40a438:	62e3      	str	r3, [r4, #44]	; 0x2c
  40a43a:	4b05      	ldr	r3, [pc, #20]	; (40a450 <std.isra.0+0x44>)
  40a43c:	6224      	str	r4, [r4, #32]
  40a43e:	6323      	str	r3, [r4, #48]	; 0x30
  40a440:	bd10      	pop	{r4, pc}
  40a442:	bf00      	nop
  40a444:	0040b0e1 	.word	0x0040b0e1
  40a448:	0040b103 	.word	0x0040b103
  40a44c:	0040b13b 	.word	0x0040b13b
  40a450:	0040b15f 	.word	0x0040b15f

0040a454 <__sfmoreglue>:
  40a454:	b570      	push	{r4, r5, r6, lr}
  40a456:	1e4a      	subs	r2, r1, #1
  40a458:	2568      	movs	r5, #104	; 0x68
  40a45a:	4355      	muls	r5, r2
  40a45c:	460e      	mov	r6, r1
  40a45e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  40a462:	f000 fc91 	bl	40ad88 <_malloc_r>
  40a466:	4604      	mov	r4, r0
  40a468:	b140      	cbz	r0, 40a47c <__sfmoreglue+0x28>
  40a46a:	2100      	movs	r1, #0
  40a46c:	e880 0042 	stmia.w	r0, {r1, r6}
  40a470:	300c      	adds	r0, #12
  40a472:	60a0      	str	r0, [r4, #8]
  40a474:	f105 0268 	add.w	r2, r5, #104	; 0x68
  40a478:	f7fe fb73 	bl	408b62 <memset>
  40a47c:	4620      	mov	r0, r4
  40a47e:	bd70      	pop	{r4, r5, r6, pc}

0040a480 <__sinit>:
  40a480:	6983      	ldr	r3, [r0, #24]
  40a482:	b510      	push	{r4, lr}
  40a484:	4604      	mov	r4, r0
  40a486:	bb33      	cbnz	r3, 40a4d6 <__sinit+0x56>
  40a488:	6483      	str	r3, [r0, #72]	; 0x48
  40a48a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40a48c:	6503      	str	r3, [r0, #80]	; 0x50
  40a48e:	4b12      	ldr	r3, [pc, #72]	; (40a4d8 <__sinit+0x58>)
  40a490:	4a12      	ldr	r2, [pc, #72]	; (40a4dc <__sinit+0x5c>)
  40a492:	681b      	ldr	r3, [r3, #0]
  40a494:	6282      	str	r2, [r0, #40]	; 0x28
  40a496:	4298      	cmp	r0, r3
  40a498:	bf04      	itt	eq
  40a49a:	2301      	moveq	r3, #1
  40a49c:	6183      	streq	r3, [r0, #24]
  40a49e:	f000 f81f 	bl	40a4e0 <__sfp>
  40a4a2:	6060      	str	r0, [r4, #4]
  40a4a4:	4620      	mov	r0, r4
  40a4a6:	f000 f81b 	bl	40a4e0 <__sfp>
  40a4aa:	60a0      	str	r0, [r4, #8]
  40a4ac:	4620      	mov	r0, r4
  40a4ae:	f000 f817 	bl	40a4e0 <__sfp>
  40a4b2:	2200      	movs	r2, #0
  40a4b4:	60e0      	str	r0, [r4, #12]
  40a4b6:	2104      	movs	r1, #4
  40a4b8:	6860      	ldr	r0, [r4, #4]
  40a4ba:	f7ff ffa7 	bl	40a40c <std.isra.0>
  40a4be:	2201      	movs	r2, #1
  40a4c0:	2109      	movs	r1, #9
  40a4c2:	68a0      	ldr	r0, [r4, #8]
  40a4c4:	f7ff ffa2 	bl	40a40c <std.isra.0>
  40a4c8:	2202      	movs	r2, #2
  40a4ca:	2112      	movs	r1, #18
  40a4cc:	68e0      	ldr	r0, [r4, #12]
  40a4ce:	f7ff ff9d 	bl	40a40c <std.isra.0>
  40a4d2:	2301      	movs	r3, #1
  40a4d4:	61a3      	str	r3, [r4, #24]
  40a4d6:	bd10      	pop	{r4, pc}
  40a4d8:	0040ccb0 	.word	0x0040ccb0
  40a4dc:	0040a401 	.word	0x0040a401

0040a4e0 <__sfp>:
  40a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a4e2:	4b1c      	ldr	r3, [pc, #112]	; (40a554 <__sfp+0x74>)
  40a4e4:	681e      	ldr	r6, [r3, #0]
  40a4e6:	69b3      	ldr	r3, [r6, #24]
  40a4e8:	4607      	mov	r7, r0
  40a4ea:	b913      	cbnz	r3, 40a4f2 <__sfp+0x12>
  40a4ec:	4630      	mov	r0, r6
  40a4ee:	f7ff ffc7 	bl	40a480 <__sinit>
  40a4f2:	3648      	adds	r6, #72	; 0x48
  40a4f4:	68b4      	ldr	r4, [r6, #8]
  40a4f6:	6873      	ldr	r3, [r6, #4]
  40a4f8:	3b01      	subs	r3, #1
  40a4fa:	d503      	bpl.n	40a504 <__sfp+0x24>
  40a4fc:	6833      	ldr	r3, [r6, #0]
  40a4fe:	b133      	cbz	r3, 40a50e <__sfp+0x2e>
  40a500:	6836      	ldr	r6, [r6, #0]
  40a502:	e7f7      	b.n	40a4f4 <__sfp+0x14>
  40a504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40a508:	b16d      	cbz	r5, 40a526 <__sfp+0x46>
  40a50a:	3468      	adds	r4, #104	; 0x68
  40a50c:	e7f4      	b.n	40a4f8 <__sfp+0x18>
  40a50e:	2104      	movs	r1, #4
  40a510:	4638      	mov	r0, r7
  40a512:	f7ff ff9f 	bl	40a454 <__sfmoreglue>
  40a516:	6030      	str	r0, [r6, #0]
  40a518:	2800      	cmp	r0, #0
  40a51a:	d1f1      	bne.n	40a500 <__sfp+0x20>
  40a51c:	230c      	movs	r3, #12
  40a51e:	603b      	str	r3, [r7, #0]
  40a520:	4604      	mov	r4, r0
  40a522:	4620      	mov	r0, r4
  40a524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a526:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40a52a:	81e3      	strh	r3, [r4, #14]
  40a52c:	2301      	movs	r3, #1
  40a52e:	81a3      	strh	r3, [r4, #12]
  40a530:	6665      	str	r5, [r4, #100]	; 0x64
  40a532:	6025      	str	r5, [r4, #0]
  40a534:	60a5      	str	r5, [r4, #8]
  40a536:	6065      	str	r5, [r4, #4]
  40a538:	6125      	str	r5, [r4, #16]
  40a53a:	6165      	str	r5, [r4, #20]
  40a53c:	61a5      	str	r5, [r4, #24]
  40a53e:	2208      	movs	r2, #8
  40a540:	4629      	mov	r1, r5
  40a542:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40a546:	f7fe fb0c 	bl	408b62 <memset>
  40a54a:	6365      	str	r5, [r4, #52]	; 0x34
  40a54c:	63a5      	str	r5, [r4, #56]	; 0x38
  40a54e:	64a5      	str	r5, [r4, #72]	; 0x48
  40a550:	64e5      	str	r5, [r4, #76]	; 0x4c
  40a552:	e7e6      	b.n	40a522 <__sfp+0x42>
  40a554:	0040ccb0 	.word	0x0040ccb0

0040a558 <_fwalk_reent>:
  40a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a55c:	4680      	mov	r8, r0
  40a55e:	4689      	mov	r9, r1
  40a560:	f100 0448 	add.w	r4, r0, #72	; 0x48
  40a564:	2600      	movs	r6, #0
  40a566:	b914      	cbnz	r4, 40a56e <_fwalk_reent+0x16>
  40a568:	4630      	mov	r0, r6
  40a56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a56e:	68a5      	ldr	r5, [r4, #8]
  40a570:	6867      	ldr	r7, [r4, #4]
  40a572:	3f01      	subs	r7, #1
  40a574:	d501      	bpl.n	40a57a <_fwalk_reent+0x22>
  40a576:	6824      	ldr	r4, [r4, #0]
  40a578:	e7f5      	b.n	40a566 <_fwalk_reent+0xe>
  40a57a:	89ab      	ldrh	r3, [r5, #12]
  40a57c:	2b01      	cmp	r3, #1
  40a57e:	d907      	bls.n	40a590 <_fwalk_reent+0x38>
  40a580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  40a584:	3301      	adds	r3, #1
  40a586:	d003      	beq.n	40a590 <_fwalk_reent+0x38>
  40a588:	4629      	mov	r1, r5
  40a58a:	4640      	mov	r0, r8
  40a58c:	47c8      	blx	r9
  40a58e:	4306      	orrs	r6, r0
  40a590:	3568      	adds	r5, #104	; 0x68
  40a592:	e7ee      	b.n	40a572 <_fwalk_reent+0x1a>

0040a594 <_localeconv_r>:
  40a594:	4b04      	ldr	r3, [pc, #16]	; (40a5a8 <_localeconv_r+0x14>)
  40a596:	681b      	ldr	r3, [r3, #0]
  40a598:	6a18      	ldr	r0, [r3, #32]
  40a59a:	4b04      	ldr	r3, [pc, #16]	; (40a5ac <_localeconv_r+0x18>)
  40a59c:	2800      	cmp	r0, #0
  40a59e:	bf08      	it	eq
  40a5a0:	4618      	moveq	r0, r3
  40a5a2:	30f0      	adds	r0, #240	; 0xf0
  40a5a4:	4770      	bx	lr
  40a5a6:	bf00      	nop
  40a5a8:	20000178 	.word	0x20000178
  40a5ac:	200001dc 	.word	0x200001dc

0040a5b0 <__swhatbuf_r>:
  40a5b0:	b570      	push	{r4, r5, r6, lr}
  40a5b2:	460e      	mov	r6, r1
  40a5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a5b8:	2900      	cmp	r1, #0
  40a5ba:	b090      	sub	sp, #64	; 0x40
  40a5bc:	4614      	mov	r4, r2
  40a5be:	461d      	mov	r5, r3
  40a5c0:	da07      	bge.n	40a5d2 <__swhatbuf_r+0x22>
  40a5c2:	2300      	movs	r3, #0
  40a5c4:	602b      	str	r3, [r5, #0]
  40a5c6:	89b3      	ldrh	r3, [r6, #12]
  40a5c8:	061a      	lsls	r2, r3, #24
  40a5ca:	d410      	bmi.n	40a5ee <__swhatbuf_r+0x3e>
  40a5cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a5d0:	e00e      	b.n	40a5f0 <__swhatbuf_r+0x40>
  40a5d2:	aa01      	add	r2, sp, #4
  40a5d4:	f000 feaa 	bl	40b32c <_fstat_r>
  40a5d8:	2800      	cmp	r0, #0
  40a5da:	dbf2      	blt.n	40a5c2 <__swhatbuf_r+0x12>
  40a5dc:	9a02      	ldr	r2, [sp, #8]
  40a5de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a5e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40a5e6:	425a      	negs	r2, r3
  40a5e8:	415a      	adcs	r2, r3
  40a5ea:	602a      	str	r2, [r5, #0]
  40a5ec:	e7ee      	b.n	40a5cc <__swhatbuf_r+0x1c>
  40a5ee:	2340      	movs	r3, #64	; 0x40
  40a5f0:	2000      	movs	r0, #0
  40a5f2:	6023      	str	r3, [r4, #0]
  40a5f4:	b010      	add	sp, #64	; 0x40
  40a5f6:	bd70      	pop	{r4, r5, r6, pc}

0040a5f8 <__smakebuf_r>:
  40a5f8:	898b      	ldrh	r3, [r1, #12]
  40a5fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40a5fc:	079d      	lsls	r5, r3, #30
  40a5fe:	4606      	mov	r6, r0
  40a600:	460c      	mov	r4, r1
  40a602:	d507      	bpl.n	40a614 <__smakebuf_r+0x1c>
  40a604:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40a608:	6023      	str	r3, [r4, #0]
  40a60a:	6123      	str	r3, [r4, #16]
  40a60c:	2301      	movs	r3, #1
  40a60e:	6163      	str	r3, [r4, #20]
  40a610:	b002      	add	sp, #8
  40a612:	bd70      	pop	{r4, r5, r6, pc}
  40a614:	ab01      	add	r3, sp, #4
  40a616:	466a      	mov	r2, sp
  40a618:	f7ff ffca 	bl	40a5b0 <__swhatbuf_r>
  40a61c:	9900      	ldr	r1, [sp, #0]
  40a61e:	4605      	mov	r5, r0
  40a620:	4630      	mov	r0, r6
  40a622:	f000 fbb1 	bl	40ad88 <_malloc_r>
  40a626:	b948      	cbnz	r0, 40a63c <__smakebuf_r+0x44>
  40a628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a62c:	059a      	lsls	r2, r3, #22
  40a62e:	d4ef      	bmi.n	40a610 <__smakebuf_r+0x18>
  40a630:	f023 0303 	bic.w	r3, r3, #3
  40a634:	f043 0302 	orr.w	r3, r3, #2
  40a638:	81a3      	strh	r3, [r4, #12]
  40a63a:	e7e3      	b.n	40a604 <__smakebuf_r+0xc>
  40a63c:	4b0d      	ldr	r3, [pc, #52]	; (40a674 <__smakebuf_r+0x7c>)
  40a63e:	62b3      	str	r3, [r6, #40]	; 0x28
  40a640:	89a3      	ldrh	r3, [r4, #12]
  40a642:	6020      	str	r0, [r4, #0]
  40a644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a648:	81a3      	strh	r3, [r4, #12]
  40a64a:	9b00      	ldr	r3, [sp, #0]
  40a64c:	6163      	str	r3, [r4, #20]
  40a64e:	9b01      	ldr	r3, [sp, #4]
  40a650:	6120      	str	r0, [r4, #16]
  40a652:	b15b      	cbz	r3, 40a66c <__smakebuf_r+0x74>
  40a654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a658:	4630      	mov	r0, r6
  40a65a:	f000 fe79 	bl	40b350 <_isatty_r>
  40a65e:	b128      	cbz	r0, 40a66c <__smakebuf_r+0x74>
  40a660:	89a3      	ldrh	r3, [r4, #12]
  40a662:	f023 0303 	bic.w	r3, r3, #3
  40a666:	f043 0301 	orr.w	r3, r3, #1
  40a66a:	81a3      	strh	r3, [r4, #12]
  40a66c:	89a3      	ldrh	r3, [r4, #12]
  40a66e:	431d      	orrs	r5, r3
  40a670:	81a5      	strh	r5, [r4, #12]
  40a672:	e7cd      	b.n	40a610 <__smakebuf_r+0x18>
  40a674:	0040a401 	.word	0x0040a401

0040a678 <malloc>:
  40a678:	4b02      	ldr	r3, [pc, #8]	; (40a684 <malloc+0xc>)
  40a67a:	4601      	mov	r1, r0
  40a67c:	6818      	ldr	r0, [r3, #0]
  40a67e:	f000 bb83 	b.w	40ad88 <_malloc_r>
  40a682:	bf00      	nop
  40a684:	20000178 	.word	0x20000178
	...

0040a690 <memchr>:
  40a690:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a694:	2a10      	cmp	r2, #16
  40a696:	db2b      	blt.n	40a6f0 <memchr+0x60>
  40a698:	f010 0f07 	tst.w	r0, #7
  40a69c:	d008      	beq.n	40a6b0 <memchr+0x20>
  40a69e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a6a2:	3a01      	subs	r2, #1
  40a6a4:	428b      	cmp	r3, r1
  40a6a6:	d02d      	beq.n	40a704 <memchr+0x74>
  40a6a8:	f010 0f07 	tst.w	r0, #7
  40a6ac:	b342      	cbz	r2, 40a700 <memchr+0x70>
  40a6ae:	d1f6      	bne.n	40a69e <memchr+0xe>
  40a6b0:	b4f0      	push	{r4, r5, r6, r7}
  40a6b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40a6b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40a6ba:	f022 0407 	bic.w	r4, r2, #7
  40a6be:	f07f 0700 	mvns.w	r7, #0
  40a6c2:	2300      	movs	r3, #0
  40a6c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40a6c8:	3c08      	subs	r4, #8
  40a6ca:	ea85 0501 	eor.w	r5, r5, r1
  40a6ce:	ea86 0601 	eor.w	r6, r6, r1
  40a6d2:	fa85 f547 	uadd8	r5, r5, r7
  40a6d6:	faa3 f587 	sel	r5, r3, r7
  40a6da:	fa86 f647 	uadd8	r6, r6, r7
  40a6de:	faa5 f687 	sel	r6, r5, r7
  40a6e2:	b98e      	cbnz	r6, 40a708 <memchr+0x78>
  40a6e4:	d1ee      	bne.n	40a6c4 <memchr+0x34>
  40a6e6:	bcf0      	pop	{r4, r5, r6, r7}
  40a6e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a6ec:	f002 0207 	and.w	r2, r2, #7
  40a6f0:	b132      	cbz	r2, 40a700 <memchr+0x70>
  40a6f2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a6f6:	3a01      	subs	r2, #1
  40a6f8:	ea83 0301 	eor.w	r3, r3, r1
  40a6fc:	b113      	cbz	r3, 40a704 <memchr+0x74>
  40a6fe:	d1f8      	bne.n	40a6f2 <memchr+0x62>
  40a700:	2000      	movs	r0, #0
  40a702:	4770      	bx	lr
  40a704:	3801      	subs	r0, #1
  40a706:	4770      	bx	lr
  40a708:	2d00      	cmp	r5, #0
  40a70a:	bf06      	itte	eq
  40a70c:	4635      	moveq	r5, r6
  40a70e:	3803      	subeq	r0, #3
  40a710:	3807      	subne	r0, #7
  40a712:	f015 0f01 	tst.w	r5, #1
  40a716:	d107      	bne.n	40a728 <memchr+0x98>
  40a718:	3001      	adds	r0, #1
  40a71a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40a71e:	bf02      	ittt	eq
  40a720:	3001      	addeq	r0, #1
  40a722:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40a726:	3001      	addeq	r0, #1
  40a728:	bcf0      	pop	{r4, r5, r6, r7}
  40a72a:	3801      	subs	r0, #1
  40a72c:	4770      	bx	lr
  40a72e:	bf00      	nop

0040a730 <_Balloc>:
  40a730:	b570      	push	{r4, r5, r6, lr}
  40a732:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40a734:	4604      	mov	r4, r0
  40a736:	460e      	mov	r6, r1
  40a738:	b93d      	cbnz	r5, 40a74a <_Balloc+0x1a>
  40a73a:	2010      	movs	r0, #16
  40a73c:	f7ff ff9c 	bl	40a678 <malloc>
  40a740:	6260      	str	r0, [r4, #36]	; 0x24
  40a742:	6045      	str	r5, [r0, #4]
  40a744:	6085      	str	r5, [r0, #8]
  40a746:	6005      	str	r5, [r0, #0]
  40a748:	60c5      	str	r5, [r0, #12]
  40a74a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40a74c:	68eb      	ldr	r3, [r5, #12]
  40a74e:	b183      	cbz	r3, 40a772 <_Balloc+0x42>
  40a750:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40a752:	68db      	ldr	r3, [r3, #12]
  40a754:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  40a758:	b9b8      	cbnz	r0, 40a78a <_Balloc+0x5a>
  40a75a:	2101      	movs	r1, #1
  40a75c:	fa01 f506 	lsl.w	r5, r1, r6
  40a760:	1d6a      	adds	r2, r5, #5
  40a762:	0092      	lsls	r2, r2, #2
  40a764:	4620      	mov	r0, r4
  40a766:	f000 fab3 	bl	40acd0 <_calloc_r>
  40a76a:	b160      	cbz	r0, 40a786 <_Balloc+0x56>
  40a76c:	6046      	str	r6, [r0, #4]
  40a76e:	6085      	str	r5, [r0, #8]
  40a770:	e00e      	b.n	40a790 <_Balloc+0x60>
  40a772:	2221      	movs	r2, #33	; 0x21
  40a774:	2104      	movs	r1, #4
  40a776:	4620      	mov	r0, r4
  40a778:	f000 faaa 	bl	40acd0 <_calloc_r>
  40a77c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40a77e:	60e8      	str	r0, [r5, #12]
  40a780:	68db      	ldr	r3, [r3, #12]
  40a782:	2b00      	cmp	r3, #0
  40a784:	d1e4      	bne.n	40a750 <_Balloc+0x20>
  40a786:	2000      	movs	r0, #0
  40a788:	bd70      	pop	{r4, r5, r6, pc}
  40a78a:	6802      	ldr	r2, [r0, #0]
  40a78c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  40a790:	2300      	movs	r3, #0
  40a792:	6103      	str	r3, [r0, #16]
  40a794:	60c3      	str	r3, [r0, #12]
  40a796:	bd70      	pop	{r4, r5, r6, pc}

0040a798 <_Bfree>:
  40a798:	b570      	push	{r4, r5, r6, lr}
  40a79a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40a79c:	4606      	mov	r6, r0
  40a79e:	460d      	mov	r5, r1
  40a7a0:	b93c      	cbnz	r4, 40a7b2 <_Bfree+0x1a>
  40a7a2:	2010      	movs	r0, #16
  40a7a4:	f7ff ff68 	bl	40a678 <malloc>
  40a7a8:	6270      	str	r0, [r6, #36]	; 0x24
  40a7aa:	6044      	str	r4, [r0, #4]
  40a7ac:	6084      	str	r4, [r0, #8]
  40a7ae:	6004      	str	r4, [r0, #0]
  40a7b0:	60c4      	str	r4, [r0, #12]
  40a7b2:	b13d      	cbz	r5, 40a7c4 <_Bfree+0x2c>
  40a7b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40a7b6:	686a      	ldr	r2, [r5, #4]
  40a7b8:	68db      	ldr	r3, [r3, #12]
  40a7ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a7be:	6029      	str	r1, [r5, #0]
  40a7c0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40a7c4:	bd70      	pop	{r4, r5, r6, pc}

0040a7c6 <__multadd>:
  40a7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a7ca:	690d      	ldr	r5, [r1, #16]
  40a7cc:	461f      	mov	r7, r3
  40a7ce:	4606      	mov	r6, r0
  40a7d0:	460c      	mov	r4, r1
  40a7d2:	f101 0e14 	add.w	lr, r1, #20
  40a7d6:	2300      	movs	r3, #0
  40a7d8:	f8de 0000 	ldr.w	r0, [lr]
  40a7dc:	b281      	uxth	r1, r0
  40a7de:	fb02 7101 	mla	r1, r2, r1, r7
  40a7e2:	0c0f      	lsrs	r7, r1, #16
  40a7e4:	0c00      	lsrs	r0, r0, #16
  40a7e6:	fb02 7000 	mla	r0, r2, r0, r7
  40a7ea:	b289      	uxth	r1, r1
  40a7ec:	3301      	adds	r3, #1
  40a7ee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  40a7f2:	429d      	cmp	r5, r3
  40a7f4:	ea4f 4710 	mov.w	r7, r0, lsr #16
  40a7f8:	f84e 1b04 	str.w	r1, [lr], #4
  40a7fc:	dcec      	bgt.n	40a7d8 <__multadd+0x12>
  40a7fe:	b1d7      	cbz	r7, 40a836 <__multadd+0x70>
  40a800:	68a3      	ldr	r3, [r4, #8]
  40a802:	429d      	cmp	r5, r3
  40a804:	db12      	blt.n	40a82c <__multadd+0x66>
  40a806:	6861      	ldr	r1, [r4, #4]
  40a808:	4630      	mov	r0, r6
  40a80a:	3101      	adds	r1, #1
  40a80c:	f7ff ff90 	bl	40a730 <_Balloc>
  40a810:	6922      	ldr	r2, [r4, #16]
  40a812:	3202      	adds	r2, #2
  40a814:	f104 010c 	add.w	r1, r4, #12
  40a818:	4680      	mov	r8, r0
  40a81a:	0092      	lsls	r2, r2, #2
  40a81c:	300c      	adds	r0, #12
  40a81e:	f7fe f995 	bl	408b4c <memcpy>
  40a822:	4621      	mov	r1, r4
  40a824:	4630      	mov	r0, r6
  40a826:	f7ff ffb7 	bl	40a798 <_Bfree>
  40a82a:	4644      	mov	r4, r8
  40a82c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  40a830:	3501      	adds	r5, #1
  40a832:	615f      	str	r7, [r3, #20]
  40a834:	6125      	str	r5, [r4, #16]
  40a836:	4620      	mov	r0, r4
  40a838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040a83c <__hi0bits>:
  40a83c:	0c02      	lsrs	r2, r0, #16
  40a83e:	0412      	lsls	r2, r2, #16
  40a840:	4603      	mov	r3, r0
  40a842:	b9b2      	cbnz	r2, 40a872 <__hi0bits+0x36>
  40a844:	0403      	lsls	r3, r0, #16
  40a846:	2010      	movs	r0, #16
  40a848:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40a84c:	bf04      	itt	eq
  40a84e:	021b      	lsleq	r3, r3, #8
  40a850:	3008      	addeq	r0, #8
  40a852:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40a856:	bf04      	itt	eq
  40a858:	011b      	lsleq	r3, r3, #4
  40a85a:	3004      	addeq	r0, #4
  40a85c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40a860:	bf04      	itt	eq
  40a862:	009b      	lsleq	r3, r3, #2
  40a864:	3002      	addeq	r0, #2
  40a866:	2b00      	cmp	r3, #0
  40a868:	db06      	blt.n	40a878 <__hi0bits+0x3c>
  40a86a:	005b      	lsls	r3, r3, #1
  40a86c:	d503      	bpl.n	40a876 <__hi0bits+0x3a>
  40a86e:	3001      	adds	r0, #1
  40a870:	4770      	bx	lr
  40a872:	2000      	movs	r0, #0
  40a874:	e7e8      	b.n	40a848 <__hi0bits+0xc>
  40a876:	2020      	movs	r0, #32
  40a878:	4770      	bx	lr

0040a87a <__lo0bits>:
  40a87a:	6803      	ldr	r3, [r0, #0]
  40a87c:	f013 0207 	ands.w	r2, r3, #7
  40a880:	4601      	mov	r1, r0
  40a882:	d00b      	beq.n	40a89c <__lo0bits+0x22>
  40a884:	07da      	lsls	r2, r3, #31
  40a886:	d423      	bmi.n	40a8d0 <__lo0bits+0x56>
  40a888:	0798      	lsls	r0, r3, #30
  40a88a:	bf49      	itett	mi
  40a88c:	085b      	lsrmi	r3, r3, #1
  40a88e:	089b      	lsrpl	r3, r3, #2
  40a890:	2001      	movmi	r0, #1
  40a892:	600b      	strmi	r3, [r1, #0]
  40a894:	bf5c      	itt	pl
  40a896:	600b      	strpl	r3, [r1, #0]
  40a898:	2002      	movpl	r0, #2
  40a89a:	4770      	bx	lr
  40a89c:	b298      	uxth	r0, r3
  40a89e:	b9a8      	cbnz	r0, 40a8cc <__lo0bits+0x52>
  40a8a0:	0c1b      	lsrs	r3, r3, #16
  40a8a2:	2010      	movs	r0, #16
  40a8a4:	f013 0fff 	tst.w	r3, #255	; 0xff
  40a8a8:	bf04      	itt	eq
  40a8aa:	0a1b      	lsreq	r3, r3, #8
  40a8ac:	3008      	addeq	r0, #8
  40a8ae:	071a      	lsls	r2, r3, #28
  40a8b0:	bf04      	itt	eq
  40a8b2:	091b      	lsreq	r3, r3, #4
  40a8b4:	3004      	addeq	r0, #4
  40a8b6:	079a      	lsls	r2, r3, #30
  40a8b8:	bf04      	itt	eq
  40a8ba:	089b      	lsreq	r3, r3, #2
  40a8bc:	3002      	addeq	r0, #2
  40a8be:	07da      	lsls	r2, r3, #31
  40a8c0:	d402      	bmi.n	40a8c8 <__lo0bits+0x4e>
  40a8c2:	085b      	lsrs	r3, r3, #1
  40a8c4:	d006      	beq.n	40a8d4 <__lo0bits+0x5a>
  40a8c6:	3001      	adds	r0, #1
  40a8c8:	600b      	str	r3, [r1, #0]
  40a8ca:	4770      	bx	lr
  40a8cc:	4610      	mov	r0, r2
  40a8ce:	e7e9      	b.n	40a8a4 <__lo0bits+0x2a>
  40a8d0:	2000      	movs	r0, #0
  40a8d2:	4770      	bx	lr
  40a8d4:	2020      	movs	r0, #32
  40a8d6:	4770      	bx	lr

0040a8d8 <__i2b>:
  40a8d8:	b510      	push	{r4, lr}
  40a8da:	460c      	mov	r4, r1
  40a8dc:	2101      	movs	r1, #1
  40a8de:	f7ff ff27 	bl	40a730 <_Balloc>
  40a8e2:	2201      	movs	r2, #1
  40a8e4:	6144      	str	r4, [r0, #20]
  40a8e6:	6102      	str	r2, [r0, #16]
  40a8e8:	bd10      	pop	{r4, pc}

0040a8ea <__multiply>:
  40a8ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a8ee:	4614      	mov	r4, r2
  40a8f0:	690a      	ldr	r2, [r1, #16]
  40a8f2:	6923      	ldr	r3, [r4, #16]
  40a8f4:	429a      	cmp	r2, r3
  40a8f6:	bfb8      	it	lt
  40a8f8:	460b      	movlt	r3, r1
  40a8fa:	4689      	mov	r9, r1
  40a8fc:	bfbc      	itt	lt
  40a8fe:	46a1      	movlt	r9, r4
  40a900:	461c      	movlt	r4, r3
  40a902:	f8d9 7010 	ldr.w	r7, [r9, #16]
  40a906:	f8d4 a010 	ldr.w	sl, [r4, #16]
  40a90a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40a90e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40a912:	eb07 060a 	add.w	r6, r7, sl
  40a916:	429e      	cmp	r6, r3
  40a918:	bfc8      	it	gt
  40a91a:	3101      	addgt	r1, #1
  40a91c:	f7ff ff08 	bl	40a730 <_Balloc>
  40a920:	f100 0514 	add.w	r5, r0, #20
  40a924:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  40a928:	462b      	mov	r3, r5
  40a92a:	2200      	movs	r2, #0
  40a92c:	4543      	cmp	r3, r8
  40a92e:	d316      	bcc.n	40a95e <__multiply+0x74>
  40a930:	f104 0214 	add.w	r2, r4, #20
  40a934:	f109 0114 	add.w	r1, r9, #20
  40a938:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40a93c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  40a940:	9301      	str	r3, [sp, #4]
  40a942:	9c01      	ldr	r4, [sp, #4]
  40a944:	4294      	cmp	r4, r2
  40a946:	4613      	mov	r3, r2
  40a948:	d80c      	bhi.n	40a964 <__multiply+0x7a>
  40a94a:	2e00      	cmp	r6, #0
  40a94c:	dd03      	ble.n	40a956 <__multiply+0x6c>
  40a94e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  40a952:	2b00      	cmp	r3, #0
  40a954:	d054      	beq.n	40aa00 <__multiply+0x116>
  40a956:	6106      	str	r6, [r0, #16]
  40a958:	b003      	add	sp, #12
  40a95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a95e:	f843 2b04 	str.w	r2, [r3], #4
  40a962:	e7e3      	b.n	40a92c <__multiply+0x42>
  40a964:	f8b3 a000 	ldrh.w	sl, [r3]
  40a968:	3204      	adds	r2, #4
  40a96a:	f1ba 0f00 	cmp.w	sl, #0
  40a96e:	d020      	beq.n	40a9b2 <__multiply+0xc8>
  40a970:	46ae      	mov	lr, r5
  40a972:	4689      	mov	r9, r1
  40a974:	f04f 0c00 	mov.w	ip, #0
  40a978:	f859 4b04 	ldr.w	r4, [r9], #4
  40a97c:	f8be b000 	ldrh.w	fp, [lr]
  40a980:	b2a3      	uxth	r3, r4
  40a982:	fb0a b303 	mla	r3, sl, r3, fp
  40a986:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40a98a:	f8de 4000 	ldr.w	r4, [lr]
  40a98e:	4463      	add	r3, ip
  40a990:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  40a994:	fb0a c40b 	mla	r4, sl, fp, ip
  40a998:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40a99c:	b29b      	uxth	r3, r3
  40a99e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40a9a2:	454f      	cmp	r7, r9
  40a9a4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  40a9a8:	f84e 3b04 	str.w	r3, [lr], #4
  40a9ac:	d8e4      	bhi.n	40a978 <__multiply+0x8e>
  40a9ae:	f8ce c000 	str.w	ip, [lr]
  40a9b2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  40a9b6:	f1b9 0f00 	cmp.w	r9, #0
  40a9ba:	d01f      	beq.n	40a9fc <__multiply+0x112>
  40a9bc:	682b      	ldr	r3, [r5, #0]
  40a9be:	46ae      	mov	lr, r5
  40a9c0:	468c      	mov	ip, r1
  40a9c2:	f04f 0a00 	mov.w	sl, #0
  40a9c6:	f8bc 4000 	ldrh.w	r4, [ip]
  40a9ca:	f8be b002 	ldrh.w	fp, [lr, #2]
  40a9ce:	fb09 b404 	mla	r4, r9, r4, fp
  40a9d2:	44a2      	add	sl, r4
  40a9d4:	b29b      	uxth	r3, r3
  40a9d6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40a9da:	f84e 3b04 	str.w	r3, [lr], #4
  40a9de:	f85c 3b04 	ldr.w	r3, [ip], #4
  40a9e2:	f8be 4000 	ldrh.w	r4, [lr]
  40a9e6:	0c1b      	lsrs	r3, r3, #16
  40a9e8:	fb09 4303 	mla	r3, r9, r3, r4
  40a9ec:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  40a9f0:	4567      	cmp	r7, ip
  40a9f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  40a9f6:	d8e6      	bhi.n	40a9c6 <__multiply+0xdc>
  40a9f8:	f8ce 3000 	str.w	r3, [lr]
  40a9fc:	3504      	adds	r5, #4
  40a9fe:	e7a0      	b.n	40a942 <__multiply+0x58>
  40aa00:	3e01      	subs	r6, #1
  40aa02:	e7a2      	b.n	40a94a <__multiply+0x60>

0040aa04 <__pow5mult>:
  40aa04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40aa08:	4615      	mov	r5, r2
  40aa0a:	f012 0203 	ands.w	r2, r2, #3
  40aa0e:	4606      	mov	r6, r0
  40aa10:	460f      	mov	r7, r1
  40aa12:	d007      	beq.n	40aa24 <__pow5mult+0x20>
  40aa14:	3a01      	subs	r2, #1
  40aa16:	4c21      	ldr	r4, [pc, #132]	; (40aa9c <__pow5mult+0x98>)
  40aa18:	2300      	movs	r3, #0
  40aa1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40aa1e:	f7ff fed2 	bl	40a7c6 <__multadd>
  40aa22:	4607      	mov	r7, r0
  40aa24:	10ad      	asrs	r5, r5, #2
  40aa26:	d035      	beq.n	40aa94 <__pow5mult+0x90>
  40aa28:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40aa2a:	b93c      	cbnz	r4, 40aa3c <__pow5mult+0x38>
  40aa2c:	2010      	movs	r0, #16
  40aa2e:	f7ff fe23 	bl	40a678 <malloc>
  40aa32:	6270      	str	r0, [r6, #36]	; 0x24
  40aa34:	6044      	str	r4, [r0, #4]
  40aa36:	6084      	str	r4, [r0, #8]
  40aa38:	6004      	str	r4, [r0, #0]
  40aa3a:	60c4      	str	r4, [r0, #12]
  40aa3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  40aa40:	f8d8 4008 	ldr.w	r4, [r8, #8]
  40aa44:	b94c      	cbnz	r4, 40aa5a <__pow5mult+0x56>
  40aa46:	f240 2171 	movw	r1, #625	; 0x271
  40aa4a:	4630      	mov	r0, r6
  40aa4c:	f7ff ff44 	bl	40a8d8 <__i2b>
  40aa50:	2300      	movs	r3, #0
  40aa52:	f8c8 0008 	str.w	r0, [r8, #8]
  40aa56:	4604      	mov	r4, r0
  40aa58:	6003      	str	r3, [r0, #0]
  40aa5a:	f04f 0800 	mov.w	r8, #0
  40aa5e:	07eb      	lsls	r3, r5, #31
  40aa60:	d50a      	bpl.n	40aa78 <__pow5mult+0x74>
  40aa62:	4639      	mov	r1, r7
  40aa64:	4622      	mov	r2, r4
  40aa66:	4630      	mov	r0, r6
  40aa68:	f7ff ff3f 	bl	40a8ea <__multiply>
  40aa6c:	4639      	mov	r1, r7
  40aa6e:	4681      	mov	r9, r0
  40aa70:	4630      	mov	r0, r6
  40aa72:	f7ff fe91 	bl	40a798 <_Bfree>
  40aa76:	464f      	mov	r7, r9
  40aa78:	106d      	asrs	r5, r5, #1
  40aa7a:	d00b      	beq.n	40aa94 <__pow5mult+0x90>
  40aa7c:	6820      	ldr	r0, [r4, #0]
  40aa7e:	b938      	cbnz	r0, 40aa90 <__pow5mult+0x8c>
  40aa80:	4622      	mov	r2, r4
  40aa82:	4621      	mov	r1, r4
  40aa84:	4630      	mov	r0, r6
  40aa86:	f7ff ff30 	bl	40a8ea <__multiply>
  40aa8a:	6020      	str	r0, [r4, #0]
  40aa8c:	f8c0 8000 	str.w	r8, [r0]
  40aa90:	4604      	mov	r4, r0
  40aa92:	e7e4      	b.n	40aa5e <__pow5mult+0x5a>
  40aa94:	4638      	mov	r0, r7
  40aa96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40aa9a:	bf00      	nop
  40aa9c:	0040ce48 	.word	0x0040ce48

0040aaa0 <__lshift>:
  40aaa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aaa4:	460c      	mov	r4, r1
  40aaa6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40aaaa:	6923      	ldr	r3, [r4, #16]
  40aaac:	6849      	ldr	r1, [r1, #4]
  40aaae:	eb0a 0903 	add.w	r9, sl, r3
  40aab2:	68a3      	ldr	r3, [r4, #8]
  40aab4:	4607      	mov	r7, r0
  40aab6:	4616      	mov	r6, r2
  40aab8:	f109 0501 	add.w	r5, r9, #1
  40aabc:	42ab      	cmp	r3, r5
  40aabe:	db31      	blt.n	40ab24 <__lshift+0x84>
  40aac0:	4638      	mov	r0, r7
  40aac2:	f7ff fe35 	bl	40a730 <_Balloc>
  40aac6:	2200      	movs	r2, #0
  40aac8:	4680      	mov	r8, r0
  40aaca:	f100 0314 	add.w	r3, r0, #20
  40aace:	4611      	mov	r1, r2
  40aad0:	4552      	cmp	r2, sl
  40aad2:	db2a      	blt.n	40ab2a <__lshift+0x8a>
  40aad4:	6920      	ldr	r0, [r4, #16]
  40aad6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40aada:	f104 0114 	add.w	r1, r4, #20
  40aade:	f016 021f 	ands.w	r2, r6, #31
  40aae2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  40aae6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40aaea:	d022      	beq.n	40ab32 <__lshift+0x92>
  40aaec:	f1c2 0c20 	rsb	ip, r2, #32
  40aaf0:	2000      	movs	r0, #0
  40aaf2:	680e      	ldr	r6, [r1, #0]
  40aaf4:	4096      	lsls	r6, r2
  40aaf6:	4330      	orrs	r0, r6
  40aaf8:	f843 0b04 	str.w	r0, [r3], #4
  40aafc:	f851 0b04 	ldr.w	r0, [r1], #4
  40ab00:	458e      	cmp	lr, r1
  40ab02:	fa20 f00c 	lsr.w	r0, r0, ip
  40ab06:	d8f4      	bhi.n	40aaf2 <__lshift+0x52>
  40ab08:	6018      	str	r0, [r3, #0]
  40ab0a:	b108      	cbz	r0, 40ab10 <__lshift+0x70>
  40ab0c:	f109 0502 	add.w	r5, r9, #2
  40ab10:	3d01      	subs	r5, #1
  40ab12:	4638      	mov	r0, r7
  40ab14:	f8c8 5010 	str.w	r5, [r8, #16]
  40ab18:	4621      	mov	r1, r4
  40ab1a:	f7ff fe3d 	bl	40a798 <_Bfree>
  40ab1e:	4640      	mov	r0, r8
  40ab20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab24:	3101      	adds	r1, #1
  40ab26:	005b      	lsls	r3, r3, #1
  40ab28:	e7c8      	b.n	40aabc <__lshift+0x1c>
  40ab2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40ab2e:	3201      	adds	r2, #1
  40ab30:	e7ce      	b.n	40aad0 <__lshift+0x30>
  40ab32:	3b04      	subs	r3, #4
  40ab34:	f851 2b04 	ldr.w	r2, [r1], #4
  40ab38:	f843 2f04 	str.w	r2, [r3, #4]!
  40ab3c:	458e      	cmp	lr, r1
  40ab3e:	d8f9      	bhi.n	40ab34 <__lshift+0x94>
  40ab40:	e7e6      	b.n	40ab10 <__lshift+0x70>

0040ab42 <__mcmp>:
  40ab42:	6903      	ldr	r3, [r0, #16]
  40ab44:	690a      	ldr	r2, [r1, #16]
  40ab46:	1a9b      	subs	r3, r3, r2
  40ab48:	b530      	push	{r4, r5, lr}
  40ab4a:	d10c      	bne.n	40ab66 <__mcmp+0x24>
  40ab4c:	0092      	lsls	r2, r2, #2
  40ab4e:	3014      	adds	r0, #20
  40ab50:	3114      	adds	r1, #20
  40ab52:	1884      	adds	r4, r0, r2
  40ab54:	4411      	add	r1, r2
  40ab56:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40ab5a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40ab5e:	4295      	cmp	r5, r2
  40ab60:	d003      	beq.n	40ab6a <__mcmp+0x28>
  40ab62:	d305      	bcc.n	40ab70 <__mcmp+0x2e>
  40ab64:	2301      	movs	r3, #1
  40ab66:	4618      	mov	r0, r3
  40ab68:	bd30      	pop	{r4, r5, pc}
  40ab6a:	42a0      	cmp	r0, r4
  40ab6c:	d3f3      	bcc.n	40ab56 <__mcmp+0x14>
  40ab6e:	e7fa      	b.n	40ab66 <__mcmp+0x24>
  40ab70:	f04f 33ff 	mov.w	r3, #4294967295
  40ab74:	e7f7      	b.n	40ab66 <__mcmp+0x24>

0040ab76 <__mdiff>:
  40ab76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ab7a:	460d      	mov	r5, r1
  40ab7c:	4607      	mov	r7, r0
  40ab7e:	4611      	mov	r1, r2
  40ab80:	4628      	mov	r0, r5
  40ab82:	4614      	mov	r4, r2
  40ab84:	f7ff ffdd 	bl	40ab42 <__mcmp>
  40ab88:	1e06      	subs	r6, r0, #0
  40ab8a:	d108      	bne.n	40ab9e <__mdiff+0x28>
  40ab8c:	4631      	mov	r1, r6
  40ab8e:	4638      	mov	r0, r7
  40ab90:	f7ff fdce 	bl	40a730 <_Balloc>
  40ab94:	2301      	movs	r3, #1
  40ab96:	6103      	str	r3, [r0, #16]
  40ab98:	6146      	str	r6, [r0, #20]
  40ab9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab9e:	bfa4      	itt	ge
  40aba0:	4623      	movge	r3, r4
  40aba2:	462c      	movge	r4, r5
  40aba4:	4638      	mov	r0, r7
  40aba6:	6861      	ldr	r1, [r4, #4]
  40aba8:	bfa6      	itte	ge
  40abaa:	461d      	movge	r5, r3
  40abac:	2600      	movge	r6, #0
  40abae:	2601      	movlt	r6, #1
  40abb0:	f7ff fdbe 	bl	40a730 <_Balloc>
  40abb4:	692b      	ldr	r3, [r5, #16]
  40abb6:	60c6      	str	r6, [r0, #12]
  40abb8:	6926      	ldr	r6, [r4, #16]
  40abba:	f105 0914 	add.w	r9, r5, #20
  40abbe:	f104 0214 	add.w	r2, r4, #20
  40abc2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  40abc6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40abca:	f100 0514 	add.w	r5, r0, #20
  40abce:	f04f 0c00 	mov.w	ip, #0
  40abd2:	f852 ab04 	ldr.w	sl, [r2], #4
  40abd6:	f859 4b04 	ldr.w	r4, [r9], #4
  40abda:	fa1c f18a 	uxtah	r1, ip, sl
  40abde:	b2a3      	uxth	r3, r4
  40abe0:	1ac9      	subs	r1, r1, r3
  40abe2:	0c23      	lsrs	r3, r4, #16
  40abe4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  40abe8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40abec:	b289      	uxth	r1, r1
  40abee:	ea4f 4c23 	mov.w	ip, r3, asr #16
  40abf2:	45c8      	cmp	r8, r9
  40abf4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40abf8:	4696      	mov	lr, r2
  40abfa:	f845 3b04 	str.w	r3, [r5], #4
  40abfe:	d8e8      	bhi.n	40abd2 <__mdiff+0x5c>
  40ac00:	45be      	cmp	lr, r7
  40ac02:	d305      	bcc.n	40ac10 <__mdiff+0x9a>
  40ac04:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40ac08:	b18b      	cbz	r3, 40ac2e <__mdiff+0xb8>
  40ac0a:	6106      	str	r6, [r0, #16]
  40ac0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ac10:	f85e 1b04 	ldr.w	r1, [lr], #4
  40ac14:	fa1c f381 	uxtah	r3, ip, r1
  40ac18:	141a      	asrs	r2, r3, #16
  40ac1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40ac1e:	b29b      	uxth	r3, r3
  40ac20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40ac24:	ea4f 4c22 	mov.w	ip, r2, asr #16
  40ac28:	f845 3b04 	str.w	r3, [r5], #4
  40ac2c:	e7e8      	b.n	40ac00 <__mdiff+0x8a>
  40ac2e:	3e01      	subs	r6, #1
  40ac30:	e7e8      	b.n	40ac04 <__mdiff+0x8e>

0040ac32 <__d2b>:
  40ac32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  40ac36:	2101      	movs	r1, #1
  40ac38:	461c      	mov	r4, r3
  40ac3a:	4690      	mov	r8, r2
  40ac3c:	9e08      	ldr	r6, [sp, #32]
  40ac3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ac40:	f7ff fd76 	bl	40a730 <_Balloc>
  40ac44:	f3c4 0213 	ubfx	r2, r4, #0, #20
  40ac48:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40ac4c:	4607      	mov	r7, r0
  40ac4e:	bb34      	cbnz	r4, 40ac9e <__d2b+0x6c>
  40ac50:	9201      	str	r2, [sp, #4]
  40ac52:	f1b8 0f00 	cmp.w	r8, #0
  40ac56:	d027      	beq.n	40aca8 <__d2b+0x76>
  40ac58:	a802      	add	r0, sp, #8
  40ac5a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40ac5e:	f7ff fe0c 	bl	40a87a <__lo0bits>
  40ac62:	9900      	ldr	r1, [sp, #0]
  40ac64:	b1f0      	cbz	r0, 40aca4 <__d2b+0x72>
  40ac66:	9a01      	ldr	r2, [sp, #4]
  40ac68:	f1c0 0320 	rsb	r3, r0, #32
  40ac6c:	fa02 f303 	lsl.w	r3, r2, r3
  40ac70:	430b      	orrs	r3, r1
  40ac72:	40c2      	lsrs	r2, r0
  40ac74:	617b      	str	r3, [r7, #20]
  40ac76:	9201      	str	r2, [sp, #4]
  40ac78:	9b01      	ldr	r3, [sp, #4]
  40ac7a:	61bb      	str	r3, [r7, #24]
  40ac7c:	2b00      	cmp	r3, #0
  40ac7e:	bf14      	ite	ne
  40ac80:	2102      	movne	r1, #2
  40ac82:	2101      	moveq	r1, #1
  40ac84:	6139      	str	r1, [r7, #16]
  40ac86:	b1c4      	cbz	r4, 40acba <__d2b+0x88>
  40ac88:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40ac8c:	4404      	add	r4, r0
  40ac8e:	6034      	str	r4, [r6, #0]
  40ac90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40ac94:	6028      	str	r0, [r5, #0]
  40ac96:	4638      	mov	r0, r7
  40ac98:	b002      	add	sp, #8
  40ac9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ac9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40aca2:	e7d5      	b.n	40ac50 <__d2b+0x1e>
  40aca4:	6179      	str	r1, [r7, #20]
  40aca6:	e7e7      	b.n	40ac78 <__d2b+0x46>
  40aca8:	a801      	add	r0, sp, #4
  40acaa:	f7ff fde6 	bl	40a87a <__lo0bits>
  40acae:	9b01      	ldr	r3, [sp, #4]
  40acb0:	617b      	str	r3, [r7, #20]
  40acb2:	2101      	movs	r1, #1
  40acb4:	6139      	str	r1, [r7, #16]
  40acb6:	3020      	adds	r0, #32
  40acb8:	e7e5      	b.n	40ac86 <__d2b+0x54>
  40acba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40acbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40acc2:	6030      	str	r0, [r6, #0]
  40acc4:	6918      	ldr	r0, [r3, #16]
  40acc6:	f7ff fdb9 	bl	40a83c <__hi0bits>
  40acca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40acce:	e7e1      	b.n	40ac94 <__d2b+0x62>

0040acd0 <_calloc_r>:
  40acd0:	b538      	push	{r3, r4, r5, lr}
  40acd2:	fb02 f401 	mul.w	r4, r2, r1
  40acd6:	4621      	mov	r1, r4
  40acd8:	f000 f856 	bl	40ad88 <_malloc_r>
  40acdc:	4605      	mov	r5, r0
  40acde:	b118      	cbz	r0, 40ace8 <_calloc_r+0x18>
  40ace0:	4622      	mov	r2, r4
  40ace2:	2100      	movs	r1, #0
  40ace4:	f7fd ff3d 	bl	408b62 <memset>
  40ace8:	4628      	mov	r0, r5
  40acea:	bd38      	pop	{r3, r4, r5, pc}

0040acec <_free_r>:
  40acec:	b538      	push	{r3, r4, r5, lr}
  40acee:	4605      	mov	r5, r0
  40acf0:	2900      	cmp	r1, #0
  40acf2:	d045      	beq.n	40ad80 <_free_r+0x94>
  40acf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40acf8:	1f0c      	subs	r4, r1, #4
  40acfa:	2b00      	cmp	r3, #0
  40acfc:	bfb8      	it	lt
  40acfe:	18e4      	addlt	r4, r4, r3
  40ad00:	f000 fb5a 	bl	40b3b8 <__malloc_lock>
  40ad04:	4a1f      	ldr	r2, [pc, #124]	; (40ad84 <_free_r+0x98>)
  40ad06:	6813      	ldr	r3, [r2, #0]
  40ad08:	4610      	mov	r0, r2
  40ad0a:	b933      	cbnz	r3, 40ad1a <_free_r+0x2e>
  40ad0c:	6063      	str	r3, [r4, #4]
  40ad0e:	6014      	str	r4, [r2, #0]
  40ad10:	4628      	mov	r0, r5
  40ad12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40ad16:	f000 bb50 	b.w	40b3ba <__malloc_unlock>
  40ad1a:	42a3      	cmp	r3, r4
  40ad1c:	d90c      	bls.n	40ad38 <_free_r+0x4c>
  40ad1e:	6821      	ldr	r1, [r4, #0]
  40ad20:	1862      	adds	r2, r4, r1
  40ad22:	4293      	cmp	r3, r2
  40ad24:	bf04      	itt	eq
  40ad26:	681a      	ldreq	r2, [r3, #0]
  40ad28:	685b      	ldreq	r3, [r3, #4]
  40ad2a:	6063      	str	r3, [r4, #4]
  40ad2c:	bf04      	itt	eq
  40ad2e:	1852      	addeq	r2, r2, r1
  40ad30:	6022      	streq	r2, [r4, #0]
  40ad32:	6004      	str	r4, [r0, #0]
  40ad34:	e7ec      	b.n	40ad10 <_free_r+0x24>
  40ad36:	4613      	mov	r3, r2
  40ad38:	685a      	ldr	r2, [r3, #4]
  40ad3a:	b10a      	cbz	r2, 40ad40 <_free_r+0x54>
  40ad3c:	42a2      	cmp	r2, r4
  40ad3e:	d9fa      	bls.n	40ad36 <_free_r+0x4a>
  40ad40:	6819      	ldr	r1, [r3, #0]
  40ad42:	1858      	adds	r0, r3, r1
  40ad44:	42a0      	cmp	r0, r4
  40ad46:	d10b      	bne.n	40ad60 <_free_r+0x74>
  40ad48:	6820      	ldr	r0, [r4, #0]
  40ad4a:	4401      	add	r1, r0
  40ad4c:	1858      	adds	r0, r3, r1
  40ad4e:	4282      	cmp	r2, r0
  40ad50:	6019      	str	r1, [r3, #0]
  40ad52:	d1dd      	bne.n	40ad10 <_free_r+0x24>
  40ad54:	6810      	ldr	r0, [r2, #0]
  40ad56:	6852      	ldr	r2, [r2, #4]
  40ad58:	605a      	str	r2, [r3, #4]
  40ad5a:	4401      	add	r1, r0
  40ad5c:	6019      	str	r1, [r3, #0]
  40ad5e:	e7d7      	b.n	40ad10 <_free_r+0x24>
  40ad60:	d902      	bls.n	40ad68 <_free_r+0x7c>
  40ad62:	230c      	movs	r3, #12
  40ad64:	602b      	str	r3, [r5, #0]
  40ad66:	e7d3      	b.n	40ad10 <_free_r+0x24>
  40ad68:	6820      	ldr	r0, [r4, #0]
  40ad6a:	1821      	adds	r1, r4, r0
  40ad6c:	428a      	cmp	r2, r1
  40ad6e:	bf04      	itt	eq
  40ad70:	6811      	ldreq	r1, [r2, #0]
  40ad72:	6852      	ldreq	r2, [r2, #4]
  40ad74:	6062      	str	r2, [r4, #4]
  40ad76:	bf04      	itt	eq
  40ad78:	1809      	addeq	r1, r1, r0
  40ad7a:	6021      	streq	r1, [r4, #0]
  40ad7c:	605c      	str	r4, [r3, #4]
  40ad7e:	e7c7      	b.n	40ad10 <_free_r+0x24>
  40ad80:	bd38      	pop	{r3, r4, r5, pc}
  40ad82:	bf00      	nop
  40ad84:	20000434 	.word	0x20000434

0040ad88 <_malloc_r>:
  40ad88:	b570      	push	{r4, r5, r6, lr}
  40ad8a:	1ccd      	adds	r5, r1, #3
  40ad8c:	f025 0503 	bic.w	r5, r5, #3
  40ad90:	3508      	adds	r5, #8
  40ad92:	2d0c      	cmp	r5, #12
  40ad94:	bf38      	it	cc
  40ad96:	250c      	movcc	r5, #12
  40ad98:	2d00      	cmp	r5, #0
  40ad9a:	4606      	mov	r6, r0
  40ad9c:	db01      	blt.n	40ada2 <_malloc_r+0x1a>
  40ad9e:	42a9      	cmp	r1, r5
  40ada0:	d903      	bls.n	40adaa <_malloc_r+0x22>
  40ada2:	230c      	movs	r3, #12
  40ada4:	6033      	str	r3, [r6, #0]
  40ada6:	2000      	movs	r0, #0
  40ada8:	bd70      	pop	{r4, r5, r6, pc}
  40adaa:	f000 fb05 	bl	40b3b8 <__malloc_lock>
  40adae:	4a23      	ldr	r2, [pc, #140]	; (40ae3c <_malloc_r+0xb4>)
  40adb0:	6814      	ldr	r4, [r2, #0]
  40adb2:	4621      	mov	r1, r4
  40adb4:	b991      	cbnz	r1, 40addc <_malloc_r+0x54>
  40adb6:	4c22      	ldr	r4, [pc, #136]	; (40ae40 <_malloc_r+0xb8>)
  40adb8:	6823      	ldr	r3, [r4, #0]
  40adba:	b91b      	cbnz	r3, 40adc4 <_malloc_r+0x3c>
  40adbc:	4630      	mov	r0, r6
  40adbe:	f000 f97f 	bl	40b0c0 <_sbrk_r>
  40adc2:	6020      	str	r0, [r4, #0]
  40adc4:	4629      	mov	r1, r5
  40adc6:	4630      	mov	r0, r6
  40adc8:	f000 f97a 	bl	40b0c0 <_sbrk_r>
  40adcc:	1c43      	adds	r3, r0, #1
  40adce:	d126      	bne.n	40ae1e <_malloc_r+0x96>
  40add0:	230c      	movs	r3, #12
  40add2:	6033      	str	r3, [r6, #0]
  40add4:	4630      	mov	r0, r6
  40add6:	f000 faf0 	bl	40b3ba <__malloc_unlock>
  40adda:	e7e4      	b.n	40ada6 <_malloc_r+0x1e>
  40addc:	680b      	ldr	r3, [r1, #0]
  40adde:	1b5b      	subs	r3, r3, r5
  40ade0:	d41a      	bmi.n	40ae18 <_malloc_r+0x90>
  40ade2:	2b0b      	cmp	r3, #11
  40ade4:	d90f      	bls.n	40ae06 <_malloc_r+0x7e>
  40ade6:	600b      	str	r3, [r1, #0]
  40ade8:	50cd      	str	r5, [r1, r3]
  40adea:	18cc      	adds	r4, r1, r3
  40adec:	4630      	mov	r0, r6
  40adee:	f000 fae4 	bl	40b3ba <__malloc_unlock>
  40adf2:	f104 000b 	add.w	r0, r4, #11
  40adf6:	1d23      	adds	r3, r4, #4
  40adf8:	f020 0007 	bic.w	r0, r0, #7
  40adfc:	1ac3      	subs	r3, r0, r3
  40adfe:	d01b      	beq.n	40ae38 <_malloc_r+0xb0>
  40ae00:	425a      	negs	r2, r3
  40ae02:	50e2      	str	r2, [r4, r3]
  40ae04:	bd70      	pop	{r4, r5, r6, pc}
  40ae06:	428c      	cmp	r4, r1
  40ae08:	bf0d      	iteet	eq
  40ae0a:	6863      	ldreq	r3, [r4, #4]
  40ae0c:	684b      	ldrne	r3, [r1, #4]
  40ae0e:	6063      	strne	r3, [r4, #4]
  40ae10:	6013      	streq	r3, [r2, #0]
  40ae12:	bf18      	it	ne
  40ae14:	460c      	movne	r4, r1
  40ae16:	e7e9      	b.n	40adec <_malloc_r+0x64>
  40ae18:	460c      	mov	r4, r1
  40ae1a:	6849      	ldr	r1, [r1, #4]
  40ae1c:	e7ca      	b.n	40adb4 <_malloc_r+0x2c>
  40ae1e:	1cc4      	adds	r4, r0, #3
  40ae20:	f024 0403 	bic.w	r4, r4, #3
  40ae24:	42a0      	cmp	r0, r4
  40ae26:	d005      	beq.n	40ae34 <_malloc_r+0xac>
  40ae28:	1a21      	subs	r1, r4, r0
  40ae2a:	4630      	mov	r0, r6
  40ae2c:	f000 f948 	bl	40b0c0 <_sbrk_r>
  40ae30:	3001      	adds	r0, #1
  40ae32:	d0cd      	beq.n	40add0 <_malloc_r+0x48>
  40ae34:	6025      	str	r5, [r4, #0]
  40ae36:	e7d9      	b.n	40adec <_malloc_r+0x64>
  40ae38:	bd70      	pop	{r4, r5, r6, pc}
  40ae3a:	bf00      	nop
  40ae3c:	20000434 	.word	0x20000434
  40ae40:	20000438 	.word	0x20000438

0040ae44 <__sfputc_r>:
  40ae44:	6893      	ldr	r3, [r2, #8]
  40ae46:	3b01      	subs	r3, #1
  40ae48:	2b00      	cmp	r3, #0
  40ae4a:	b410      	push	{r4}
  40ae4c:	6093      	str	r3, [r2, #8]
  40ae4e:	da08      	bge.n	40ae62 <__sfputc_r+0x1e>
  40ae50:	6994      	ldr	r4, [r2, #24]
  40ae52:	42a3      	cmp	r3, r4
  40ae54:	db02      	blt.n	40ae5c <__sfputc_r+0x18>
  40ae56:	b2cb      	uxtb	r3, r1
  40ae58:	2b0a      	cmp	r3, #10
  40ae5a:	d102      	bne.n	40ae62 <__sfputc_r+0x1e>
  40ae5c:	bc10      	pop	{r4}
  40ae5e:	f000 b983 	b.w	40b168 <__swbuf_r>
  40ae62:	6813      	ldr	r3, [r2, #0]
  40ae64:	1c58      	adds	r0, r3, #1
  40ae66:	6010      	str	r0, [r2, #0]
  40ae68:	7019      	strb	r1, [r3, #0]
  40ae6a:	b2c8      	uxtb	r0, r1
  40ae6c:	bc10      	pop	{r4}
  40ae6e:	4770      	bx	lr

0040ae70 <__sfputs_r>:
  40ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ae72:	4606      	mov	r6, r0
  40ae74:	460f      	mov	r7, r1
  40ae76:	4614      	mov	r4, r2
  40ae78:	18d5      	adds	r5, r2, r3
  40ae7a:	42ac      	cmp	r4, r5
  40ae7c:	d101      	bne.n	40ae82 <__sfputs_r+0x12>
  40ae7e:	2000      	movs	r0, #0
  40ae80:	e007      	b.n	40ae92 <__sfputs_r+0x22>
  40ae82:	463a      	mov	r2, r7
  40ae84:	f814 1b01 	ldrb.w	r1, [r4], #1
  40ae88:	4630      	mov	r0, r6
  40ae8a:	f7ff ffdb 	bl	40ae44 <__sfputc_r>
  40ae8e:	1c43      	adds	r3, r0, #1
  40ae90:	d1f3      	bne.n	40ae7a <__sfputs_r+0xa>
  40ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040ae94 <_vfiprintf_r>:
  40ae94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ae98:	b09d      	sub	sp, #116	; 0x74
  40ae9a:	460c      	mov	r4, r1
  40ae9c:	4617      	mov	r7, r2
  40ae9e:	9303      	str	r3, [sp, #12]
  40aea0:	4606      	mov	r6, r0
  40aea2:	b118      	cbz	r0, 40aeac <_vfiprintf_r+0x18>
  40aea4:	6983      	ldr	r3, [r0, #24]
  40aea6:	b90b      	cbnz	r3, 40aeac <_vfiprintf_r+0x18>
  40aea8:	f7ff faea 	bl	40a480 <__sinit>
  40aeac:	4b7c      	ldr	r3, [pc, #496]	; (40b0a0 <_vfiprintf_r+0x20c>)
  40aeae:	429c      	cmp	r4, r3
  40aeb0:	d157      	bne.n	40af62 <_vfiprintf_r+0xce>
  40aeb2:	6874      	ldr	r4, [r6, #4]
  40aeb4:	89a3      	ldrh	r3, [r4, #12]
  40aeb6:	0718      	lsls	r0, r3, #28
  40aeb8:	d55d      	bpl.n	40af76 <_vfiprintf_r+0xe2>
  40aeba:	6923      	ldr	r3, [r4, #16]
  40aebc:	2b00      	cmp	r3, #0
  40aebe:	d05a      	beq.n	40af76 <_vfiprintf_r+0xe2>
  40aec0:	2300      	movs	r3, #0
  40aec2:	9309      	str	r3, [sp, #36]	; 0x24
  40aec4:	2320      	movs	r3, #32
  40aec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40aeca:	2330      	movs	r3, #48	; 0x30
  40aecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  40aed0:	f04f 0b01 	mov.w	fp, #1
  40aed4:	46b8      	mov	r8, r7
  40aed6:	4645      	mov	r5, r8
  40aed8:	f815 3b01 	ldrb.w	r3, [r5], #1
  40aedc:	2b00      	cmp	r3, #0
  40aede:	d155      	bne.n	40af8c <_vfiprintf_r+0xf8>
  40aee0:	ebb8 0a07 	subs.w	sl, r8, r7
  40aee4:	d00b      	beq.n	40aefe <_vfiprintf_r+0x6a>
  40aee6:	4653      	mov	r3, sl
  40aee8:	463a      	mov	r2, r7
  40aeea:	4621      	mov	r1, r4
  40aeec:	4630      	mov	r0, r6
  40aeee:	f7ff ffbf 	bl	40ae70 <__sfputs_r>
  40aef2:	3001      	adds	r0, #1
  40aef4:	f000 80c4 	beq.w	40b080 <_vfiprintf_r+0x1ec>
  40aef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aefa:	4453      	add	r3, sl
  40aefc:	9309      	str	r3, [sp, #36]	; 0x24
  40aefe:	f898 3000 	ldrb.w	r3, [r8]
  40af02:	2b00      	cmp	r3, #0
  40af04:	f000 80bc 	beq.w	40b080 <_vfiprintf_r+0x1ec>
  40af08:	2300      	movs	r3, #0
  40af0a:	f04f 32ff 	mov.w	r2, #4294967295
  40af0e:	9304      	str	r3, [sp, #16]
  40af10:	9307      	str	r3, [sp, #28]
  40af12:	9205      	str	r2, [sp, #20]
  40af14:	9306      	str	r3, [sp, #24]
  40af16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40af1a:	931a      	str	r3, [sp, #104]	; 0x68
  40af1c:	2205      	movs	r2, #5
  40af1e:	7829      	ldrb	r1, [r5, #0]
  40af20:	4860      	ldr	r0, [pc, #384]	; (40b0a4 <_vfiprintf_r+0x210>)
  40af22:	f7ff fbb5 	bl	40a690 <memchr>
  40af26:	f105 0801 	add.w	r8, r5, #1
  40af2a:	9b04      	ldr	r3, [sp, #16]
  40af2c:	2800      	cmp	r0, #0
  40af2e:	d131      	bne.n	40af94 <_vfiprintf_r+0x100>
  40af30:	06d9      	lsls	r1, r3, #27
  40af32:	bf44      	itt	mi
  40af34:	2220      	movmi	r2, #32
  40af36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40af3a:	071a      	lsls	r2, r3, #28
  40af3c:	bf44      	itt	mi
  40af3e:	222b      	movmi	r2, #43	; 0x2b
  40af40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40af44:	782a      	ldrb	r2, [r5, #0]
  40af46:	2a2a      	cmp	r2, #42	; 0x2a
  40af48:	d02c      	beq.n	40afa4 <_vfiprintf_r+0x110>
  40af4a:	9a07      	ldr	r2, [sp, #28]
  40af4c:	2100      	movs	r1, #0
  40af4e:	200a      	movs	r0, #10
  40af50:	46a8      	mov	r8, r5
  40af52:	3501      	adds	r5, #1
  40af54:	f898 3000 	ldrb.w	r3, [r8]
  40af58:	3b30      	subs	r3, #48	; 0x30
  40af5a:	2b09      	cmp	r3, #9
  40af5c:	d96d      	bls.n	40b03a <_vfiprintf_r+0x1a6>
  40af5e:	b371      	cbz	r1, 40afbe <_vfiprintf_r+0x12a>
  40af60:	e026      	b.n	40afb0 <_vfiprintf_r+0x11c>
  40af62:	4b51      	ldr	r3, [pc, #324]	; (40b0a8 <_vfiprintf_r+0x214>)
  40af64:	429c      	cmp	r4, r3
  40af66:	d101      	bne.n	40af6c <_vfiprintf_r+0xd8>
  40af68:	68b4      	ldr	r4, [r6, #8]
  40af6a:	e7a3      	b.n	40aeb4 <_vfiprintf_r+0x20>
  40af6c:	4b4f      	ldr	r3, [pc, #316]	; (40b0ac <_vfiprintf_r+0x218>)
  40af6e:	429c      	cmp	r4, r3
  40af70:	bf08      	it	eq
  40af72:	68f4      	ldreq	r4, [r6, #12]
  40af74:	e79e      	b.n	40aeb4 <_vfiprintf_r+0x20>
  40af76:	4621      	mov	r1, r4
  40af78:	4630      	mov	r0, r6
  40af7a:	f000 f959 	bl	40b230 <__swsetup_r>
  40af7e:	2800      	cmp	r0, #0
  40af80:	d09e      	beq.n	40aec0 <_vfiprintf_r+0x2c>
  40af82:	f04f 30ff 	mov.w	r0, #4294967295
  40af86:	b01d      	add	sp, #116	; 0x74
  40af88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40af8c:	2b25      	cmp	r3, #37	; 0x25
  40af8e:	d0a7      	beq.n	40aee0 <_vfiprintf_r+0x4c>
  40af90:	46a8      	mov	r8, r5
  40af92:	e7a0      	b.n	40aed6 <_vfiprintf_r+0x42>
  40af94:	4a43      	ldr	r2, [pc, #268]	; (40b0a4 <_vfiprintf_r+0x210>)
  40af96:	1a80      	subs	r0, r0, r2
  40af98:	fa0b f000 	lsl.w	r0, fp, r0
  40af9c:	4318      	orrs	r0, r3
  40af9e:	9004      	str	r0, [sp, #16]
  40afa0:	4645      	mov	r5, r8
  40afa2:	e7bb      	b.n	40af1c <_vfiprintf_r+0x88>
  40afa4:	9a03      	ldr	r2, [sp, #12]
  40afa6:	1d11      	adds	r1, r2, #4
  40afa8:	6812      	ldr	r2, [r2, #0]
  40afaa:	9103      	str	r1, [sp, #12]
  40afac:	2a00      	cmp	r2, #0
  40afae:	db01      	blt.n	40afb4 <_vfiprintf_r+0x120>
  40afb0:	9207      	str	r2, [sp, #28]
  40afb2:	e004      	b.n	40afbe <_vfiprintf_r+0x12a>
  40afb4:	4252      	negs	r2, r2
  40afb6:	f043 0302 	orr.w	r3, r3, #2
  40afba:	9207      	str	r2, [sp, #28]
  40afbc:	9304      	str	r3, [sp, #16]
  40afbe:	f898 3000 	ldrb.w	r3, [r8]
  40afc2:	2b2e      	cmp	r3, #46	; 0x2e
  40afc4:	d110      	bne.n	40afe8 <_vfiprintf_r+0x154>
  40afc6:	f898 3001 	ldrb.w	r3, [r8, #1]
  40afca:	2b2a      	cmp	r3, #42	; 0x2a
  40afcc:	f108 0101 	add.w	r1, r8, #1
  40afd0:	d137      	bne.n	40b042 <_vfiprintf_r+0x1ae>
  40afd2:	9b03      	ldr	r3, [sp, #12]
  40afd4:	1d1a      	adds	r2, r3, #4
  40afd6:	681b      	ldr	r3, [r3, #0]
  40afd8:	9203      	str	r2, [sp, #12]
  40afda:	2b00      	cmp	r3, #0
  40afdc:	bfb8      	it	lt
  40afde:	f04f 33ff 	movlt.w	r3, #4294967295
  40afe2:	f108 0802 	add.w	r8, r8, #2
  40afe6:	9305      	str	r3, [sp, #20]
  40afe8:	4d31      	ldr	r5, [pc, #196]	; (40b0b0 <_vfiprintf_r+0x21c>)
  40afea:	f898 1000 	ldrb.w	r1, [r8]
  40afee:	2203      	movs	r2, #3
  40aff0:	4628      	mov	r0, r5
  40aff2:	f7ff fb4d 	bl	40a690 <memchr>
  40aff6:	b140      	cbz	r0, 40b00a <_vfiprintf_r+0x176>
  40aff8:	2340      	movs	r3, #64	; 0x40
  40affa:	1b40      	subs	r0, r0, r5
  40affc:	fa03 f000 	lsl.w	r0, r3, r0
  40b000:	9b04      	ldr	r3, [sp, #16]
  40b002:	4303      	orrs	r3, r0
  40b004:	9304      	str	r3, [sp, #16]
  40b006:	f108 0801 	add.w	r8, r8, #1
  40b00a:	f898 1000 	ldrb.w	r1, [r8]
  40b00e:	4829      	ldr	r0, [pc, #164]	; (40b0b4 <_vfiprintf_r+0x220>)
  40b010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  40b014:	2206      	movs	r2, #6
  40b016:	f108 0701 	add.w	r7, r8, #1
  40b01a:	f7ff fb39 	bl	40a690 <memchr>
  40b01e:	2800      	cmp	r0, #0
  40b020:	d034      	beq.n	40b08c <_vfiprintf_r+0x1f8>
  40b022:	4b25      	ldr	r3, [pc, #148]	; (40b0b8 <_vfiprintf_r+0x224>)
  40b024:	bb03      	cbnz	r3, 40b068 <_vfiprintf_r+0x1d4>
  40b026:	9b03      	ldr	r3, [sp, #12]
  40b028:	3307      	adds	r3, #7
  40b02a:	f023 0307 	bic.w	r3, r3, #7
  40b02e:	3308      	adds	r3, #8
  40b030:	9303      	str	r3, [sp, #12]
  40b032:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b034:	444b      	add	r3, r9
  40b036:	9309      	str	r3, [sp, #36]	; 0x24
  40b038:	e74c      	b.n	40aed4 <_vfiprintf_r+0x40>
  40b03a:	fb00 3202 	mla	r2, r0, r2, r3
  40b03e:	2101      	movs	r1, #1
  40b040:	e786      	b.n	40af50 <_vfiprintf_r+0xbc>
  40b042:	2300      	movs	r3, #0
  40b044:	9305      	str	r3, [sp, #20]
  40b046:	4618      	mov	r0, r3
  40b048:	250a      	movs	r5, #10
  40b04a:	4688      	mov	r8, r1
  40b04c:	3101      	adds	r1, #1
  40b04e:	f898 2000 	ldrb.w	r2, [r8]
  40b052:	3a30      	subs	r2, #48	; 0x30
  40b054:	2a09      	cmp	r2, #9
  40b056:	d903      	bls.n	40b060 <_vfiprintf_r+0x1cc>
  40b058:	2b00      	cmp	r3, #0
  40b05a:	d0c5      	beq.n	40afe8 <_vfiprintf_r+0x154>
  40b05c:	9005      	str	r0, [sp, #20]
  40b05e:	e7c3      	b.n	40afe8 <_vfiprintf_r+0x154>
  40b060:	fb05 2000 	mla	r0, r5, r0, r2
  40b064:	2301      	movs	r3, #1
  40b066:	e7f0      	b.n	40b04a <_vfiprintf_r+0x1b6>
  40b068:	ab03      	add	r3, sp, #12
  40b06a:	9300      	str	r3, [sp, #0]
  40b06c:	4622      	mov	r2, r4
  40b06e:	4b13      	ldr	r3, [pc, #76]	; (40b0bc <_vfiprintf_r+0x228>)
  40b070:	a904      	add	r1, sp, #16
  40b072:	4630      	mov	r0, r6
  40b074:	f7fd fe0e 	bl	408c94 <_printf_float>
  40b078:	f1b0 3fff 	cmp.w	r0, #4294967295
  40b07c:	4681      	mov	r9, r0
  40b07e:	d1d8      	bne.n	40b032 <_vfiprintf_r+0x19e>
  40b080:	89a3      	ldrh	r3, [r4, #12]
  40b082:	065b      	lsls	r3, r3, #25
  40b084:	f53f af7d 	bmi.w	40af82 <_vfiprintf_r+0xee>
  40b088:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b08a:	e77c      	b.n	40af86 <_vfiprintf_r+0xf2>
  40b08c:	ab03      	add	r3, sp, #12
  40b08e:	9300      	str	r3, [sp, #0]
  40b090:	4622      	mov	r2, r4
  40b092:	4b0a      	ldr	r3, [pc, #40]	; (40b0bc <_vfiprintf_r+0x228>)
  40b094:	a904      	add	r1, sp, #16
  40b096:	4630      	mov	r0, r6
  40b098:	f7fe f8aa 	bl	4091f0 <_printf_i>
  40b09c:	e7ec      	b.n	40b078 <_vfiprintf_r+0x1e4>
  40b09e:	bf00      	nop
  40b0a0:	0040cd18 	.word	0x0040cd18
  40b0a4:	0040ce54 	.word	0x0040ce54
  40b0a8:	0040cd38 	.word	0x0040cd38
  40b0ac:	0040ccf8 	.word	0x0040ccf8
  40b0b0:	0040ce5a 	.word	0x0040ce5a
  40b0b4:	0040ce5e 	.word	0x0040ce5e
  40b0b8:	00408c95 	.word	0x00408c95
  40b0bc:	0040ae71 	.word	0x0040ae71

0040b0c0 <_sbrk_r>:
  40b0c0:	b538      	push	{r3, r4, r5, lr}
  40b0c2:	4c06      	ldr	r4, [pc, #24]	; (40b0dc <_sbrk_r+0x1c>)
  40b0c4:	2300      	movs	r3, #0
  40b0c6:	4605      	mov	r5, r0
  40b0c8:	4608      	mov	r0, r1
  40b0ca:	6023      	str	r3, [r4, #0]
  40b0cc:	f7fa f9c2 	bl	405454 <_sbrk>
  40b0d0:	1c43      	adds	r3, r0, #1
  40b0d2:	d102      	bne.n	40b0da <_sbrk_r+0x1a>
  40b0d4:	6823      	ldr	r3, [r4, #0]
  40b0d6:	b103      	cbz	r3, 40b0da <_sbrk_r+0x1a>
  40b0d8:	602b      	str	r3, [r5, #0]
  40b0da:	bd38      	pop	{r3, r4, r5, pc}
  40b0dc:	2000092c 	.word	0x2000092c

0040b0e0 <__sread>:
  40b0e0:	b510      	push	{r4, lr}
  40b0e2:	460c      	mov	r4, r1
  40b0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b0e8:	f000 f968 	bl	40b3bc <_read_r>
  40b0ec:	2800      	cmp	r0, #0
  40b0ee:	bfab      	itete	ge
  40b0f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  40b0f2:	89a3      	ldrhlt	r3, [r4, #12]
  40b0f4:	181b      	addge	r3, r3, r0
  40b0f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40b0fa:	bfac      	ite	ge
  40b0fc:	6563      	strge	r3, [r4, #84]	; 0x54
  40b0fe:	81a3      	strhlt	r3, [r4, #12]
  40b100:	bd10      	pop	{r4, pc}

0040b102 <__swrite>:
  40b102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b106:	461f      	mov	r7, r3
  40b108:	898b      	ldrh	r3, [r1, #12]
  40b10a:	05db      	lsls	r3, r3, #23
  40b10c:	4605      	mov	r5, r0
  40b10e:	460c      	mov	r4, r1
  40b110:	4616      	mov	r6, r2
  40b112:	d505      	bpl.n	40b120 <__swrite+0x1e>
  40b114:	2302      	movs	r3, #2
  40b116:	2200      	movs	r2, #0
  40b118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b11c:	f000 f928 	bl	40b370 <_lseek_r>
  40b120:	89a3      	ldrh	r3, [r4, #12]
  40b122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b12a:	81a3      	strh	r3, [r4, #12]
  40b12c:	4632      	mov	r2, r6
  40b12e:	463b      	mov	r3, r7
  40b130:	4628      	mov	r0, r5
  40b132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b136:	f000 b869 	b.w	40b20c <_write_r>

0040b13a <__sseek>:
  40b13a:	b510      	push	{r4, lr}
  40b13c:	460c      	mov	r4, r1
  40b13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b142:	f000 f915 	bl	40b370 <_lseek_r>
  40b146:	1c43      	adds	r3, r0, #1
  40b148:	89a3      	ldrh	r3, [r4, #12]
  40b14a:	bf15      	itete	ne
  40b14c:	6560      	strne	r0, [r4, #84]	; 0x54
  40b14e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40b152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40b156:	81a3      	strheq	r3, [r4, #12]
  40b158:	bf18      	it	ne
  40b15a:	81a3      	strhne	r3, [r4, #12]
  40b15c:	bd10      	pop	{r4, pc}

0040b15e <__sclose>:
  40b15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b162:	f000 b8d3 	b.w	40b30c <_close_r>
	...

0040b168 <__swbuf_r>:
  40b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b16a:	460e      	mov	r6, r1
  40b16c:	4614      	mov	r4, r2
  40b16e:	4605      	mov	r5, r0
  40b170:	b118      	cbz	r0, 40b17a <__swbuf_r+0x12>
  40b172:	6983      	ldr	r3, [r0, #24]
  40b174:	b90b      	cbnz	r3, 40b17a <__swbuf_r+0x12>
  40b176:	f7ff f983 	bl	40a480 <__sinit>
  40b17a:	4b21      	ldr	r3, [pc, #132]	; (40b200 <__swbuf_r+0x98>)
  40b17c:	429c      	cmp	r4, r3
  40b17e:	d12a      	bne.n	40b1d6 <__swbuf_r+0x6e>
  40b180:	686c      	ldr	r4, [r5, #4]
  40b182:	69a3      	ldr	r3, [r4, #24]
  40b184:	60a3      	str	r3, [r4, #8]
  40b186:	89a3      	ldrh	r3, [r4, #12]
  40b188:	071a      	lsls	r2, r3, #28
  40b18a:	d52e      	bpl.n	40b1ea <__swbuf_r+0x82>
  40b18c:	6923      	ldr	r3, [r4, #16]
  40b18e:	b363      	cbz	r3, 40b1ea <__swbuf_r+0x82>
  40b190:	6923      	ldr	r3, [r4, #16]
  40b192:	6820      	ldr	r0, [r4, #0]
  40b194:	1ac0      	subs	r0, r0, r3
  40b196:	6963      	ldr	r3, [r4, #20]
  40b198:	b2f6      	uxtb	r6, r6
  40b19a:	4298      	cmp	r0, r3
  40b19c:	4637      	mov	r7, r6
  40b19e:	db04      	blt.n	40b1aa <__swbuf_r+0x42>
  40b1a0:	4621      	mov	r1, r4
  40b1a2:	4628      	mov	r0, r5
  40b1a4:	f7ff f902 	bl	40a3ac <_fflush_r>
  40b1a8:	bb28      	cbnz	r0, 40b1f6 <__swbuf_r+0x8e>
  40b1aa:	68a3      	ldr	r3, [r4, #8]
  40b1ac:	3b01      	subs	r3, #1
  40b1ae:	60a3      	str	r3, [r4, #8]
  40b1b0:	6823      	ldr	r3, [r4, #0]
  40b1b2:	1c5a      	adds	r2, r3, #1
  40b1b4:	6022      	str	r2, [r4, #0]
  40b1b6:	701e      	strb	r6, [r3, #0]
  40b1b8:	6963      	ldr	r3, [r4, #20]
  40b1ba:	3001      	adds	r0, #1
  40b1bc:	4298      	cmp	r0, r3
  40b1be:	d004      	beq.n	40b1ca <__swbuf_r+0x62>
  40b1c0:	89a3      	ldrh	r3, [r4, #12]
  40b1c2:	07db      	lsls	r3, r3, #31
  40b1c4:	d519      	bpl.n	40b1fa <__swbuf_r+0x92>
  40b1c6:	2e0a      	cmp	r6, #10
  40b1c8:	d117      	bne.n	40b1fa <__swbuf_r+0x92>
  40b1ca:	4621      	mov	r1, r4
  40b1cc:	4628      	mov	r0, r5
  40b1ce:	f7ff f8ed 	bl	40a3ac <_fflush_r>
  40b1d2:	b190      	cbz	r0, 40b1fa <__swbuf_r+0x92>
  40b1d4:	e00f      	b.n	40b1f6 <__swbuf_r+0x8e>
  40b1d6:	4b0b      	ldr	r3, [pc, #44]	; (40b204 <__swbuf_r+0x9c>)
  40b1d8:	429c      	cmp	r4, r3
  40b1da:	d101      	bne.n	40b1e0 <__swbuf_r+0x78>
  40b1dc:	68ac      	ldr	r4, [r5, #8]
  40b1de:	e7d0      	b.n	40b182 <__swbuf_r+0x1a>
  40b1e0:	4b09      	ldr	r3, [pc, #36]	; (40b208 <__swbuf_r+0xa0>)
  40b1e2:	429c      	cmp	r4, r3
  40b1e4:	bf08      	it	eq
  40b1e6:	68ec      	ldreq	r4, [r5, #12]
  40b1e8:	e7cb      	b.n	40b182 <__swbuf_r+0x1a>
  40b1ea:	4621      	mov	r1, r4
  40b1ec:	4628      	mov	r0, r5
  40b1ee:	f000 f81f 	bl	40b230 <__swsetup_r>
  40b1f2:	2800      	cmp	r0, #0
  40b1f4:	d0cc      	beq.n	40b190 <__swbuf_r+0x28>
  40b1f6:	f04f 37ff 	mov.w	r7, #4294967295
  40b1fa:	4638      	mov	r0, r7
  40b1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b1fe:	bf00      	nop
  40b200:	0040cd18 	.word	0x0040cd18
  40b204:	0040cd38 	.word	0x0040cd38
  40b208:	0040ccf8 	.word	0x0040ccf8

0040b20c <_write_r>:
  40b20c:	b538      	push	{r3, r4, r5, lr}
  40b20e:	4c07      	ldr	r4, [pc, #28]	; (40b22c <_write_r+0x20>)
  40b210:	4605      	mov	r5, r0
  40b212:	4608      	mov	r0, r1
  40b214:	4611      	mov	r1, r2
  40b216:	2200      	movs	r2, #0
  40b218:	6022      	str	r2, [r4, #0]
  40b21a:	461a      	mov	r2, r3
  40b21c:	f7f5 fe1c 	bl	400e58 <_write>
  40b220:	1c43      	adds	r3, r0, #1
  40b222:	d102      	bne.n	40b22a <_write_r+0x1e>
  40b224:	6823      	ldr	r3, [r4, #0]
  40b226:	b103      	cbz	r3, 40b22a <_write_r+0x1e>
  40b228:	602b      	str	r3, [r5, #0]
  40b22a:	bd38      	pop	{r3, r4, r5, pc}
  40b22c:	2000092c 	.word	0x2000092c

0040b230 <__swsetup_r>:
  40b230:	4b32      	ldr	r3, [pc, #200]	; (40b2fc <__swsetup_r+0xcc>)
  40b232:	b570      	push	{r4, r5, r6, lr}
  40b234:	681d      	ldr	r5, [r3, #0]
  40b236:	4606      	mov	r6, r0
  40b238:	460c      	mov	r4, r1
  40b23a:	b125      	cbz	r5, 40b246 <__swsetup_r+0x16>
  40b23c:	69ab      	ldr	r3, [r5, #24]
  40b23e:	b913      	cbnz	r3, 40b246 <__swsetup_r+0x16>
  40b240:	4628      	mov	r0, r5
  40b242:	f7ff f91d 	bl	40a480 <__sinit>
  40b246:	4b2e      	ldr	r3, [pc, #184]	; (40b300 <__swsetup_r+0xd0>)
  40b248:	429c      	cmp	r4, r3
  40b24a:	d10f      	bne.n	40b26c <__swsetup_r+0x3c>
  40b24c:	686c      	ldr	r4, [r5, #4]
  40b24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b252:	b29a      	uxth	r2, r3
  40b254:	0715      	lsls	r5, r2, #28
  40b256:	d42c      	bmi.n	40b2b2 <__swsetup_r+0x82>
  40b258:	06d0      	lsls	r0, r2, #27
  40b25a:	d411      	bmi.n	40b280 <__swsetup_r+0x50>
  40b25c:	2209      	movs	r2, #9
  40b25e:	6032      	str	r2, [r6, #0]
  40b260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b264:	81a3      	strh	r3, [r4, #12]
  40b266:	f04f 30ff 	mov.w	r0, #4294967295
  40b26a:	bd70      	pop	{r4, r5, r6, pc}
  40b26c:	4b25      	ldr	r3, [pc, #148]	; (40b304 <__swsetup_r+0xd4>)
  40b26e:	429c      	cmp	r4, r3
  40b270:	d101      	bne.n	40b276 <__swsetup_r+0x46>
  40b272:	68ac      	ldr	r4, [r5, #8]
  40b274:	e7eb      	b.n	40b24e <__swsetup_r+0x1e>
  40b276:	4b24      	ldr	r3, [pc, #144]	; (40b308 <__swsetup_r+0xd8>)
  40b278:	429c      	cmp	r4, r3
  40b27a:	bf08      	it	eq
  40b27c:	68ec      	ldreq	r4, [r5, #12]
  40b27e:	e7e6      	b.n	40b24e <__swsetup_r+0x1e>
  40b280:	0751      	lsls	r1, r2, #29
  40b282:	d512      	bpl.n	40b2aa <__swsetup_r+0x7a>
  40b284:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40b286:	b141      	cbz	r1, 40b29a <__swsetup_r+0x6a>
  40b288:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40b28c:	4299      	cmp	r1, r3
  40b28e:	d002      	beq.n	40b296 <__swsetup_r+0x66>
  40b290:	4630      	mov	r0, r6
  40b292:	f7ff fd2b 	bl	40acec <_free_r>
  40b296:	2300      	movs	r3, #0
  40b298:	6363      	str	r3, [r4, #52]	; 0x34
  40b29a:	89a3      	ldrh	r3, [r4, #12]
  40b29c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  40b2a0:	81a3      	strh	r3, [r4, #12]
  40b2a2:	2300      	movs	r3, #0
  40b2a4:	6063      	str	r3, [r4, #4]
  40b2a6:	6923      	ldr	r3, [r4, #16]
  40b2a8:	6023      	str	r3, [r4, #0]
  40b2aa:	89a3      	ldrh	r3, [r4, #12]
  40b2ac:	f043 0308 	orr.w	r3, r3, #8
  40b2b0:	81a3      	strh	r3, [r4, #12]
  40b2b2:	6923      	ldr	r3, [r4, #16]
  40b2b4:	b94b      	cbnz	r3, 40b2ca <__swsetup_r+0x9a>
  40b2b6:	89a3      	ldrh	r3, [r4, #12]
  40b2b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40b2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b2c0:	d003      	beq.n	40b2ca <__swsetup_r+0x9a>
  40b2c2:	4621      	mov	r1, r4
  40b2c4:	4630      	mov	r0, r6
  40b2c6:	f7ff f997 	bl	40a5f8 <__smakebuf_r>
  40b2ca:	89a2      	ldrh	r2, [r4, #12]
  40b2cc:	f012 0301 	ands.w	r3, r2, #1
  40b2d0:	d00c      	beq.n	40b2ec <__swsetup_r+0xbc>
  40b2d2:	2300      	movs	r3, #0
  40b2d4:	60a3      	str	r3, [r4, #8]
  40b2d6:	6963      	ldr	r3, [r4, #20]
  40b2d8:	425b      	negs	r3, r3
  40b2da:	61a3      	str	r3, [r4, #24]
  40b2dc:	6923      	ldr	r3, [r4, #16]
  40b2de:	b953      	cbnz	r3, 40b2f6 <__swsetup_r+0xc6>
  40b2e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b2e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  40b2e8:	d1ba      	bne.n	40b260 <__swsetup_r+0x30>
  40b2ea:	bd70      	pop	{r4, r5, r6, pc}
  40b2ec:	0792      	lsls	r2, r2, #30
  40b2ee:	bf58      	it	pl
  40b2f0:	6963      	ldrpl	r3, [r4, #20]
  40b2f2:	60a3      	str	r3, [r4, #8]
  40b2f4:	e7f2      	b.n	40b2dc <__swsetup_r+0xac>
  40b2f6:	2000      	movs	r0, #0
  40b2f8:	e7f7      	b.n	40b2ea <__swsetup_r+0xba>
  40b2fa:	bf00      	nop
  40b2fc:	20000178 	.word	0x20000178
  40b300:	0040cd18 	.word	0x0040cd18
  40b304:	0040cd38 	.word	0x0040cd38
  40b308:	0040ccf8 	.word	0x0040ccf8

0040b30c <_close_r>:
  40b30c:	b538      	push	{r3, r4, r5, lr}
  40b30e:	4c06      	ldr	r4, [pc, #24]	; (40b328 <_close_r+0x1c>)
  40b310:	2300      	movs	r3, #0
  40b312:	4605      	mov	r5, r0
  40b314:	4608      	mov	r0, r1
  40b316:	6023      	str	r3, [r4, #0]
  40b318:	f7fa f8c8 	bl	4054ac <_close>
  40b31c:	1c43      	adds	r3, r0, #1
  40b31e:	d102      	bne.n	40b326 <_close_r+0x1a>
  40b320:	6823      	ldr	r3, [r4, #0]
  40b322:	b103      	cbz	r3, 40b326 <_close_r+0x1a>
  40b324:	602b      	str	r3, [r5, #0]
  40b326:	bd38      	pop	{r3, r4, r5, pc}
  40b328:	2000092c 	.word	0x2000092c

0040b32c <_fstat_r>:
  40b32c:	b538      	push	{r3, r4, r5, lr}
  40b32e:	4c07      	ldr	r4, [pc, #28]	; (40b34c <_fstat_r+0x20>)
  40b330:	2300      	movs	r3, #0
  40b332:	4605      	mov	r5, r0
  40b334:	4608      	mov	r0, r1
  40b336:	4611      	mov	r1, r2
  40b338:	6023      	str	r3, [r4, #0]
  40b33a:	f7fa f8c3 	bl	4054c4 <_fstat>
  40b33e:	1c43      	adds	r3, r0, #1
  40b340:	d102      	bne.n	40b348 <_fstat_r+0x1c>
  40b342:	6823      	ldr	r3, [r4, #0]
  40b344:	b103      	cbz	r3, 40b348 <_fstat_r+0x1c>
  40b346:	602b      	str	r3, [r5, #0]
  40b348:	bd38      	pop	{r3, r4, r5, pc}
  40b34a:	bf00      	nop
  40b34c:	2000092c 	.word	0x2000092c

0040b350 <_isatty_r>:
  40b350:	b538      	push	{r3, r4, r5, lr}
  40b352:	4c06      	ldr	r4, [pc, #24]	; (40b36c <_isatty_r+0x1c>)
  40b354:	2300      	movs	r3, #0
  40b356:	4605      	mov	r5, r0
  40b358:	4608      	mov	r0, r1
  40b35a:	6023      	str	r3, [r4, #0]
  40b35c:	f7fa f8c2 	bl	4054e4 <_isatty>
  40b360:	1c43      	adds	r3, r0, #1
  40b362:	d102      	bne.n	40b36a <_isatty_r+0x1a>
  40b364:	6823      	ldr	r3, [r4, #0]
  40b366:	b103      	cbz	r3, 40b36a <_isatty_r+0x1a>
  40b368:	602b      	str	r3, [r5, #0]
  40b36a:	bd38      	pop	{r3, r4, r5, pc}
  40b36c:	2000092c 	.word	0x2000092c

0040b370 <_lseek_r>:
  40b370:	b538      	push	{r3, r4, r5, lr}
  40b372:	4c07      	ldr	r4, [pc, #28]	; (40b390 <_lseek_r+0x20>)
  40b374:	4605      	mov	r5, r0
  40b376:	4608      	mov	r0, r1
  40b378:	4611      	mov	r1, r2
  40b37a:	2200      	movs	r2, #0
  40b37c:	6022      	str	r2, [r4, #0]
  40b37e:	461a      	mov	r2, r3
  40b380:	f7fa f8bb 	bl	4054fa <_lseek>
  40b384:	1c43      	adds	r3, r0, #1
  40b386:	d102      	bne.n	40b38e <_lseek_r+0x1e>
  40b388:	6823      	ldr	r3, [r4, #0]
  40b38a:	b103      	cbz	r3, 40b38e <_lseek_r+0x1e>
  40b38c:	602b      	str	r3, [r5, #0]
  40b38e:	bd38      	pop	{r3, r4, r5, pc}
  40b390:	2000092c 	.word	0x2000092c

0040b394 <__ascii_mbtowc>:
  40b394:	b082      	sub	sp, #8
  40b396:	b901      	cbnz	r1, 40b39a <__ascii_mbtowc+0x6>
  40b398:	a901      	add	r1, sp, #4
  40b39a:	b142      	cbz	r2, 40b3ae <__ascii_mbtowc+0x1a>
  40b39c:	b14b      	cbz	r3, 40b3b2 <__ascii_mbtowc+0x1e>
  40b39e:	7813      	ldrb	r3, [r2, #0]
  40b3a0:	600b      	str	r3, [r1, #0]
  40b3a2:	7812      	ldrb	r2, [r2, #0]
  40b3a4:	1c10      	adds	r0, r2, #0
  40b3a6:	bf18      	it	ne
  40b3a8:	2001      	movne	r0, #1
  40b3aa:	b002      	add	sp, #8
  40b3ac:	4770      	bx	lr
  40b3ae:	4610      	mov	r0, r2
  40b3b0:	e7fb      	b.n	40b3aa <__ascii_mbtowc+0x16>
  40b3b2:	f06f 0001 	mvn.w	r0, #1
  40b3b6:	e7f8      	b.n	40b3aa <__ascii_mbtowc+0x16>

0040b3b8 <__malloc_lock>:
  40b3b8:	4770      	bx	lr

0040b3ba <__malloc_unlock>:
  40b3ba:	4770      	bx	lr

0040b3bc <_read_r>:
  40b3bc:	b538      	push	{r3, r4, r5, lr}
  40b3be:	4c07      	ldr	r4, [pc, #28]	; (40b3dc <_read_r+0x20>)
  40b3c0:	4605      	mov	r5, r0
  40b3c2:	4608      	mov	r0, r1
  40b3c4:	4611      	mov	r1, r2
  40b3c6:	2200      	movs	r2, #0
  40b3c8:	6022      	str	r2, [r4, #0]
  40b3ca:	461a      	mov	r2, r3
  40b3cc:	f7f5 fd1a 	bl	400e04 <_read>
  40b3d0:	1c43      	adds	r3, r0, #1
  40b3d2:	d102      	bne.n	40b3da <_read_r+0x1e>
  40b3d4:	6823      	ldr	r3, [r4, #0]
  40b3d6:	b103      	cbz	r3, 40b3da <_read_r+0x1e>
  40b3d8:	602b      	str	r3, [r5, #0]
  40b3da:	bd38      	pop	{r3, r4, r5, pc}
  40b3dc:	2000092c 	.word	0x2000092c

0040b3e0 <__ascii_wctomb>:
  40b3e0:	b149      	cbz	r1, 40b3f6 <__ascii_wctomb+0x16>
  40b3e2:	2aff      	cmp	r2, #255	; 0xff
  40b3e4:	bf85      	ittet	hi
  40b3e6:	238a      	movhi	r3, #138	; 0x8a
  40b3e8:	6003      	strhi	r3, [r0, #0]
  40b3ea:	700a      	strbls	r2, [r1, #0]
  40b3ec:	f04f 30ff 	movhi.w	r0, #4294967295
  40b3f0:	bf98      	it	ls
  40b3f2:	2001      	movls	r0, #1
  40b3f4:	4770      	bx	lr
  40b3f6:	4608      	mov	r0, r1
  40b3f8:	4770      	bx	lr
	...

0040b3fc <__aeabi_drsub>:
  40b3fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40b400:	e002      	b.n	40b408 <__adddf3>
  40b402:	bf00      	nop

0040b404 <__aeabi_dsub>:
  40b404:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040b408 <__adddf3>:
  40b408:	b530      	push	{r4, r5, lr}
  40b40a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40b40e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40b412:	ea94 0f05 	teq	r4, r5
  40b416:	bf08      	it	eq
  40b418:	ea90 0f02 	teqeq	r0, r2
  40b41c:	bf1f      	itttt	ne
  40b41e:	ea54 0c00 	orrsne.w	ip, r4, r0
  40b422:	ea55 0c02 	orrsne.w	ip, r5, r2
  40b426:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40b42a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40b42e:	f000 80e2 	beq.w	40b5f6 <__adddf3+0x1ee>
  40b432:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40b436:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40b43a:	bfb8      	it	lt
  40b43c:	426d      	neglt	r5, r5
  40b43e:	dd0c      	ble.n	40b45a <__adddf3+0x52>
  40b440:	442c      	add	r4, r5
  40b442:	ea80 0202 	eor.w	r2, r0, r2
  40b446:	ea81 0303 	eor.w	r3, r1, r3
  40b44a:	ea82 0000 	eor.w	r0, r2, r0
  40b44e:	ea83 0101 	eor.w	r1, r3, r1
  40b452:	ea80 0202 	eor.w	r2, r0, r2
  40b456:	ea81 0303 	eor.w	r3, r1, r3
  40b45a:	2d36      	cmp	r5, #54	; 0x36
  40b45c:	bf88      	it	hi
  40b45e:	bd30      	pophi	{r4, r5, pc}
  40b460:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b464:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40b468:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40b46c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40b470:	d002      	beq.n	40b478 <__adddf3+0x70>
  40b472:	4240      	negs	r0, r0
  40b474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b478:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40b47c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40b480:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40b484:	d002      	beq.n	40b48c <__adddf3+0x84>
  40b486:	4252      	negs	r2, r2
  40b488:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40b48c:	ea94 0f05 	teq	r4, r5
  40b490:	f000 80a7 	beq.w	40b5e2 <__adddf3+0x1da>
  40b494:	f1a4 0401 	sub.w	r4, r4, #1
  40b498:	f1d5 0e20 	rsbs	lr, r5, #32
  40b49c:	db0d      	blt.n	40b4ba <__adddf3+0xb2>
  40b49e:	fa02 fc0e 	lsl.w	ip, r2, lr
  40b4a2:	fa22 f205 	lsr.w	r2, r2, r5
  40b4a6:	1880      	adds	r0, r0, r2
  40b4a8:	f141 0100 	adc.w	r1, r1, #0
  40b4ac:	fa03 f20e 	lsl.w	r2, r3, lr
  40b4b0:	1880      	adds	r0, r0, r2
  40b4b2:	fa43 f305 	asr.w	r3, r3, r5
  40b4b6:	4159      	adcs	r1, r3
  40b4b8:	e00e      	b.n	40b4d8 <__adddf3+0xd0>
  40b4ba:	f1a5 0520 	sub.w	r5, r5, #32
  40b4be:	f10e 0e20 	add.w	lr, lr, #32
  40b4c2:	2a01      	cmp	r2, #1
  40b4c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  40b4c8:	bf28      	it	cs
  40b4ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  40b4ce:	fa43 f305 	asr.w	r3, r3, r5
  40b4d2:	18c0      	adds	r0, r0, r3
  40b4d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40b4d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b4dc:	d507      	bpl.n	40b4ee <__adddf3+0xe6>
  40b4de:	f04f 0e00 	mov.w	lr, #0
  40b4e2:	f1dc 0c00 	rsbs	ip, ip, #0
  40b4e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  40b4ea:	eb6e 0101 	sbc.w	r1, lr, r1
  40b4ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40b4f2:	d31b      	bcc.n	40b52c <__adddf3+0x124>
  40b4f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40b4f8:	d30c      	bcc.n	40b514 <__adddf3+0x10c>
  40b4fa:	0849      	lsrs	r1, r1, #1
  40b4fc:	ea5f 0030 	movs.w	r0, r0, rrx
  40b500:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40b504:	f104 0401 	add.w	r4, r4, #1
  40b508:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40b50c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40b510:	f080 809a 	bcs.w	40b648 <__adddf3+0x240>
  40b514:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40b518:	bf08      	it	eq
  40b51a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40b51e:	f150 0000 	adcs.w	r0, r0, #0
  40b522:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b526:	ea41 0105 	orr.w	r1, r1, r5
  40b52a:	bd30      	pop	{r4, r5, pc}
  40b52c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40b530:	4140      	adcs	r0, r0
  40b532:	eb41 0101 	adc.w	r1, r1, r1
  40b536:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b53a:	f1a4 0401 	sub.w	r4, r4, #1
  40b53e:	d1e9      	bne.n	40b514 <__adddf3+0x10c>
  40b540:	f091 0f00 	teq	r1, #0
  40b544:	bf04      	itt	eq
  40b546:	4601      	moveq	r1, r0
  40b548:	2000      	moveq	r0, #0
  40b54a:	fab1 f381 	clz	r3, r1
  40b54e:	bf08      	it	eq
  40b550:	3320      	addeq	r3, #32
  40b552:	f1a3 030b 	sub.w	r3, r3, #11
  40b556:	f1b3 0220 	subs.w	r2, r3, #32
  40b55a:	da0c      	bge.n	40b576 <__adddf3+0x16e>
  40b55c:	320c      	adds	r2, #12
  40b55e:	dd08      	ble.n	40b572 <__adddf3+0x16a>
  40b560:	f102 0c14 	add.w	ip, r2, #20
  40b564:	f1c2 020c 	rsb	r2, r2, #12
  40b568:	fa01 f00c 	lsl.w	r0, r1, ip
  40b56c:	fa21 f102 	lsr.w	r1, r1, r2
  40b570:	e00c      	b.n	40b58c <__adddf3+0x184>
  40b572:	f102 0214 	add.w	r2, r2, #20
  40b576:	bfd8      	it	le
  40b578:	f1c2 0c20 	rsble	ip, r2, #32
  40b57c:	fa01 f102 	lsl.w	r1, r1, r2
  40b580:	fa20 fc0c 	lsr.w	ip, r0, ip
  40b584:	bfdc      	itt	le
  40b586:	ea41 010c 	orrle.w	r1, r1, ip
  40b58a:	4090      	lslle	r0, r2
  40b58c:	1ae4      	subs	r4, r4, r3
  40b58e:	bfa2      	ittt	ge
  40b590:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40b594:	4329      	orrge	r1, r5
  40b596:	bd30      	popge	{r4, r5, pc}
  40b598:	ea6f 0404 	mvn.w	r4, r4
  40b59c:	3c1f      	subs	r4, #31
  40b59e:	da1c      	bge.n	40b5da <__adddf3+0x1d2>
  40b5a0:	340c      	adds	r4, #12
  40b5a2:	dc0e      	bgt.n	40b5c2 <__adddf3+0x1ba>
  40b5a4:	f104 0414 	add.w	r4, r4, #20
  40b5a8:	f1c4 0220 	rsb	r2, r4, #32
  40b5ac:	fa20 f004 	lsr.w	r0, r0, r4
  40b5b0:	fa01 f302 	lsl.w	r3, r1, r2
  40b5b4:	ea40 0003 	orr.w	r0, r0, r3
  40b5b8:	fa21 f304 	lsr.w	r3, r1, r4
  40b5bc:	ea45 0103 	orr.w	r1, r5, r3
  40b5c0:	bd30      	pop	{r4, r5, pc}
  40b5c2:	f1c4 040c 	rsb	r4, r4, #12
  40b5c6:	f1c4 0220 	rsb	r2, r4, #32
  40b5ca:	fa20 f002 	lsr.w	r0, r0, r2
  40b5ce:	fa01 f304 	lsl.w	r3, r1, r4
  40b5d2:	ea40 0003 	orr.w	r0, r0, r3
  40b5d6:	4629      	mov	r1, r5
  40b5d8:	bd30      	pop	{r4, r5, pc}
  40b5da:	fa21 f004 	lsr.w	r0, r1, r4
  40b5de:	4629      	mov	r1, r5
  40b5e0:	bd30      	pop	{r4, r5, pc}
  40b5e2:	f094 0f00 	teq	r4, #0
  40b5e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40b5ea:	bf06      	itte	eq
  40b5ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40b5f0:	3401      	addeq	r4, #1
  40b5f2:	3d01      	subne	r5, #1
  40b5f4:	e74e      	b.n	40b494 <__adddf3+0x8c>
  40b5f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40b5fa:	bf18      	it	ne
  40b5fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40b600:	d029      	beq.n	40b656 <__adddf3+0x24e>
  40b602:	ea94 0f05 	teq	r4, r5
  40b606:	bf08      	it	eq
  40b608:	ea90 0f02 	teqeq	r0, r2
  40b60c:	d005      	beq.n	40b61a <__adddf3+0x212>
  40b60e:	ea54 0c00 	orrs.w	ip, r4, r0
  40b612:	bf04      	itt	eq
  40b614:	4619      	moveq	r1, r3
  40b616:	4610      	moveq	r0, r2
  40b618:	bd30      	pop	{r4, r5, pc}
  40b61a:	ea91 0f03 	teq	r1, r3
  40b61e:	bf1e      	ittt	ne
  40b620:	2100      	movne	r1, #0
  40b622:	2000      	movne	r0, #0
  40b624:	bd30      	popne	{r4, r5, pc}
  40b626:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40b62a:	d105      	bne.n	40b638 <__adddf3+0x230>
  40b62c:	0040      	lsls	r0, r0, #1
  40b62e:	4149      	adcs	r1, r1
  40b630:	bf28      	it	cs
  40b632:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40b636:	bd30      	pop	{r4, r5, pc}
  40b638:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40b63c:	bf3c      	itt	cc
  40b63e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40b642:	bd30      	popcc	{r4, r5, pc}
  40b644:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b648:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40b64c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40b650:	f04f 0000 	mov.w	r0, #0
  40b654:	bd30      	pop	{r4, r5, pc}
  40b656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40b65a:	bf1a      	itte	ne
  40b65c:	4619      	movne	r1, r3
  40b65e:	4610      	movne	r0, r2
  40b660:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40b664:	bf1c      	itt	ne
  40b666:	460b      	movne	r3, r1
  40b668:	4602      	movne	r2, r0
  40b66a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40b66e:	bf06      	itte	eq
  40b670:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40b674:	ea91 0f03 	teqeq	r1, r3
  40b678:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40b67c:	bd30      	pop	{r4, r5, pc}
  40b67e:	bf00      	nop

0040b680 <__aeabi_ui2d>:
  40b680:	f090 0f00 	teq	r0, #0
  40b684:	bf04      	itt	eq
  40b686:	2100      	moveq	r1, #0
  40b688:	4770      	bxeq	lr
  40b68a:	b530      	push	{r4, r5, lr}
  40b68c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40b690:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40b694:	f04f 0500 	mov.w	r5, #0
  40b698:	f04f 0100 	mov.w	r1, #0
  40b69c:	e750      	b.n	40b540 <__adddf3+0x138>
  40b69e:	bf00      	nop

0040b6a0 <__aeabi_i2d>:
  40b6a0:	f090 0f00 	teq	r0, #0
  40b6a4:	bf04      	itt	eq
  40b6a6:	2100      	moveq	r1, #0
  40b6a8:	4770      	bxeq	lr
  40b6aa:	b530      	push	{r4, r5, lr}
  40b6ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40b6b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40b6b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40b6b8:	bf48      	it	mi
  40b6ba:	4240      	negmi	r0, r0
  40b6bc:	f04f 0100 	mov.w	r1, #0
  40b6c0:	e73e      	b.n	40b540 <__adddf3+0x138>
  40b6c2:	bf00      	nop

0040b6c4 <__aeabi_f2d>:
  40b6c4:	0042      	lsls	r2, r0, #1
  40b6c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40b6ca:	ea4f 0131 	mov.w	r1, r1, rrx
  40b6ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40b6d2:	bf1f      	itttt	ne
  40b6d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40b6d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40b6dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40b6e0:	4770      	bxne	lr
  40b6e2:	f092 0f00 	teq	r2, #0
  40b6e6:	bf14      	ite	ne
  40b6e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40b6ec:	4770      	bxeq	lr
  40b6ee:	b530      	push	{r4, r5, lr}
  40b6f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  40b6f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b6f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40b6fc:	e720      	b.n	40b540 <__adddf3+0x138>
  40b6fe:	bf00      	nop

0040b700 <__aeabi_ul2d>:
  40b700:	ea50 0201 	orrs.w	r2, r0, r1
  40b704:	bf08      	it	eq
  40b706:	4770      	bxeq	lr
  40b708:	b530      	push	{r4, r5, lr}
  40b70a:	f04f 0500 	mov.w	r5, #0
  40b70e:	e00a      	b.n	40b726 <__aeabi_l2d+0x16>

0040b710 <__aeabi_l2d>:
  40b710:	ea50 0201 	orrs.w	r2, r0, r1
  40b714:	bf08      	it	eq
  40b716:	4770      	bxeq	lr
  40b718:	b530      	push	{r4, r5, lr}
  40b71a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40b71e:	d502      	bpl.n	40b726 <__aeabi_l2d+0x16>
  40b720:	4240      	negs	r0, r0
  40b722:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b726:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40b72a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40b72e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40b732:	f43f aedc 	beq.w	40b4ee <__adddf3+0xe6>
  40b736:	f04f 0203 	mov.w	r2, #3
  40b73a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40b73e:	bf18      	it	ne
  40b740:	3203      	addne	r2, #3
  40b742:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40b746:	bf18      	it	ne
  40b748:	3203      	addne	r2, #3
  40b74a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40b74e:	f1c2 0320 	rsb	r3, r2, #32
  40b752:	fa00 fc03 	lsl.w	ip, r0, r3
  40b756:	fa20 f002 	lsr.w	r0, r0, r2
  40b75a:	fa01 fe03 	lsl.w	lr, r1, r3
  40b75e:	ea40 000e 	orr.w	r0, r0, lr
  40b762:	fa21 f102 	lsr.w	r1, r1, r2
  40b766:	4414      	add	r4, r2
  40b768:	e6c1      	b.n	40b4ee <__adddf3+0xe6>
  40b76a:	bf00      	nop

0040b76c <__aeabi_dmul>:
  40b76c:	b570      	push	{r4, r5, r6, lr}
  40b76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40b776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40b77a:	bf1d      	ittte	ne
  40b77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40b780:	ea94 0f0c 	teqne	r4, ip
  40b784:	ea95 0f0c 	teqne	r5, ip
  40b788:	f000 f8de 	bleq	40b948 <__aeabi_dmul+0x1dc>
  40b78c:	442c      	add	r4, r5
  40b78e:	ea81 0603 	eor.w	r6, r1, r3
  40b792:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40b796:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40b79a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40b79e:	bf18      	it	ne
  40b7a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40b7a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b7a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40b7ac:	d038      	beq.n	40b820 <__aeabi_dmul+0xb4>
  40b7ae:	fba0 ce02 	umull	ip, lr, r0, r2
  40b7b2:	f04f 0500 	mov.w	r5, #0
  40b7b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  40b7ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40b7be:	fbe0 e503 	umlal	lr, r5, r0, r3
  40b7c2:	f04f 0600 	mov.w	r6, #0
  40b7c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  40b7ca:	f09c 0f00 	teq	ip, #0
  40b7ce:	bf18      	it	ne
  40b7d0:	f04e 0e01 	orrne.w	lr, lr, #1
  40b7d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40b7d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40b7dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40b7e0:	d204      	bcs.n	40b7ec <__aeabi_dmul+0x80>
  40b7e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40b7e6:	416d      	adcs	r5, r5
  40b7e8:	eb46 0606 	adc.w	r6, r6, r6
  40b7ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40b7f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40b7f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40b7f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40b7fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40b800:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40b804:	bf88      	it	hi
  40b806:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40b80a:	d81e      	bhi.n	40b84a <__aeabi_dmul+0xde>
  40b80c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40b810:	bf08      	it	eq
  40b812:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40b816:	f150 0000 	adcs.w	r0, r0, #0
  40b81a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b81e:	bd70      	pop	{r4, r5, r6, pc}
  40b820:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40b824:	ea46 0101 	orr.w	r1, r6, r1
  40b828:	ea40 0002 	orr.w	r0, r0, r2
  40b82c:	ea81 0103 	eor.w	r1, r1, r3
  40b830:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40b834:	bfc2      	ittt	gt
  40b836:	ebd4 050c 	rsbsgt	r5, r4, ip
  40b83a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40b83e:	bd70      	popgt	{r4, r5, r6, pc}
  40b840:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b844:	f04f 0e00 	mov.w	lr, #0
  40b848:	3c01      	subs	r4, #1
  40b84a:	f300 80ab 	bgt.w	40b9a4 <__aeabi_dmul+0x238>
  40b84e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40b852:	bfde      	ittt	le
  40b854:	2000      	movle	r0, #0
  40b856:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40b85a:	bd70      	pople	{r4, r5, r6, pc}
  40b85c:	f1c4 0400 	rsb	r4, r4, #0
  40b860:	3c20      	subs	r4, #32
  40b862:	da35      	bge.n	40b8d0 <__aeabi_dmul+0x164>
  40b864:	340c      	adds	r4, #12
  40b866:	dc1b      	bgt.n	40b8a0 <__aeabi_dmul+0x134>
  40b868:	f104 0414 	add.w	r4, r4, #20
  40b86c:	f1c4 0520 	rsb	r5, r4, #32
  40b870:	fa00 f305 	lsl.w	r3, r0, r5
  40b874:	fa20 f004 	lsr.w	r0, r0, r4
  40b878:	fa01 f205 	lsl.w	r2, r1, r5
  40b87c:	ea40 0002 	orr.w	r0, r0, r2
  40b880:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40b884:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40b888:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40b88c:	fa21 f604 	lsr.w	r6, r1, r4
  40b890:	eb42 0106 	adc.w	r1, r2, r6
  40b894:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40b898:	bf08      	it	eq
  40b89a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40b89e:	bd70      	pop	{r4, r5, r6, pc}
  40b8a0:	f1c4 040c 	rsb	r4, r4, #12
  40b8a4:	f1c4 0520 	rsb	r5, r4, #32
  40b8a8:	fa00 f304 	lsl.w	r3, r0, r4
  40b8ac:	fa20 f005 	lsr.w	r0, r0, r5
  40b8b0:	fa01 f204 	lsl.w	r2, r1, r4
  40b8b4:	ea40 0002 	orr.w	r0, r0, r2
  40b8b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b8bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40b8c0:	f141 0100 	adc.w	r1, r1, #0
  40b8c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40b8c8:	bf08      	it	eq
  40b8ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40b8ce:	bd70      	pop	{r4, r5, r6, pc}
  40b8d0:	f1c4 0520 	rsb	r5, r4, #32
  40b8d4:	fa00 f205 	lsl.w	r2, r0, r5
  40b8d8:	ea4e 0e02 	orr.w	lr, lr, r2
  40b8dc:	fa20 f304 	lsr.w	r3, r0, r4
  40b8e0:	fa01 f205 	lsl.w	r2, r1, r5
  40b8e4:	ea43 0302 	orr.w	r3, r3, r2
  40b8e8:	fa21 f004 	lsr.w	r0, r1, r4
  40b8ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b8f0:	fa21 f204 	lsr.w	r2, r1, r4
  40b8f4:	ea20 0002 	bic.w	r0, r0, r2
  40b8f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40b8fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40b900:	bf08      	it	eq
  40b902:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40b906:	bd70      	pop	{r4, r5, r6, pc}
  40b908:	f094 0f00 	teq	r4, #0
  40b90c:	d10f      	bne.n	40b92e <__aeabi_dmul+0x1c2>
  40b90e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40b912:	0040      	lsls	r0, r0, #1
  40b914:	eb41 0101 	adc.w	r1, r1, r1
  40b918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b91c:	bf08      	it	eq
  40b91e:	3c01      	subeq	r4, #1
  40b920:	d0f7      	beq.n	40b912 <__aeabi_dmul+0x1a6>
  40b922:	ea41 0106 	orr.w	r1, r1, r6
  40b926:	f095 0f00 	teq	r5, #0
  40b92a:	bf18      	it	ne
  40b92c:	4770      	bxne	lr
  40b92e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40b932:	0052      	lsls	r2, r2, #1
  40b934:	eb43 0303 	adc.w	r3, r3, r3
  40b938:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40b93c:	bf08      	it	eq
  40b93e:	3d01      	subeq	r5, #1
  40b940:	d0f7      	beq.n	40b932 <__aeabi_dmul+0x1c6>
  40b942:	ea43 0306 	orr.w	r3, r3, r6
  40b946:	4770      	bx	lr
  40b948:	ea94 0f0c 	teq	r4, ip
  40b94c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40b950:	bf18      	it	ne
  40b952:	ea95 0f0c 	teqne	r5, ip
  40b956:	d00c      	beq.n	40b972 <__aeabi_dmul+0x206>
  40b958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b95c:	bf18      	it	ne
  40b95e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b962:	d1d1      	bne.n	40b908 <__aeabi_dmul+0x19c>
  40b964:	ea81 0103 	eor.w	r1, r1, r3
  40b968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b96c:	f04f 0000 	mov.w	r0, #0
  40b970:	bd70      	pop	{r4, r5, r6, pc}
  40b972:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b976:	bf06      	itte	eq
  40b978:	4610      	moveq	r0, r2
  40b97a:	4619      	moveq	r1, r3
  40b97c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b980:	d019      	beq.n	40b9b6 <__aeabi_dmul+0x24a>
  40b982:	ea94 0f0c 	teq	r4, ip
  40b986:	d102      	bne.n	40b98e <__aeabi_dmul+0x222>
  40b988:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40b98c:	d113      	bne.n	40b9b6 <__aeabi_dmul+0x24a>
  40b98e:	ea95 0f0c 	teq	r5, ip
  40b992:	d105      	bne.n	40b9a0 <__aeabi_dmul+0x234>
  40b994:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40b998:	bf1c      	itt	ne
  40b99a:	4610      	movne	r0, r2
  40b99c:	4619      	movne	r1, r3
  40b99e:	d10a      	bne.n	40b9b6 <__aeabi_dmul+0x24a>
  40b9a0:	ea81 0103 	eor.w	r1, r1, r3
  40b9a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b9a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40b9ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40b9b0:	f04f 0000 	mov.w	r0, #0
  40b9b4:	bd70      	pop	{r4, r5, r6, pc}
  40b9b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40b9ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40b9be:	bd70      	pop	{r4, r5, r6, pc}

0040b9c0 <__aeabi_ddiv>:
  40b9c0:	b570      	push	{r4, r5, r6, lr}
  40b9c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b9c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40b9ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40b9ce:	bf1d      	ittte	ne
  40b9d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40b9d4:	ea94 0f0c 	teqne	r4, ip
  40b9d8:	ea95 0f0c 	teqne	r5, ip
  40b9dc:	f000 f8a7 	bleq	40bb2e <__aeabi_ddiv+0x16e>
  40b9e0:	eba4 0405 	sub.w	r4, r4, r5
  40b9e4:	ea81 0e03 	eor.w	lr, r1, r3
  40b9e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40b9ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40b9f0:	f000 8088 	beq.w	40bb04 <__aeabi_ddiv+0x144>
  40b9f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40b9f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40b9fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40ba00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40ba04:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40ba08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40ba0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40ba10:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40ba14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ba18:	429d      	cmp	r5, r3
  40ba1a:	bf08      	it	eq
  40ba1c:	4296      	cmpeq	r6, r2
  40ba1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40ba22:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40ba26:	d202      	bcs.n	40ba2e <__aeabi_ddiv+0x6e>
  40ba28:	085b      	lsrs	r3, r3, #1
  40ba2a:	ea4f 0232 	mov.w	r2, r2, rrx
  40ba2e:	1ab6      	subs	r6, r6, r2
  40ba30:	eb65 0503 	sbc.w	r5, r5, r3
  40ba34:	085b      	lsrs	r3, r3, #1
  40ba36:	ea4f 0232 	mov.w	r2, r2, rrx
  40ba3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40ba3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40ba42:	ebb6 0e02 	subs.w	lr, r6, r2
  40ba46:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ba4a:	bf22      	ittt	cs
  40ba4c:	1ab6      	subcs	r6, r6, r2
  40ba4e:	4675      	movcs	r5, lr
  40ba50:	ea40 000c 	orrcs.w	r0, r0, ip
  40ba54:	085b      	lsrs	r3, r3, #1
  40ba56:	ea4f 0232 	mov.w	r2, r2, rrx
  40ba5a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ba5e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ba62:	bf22      	ittt	cs
  40ba64:	1ab6      	subcs	r6, r6, r2
  40ba66:	4675      	movcs	r5, lr
  40ba68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40ba6c:	085b      	lsrs	r3, r3, #1
  40ba6e:	ea4f 0232 	mov.w	r2, r2, rrx
  40ba72:	ebb6 0e02 	subs.w	lr, r6, r2
  40ba76:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ba7a:	bf22      	ittt	cs
  40ba7c:	1ab6      	subcs	r6, r6, r2
  40ba7e:	4675      	movcs	r5, lr
  40ba80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40ba84:	085b      	lsrs	r3, r3, #1
  40ba86:	ea4f 0232 	mov.w	r2, r2, rrx
  40ba8a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ba8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ba92:	bf22      	ittt	cs
  40ba94:	1ab6      	subcs	r6, r6, r2
  40ba96:	4675      	movcs	r5, lr
  40ba98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40ba9c:	ea55 0e06 	orrs.w	lr, r5, r6
  40baa0:	d018      	beq.n	40bad4 <__aeabi_ddiv+0x114>
  40baa2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40baa6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40baaa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40baae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40bab2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40bab6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40baba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40babe:	d1c0      	bne.n	40ba42 <__aeabi_ddiv+0x82>
  40bac0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bac4:	d10b      	bne.n	40bade <__aeabi_ddiv+0x11e>
  40bac6:	ea41 0100 	orr.w	r1, r1, r0
  40baca:	f04f 0000 	mov.w	r0, #0
  40bace:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40bad2:	e7b6      	b.n	40ba42 <__aeabi_ddiv+0x82>
  40bad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bad8:	bf04      	itt	eq
  40bada:	4301      	orreq	r1, r0
  40badc:	2000      	moveq	r0, #0
  40bade:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40bae2:	bf88      	it	hi
  40bae4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40bae8:	f63f aeaf 	bhi.w	40b84a <__aeabi_dmul+0xde>
  40baec:	ebb5 0c03 	subs.w	ip, r5, r3
  40baf0:	bf04      	itt	eq
  40baf2:	ebb6 0c02 	subseq.w	ip, r6, r2
  40baf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40bafa:	f150 0000 	adcs.w	r0, r0, #0
  40bafe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40bb02:	bd70      	pop	{r4, r5, r6, pc}
  40bb04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40bb08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40bb0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40bb10:	bfc2      	ittt	gt
  40bb12:	ebd4 050c 	rsbsgt	r5, r4, ip
  40bb16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40bb1a:	bd70      	popgt	{r4, r5, r6, pc}
  40bb1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40bb20:	f04f 0e00 	mov.w	lr, #0
  40bb24:	3c01      	subs	r4, #1
  40bb26:	e690      	b.n	40b84a <__aeabi_dmul+0xde>
  40bb28:	ea45 0e06 	orr.w	lr, r5, r6
  40bb2c:	e68d      	b.n	40b84a <__aeabi_dmul+0xde>
  40bb2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40bb32:	ea94 0f0c 	teq	r4, ip
  40bb36:	bf08      	it	eq
  40bb38:	ea95 0f0c 	teqeq	r5, ip
  40bb3c:	f43f af3b 	beq.w	40b9b6 <__aeabi_dmul+0x24a>
  40bb40:	ea94 0f0c 	teq	r4, ip
  40bb44:	d10a      	bne.n	40bb5c <__aeabi_ddiv+0x19c>
  40bb46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40bb4a:	f47f af34 	bne.w	40b9b6 <__aeabi_dmul+0x24a>
  40bb4e:	ea95 0f0c 	teq	r5, ip
  40bb52:	f47f af25 	bne.w	40b9a0 <__aeabi_dmul+0x234>
  40bb56:	4610      	mov	r0, r2
  40bb58:	4619      	mov	r1, r3
  40bb5a:	e72c      	b.n	40b9b6 <__aeabi_dmul+0x24a>
  40bb5c:	ea95 0f0c 	teq	r5, ip
  40bb60:	d106      	bne.n	40bb70 <__aeabi_ddiv+0x1b0>
  40bb62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40bb66:	f43f aefd 	beq.w	40b964 <__aeabi_dmul+0x1f8>
  40bb6a:	4610      	mov	r0, r2
  40bb6c:	4619      	mov	r1, r3
  40bb6e:	e722      	b.n	40b9b6 <__aeabi_dmul+0x24a>
  40bb70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40bb74:	bf18      	it	ne
  40bb76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40bb7a:	f47f aec5 	bne.w	40b908 <__aeabi_dmul+0x19c>
  40bb7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40bb82:	f47f af0d 	bne.w	40b9a0 <__aeabi_dmul+0x234>
  40bb86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40bb8a:	f47f aeeb 	bne.w	40b964 <__aeabi_dmul+0x1f8>
  40bb8e:	e712      	b.n	40b9b6 <__aeabi_dmul+0x24a>

0040bb90 <__gedf2>:
  40bb90:	f04f 3cff 	mov.w	ip, #4294967295
  40bb94:	e006      	b.n	40bba4 <__cmpdf2+0x4>
  40bb96:	bf00      	nop

0040bb98 <__ledf2>:
  40bb98:	f04f 0c01 	mov.w	ip, #1
  40bb9c:	e002      	b.n	40bba4 <__cmpdf2+0x4>
  40bb9e:	bf00      	nop

0040bba0 <__cmpdf2>:
  40bba0:	f04f 0c01 	mov.w	ip, #1
  40bba4:	f84d cd04 	str.w	ip, [sp, #-4]!
  40bba8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bbac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bbb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bbb4:	bf18      	it	ne
  40bbb6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40bbba:	d01b      	beq.n	40bbf4 <__cmpdf2+0x54>
  40bbbc:	b001      	add	sp, #4
  40bbbe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40bbc2:	bf0c      	ite	eq
  40bbc4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40bbc8:	ea91 0f03 	teqne	r1, r3
  40bbcc:	bf02      	ittt	eq
  40bbce:	ea90 0f02 	teqeq	r0, r2
  40bbd2:	2000      	moveq	r0, #0
  40bbd4:	4770      	bxeq	lr
  40bbd6:	f110 0f00 	cmn.w	r0, #0
  40bbda:	ea91 0f03 	teq	r1, r3
  40bbde:	bf58      	it	pl
  40bbe0:	4299      	cmppl	r1, r3
  40bbe2:	bf08      	it	eq
  40bbe4:	4290      	cmpeq	r0, r2
  40bbe6:	bf2c      	ite	cs
  40bbe8:	17d8      	asrcs	r0, r3, #31
  40bbea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40bbee:	f040 0001 	orr.w	r0, r0, #1
  40bbf2:	4770      	bx	lr
  40bbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bbfc:	d102      	bne.n	40bc04 <__cmpdf2+0x64>
  40bbfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40bc02:	d107      	bne.n	40bc14 <__cmpdf2+0x74>
  40bc04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bc08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bc0c:	d1d6      	bne.n	40bbbc <__cmpdf2+0x1c>
  40bc0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40bc12:	d0d3      	beq.n	40bbbc <__cmpdf2+0x1c>
  40bc14:	f85d 0b04 	ldr.w	r0, [sp], #4
  40bc18:	4770      	bx	lr
  40bc1a:	bf00      	nop

0040bc1c <__aeabi_cdrcmple>:
  40bc1c:	4684      	mov	ip, r0
  40bc1e:	4610      	mov	r0, r2
  40bc20:	4662      	mov	r2, ip
  40bc22:	468c      	mov	ip, r1
  40bc24:	4619      	mov	r1, r3
  40bc26:	4663      	mov	r3, ip
  40bc28:	e000      	b.n	40bc2c <__aeabi_cdcmpeq>
  40bc2a:	bf00      	nop

0040bc2c <__aeabi_cdcmpeq>:
  40bc2c:	b501      	push	{r0, lr}
  40bc2e:	f7ff ffb7 	bl	40bba0 <__cmpdf2>
  40bc32:	2800      	cmp	r0, #0
  40bc34:	bf48      	it	mi
  40bc36:	f110 0f00 	cmnmi.w	r0, #0
  40bc3a:	bd01      	pop	{r0, pc}

0040bc3c <__aeabi_dcmpeq>:
  40bc3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bc40:	f7ff fff4 	bl	40bc2c <__aeabi_cdcmpeq>
  40bc44:	bf0c      	ite	eq
  40bc46:	2001      	moveq	r0, #1
  40bc48:	2000      	movne	r0, #0
  40bc4a:	f85d fb08 	ldr.w	pc, [sp], #8
  40bc4e:	bf00      	nop

0040bc50 <__aeabi_dcmplt>:
  40bc50:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bc54:	f7ff ffea 	bl	40bc2c <__aeabi_cdcmpeq>
  40bc58:	bf34      	ite	cc
  40bc5a:	2001      	movcc	r0, #1
  40bc5c:	2000      	movcs	r0, #0
  40bc5e:	f85d fb08 	ldr.w	pc, [sp], #8
  40bc62:	bf00      	nop

0040bc64 <__aeabi_dcmple>:
  40bc64:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bc68:	f7ff ffe0 	bl	40bc2c <__aeabi_cdcmpeq>
  40bc6c:	bf94      	ite	ls
  40bc6e:	2001      	movls	r0, #1
  40bc70:	2000      	movhi	r0, #0
  40bc72:	f85d fb08 	ldr.w	pc, [sp], #8
  40bc76:	bf00      	nop

0040bc78 <__aeabi_dcmpge>:
  40bc78:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bc7c:	f7ff ffce 	bl	40bc1c <__aeabi_cdrcmple>
  40bc80:	bf94      	ite	ls
  40bc82:	2001      	movls	r0, #1
  40bc84:	2000      	movhi	r0, #0
  40bc86:	f85d fb08 	ldr.w	pc, [sp], #8
  40bc8a:	bf00      	nop

0040bc8c <__aeabi_dcmpgt>:
  40bc8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bc90:	f7ff ffc4 	bl	40bc1c <__aeabi_cdrcmple>
  40bc94:	bf34      	ite	cc
  40bc96:	2001      	movcc	r0, #1
  40bc98:	2000      	movcs	r0, #0
  40bc9a:	f85d fb08 	ldr.w	pc, [sp], #8
  40bc9e:	bf00      	nop

0040bca0 <__aeabi_dcmpun>:
  40bca0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bca4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bca8:	d102      	bne.n	40bcb0 <__aeabi_dcmpun+0x10>
  40bcaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40bcae:	d10a      	bne.n	40bcc6 <__aeabi_dcmpun+0x26>
  40bcb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bcb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bcb8:	d102      	bne.n	40bcc0 <__aeabi_dcmpun+0x20>
  40bcba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40bcbe:	d102      	bne.n	40bcc6 <__aeabi_dcmpun+0x26>
  40bcc0:	f04f 0000 	mov.w	r0, #0
  40bcc4:	4770      	bx	lr
  40bcc6:	f04f 0001 	mov.w	r0, #1
  40bcca:	4770      	bx	lr

0040bccc <__aeabi_d2iz>:
  40bccc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40bcd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40bcd4:	d215      	bcs.n	40bd02 <__aeabi_d2iz+0x36>
  40bcd6:	d511      	bpl.n	40bcfc <__aeabi_d2iz+0x30>
  40bcd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40bcdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40bce0:	d912      	bls.n	40bd08 <__aeabi_d2iz+0x3c>
  40bce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40bce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40bcea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40bcee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40bcf2:	fa23 f002 	lsr.w	r0, r3, r2
  40bcf6:	bf18      	it	ne
  40bcf8:	4240      	negne	r0, r0
  40bcfa:	4770      	bx	lr
  40bcfc:	f04f 0000 	mov.w	r0, #0
  40bd00:	4770      	bx	lr
  40bd02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40bd06:	d105      	bne.n	40bd14 <__aeabi_d2iz+0x48>
  40bd08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40bd0c:	bf08      	it	eq
  40bd0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40bd12:	4770      	bx	lr
  40bd14:	f04f 0000 	mov.w	r0, #0
  40bd18:	4770      	bx	lr
  40bd1a:	bf00      	nop

0040bd1c <__aeabi_d2uiz>:
  40bd1c:	004a      	lsls	r2, r1, #1
  40bd1e:	d211      	bcs.n	40bd44 <__aeabi_d2uiz+0x28>
  40bd20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40bd24:	d211      	bcs.n	40bd4a <__aeabi_d2uiz+0x2e>
  40bd26:	d50d      	bpl.n	40bd44 <__aeabi_d2uiz+0x28>
  40bd28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40bd2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40bd30:	d40e      	bmi.n	40bd50 <__aeabi_d2uiz+0x34>
  40bd32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40bd36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40bd3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40bd3e:	fa23 f002 	lsr.w	r0, r3, r2
  40bd42:	4770      	bx	lr
  40bd44:	f04f 0000 	mov.w	r0, #0
  40bd48:	4770      	bx	lr
  40bd4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40bd4e:	d102      	bne.n	40bd56 <__aeabi_d2uiz+0x3a>
  40bd50:	f04f 30ff 	mov.w	r0, #4294967295
  40bd54:	4770      	bx	lr
  40bd56:	f04f 0000 	mov.w	r0, #0
  40bd5a:	4770      	bx	lr

0040bd5c <__aeabi_uldivmod>:
  40bd5c:	b953      	cbnz	r3, 40bd74 <__aeabi_uldivmod+0x18>
  40bd5e:	b94a      	cbnz	r2, 40bd74 <__aeabi_uldivmod+0x18>
  40bd60:	2900      	cmp	r1, #0
  40bd62:	bf08      	it	eq
  40bd64:	2800      	cmpeq	r0, #0
  40bd66:	bf1c      	itt	ne
  40bd68:	f04f 31ff 	movne.w	r1, #4294967295
  40bd6c:	f04f 30ff 	movne.w	r0, #4294967295
  40bd70:	f000 b97a 	b.w	40c068 <__aeabi_idiv0>
  40bd74:	f1ad 0c08 	sub.w	ip, sp, #8
  40bd78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40bd7c:	f000 f806 	bl	40bd8c <__udivmoddi4>
  40bd80:	f8dd e004 	ldr.w	lr, [sp, #4]
  40bd84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40bd88:	b004      	add	sp, #16
  40bd8a:	4770      	bx	lr

0040bd8c <__udivmoddi4>:
  40bd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40bd90:	468c      	mov	ip, r1
  40bd92:	460d      	mov	r5, r1
  40bd94:	4604      	mov	r4, r0
  40bd96:	9e08      	ldr	r6, [sp, #32]
  40bd98:	2b00      	cmp	r3, #0
  40bd9a:	d151      	bne.n	40be40 <__udivmoddi4+0xb4>
  40bd9c:	428a      	cmp	r2, r1
  40bd9e:	4617      	mov	r7, r2
  40bda0:	d96d      	bls.n	40be7e <__udivmoddi4+0xf2>
  40bda2:	fab2 fe82 	clz	lr, r2
  40bda6:	f1be 0f00 	cmp.w	lr, #0
  40bdaa:	d00b      	beq.n	40bdc4 <__udivmoddi4+0x38>
  40bdac:	f1ce 0c20 	rsb	ip, lr, #32
  40bdb0:	fa01 f50e 	lsl.w	r5, r1, lr
  40bdb4:	fa20 fc0c 	lsr.w	ip, r0, ip
  40bdb8:	fa02 f70e 	lsl.w	r7, r2, lr
  40bdbc:	ea4c 0c05 	orr.w	ip, ip, r5
  40bdc0:	fa00 f40e 	lsl.w	r4, r0, lr
  40bdc4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40bdc8:	0c25      	lsrs	r5, r4, #16
  40bdca:	fbbc f8fa 	udiv	r8, ip, sl
  40bdce:	fa1f f987 	uxth.w	r9, r7
  40bdd2:	fb0a cc18 	mls	ip, sl, r8, ip
  40bdd6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40bdda:	fb08 f309 	mul.w	r3, r8, r9
  40bdde:	42ab      	cmp	r3, r5
  40bde0:	d90a      	bls.n	40bdf8 <__udivmoddi4+0x6c>
  40bde2:	19ed      	adds	r5, r5, r7
  40bde4:	f108 32ff 	add.w	r2, r8, #4294967295
  40bde8:	f080 8123 	bcs.w	40c032 <__udivmoddi4+0x2a6>
  40bdec:	42ab      	cmp	r3, r5
  40bdee:	f240 8120 	bls.w	40c032 <__udivmoddi4+0x2a6>
  40bdf2:	f1a8 0802 	sub.w	r8, r8, #2
  40bdf6:	443d      	add	r5, r7
  40bdf8:	1aed      	subs	r5, r5, r3
  40bdfa:	b2a4      	uxth	r4, r4
  40bdfc:	fbb5 f0fa 	udiv	r0, r5, sl
  40be00:	fb0a 5510 	mls	r5, sl, r0, r5
  40be04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40be08:	fb00 f909 	mul.w	r9, r0, r9
  40be0c:	45a1      	cmp	r9, r4
  40be0e:	d909      	bls.n	40be24 <__udivmoddi4+0x98>
  40be10:	19e4      	adds	r4, r4, r7
  40be12:	f100 33ff 	add.w	r3, r0, #4294967295
  40be16:	f080 810a 	bcs.w	40c02e <__udivmoddi4+0x2a2>
  40be1a:	45a1      	cmp	r9, r4
  40be1c:	f240 8107 	bls.w	40c02e <__udivmoddi4+0x2a2>
  40be20:	3802      	subs	r0, #2
  40be22:	443c      	add	r4, r7
  40be24:	eba4 0409 	sub.w	r4, r4, r9
  40be28:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40be2c:	2100      	movs	r1, #0
  40be2e:	2e00      	cmp	r6, #0
  40be30:	d061      	beq.n	40bef6 <__udivmoddi4+0x16a>
  40be32:	fa24 f40e 	lsr.w	r4, r4, lr
  40be36:	2300      	movs	r3, #0
  40be38:	6034      	str	r4, [r6, #0]
  40be3a:	6073      	str	r3, [r6, #4]
  40be3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40be40:	428b      	cmp	r3, r1
  40be42:	d907      	bls.n	40be54 <__udivmoddi4+0xc8>
  40be44:	2e00      	cmp	r6, #0
  40be46:	d054      	beq.n	40bef2 <__udivmoddi4+0x166>
  40be48:	2100      	movs	r1, #0
  40be4a:	e886 0021 	stmia.w	r6, {r0, r5}
  40be4e:	4608      	mov	r0, r1
  40be50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40be54:	fab3 f183 	clz	r1, r3
  40be58:	2900      	cmp	r1, #0
  40be5a:	f040 808e 	bne.w	40bf7a <__udivmoddi4+0x1ee>
  40be5e:	42ab      	cmp	r3, r5
  40be60:	d302      	bcc.n	40be68 <__udivmoddi4+0xdc>
  40be62:	4282      	cmp	r2, r0
  40be64:	f200 80fa 	bhi.w	40c05c <__udivmoddi4+0x2d0>
  40be68:	1a84      	subs	r4, r0, r2
  40be6a:	eb65 0503 	sbc.w	r5, r5, r3
  40be6e:	2001      	movs	r0, #1
  40be70:	46ac      	mov	ip, r5
  40be72:	2e00      	cmp	r6, #0
  40be74:	d03f      	beq.n	40bef6 <__udivmoddi4+0x16a>
  40be76:	e886 1010 	stmia.w	r6, {r4, ip}
  40be7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40be7e:	b912      	cbnz	r2, 40be86 <__udivmoddi4+0xfa>
  40be80:	2701      	movs	r7, #1
  40be82:	fbb7 f7f2 	udiv	r7, r7, r2
  40be86:	fab7 fe87 	clz	lr, r7
  40be8a:	f1be 0f00 	cmp.w	lr, #0
  40be8e:	d134      	bne.n	40befa <__udivmoddi4+0x16e>
  40be90:	1beb      	subs	r3, r5, r7
  40be92:	0c3a      	lsrs	r2, r7, #16
  40be94:	fa1f fc87 	uxth.w	ip, r7
  40be98:	2101      	movs	r1, #1
  40be9a:	fbb3 f8f2 	udiv	r8, r3, r2
  40be9e:	0c25      	lsrs	r5, r4, #16
  40bea0:	fb02 3318 	mls	r3, r2, r8, r3
  40bea4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40bea8:	fb0c f308 	mul.w	r3, ip, r8
  40beac:	42ab      	cmp	r3, r5
  40beae:	d907      	bls.n	40bec0 <__udivmoddi4+0x134>
  40beb0:	19ed      	adds	r5, r5, r7
  40beb2:	f108 30ff 	add.w	r0, r8, #4294967295
  40beb6:	d202      	bcs.n	40bebe <__udivmoddi4+0x132>
  40beb8:	42ab      	cmp	r3, r5
  40beba:	f200 80d1 	bhi.w	40c060 <__udivmoddi4+0x2d4>
  40bebe:	4680      	mov	r8, r0
  40bec0:	1aed      	subs	r5, r5, r3
  40bec2:	b2a3      	uxth	r3, r4
  40bec4:	fbb5 f0f2 	udiv	r0, r5, r2
  40bec8:	fb02 5510 	mls	r5, r2, r0, r5
  40becc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40bed0:	fb0c fc00 	mul.w	ip, ip, r0
  40bed4:	45a4      	cmp	ip, r4
  40bed6:	d907      	bls.n	40bee8 <__udivmoddi4+0x15c>
  40bed8:	19e4      	adds	r4, r4, r7
  40beda:	f100 33ff 	add.w	r3, r0, #4294967295
  40bede:	d202      	bcs.n	40bee6 <__udivmoddi4+0x15a>
  40bee0:	45a4      	cmp	ip, r4
  40bee2:	f200 80b8 	bhi.w	40c056 <__udivmoddi4+0x2ca>
  40bee6:	4618      	mov	r0, r3
  40bee8:	eba4 040c 	sub.w	r4, r4, ip
  40beec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40bef0:	e79d      	b.n	40be2e <__udivmoddi4+0xa2>
  40bef2:	4631      	mov	r1, r6
  40bef4:	4630      	mov	r0, r6
  40bef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40befa:	f1ce 0420 	rsb	r4, lr, #32
  40befe:	fa05 f30e 	lsl.w	r3, r5, lr
  40bf02:	fa07 f70e 	lsl.w	r7, r7, lr
  40bf06:	fa20 f804 	lsr.w	r8, r0, r4
  40bf0a:	0c3a      	lsrs	r2, r7, #16
  40bf0c:	fa25 f404 	lsr.w	r4, r5, r4
  40bf10:	ea48 0803 	orr.w	r8, r8, r3
  40bf14:	fbb4 f1f2 	udiv	r1, r4, r2
  40bf18:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40bf1c:	fb02 4411 	mls	r4, r2, r1, r4
  40bf20:	fa1f fc87 	uxth.w	ip, r7
  40bf24:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40bf28:	fb01 f30c 	mul.w	r3, r1, ip
  40bf2c:	42ab      	cmp	r3, r5
  40bf2e:	fa00 f40e 	lsl.w	r4, r0, lr
  40bf32:	d909      	bls.n	40bf48 <__udivmoddi4+0x1bc>
  40bf34:	19ed      	adds	r5, r5, r7
  40bf36:	f101 30ff 	add.w	r0, r1, #4294967295
  40bf3a:	f080 808a 	bcs.w	40c052 <__udivmoddi4+0x2c6>
  40bf3e:	42ab      	cmp	r3, r5
  40bf40:	f240 8087 	bls.w	40c052 <__udivmoddi4+0x2c6>
  40bf44:	3902      	subs	r1, #2
  40bf46:	443d      	add	r5, r7
  40bf48:	1aeb      	subs	r3, r5, r3
  40bf4a:	fa1f f588 	uxth.w	r5, r8
  40bf4e:	fbb3 f0f2 	udiv	r0, r3, r2
  40bf52:	fb02 3310 	mls	r3, r2, r0, r3
  40bf56:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40bf5a:	fb00 f30c 	mul.w	r3, r0, ip
  40bf5e:	42ab      	cmp	r3, r5
  40bf60:	d907      	bls.n	40bf72 <__udivmoddi4+0x1e6>
  40bf62:	19ed      	adds	r5, r5, r7
  40bf64:	f100 38ff 	add.w	r8, r0, #4294967295
  40bf68:	d26f      	bcs.n	40c04a <__udivmoddi4+0x2be>
  40bf6a:	42ab      	cmp	r3, r5
  40bf6c:	d96d      	bls.n	40c04a <__udivmoddi4+0x2be>
  40bf6e:	3802      	subs	r0, #2
  40bf70:	443d      	add	r5, r7
  40bf72:	1aeb      	subs	r3, r5, r3
  40bf74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40bf78:	e78f      	b.n	40be9a <__udivmoddi4+0x10e>
  40bf7a:	f1c1 0720 	rsb	r7, r1, #32
  40bf7e:	fa22 f807 	lsr.w	r8, r2, r7
  40bf82:	408b      	lsls	r3, r1
  40bf84:	fa05 f401 	lsl.w	r4, r5, r1
  40bf88:	ea48 0303 	orr.w	r3, r8, r3
  40bf8c:	fa20 fe07 	lsr.w	lr, r0, r7
  40bf90:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40bf94:	40fd      	lsrs	r5, r7
  40bf96:	ea4e 0e04 	orr.w	lr, lr, r4
  40bf9a:	fbb5 f9fc 	udiv	r9, r5, ip
  40bf9e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40bfa2:	fb0c 5519 	mls	r5, ip, r9, r5
  40bfa6:	fa1f f883 	uxth.w	r8, r3
  40bfaa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40bfae:	fb09 f408 	mul.w	r4, r9, r8
  40bfb2:	42ac      	cmp	r4, r5
  40bfb4:	fa02 f201 	lsl.w	r2, r2, r1
  40bfb8:	fa00 fa01 	lsl.w	sl, r0, r1
  40bfbc:	d908      	bls.n	40bfd0 <__udivmoddi4+0x244>
  40bfbe:	18ed      	adds	r5, r5, r3
  40bfc0:	f109 30ff 	add.w	r0, r9, #4294967295
  40bfc4:	d243      	bcs.n	40c04e <__udivmoddi4+0x2c2>
  40bfc6:	42ac      	cmp	r4, r5
  40bfc8:	d941      	bls.n	40c04e <__udivmoddi4+0x2c2>
  40bfca:	f1a9 0902 	sub.w	r9, r9, #2
  40bfce:	441d      	add	r5, r3
  40bfd0:	1b2d      	subs	r5, r5, r4
  40bfd2:	fa1f fe8e 	uxth.w	lr, lr
  40bfd6:	fbb5 f0fc 	udiv	r0, r5, ip
  40bfda:	fb0c 5510 	mls	r5, ip, r0, r5
  40bfde:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40bfe2:	fb00 f808 	mul.w	r8, r0, r8
  40bfe6:	45a0      	cmp	r8, r4
  40bfe8:	d907      	bls.n	40bffa <__udivmoddi4+0x26e>
  40bfea:	18e4      	adds	r4, r4, r3
  40bfec:	f100 35ff 	add.w	r5, r0, #4294967295
  40bff0:	d229      	bcs.n	40c046 <__udivmoddi4+0x2ba>
  40bff2:	45a0      	cmp	r8, r4
  40bff4:	d927      	bls.n	40c046 <__udivmoddi4+0x2ba>
  40bff6:	3802      	subs	r0, #2
  40bff8:	441c      	add	r4, r3
  40bffa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40bffe:	eba4 0408 	sub.w	r4, r4, r8
  40c002:	fba0 8902 	umull	r8, r9, r0, r2
  40c006:	454c      	cmp	r4, r9
  40c008:	46c6      	mov	lr, r8
  40c00a:	464d      	mov	r5, r9
  40c00c:	d315      	bcc.n	40c03a <__udivmoddi4+0x2ae>
  40c00e:	d012      	beq.n	40c036 <__udivmoddi4+0x2aa>
  40c010:	b156      	cbz	r6, 40c028 <__udivmoddi4+0x29c>
  40c012:	ebba 030e 	subs.w	r3, sl, lr
  40c016:	eb64 0405 	sbc.w	r4, r4, r5
  40c01a:	fa04 f707 	lsl.w	r7, r4, r7
  40c01e:	40cb      	lsrs	r3, r1
  40c020:	431f      	orrs	r7, r3
  40c022:	40cc      	lsrs	r4, r1
  40c024:	6037      	str	r7, [r6, #0]
  40c026:	6074      	str	r4, [r6, #4]
  40c028:	2100      	movs	r1, #0
  40c02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c02e:	4618      	mov	r0, r3
  40c030:	e6f8      	b.n	40be24 <__udivmoddi4+0x98>
  40c032:	4690      	mov	r8, r2
  40c034:	e6e0      	b.n	40bdf8 <__udivmoddi4+0x6c>
  40c036:	45c2      	cmp	sl, r8
  40c038:	d2ea      	bcs.n	40c010 <__udivmoddi4+0x284>
  40c03a:	ebb8 0e02 	subs.w	lr, r8, r2
  40c03e:	eb69 0503 	sbc.w	r5, r9, r3
  40c042:	3801      	subs	r0, #1
  40c044:	e7e4      	b.n	40c010 <__udivmoddi4+0x284>
  40c046:	4628      	mov	r0, r5
  40c048:	e7d7      	b.n	40bffa <__udivmoddi4+0x26e>
  40c04a:	4640      	mov	r0, r8
  40c04c:	e791      	b.n	40bf72 <__udivmoddi4+0x1e6>
  40c04e:	4681      	mov	r9, r0
  40c050:	e7be      	b.n	40bfd0 <__udivmoddi4+0x244>
  40c052:	4601      	mov	r1, r0
  40c054:	e778      	b.n	40bf48 <__udivmoddi4+0x1bc>
  40c056:	3802      	subs	r0, #2
  40c058:	443c      	add	r4, r7
  40c05a:	e745      	b.n	40bee8 <__udivmoddi4+0x15c>
  40c05c:	4608      	mov	r0, r1
  40c05e:	e708      	b.n	40be72 <__udivmoddi4+0xe6>
  40c060:	f1a8 0802 	sub.w	r8, r8, #2
  40c064:	443d      	add	r5, r7
  40c066:	e72b      	b.n	40bec0 <__udivmoddi4+0x134>

0040c068 <__aeabi_idiv0>:
  40c068:	4770      	bx	lr
  40c06a:	bf00      	nop
  40c06c:	65480a0a 	.word	0x65480a0a
  40c070:	206f6c6c 	.word	0x206f6c6c
  40c074:	72696843 	.word	0x72696843
  40c078:	2d202170 	.word	0x2d202170
  40c07c:	69684320 	.word	0x69684320
  40c080:	53207072 	.word	0x53207072
  40c084:	63696e6f 	.word	0x63696e6f
  40c088:	2062694c 	.word	0x2062694c
  40c08c:	6d617845 	.word	0x6d617845
  40c090:	20656c70 	.word	0x20656c70
  40c094:	6c707041 	.word	0x6c707041
  40c098:	74616369 	.word	0x74616369
  40c09c:	0a6e6f69 	.word	0x0a6e6f69
  40c0a0:	00000000 	.word	0x00000000
  40c0a4:	353a3631 	.word	0x353a3631
  40c0a8:	36353a38 	.word	0x36353a38
  40c0ac:	00000000 	.word	0x00000000
  40c0b0:	20677541 	.word	0x20677541
  40c0b4:	32203532 	.word	0x32203532
  40c0b8:	00313230 	.word	0x00313230
  40c0bc:	20202020 	.word	0x20202020
  40c0c0:	706d6f43 	.word	0x706d6f43
  40c0c4:	20656c69 	.word	0x20656c69
  40c0c8:	656d6974 	.word	0x656d6974
  40c0cc:	2520203a 	.word	0x2520203a
  40c0d0:	73252073 	.word	0x73252073
  40c0d4:	0000000a 	.word	0x0000000a
  40c0d8:	20202020 	.word	0x20202020
  40c0dc:	73726556 	.word	0x73726556
  40c0e0:	3a6e6f69 	.word	0x3a6e6f69
  40c0e4:	2e752520 	.word	0x2e752520
  40c0e8:	252e7525 	.word	0x252e7525
  40c0ec:	00000075 	.word	0x00000075
  40c0f0:	20202020 	.word	0x20202020
  40c0f4:	696e6f53 	.word	0x696e6f53
  40c0f8:	62694c63 	.word	0x62694c63
  40c0fc:	72657620 	.word	0x72657620
  40c100:	6e6f6973 	.word	0x6e6f6973
  40c104:	7525203a 	.word	0x7525203a
  40c108:	2e75252e 	.word	0x2e75252e
  40c10c:	000a7525 	.word	0x000a7525
  40c110:	0000000a 	.word	0x0000000a
  40c114:	74696e49 	.word	0x74696e49
  40c118:	696c6169 	.word	0x696c6169
  40c11c:	676e697a 	.word	0x676e697a
  40c120:	6e657320 	.word	0x6e657320
  40c124:	28726f73 	.word	0x28726f73
  40c128:	2e2e2973 	.word	0x2e2e2973
  40c12c:	0000202e 	.word	0x0000202e
  40c130:	72617473 	.word	0x72617473
  40c134:	676e6974 	.word	0x676e6974
  40c138:	6f726720 	.word	0x6f726720
  40c13c:	2e2e7075 	.word	0x2e2e7075
  40c140:	0000202e 	.word	0x0000202e
  40c144:	000a4b4f 	.word	0x000a4b4f
  40c148:	4c494146 	.word	0x4c494146
  40c14c:	203a4445 	.word	0x203a4445
  40c150:	000a6425 	.word	0x000a6425
  40c154:	736e6553 	.word	0x736e6553
  40c158:	5409726f 	.word	0x5409726f
  40c15c:	20657079 	.word	0x20657079
  40c160:	20202009 	.word	0x20202009
  40c164:	71657246 	.word	0x71657246
  40c168:	52200909 	.word	0x52200909
  40c16c:	43204354 	.word	0x43204354
  40c170:	09206c61 	.word	0x09206c61
  40c174:	6d726946 	.word	0x6d726946
  40c178:	65726177 	.word	0x65726177
  40c17c:	0000000a 	.word	0x0000000a
  40c180:	43096425 	.word	0x43096425
  40c184:	09642548 	.word	0x09642548
  40c188:	20752520 	.word	0x20752520
  40c18c:	25097a48 	.word	0x25097a48
  40c190:	75254075 	.word	0x75254075
  40c194:	2509736d 	.word	0x2509736d
  40c198:	00000a73 	.word	0x00000a73
  40c19c:	666e6f43 	.word	0x666e6f43
  40c1a0:	72756769 	.word	0x72756769
  40c1a4:	20676e69 	.word	0x20676e69
  40c1a8:	736e6573 	.word	0x736e6573
  40c1ac:	7328726f 	.word	0x7328726f
  40c1b0:	2e2e2e29 	.word	0x2e2e2e29
  40c1b4:	0000000a 	.word	0x0000000a
  40c1b8:	69766544 	.word	0x69766544
  40c1bc:	25206563 	.word	0x25206563
  40c1c0:	45203a64 	.word	0x45203a64
  40c1c4:	726f7272 	.word	0x726f7272
  40c1c8:	72756420 	.word	0x72756420
  40c1cc:	20676e69 	.word	0x20676e69
  40c1d0:	735f6863 	.word	0x735f6863
  40c1d4:	635f7465 	.word	0x635f7465
  40c1d8:	69666e6f 	.word	0x69666e6f
  40c1dc:	0a292867 	.word	0x0a292867
  40c1e0:	00000000 	.word	0x00000000
  40c1e4:	74696e49 	.word	0x74696e49
  40c1e8:	696c6169 	.word	0x696c6169
  40c1ec:	676e697a 	.word	0x676e697a
  40c1f0:	6d617320 	.word	0x6d617320
  40c1f4:	20656c70 	.word	0x20656c70
  40c1f8:	656d6974 	.word	0x656d6974
  40c1fc:	6f662072 	.word	0x6f662072
  40c200:	64252072 	.word	0x64252072
  40c204:	6920736d 	.word	0x6920736d
  40c208:	7265746e 	.word	0x7265746e
  40c20c:	2e6c6176 	.word	0x2e6c6176
  40c210:	00202e2e 	.word	0x00202e2e
  40c214:	72617453 	.word	0x72617453
  40c218:	676e6974 	.word	0x676e6974
  40c21c:	61656d20 	.word	0x61656d20
  40c220:	65727573 	.word	0x65727573
  40c224:	746e656d 	.word	0x746e656d
  40c228:	00000a73 	.word	0x00000a73
  40c22c:	454c4449 	.word	0x454c4449
  40c230:	00000000 	.word	0x00000000
  40c234:	45455246 	.word	0x45455246
  40c238:	004e5552 	.word	0x004e5552
  40c23c:	47495254 	.word	0x47495254
  40c240:	45524547 	.word	0x45524547
  40c244:	58545f44 	.word	0x58545f44
  40c248:	0058525f 	.word	0x0058525f
  40c24c:	47495254 	.word	0x47495254
  40c250:	45524547 	.word	0x45524547
  40c254:	58525f44 	.word	0x58525f44
  40c258:	4c4e4f5f 	.word	0x4c4e4f5f
  40c25c:	00000059 	.word	0x00000059
  40c260:	4e4b4e55 	.word	0x4e4b4e55
  40c264:	004e574f 	.word	0x004e574f
  40c268:	736e6553 	.word	0x736e6553
  40c26c:	2520726f 	.word	0x2520726f
  40c270:	6d093a64 	.word	0x6d093a64
  40c274:	725f7861 	.word	0x725f7861
  40c278:	65676e61 	.word	0x65676e61
  40c27c:	6d64253d 	.word	0x6d64253d
  40c280:	6d09206d 	.word	0x6d09206d
  40c284:	3d65646f 	.word	0x3d65646f
  40c288:	20207325 	.word	0x20207325
  40c28c:	00000000 	.word	0x00000000
  40c290:	74617473 	.word	0x74617473
  40c294:	725f6369 	.word	0x725f6369
  40c298:	65676e61 	.word	0x65676e61
  40c29c:	2064253d 	.word	0x2064253d
  40c2a0:	706d6173 	.word	0x706d6173
  40c2a4:	0073656c 	.word	0x0073656c
  40c2a8:	4420200a 	.word	0x4420200a
  40c2ac:	63657465 	.word	0x63657465
  40c2b0:	6e6f6974 	.word	0x6e6f6974
  40c2b4:	72687420 	.word	0x72687420
  40c2b8:	6f687365 	.word	0x6f687365
  40c2bc:	3a73646c 	.word	0x3a73646c
  40c2c0:	0000000a 	.word	0x0000000a
  40c2c4:	20202020 	.word	0x20202020
  40c2c8:	09642520 	.word	0x09642520
  40c2cc:	72617473 	.word	0x72617473
  40c2d0:	25203a74 	.word	0x25203a74
  40c2d4:	6c096432 	.word	0x6c096432
  40c2d8:	6c657665 	.word	0x6c657665
  40c2dc:	6425203a 	.word	0x6425203a
  40c2e0:	0000000a 	.word	0x0000000a
  40c2e4:	76654420 	.word	0x76654420
  40c2e8:	20656369 	.word	0x20656369
  40c2ec:	203a6425 	.word	0x203a6425
  40c2f0:	6f727245 	.word	0x6f727245
  40c2f4:	75642072 	.word	0x75642072
  40c2f8:	676e6972 	.word	0x676e6972
  40c2fc:	5f686320 	.word	0x5f686320
  40c300:	5f746567 	.word	0x5f746567
  40c304:	65726874 	.word	0x65726874
  40c308:	6c6f6873 	.word	0x6c6f6873
  40c30c:	29287364 	.word	0x29287364
  40c310:	00000000 	.word	0x00000000
  40c314:	76654420 	.word	0x76654420
  40c318:	20656369 	.word	0x20656369
  40c31c:	203a6425 	.word	0x203a6425
  40c320:	6f727245 	.word	0x6f727245
  40c324:	75642072 	.word	0x75642072
  40c328:	676e6972 	.word	0x676e6972
  40c32c:	5f686320 	.word	0x5f686320
  40c330:	5f746567 	.word	0x5f746567
  40c334:	666e6f63 	.word	0x666e6f63
  40c338:	29286769 	.word	0x29286769
  40c33c:	0000000a 	.word	0x0000000a
  40c340:	74726f50 	.word	0x74726f50
  40c344:	3a642520 	.word	0x3a642520
  40c348:	20202020 	.word	0x20202020
  40c34c:	20202020 	.word	0x20202020
  40c350:	6f6e2020 	.word	0x6f6e2020
  40c354:	72617420 	.word	0x72617420
  40c358:	20746567 	.word	0x20746567
  40c35c:	6e756f66 	.word	0x6e756f66
  40c360:	20202064 	.word	0x20202064
  40c364:	20202020 	.word	0x20202020
  40c368:	00000020 	.word	0x00000020
  40c36c:	74726f50 	.word	0x74726f50
  40c370:	3a642520 	.word	0x3a642520
  40c374:	61522020 	.word	0x61522020
  40c378:	3a65676e 	.word	0x3a65676e
  40c37c:	2e302520 	.word	0x2e302520
  40c380:	6d206631 	.word	0x6d206631
  40c384:	4120206d 	.word	0x4120206d
  40c388:	203a706d 	.word	0x203a706d
  40c38c:	20207525 	.word	0x20207525
  40c390:	00000000 	.word	0x00000000
  40c394:	72696843 	.word	0x72696843
  40c398:	65732070 	.word	0x65732070
  40c39c:	726f736e 	.word	0x726f736e
  40c3a0:	00203020 	.word	0x00203020
  40c3a4:	6e756f66 	.word	0x6e756f66
  40c3a8:	00000a64 	.word	0x00000a64
  40c3ac:	20746f6e 	.word	0x20746f6e
  40c3b0:	6e756f66 	.word	0x6e756f66
  40c3b4:	00000a64 	.word	0x00000a64
  40c3b8:	72696843 	.word	0x72696843
  40c3bc:	65732070 	.word	0x65732070
  40c3c0:	726f736e 	.word	0x726f736e
  40c3c4:	00203120 	.word	0x00203120
  40c3c8:	72696843 	.word	0x72696843
  40c3cc:	65732070 	.word	0x65732070
  40c3d0:	726f736e 	.word	0x726f736e
  40c3d4:	00203220 	.word	0x00203220
  40c3d8:	72696843 	.word	0x72696843
  40c3dc:	65732070 	.word	0x65732070
  40c3e0:	726f736e 	.word	0x726f736e
  40c3e4:	00203320 	.word	0x00203320
  40c3e8:	72696843 	.word	0x72696843
  40c3ec:	65732070 	.word	0x65732070
  40c3f0:	726f736e 	.word	0x726f736e
  40c3f4:	64644920 	.word	0x64644920
  40c3f8:	6c25203a 	.word	0x6c25203a
  40c3fc:	41752064 	.word	0x41752064
  40c400:	00000a0a 	.word	0x00000a0a

0040c404 <adc_interrupt_mask>:
  40c404:	00000001 00000002 00000004 00000008     ................
  40c414:	00000010 00000020 00000040 00000080     .... ...@.......
  40c424:	00800000 01000000 02000000 04000000     ................
  40c434:	08000000 10000000 00000000 00000000     ................
	...
  40c464:	6d727067 37765f74 00000000 00766564     gprmt_v7....dev.

0040c474 <ram_ch201_gprmt_init>:
  40c474:	07d01388 01900320 00af00fa 00000006     .... ...........
  40c484:	0000fa00 0c000064 00010000              ....d.......

0040c490 <ch201_gprmt_fw>:
  40c490:	1209120a 12071208 12051206 80311204     ..............1.
  40c4a0:	4d81000c 93c2000a 20050208 01c24036     ...M....... 6@..
  40c4b0:	012c4034 42563c04 42140208 43050216     4@,..<VB...B...C
  40c4c0:	4f81430f 4f810006 430a0004 247b930c     .C.O...O...C..{$
  40c4d0:	00024c81 43474308 00129038 90f22c1c     .L...CGC8....,..
  40c4e0:	02010020 480f2418 403e5f0f 5f0e022a      ....$.H._>@*.._
  40c4f0:	0932503f 411d432c 934d000a 4e2d2006     ?P2.,C.A..M.. -N
  40c500:	00008fae 00004d8f 4eaf3c02 832e0000     .....M...<.N....
  40c510:	831c832f 411f23f0 934f000a 480e204f     /....#.A..O.O .H
  40c520:	960a5e0e 5357201c 24129357 240d9367     .^... WSW..$g..$
  40c530:	00039077 92672407 43062402 425f3c0c     w....$g..$.C.<_B
  40c540:	3c080215 020d425f 425f3c05 3c02020c     ...<_B...<_B...<
  40c550:	0209425f 474f5f06 4f145f0f 403d0216     _B..._OG._.O..=@
  40c560:	480f0228 5f0f531f 4f815d0f 5e0d0000     (..H.S._.].O...^
  40c570:	4d2c4d0b 12b04f2d 9381ff26 201e0006     .M,M-O..&...... 
  40c580:	0211425f 9a0f5f0f 93052c19 9c042005     _B..._...,... ..
  40c590:	4a812c15 43150008 412f4b2c 12b04f2d     .,.J...C,K/A-O..
  40c5a0:	911cfe16 28030004 00044c81 4a093c07     .......(.L...<.J
  40c5b0:	00088119 43058319 00064391 531a5328     .......C.C..(S.S
  40c5c0:	00028391 93052389 93812006 20060006     .....#... ..... 
  40c5d0:	022443b2 4a093c42 00088119 0004411c     .C$.B<.J.....A..
  40c5e0:	c3124c08 411a1008 590a0008 fffd9039     .L.....A...Y9...
  40c5f0:	403f3818 4a060228 53165606 5f065606     .8?@(..J.V.S.V._
  40c600:	57074a07 5f075707 4c055229 462d472c     .J.W.W._)R.L,G-F
  40c610:	fe1612b0 2805980c 82278226 8319831a     .......(&.'.....
  40c620:	4c0e23f4 411f5e0e c31f0004 8c058e0f     .#.L.^.A........
  40c630:	434e423d 9f055e4e 850f2c02 5f0f535e     =BNCN^...,..^S._
  40c640:	23f8831d 12b04a0c 4e4eff16 de0c110e     ...#.J....NN....
  40c650:	02244c82 00044192 50310226 4030000c     .L$..A..&.1P..0@
  40c660:	120fffa6 120d120e 120b120c 403a120a     ..............:@
  40c670:	4a820177 c3d201a6 93c2097c 203a0214     w..J....|.....: 
  40c680:	421c431b 421d023a 12b00238 921cff26     .C.B:..B8...&...
  40c690:	28190980 023a421f 821f110f 931f0238     ...(.B:.....8...
  40c6a0:	433f3802 431f3c01 098293c2 425e2407     .8?C.<.C.....$^B
  40c6b0:	118e0982 24029e0f 3c02430b 097e5f82     .......$.C.<._~.
  40c6c0:	09824fc2 50b23c0f 097e0014 012d90b2     .O...<.P..~...-.
  40c6d0:	2806097e 00c880b2 c312097e 09801012     ~..(....~.......
  40c6e0:	098243c2 203c930b 021443d2 3f1e40b2     .C....< .C...@.?
  40c6f0:	3c360962 021493d2 90f22031 09680003     b.6<....1 ....h.
  40c700:	93c2240a 20040968 185840b2 3c150954     .$..h.. .@X.T..<
  40c710:	096883d2 421c3c12 421d023a 12b00238     ..h..<.B:..B8...
  40c720:	9c82ff26 2805097a 097a4c82 09765392     &...z..(.Lz..Sv.
  40c730:	43e23c04 83920968 93e20976 240b0968     .<.Ch...v...h..$
  40c740:	096893c2 43e2200d d3e20214 40b2097c     ..h.. .C....|..@
  40c750:	01d01080 43d23c05 3c020201 01f04382     .....<.C...<.C..
  40c760:	000390f2 2c070968 0207425c 425d5c0c     ....h..,\B...\]B
  40c770:	12b00968 93e2f800 280d0214 01e0d3d2     h..........(....
  40c780:	01e0c3d2 067740b2 423c01a6 ffc412b0     .....@w...<B....
  40c790:	01a64a82 435c3c05 fc3612b0 0192c2a2     .J...<\C..6.....
  40c7a0:	0192d2a2 096642d2 c0b101e0 000c00f0     .....Bf.........
  40c7b0:	413b413a 413d413c 413f413e 120a1300     :A;A<A=A>A?A....
  40c7c0:	5a8040b2 42e20120 43d201e0 40f201e2     .@.Z ..B...C...@
  40c7d0:	02010040 003c40f2 40f20207 02040006     @....@<....@....
  40c7e0:	000940f2 40f20200 0208001a 000d40f2     .@.....@.....@..
  40c7f0:	40f20209 020c0011 001740f2 40f2020d     ...@.....@.....@
  40c800:	02150028 001e40f2 403f0210 403d0216     (....@....?@..=@
  40c810:	403e0006 532f096a fffe4ebf 23fb831d     ..>@j./S.N.....#
  40c820:	020543d2 021143c2 008040b2 40f20202     .C...C...@.....@
  40c830:	01c20003 020040b2 40b201a6 01a60600     .....@.....@....
  40c840:	022840b2 40b201b0 01b20012 017740b2     .@(....@.....@w.
  40c850:	40b201a6 01900080 000740b2 430a0192     ...@.....@.....C
  40c860:	93c23c05 2402097c 0018d032 0201425f     .<..|..$2..._B..
  40c870:	24239f0a 0201425a 803f4a0f 241b0010     ..#$ZB...J?....$
  40c880:	0010803f 803f2418 20100020 021443c2     ?....$?. .. .C..
  40c890:	096842e2 181e40b2 421f0962 503f097e     .Bh..@..b..B~.?P
  40c8a0:	4f821000 435c01f0 fc3612b0 096642e2     ...O..\C..6..Bf.
  40c8b0:	01e0c3e2 d3e23c02 93c201e0 23d1097c     .....<......|..#
  40c8c0:	0058d032 d3d23fd3 421f097c 503f097e     2.X..?..|..B~.?P
  40c8d0:	4f821000 90f201f0 02010040 92d22449     ...O....@...I$..
  40c8e0:	09780207 42d22431 09780207 0204425f     ..x.1$.B..x._B..
  40c8f0:	803f5f0f 425e000b 5e0e0207 803e8f0e     ._?...^B...^..>.
  40c900:	93c2000b 20040968 185840b2 3c030954     ....h.. .@X.T..<
  40c910:	245840b2 5f0f0954 5f0f5f0f 2c00503f     .@X$T.._._._?P.,
  40c920:	09564f82 4ff8403b 0958403d b03e436f     .OV.;@.O=@X.oC>.
  40c930:	2017ff80 5e0e5e0e 503e5e0e 4e8d4c00     ... .^.^.^>P.L.N
  40c940:	535f0000 09694fc2 2004934c 108240b2     .._S.Oi.L.. .@..
  40c950:	3c1901a2 108640b2 429201a2 01a00962     ...<.@.....Bb...
  40c960:	532d3c12 fffe4b8d 803e535f 3fdf007f     .<-S.K.._S>....?
  40c970:	204040b2 43d20954 42920969 01a00962     .@@ T..Ci..Bb...
  40c980:	108640b2 425f01a2 930f0969 403e2406     .@...._Bi....$>@
  40c990:	4eb20954 831f01a4 93c223fc 24030214     T..N.....#.....$
  40c9a0:	0018d0b2 439201a2 43a201ae 413001ae     .......C...C..0A
  40c9b0:	120e120f 120c120d 120a120b 0202421d     .............B..
  40c9c0:	93e24d0a 201d0201 098483d2 425e201a     .M..... ..... ^B
  40c9d0:	4ec20205 425c0984 425f0207 5f0f0207     ...N..\B.._B..._
  40c9e0:	5f0f5f0f 936e8c0f 9f0a2808 5d0a2c06     ._._..n..(...,.]
  40c9f0:	098483d2 098493e2 435c2ff8 fc3612b0     ........./\C..6.
  40ca00:	40b23c09 01a60677 12b0423c 40b2ffc4     .<.@w...<B.....@
  40ca10:	01a60177 01904a82 00f0c0b1 413a000c     w....J........:A
  40ca20:	413c413b 413e413d 1300413f 425f120f     ;A<A=A>A?A...._B
  40ca30:	930f0985 831f2415 831f2426 90b22029     .....$..&$..) ..
  40ca40:	09640022 421f2c07 42df0964 020001c1     ".d..,.Bd..B....
  40ca50:	09645392 096783d2 43c2201b 3c180985     .Sd...g.. .C...<
  40ca60:	01c1425f 09644f82 098543d2 02004fd2     _B...Od..C...O..
  40ca70:	903f01c0 200c0006 002440f2 40b201e0     ..?.... .@$....@
  40ca80:	01d80003 42d23c05 096701c1 098543e2     .....<.B..g..C..
  40ca90:	0010d0f2 d0f201c2 01c20020 00f0c0b1     ........ .......
  40caa0:	413f0002 120a1300 3403931d 531de33d     ..?A.......4=..S
  40cab0:	e33c3c02 4d0e531c 110e4c0f 430b110f     .<<..S.M.L.....C
  40cac0:	4b0d4e0c fece12b0 4f0c4c0a 12b04b0d     .N.K.....L.O.K..
  40cad0:	931ffece 8c0e3403 3c025a0f 8a0f5c0e     .....4...Z.<.\..
  40cae0:	922b531b 4e0c3bed 4130413a 120e120f     .S+..;.N:A0A....
  40caf0:	120c120d b3e2120b 241201e0 01e042d2     ...........$.B..
  40cb00:	c3e20966 c2a201e0 434c0192 002090f2     f.........LC.. .
  40cb10:	24010201 12b0435c c0b1fc36 000a00f0     ...$\C..6.......
  40cb20:	413c413b 413e413d 1300413f 43c2120f     ;A<A=A>A?A.....C
  40cb30:	53920985 90b20964 09640730 43822803     ...Sd...0.d..(.C
  40cb40:	3c050964 0964421f 02004fd2 d0f201c0     d..<.Bd..O......
  40cb50:	01c20020 00f0c0b1 413f0002 f03d1300      .........?A..=.
  40cb60:	e03d000f 5d0d000f 110c5d00 110c110c     ..=....].]......
  40cb70:	110c110c 110c110c 110c110c 110c110c     ................
  40cb80:	110c110c 110c110c f03d4130 e03d000f     ........0A=...=.
  40cb90:	5d0d000f 5c0c5d00 5c0c5c0c 5c0c5c0c     ...].].\.\.\.\.\
  40cba0:	5c0c5c0c 5c0c5c0c 5c0c5c0c 5c0c5c0c     .\.\.\.\.\.\.\.\
  40cbb0:	5c0c5c0c 931c4130 e33c3402 4c0f531c     .\.\0A...4<..S.L
  40cbc0:	3402931d 531de33d 9f0c4d0c 4c0e2c03     ...4=..S.M...,.L
  40cbd0:	4e0f4f0c 100fc312 5f0c110f 120f4130     .O.N......._0A..
  40cbe0:	ffeff0b2 403f01a2 521f2800 4f820976     ......?@.(.Rv..O
  40cbf0:	c0b101a0 000200f0 1300413f 01da4292     ........?A...B..
  40cc00:	4382020a 42e201d8 c0b101e0 000000f0     ...C...B........
  40cc10:	40311300 12b00a00 430cffd2 fb2e12b0     ..1@.......C....
  40cc20:	ffd612b0 097cc3e2 01d24292 c0b10222     ......|..B.."...
  40cc30:	000000f0 41341300 41364135 41384137     ......4A5A6A7A8A
  40cc40:	413a4139 40b24130 01a61377 00f0c0b1     9A:A0A.@w.......
  40cc50:	13000000 4303831c 413023fd 0010d032     .......C.#0A2...
  40cc60:	431c3ffd 43034130 13003fff 00000000     .?.C0A.C.?......
  40cc70:	fd9cfe9c ff6cffda 0000fe5c f9d2ffcc     ......l.\.......
  40cc80:	ffb6ff4e 0000ffcc fd20ff94 ff82ffcc     N......... .....
  40cc90:	000009c4 000009c4 00000bc4 fffc4003     .............@..
  40cca0:	000f4240 000000c0 00000800 00000000     @B..............

0040ccb0 <_global_impure_ptr>:
  40ccb0:	2000017c 00464e49 00666e69 004e414e     |.. INF.inf.NAN.
  40ccc0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  40ccd0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  40cce0:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  40ccf0:	4e614e00 00000000                       .NaN....

0040ccf8 <__sf_fake_stderr>:
	...

0040cd18 <__sf_fake_stdin>:
	...

0040cd38 <__sf_fake_stdout>:
	...

0040cd58 <__mprec_bigtens>:
  40cd58:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40cd68:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40cd78:	7f73bf3c 75154fdd                       <.s..O.u

0040cd80 <__mprec_tens>:
  40cd80:	00000000 3ff00000 00000000 40240000     .......?......$@
  40cd90:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40cda0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40cdb0:	00000000 412e8480 00000000 416312d0     .......A......cA
  40cdc0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40cdd0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40cde0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40cdf0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40ce00:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40ce10:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40ce20:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40ce30:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40ce40:	79d99db4 44ea7843                       ...yCx.D

0040ce48 <p05.6047>:
  40ce48:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  40ce58:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  40ce68:	5849534f 00002e00                                OSIX...

0040ce6f <_ctype_>:
  40ce6f:	20202000 20202020 28282020 20282828     .         ((((( 
  40ce7f:	20202020 20202020 20202020 20202020                     
  40ce8f:	10108820 10101010 10101010 10101010      ...............
  40ce9f:	04040410 04040404 10040404 10101010     ................
  40ceaf:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40cebf:	01010101 01010101 01010101 10101010     ................
  40cecf:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40cedf:	02020202 02020202 02020202 10101010     ................
  40ceef:	00000020 00000000 00000000 00000000      ...............
	...

0040cf70 <_init>:
  40cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cf72:	bf00      	nop
  40cf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40cf76:	bc08      	pop	{r3}
  40cf78:	469e      	mov	lr, r3
  40cf7a:	4770      	bx	lr

0040cf7c <__init_array_start>:
  40cf7c:	0040016d 	.word	0x0040016d

0040cf80 <_fini>:
  40cf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cf82:	bf00      	nop
  40cf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40cf86:	bc08      	pop	{r3}
  40cf88:	469e      	mov	lr, r3
  40cf8a:	4770      	bx	lr

0040cf8c <__fini_array_start>:
  40cf8c:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <efc_perform_read_sequence>:
2000000a:	b480      	push	{r7}
2000000c:	b089      	sub	sp, #36	; 0x24
2000000e:	af00      	add	r7, sp, #0
20000010:	60f8      	str	r0, [r7, #12]
20000012:	60b9      	str	r1, [r7, #8]
20000014:	607a      	str	r2, [r7, #4]
20000016:	603b      	str	r3, [r7, #0]
20000018:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000001c:	61bb      	str	r3, [r7, #24]
2000001e:	683b      	ldr	r3, [r7, #0]
20000020:	2b00      	cmp	r3, #0
20000022:	d101      	bne.n	20000028 <efc_perform_read_sequence+0x1e>
20000024:	2302      	movs	r3, #2
20000026:	e03c      	b.n	200000a2 <efc_perform_read_sequence+0x98>
20000028:	68fb      	ldr	r3, [r7, #12]
2000002a:	681b      	ldr	r3, [r3, #0]
2000002c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000030:	68fb      	ldr	r3, [r7, #12]
20000032:	601a      	str	r2, [r3, #0]
20000034:	68bb      	ldr	r3, [r7, #8]
20000036:	b2db      	uxtb	r3, r3
20000038:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
2000003c:	68fb      	ldr	r3, [r7, #12]
2000003e:	605a      	str	r2, [r3, #4]
20000040:	68fb      	ldr	r3, [r7, #12]
20000042:	689b      	ldr	r3, [r3, #8]
20000044:	617b      	str	r3, [r7, #20]
20000046:	697b      	ldr	r3, [r7, #20]
20000048:	f003 0301 	and.w	r3, r3, #1
2000004c:	2b01      	cmp	r3, #1
2000004e:	d0f7      	beq.n	20000040 <efc_perform_read_sequence+0x36>
20000050:	2300      	movs	r3, #0
20000052:	61fb      	str	r3, [r7, #28]
20000054:	e00c      	b.n	20000070 <efc_perform_read_sequence+0x66>
20000056:	69fb      	ldr	r3, [r7, #28]
20000058:	009b      	lsls	r3, r3, #2
2000005a:	683a      	ldr	r2, [r7, #0]
2000005c:	4413      	add	r3, r2
2000005e:	69fa      	ldr	r2, [r7, #28]
20000060:	0092      	lsls	r2, r2, #2
20000062:	69b9      	ldr	r1, [r7, #24]
20000064:	440a      	add	r2, r1
20000066:	6812      	ldr	r2, [r2, #0]
20000068:	601a      	str	r2, [r3, #0]
2000006a:	69fb      	ldr	r3, [r7, #28]
2000006c:	3301      	adds	r3, #1
2000006e:	61fb      	str	r3, [r7, #28]
20000070:	69fa      	ldr	r2, [r7, #28]
20000072:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000074:	429a      	cmp	r2, r3
20000076:	d3ee      	bcc.n	20000056 <efc_perform_read_sequence+0x4c>
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	b2db      	uxtb	r3, r3
2000007c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	605a      	str	r2, [r3, #4]
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	689b      	ldr	r3, [r3, #8]
20000088:	617b      	str	r3, [r7, #20]
2000008a:	697b      	ldr	r3, [r7, #20]
2000008c:	f003 0301 	and.w	r3, r3, #1
20000090:	2b01      	cmp	r3, #1
20000092:	d1f7      	bne.n	20000084 <efc_perform_read_sequence+0x7a>
20000094:	68fb      	ldr	r3, [r7, #12]
20000096:	681b      	ldr	r3, [r3, #0]
20000098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
2000009c:	68fb      	ldr	r3, [r7, #12]
2000009e:	601a      	str	r2, [r3, #0]
200000a0:	2300      	movs	r3, #0
200000a2:	4618      	mov	r0, r3
200000a4:	3724      	adds	r7, #36	; 0x24
200000a6:	46bd      	mov	sp, r7
200000a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200000ac:	4770      	bx	lr

200000ae <efc_write_fmr>:
200000ae:	b480      	push	{r7}
200000b0:	b083      	sub	sp, #12
200000b2:	af00      	add	r7, sp, #0
200000b4:	6078      	str	r0, [r7, #4]
200000b6:	6039      	str	r1, [r7, #0]
200000b8:	687b      	ldr	r3, [r7, #4]
200000ba:	683a      	ldr	r2, [r7, #0]
200000bc:	601a      	str	r2, [r3, #0]
200000be:	bf00      	nop
200000c0:	370c      	adds	r7, #12
200000c2:	46bd      	mov	sp, r7
200000c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200000c8:	4770      	bx	lr

200000ca <efc_perform_fcr>:
200000ca:	b480      	push	{r7}
200000cc:	b085      	sub	sp, #20
200000ce:	af00      	add	r7, sp, #0
200000d0:	6078      	str	r0, [r7, #4]
200000d2:	6039      	str	r1, [r7, #0]
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	683a      	ldr	r2, [r7, #0]
200000d8:	605a      	str	r2, [r3, #4]
200000da:	687b      	ldr	r3, [r7, #4]
200000dc:	689b      	ldr	r3, [r3, #8]
200000de:	60fb      	str	r3, [r7, #12]
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	f003 0301 	and.w	r3, r3, #1
200000e6:	2b01      	cmp	r3, #1
200000e8:	d1f7      	bne.n	200000da <efc_perform_fcr+0x10>
200000ea:	68fb      	ldr	r3, [r7, #12]
200000ec:	f003 030e 	and.w	r3, r3, #14
200000f0:	4618      	mov	r0, r3
200000f2:	3714      	adds	r7, #20
200000f4:	46bd      	mov	sp, r7
200000f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200000fa:	4770      	bx	lr

200000fc <chirp_ch201_thresholds>:
200000fc:	0000 1388 001a 07d0 0027 0320 0038 0190     ........'. .8...
2000010c:	004f 00fa 0059 00af                         O...Y...

20000114 <g_interrupt_enabled>:
20000114:	0001 0000                                   ....

20000118 <chirp_i2c_addrs>:
20000118:	2b2d 2a2c                                   -+,*

2000011c <chirp_i2c_buses>:
2000011c:	0000 0101                                   ....

20000120 <chirp_pin_prog>:
20000120:	0010 0000 0012 0000 0013 0000 001f 0000     ................

20000130 <chirp_pin_io>:
20000130:	0015 0000 0016 0000 0017 0000 001d 0000     ................

20000140 <chirp_pin_io_irq>:
20000140:	0000 0020 0000 0040 0000 0080 0000 2000     .. ...@........ 

20000150 <chirp_led_pins>:
20000150:	0000 0000 002f 0000 0005 0000 0001 0000     ..../...........

20000160 <ultrasound_timer_period_in_tick>:
20000160:	ffff 0000                                   ....

20000164 <adc_local>:
20000164:	8000 4003                                   ...@

20000168 <adc_reg>:
20000168:	8094 4003                                   ...@

2000016c <ul_flash_in_wait_mode>:
2000016c:	0000 0020                                   .. .

20000170 <SystemCoreClock>:
20000170:	1200 007a                                   ..z.

20000174 <ch201_gprmt_version>:
20000174:	c464 0040                                   d.@.

20000178 <_impure_ptr>:
20000178:	017c 2000                                   |.. 

2000017c <impure_data>:
2000017c:	0000 0000 cd18 0040 cd38 0040 ccf8 0040     ......@.8.@...@.
	...

200001dc <__global_locale>:
200001dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200001fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000021c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000023c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000025c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000027c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000029c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200002bc:	b3e1 0040 b395 0040 0000 0000 ce6f 0040     ..@...@.....o.@.
200002cc:	ce6d 0040 ce59 0040 ce59 0040 ce59 0040     m.@.Y.@.Y.@.Y.@.
200002dc:	ce59 0040 ce59 0040 ce59 0040 ce59 0040     Y.@.Y.@.Y.@.Y.@.
200002ec:	ce59 0040 ce59 0040 ffff ffff ffff ffff     Y.@.Y.@.........
200002fc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000324:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
