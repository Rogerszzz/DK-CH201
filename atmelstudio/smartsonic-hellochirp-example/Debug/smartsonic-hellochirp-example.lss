
smartsonic-hellochirp-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d018  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040d018  0040d018  0001d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000348  20000000  0040d020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000005e8  20000348  0040d368  00020348  2**3
                  ALLOC
  4 .stack        00003000  20000930  0040d950  00020348  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020376  2**0
                  CONTENTS, READONLY
  7 .debug_info   00034feb  00000000  00000000  000203cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005ccc  00000000  00000000  000553ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ddf6  00000000  00000000  0005b086  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000018c8  00000000  00000000  00068e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001778  00000000  00000000  0006a744  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d3ee  00000000  00000000  0006bebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000075e7  00000000  00000000  000792aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007594  00000000  00000000  00080894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 39 00 20 31 52 40 00 01 53 40 00 01 53 40 00     09. 1R@..S@..S@.
  400010:	01 53 40 00 01 53 40 00 01 53 40 00 00 00 00 00     .S@..S@..S@.....
	...
  40002c:	01 53 40 00 01 53 40 00 00 00 00 00 01 53 40 00     .S@..S@......S@.
  40003c:	01 53 40 00 01 53 40 00 01 53 40 00 01 53 40 00     .S@..S@..S@..S@.
  40004c:	79 13 40 00 01 53 40 00 01 53 40 00 01 53 40 00     y.@..S@..S@..S@.
  40005c:	01 53 40 00 01 53 40 00 dd 11 40 00 00 00 00 00     .S@..S@...@.....
  40006c:	d1 10 40 00 09 40 40 00 01 53 40 00 01 53 40 00     ..@..@@..S@..S@.
  40007c:	01 53 40 00 01 53 40 00 01 53 40 00 01 53 40 00     .S@..S@..S@..S@.
  40008c:	f1 11 40 00 01 53 40 00 01 53 40 00 01 53 40 00     ..@..S@..S@..S@.
  40009c:	91 13 40 00 a1 13 40 00 01 53 40 00 01 53 40 00     ..@...@..S@..S@.
  4000ac:	01 53 40 00 01 53 40 00 25 37 40 00 01 53 40 00     .S@..S@.%7@..S@.
	...
  4000fc:	01 53 40 00 01 53 40 00 01 53 40 00 00 00 00 00     .S@..S@..S@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000348 	.word	0x20000348
  400164:	00000000 	.word	0x00000000
  400168:	0040d020 	.word	0x0040d020

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	0040d020 	.word	0x0040d020
  4001a8:	2000034c 	.word	0x2000034c
  4001ac:	0040d020 	.word	0x0040d020
	...

004001b8 <main>:
 * and configuration, callback routine registration, and timer setup.  After 
 * the initialization sequence completes, this routine enters an infinite 
 * loop that will run for the remainder of the application execution.
 */

int main(void) {
  4001b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4001bc:	b097      	sub	sp, #92	; 0x5c
  4001be:	af04      	add	r7, sp, #16
	ch_group_t	*grp_ptr = &chirp_group;
  4001c0:	4b93      	ldr	r3, [pc, #588]	; (400410 <main+0x258>)
  4001c2:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t chirp_error = 0;
  4001c4:	2300      	movs	r3, #0
  4001c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	 *
	 *   The chbsp_board_init() function also initializes fields within the 
	 *   sensor group descriptor, including number of supported sensors and 
	 *   the RTC clock calibration pulse length.
	 */
	chbsp_board_init(grp_ptr);
  4001ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4001cc:	4b91      	ldr	r3, [pc, #580]	; (400414 <main+0x25c>)
  4001ce:	4798      	blx	r3

	printf("\n\nHello Chirp! - Chirp SonicLib Example Application\n");
  4001d0:	4891      	ldr	r0, [pc, #580]	; (400418 <main+0x260>)
  4001d2:	4b92      	ldr	r3, [pc, #584]	; (40041c <main+0x264>)
  4001d4:	4798      	blx	r3
	printf("    Compile time:  %s %s\n", __DATE__, __TIME__);
  4001d6:	4a92      	ldr	r2, [pc, #584]	; (400420 <main+0x268>)
  4001d8:	4992      	ldr	r1, [pc, #584]	; (400424 <main+0x26c>)
  4001da:	4893      	ldr	r0, [pc, #588]	; (400428 <main+0x270>)
  4001dc:	4b8f      	ldr	r3, [pc, #572]	; (40041c <main+0x264>)
  4001de:	4798      	blx	r3
	printf("    Version: %u.%u.%u", APP_VERSION_MAJOR, APP_VERSION_MINOR,
  4001e0:	2300      	movs	r3, #0
  4001e2:	220b      	movs	r2, #11
  4001e4:	2101      	movs	r1, #1
  4001e6:	4891      	ldr	r0, [pc, #580]	; (40042c <main+0x274>)
  4001e8:	4c8c      	ldr	r4, [pc, #560]	; (40041c <main+0x264>)
  4001ea:	47a0      	blx	r4
										  APP_VERSION_REV);
	printf("    SonicLib version: %u.%u.%u\n", SONICLIB_VER_MAJOR, 
  4001ec:	2302      	movs	r3, #2
  4001ee:	2201      	movs	r2, #1
  4001f0:	2102      	movs	r1, #2
  4001f2:	488f      	ldr	r0, [pc, #572]	; (400430 <main+0x278>)
  4001f4:	4c89      	ldr	r4, [pc, #548]	; (40041c <main+0x264>)
  4001f6:	47a0      	blx	r4
										  SONICLIB_VER_MINOR, SONICLIB_VER_REV);
	printf("\n");
  4001f8:	488e      	ldr	r0, [pc, #568]	; (400434 <main+0x27c>)
  4001fa:	4b88      	ldr	r3, [pc, #544]	; (40041c <main+0x264>)
  4001fc:	4798      	blx	r3
	printf("\n");
  4001fe:	488d      	ldr	r0, [pc, #564]	; (400434 <main+0x27c>)
  400200:	4b86      	ldr	r3, [pc, #536]	; (40041c <main+0x264>)
  400202:	4798      	blx	r3

	/* Get the number of (possible) sensor devices on the board
	 *   Set by the BSP during chbsp_board_init() 
	 */
	num_ports = ch_get_num_ports(grp_ptr);
  400204:	6b78      	ldr	r0, [r7, #52]	; 0x34
  400206:	4b8c      	ldr	r3, [pc, #560]	; (400438 <main+0x280>)
  400208:	4798      	blx	r3
  40020a:	4603      	mov	r3, r0
  40020c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	 *   it will be added to, the device number within the group, and the sensor
	 *   firmware initialization routine that will be used.  (The sensor 
	 *   firmware selection effectively specifies whether it is a CH101 or 
	 *   CH201 sensor, as well as the exact feature set.)
	 */
	printf("Initializing sensor(s)... ");
  400210:	488a      	ldr	r0, [pc, #552]	; (40043c <main+0x284>)
  400212:	4b82      	ldr	r3, [pc, #520]	; (40041c <main+0x264>)
  400214:	4798      	blx	r3

	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  400216:	2300      	movs	r3, #0
  400218:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  40021c:	e01a      	b.n	400254 <main+0x9c>
		ch_dev_t *dev_ptr = &(chirp_devices[dev_num]);	// init struct in array
  40021e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  400222:	22d8      	movs	r2, #216	; 0xd8
  400224:	fb02 f303 	mul.w	r3, r2, r3
  400228:	4a85      	ldr	r2, [pc, #532]	; (400440 <main+0x288>)
  40022a:	4413      	add	r3, r2
  40022c:	62fb      	str	r3, [r7, #44]	; 0x2c
		 *
		 *   However, it is possible for different sensors to use different 
		 *   firmware images, by specifying different firmware init routines 
		 *   when ch_init() is called for each.
		 */
		chirp_error |= ch_init(dev_ptr, grp_ptr, dev_num, 
  40022e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
  400232:	4b84      	ldr	r3, [pc, #528]	; (400444 <main+0x28c>)
  400234:	6b79      	ldr	r1, [r7, #52]	; 0x34
  400236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  400238:	4c83      	ldr	r4, [pc, #524]	; (400448 <main+0x290>)
  40023a:	47a0      	blx	r4
  40023c:	4603      	mov	r3, r0
  40023e:	461a      	mov	r2, r3
  400240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  400244:	4313      	orrs	r3, r2
  400246:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  40024a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  40024e:	3301      	adds	r3, #1
  400250:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  400254:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
  400258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  40025c:	429a      	cmp	r2, r3
  40025e:	d3de      	bcc.n	40021e <main+0x66>
	 *   the firmware specified above during ch_init()) and waits for it to 
	 *   perform a self-calibration step.  Then, once it has found all the 
	 *   sensors, ch_group_start() completes a timing reference calibration by 
	 *   applying a pulse of known length to the sensor's INT line.
	 */
	if (chirp_error == 0) {
  400260:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  400264:	2b00      	cmp	r3, #0
  400266:	d108      	bne.n	40027a <main+0xc2>
		printf("starting group... ");
  400268:	4878      	ldr	r0, [pc, #480]	; (40044c <main+0x294>)
  40026a:	4b6c      	ldr	r3, [pc, #432]	; (40041c <main+0x264>)
  40026c:	4798      	blx	r3
		chirp_error = ch_group_start(grp_ptr);
  40026e:	6b78      	ldr	r0, [r7, #52]	; 0x34
  400270:	4b77      	ldr	r3, [pc, #476]	; (400450 <main+0x298>)
  400272:	4798      	blx	r3
  400274:	4603      	mov	r3, r0
  400276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	if (chirp_error == 0) {
  40027a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40027e:	2b00      	cmp	r3, #0
  400280:	d103      	bne.n	40028a <main+0xd2>
		printf("OK\n");
  400282:	4874      	ldr	r0, [pc, #464]	; (400454 <main+0x29c>)
  400284:	4b65      	ldr	r3, [pc, #404]	; (40041c <main+0x264>)
  400286:	4798      	blx	r3
  400288:	e005      	b.n	400296 <main+0xde>
	} else {
		printf("FAILED: %d\n", chirp_error);
  40028a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40028e:	4619      	mov	r1, r3
  400290:	4871      	ldr	r0, [pc, #452]	; (400458 <main+0x2a0>)
  400292:	4b62      	ldr	r3, [pc, #392]	; (40041c <main+0x264>)
  400294:	4798      	blx	r3
	}
	printf("\n");
  400296:	4867      	ldr	r0, [pc, #412]	; (400434 <main+0x27c>)
  400298:	4b60      	ldr	r3, [pc, #384]	; (40041c <main+0x264>)
  40029a:	4798      	blx	r3
	 *   This loop checks each device number in the sensor group to determine 
	 *   if a sensor is actually connected.  If so, it makes a series of 
	 *   function calls to get different operating values, including the 
	 *   operating frequency, clock calibration values, and firmware version.
 	 */
	printf("Sensor\tType \t   Freq\t\t RTC Cal \tFirmware\n");
  40029c:	486f      	ldr	r0, [pc, #444]	; (40045c <main+0x2a4>)
  40029e:	4b5f      	ldr	r3, [pc, #380]	; (40041c <main+0x264>)
  4002a0:	4798      	blx	r3

	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  4002a2:	2300      	movs	r3, #0
  4002a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  4002a8:	e033      	b.n	400312 <main+0x15a>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  4002aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4002ae:	4619      	mov	r1, r3
  4002b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4002b2:	4b6b      	ldr	r3, [pc, #428]	; (400460 <main+0x2a8>)
  4002b4:	4798      	blx	r3
  4002b6:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ch_sensor_is_connected(dev_ptr)) {
  4002b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4002ba:	4b6a      	ldr	r3, [pc, #424]	; (400464 <main+0x2ac>)
  4002bc:	4798      	blx	r3
  4002be:	4603      	mov	r3, r0
  4002c0:	2b00      	cmp	r3, #0
  4002c2:	d021      	beq.n	400308 <main+0x150>
			printf("%d\tCH%d\t %u Hz\t%u@%ums\t%s\n", dev_num,
  4002c4:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
									ch_get_part_number(dev_ptr),
  4002c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4002ca:	4b67      	ldr	r3, [pc, #412]	; (400468 <main+0x2b0>)
  4002cc:	4798      	blx	r3
  4002ce:	4603      	mov	r3, r0
			printf("%d\tCH%d\t %u Hz\t%u@%ums\t%s\n", dev_num,
  4002d0:	4698      	mov	r8, r3
									(unsigned int) ch_get_frequency(dev_ptr),
  4002d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4002d4:	4b65      	ldr	r3, [pc, #404]	; (40046c <main+0x2b4>)
  4002d6:	4798      	blx	r3
  4002d8:	4681      	mov	r9, r0
									ch_get_rtc_cal_result(dev_ptr),
  4002da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4002dc:	4b64      	ldr	r3, [pc, #400]	; (400470 <main+0x2b8>)
  4002de:	4798      	blx	r3
  4002e0:	4603      	mov	r3, r0
			printf("%d\tCH%d\t %u Hz\t%u@%ums\t%s\n", dev_num,
  4002e2:	461d      	mov	r5, r3
									ch_get_rtc_cal_pulselength(dev_ptr),
  4002e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4002e6:	4b63      	ldr	r3, [pc, #396]	; (400474 <main+0x2bc>)
  4002e8:	4798      	blx	r3
  4002ea:	4603      	mov	r3, r0
			printf("%d\tCH%d\t %u Hz\t%u@%ums\t%s\n", dev_num,
  4002ec:	461e      	mov	r6, r3
  4002ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4002f0:	4b61      	ldr	r3, [pc, #388]	; (400478 <main+0x2c0>)
  4002f2:	4798      	blx	r3
  4002f4:	4603      	mov	r3, r0
  4002f6:	9302      	str	r3, [sp, #8]
  4002f8:	9601      	str	r6, [sp, #4]
  4002fa:	9500      	str	r5, [sp, #0]
  4002fc:	464b      	mov	r3, r9
  4002fe:	4642      	mov	r2, r8
  400300:	4621      	mov	r1, r4
  400302:	485e      	ldr	r0, [pc, #376]	; (40047c <main+0x2c4>)
  400304:	4c45      	ldr	r4, [pc, #276]	; (40041c <main+0x264>)
  400306:	47a0      	blx	r4
	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  400308:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  40030c:	3301      	adds	r3, #1
  40030e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  400312:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
  400316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  40031a:	429a      	cmp	r2, r3
  40031c:	d3c5      	bcc.n	4002aa <main+0xf2>
									ch_get_fw_version_string(dev_ptr));
		}
	}
	printf("\n");
  40031e:	4845      	ldr	r0, [pc, #276]	; (400434 <main+0x27c>)
  400320:	4b3e      	ldr	r3, [pc, #248]	; (40041c <main+0x264>)
  400322:	4798      	blx	r3

	/* Register callback function to be called when Chirp sensor interrupts */
	ch_io_int_callback_set(grp_ptr, sensor_int_callback);
  400324:	4956      	ldr	r1, [pc, #344]	; (400480 <main+0x2c8>)
  400326:	6b78      	ldr	r0, [r7, #52]	; 0x34
  400328:	4b56      	ldr	r3, [pc, #344]	; (400484 <main+0x2cc>)
  40032a:	4798      	blx	r3

	/* Register callback function called when non-blocking I/Q readout completes
 	 *   Note, this callback will only be used if READ_IQ_DATA_NONBLOCK is 
	 *   defined to enable non-blocking I/Q readout in this application.
	 */
	ch_io_complete_callback_set(grp_ptr, io_complete_callback);
  40032c:	4956      	ldr	r1, [pc, #344]	; (400488 <main+0x2d0>)
  40032e:	6b78      	ldr	r0, [r7, #52]	; 0x34
  400330:	4b56      	ldr	r3, [pc, #344]	; (40048c <main+0x2d4>)
  400332:	4798      	blx	r3
	/* Configure each sensor with its operating parameters 
	 *   Initialize a ch_config_t structure with values defined in the
	 *   app_config.h header file, then write the configuration to the 
	 *   sensor using ch_set_config().
	 */
	printf ("Configuring sensor(s)...\n");
  400334:	4856      	ldr	r0, [pc, #344]	; (400490 <main+0x2d8>)
  400336:	4b39      	ldr	r3, [pc, #228]	; (40041c <main+0x264>)
  400338:	4798      	blx	r3
	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  40033a:	2300      	movs	r3, #0
  40033c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  400340:	e0cc      	b.n	4004dc <main+0x324>
		ch_config_t dev_config;
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  400342:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  400346:	4619      	mov	r1, r3
  400348:	6b78      	ldr	r0, [r7, #52]	; 0x34
  40034a:	4b45      	ldr	r3, [pc, #276]	; (400460 <main+0x2a8>)
  40034c:	4798      	blx	r3
  40034e:	6278      	str	r0, [r7, #36]	; 0x24

		if (ch_sensor_is_connected(dev_ptr)) {
  400350:	6a78      	ldr	r0, [r7, #36]	; 0x24
  400352:	4b44      	ldr	r3, [pc, #272]	; (400464 <main+0x2ac>)
  400354:	4798      	blx	r3
  400356:	4603      	mov	r3, r0
  400358:	2b00      	cmp	r3, #0
  40035a:	f000 80ba 	beq.w	4004d2 <main+0x31a>
			 *   All connected sensors are placed in hardware triggered mode.
 	 		 *   The first connected (lowest numbered) sensor will transmit and 
			 *   receive, all others will only receive.
 	 		 */

			num_connected_sensors++;			// count one more connected
  40035e:	4b4d      	ldr	r3, [pc, #308]	; (400494 <main+0x2dc>)
  400360:	781b      	ldrb	r3, [r3, #0]
  400362:	3301      	adds	r3, #1
  400364:	b2da      	uxtb	r2, r3
  400366:	4b4b      	ldr	r3, [pc, #300]	; (400494 <main+0x2dc>)
  400368:	701a      	strb	r2, [r3, #0]
			active_devices |= (1 << dev_num);	// add to active device bit mask
  40036a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  40036e:	2201      	movs	r2, #1
  400370:	fa02 f303 	lsl.w	r3, r2, r3
  400374:	461a      	mov	r2, r3
  400376:	4b48      	ldr	r3, [pc, #288]	; (400498 <main+0x2e0>)
  400378:	681b      	ldr	r3, [r3, #0]
  40037a:	4313      	orrs	r3, r2
  40037c:	4a46      	ldr	r2, [pc, #280]	; (400498 <main+0x2e0>)
  40037e:	6013      	str	r3, [r2, #0]
			
			if (num_connected_sensors == 1) {	// if this is the first sensor
  400380:	4b44      	ldr	r3, [pc, #272]	; (400494 <main+0x2dc>)
  400382:	781b      	ldrb	r3, [r3, #0]
  400384:	2b01      	cmp	r3, #1
  400386:	d102      	bne.n	40038e <main+0x1d6>
				dev_config.mode = CHIRP_FIRST_SENSOR_MODE;
  400388:	2310      	movs	r3, #16
  40038a:	703b      	strb	r3, [r7, #0]
  40038c:	e001      	b.n	400392 <main+0x1da>
			} else {									
				dev_config.mode = CHIRP_OTHER_SENSOR_MODE;
  40038e:	2320      	movs	r3, #32
  400390:	703b      	strb	r3, [r7, #0]
			}

			if (dev_config.mode != CH_MODE_FREERUN) {	// unless free-running
  400392:	783b      	ldrb	r3, [r7, #0]
  400394:	2b02      	cmp	r3, #2
  400396:	d005      	beq.n	4003a4 <main+0x1ec>
				num_triggered_devices++;				// will be triggered
  400398:	4b40      	ldr	r3, [pc, #256]	; (40049c <main+0x2e4>)
  40039a:	781b      	ldrb	r3, [r3, #0]
  40039c:	3301      	adds	r3, #1
  40039e:	b2da      	uxtb	r2, r3
  4003a0:	4b3e      	ldr	r3, [pc, #248]	; (40049c <main+0x2e4>)
  4003a2:	701a      	strb	r2, [r3, #0]
			}

			/* Init config structure with values from app_config.h */
			dev_config.max_range       = CHIRP_SENSOR_MAX_RANGE_MM;
  4003a4:	f241 3388 	movw	r3, #5000	; 0x1388
  4003a8:	807b      	strh	r3, [r7, #2]
			dev_config.static_range    = CHIRP_SENSOR_STATIC_RANGE;
  4003aa:	2300      	movs	r3, #0
  4003ac:	80bb      	strh	r3, [r7, #4]

			/* If sensor will be free-running, set internal sample interval */
			if (dev_config.mode == CH_MODE_FREERUN) {
  4003ae:	783b      	ldrb	r3, [r7, #0]
  4003b0:	2b02      	cmp	r3, #2
  4003b2:	d103      	bne.n	4003bc <main+0x204>
				dev_config.sample_interval = MEASUREMENT_INTERVAL_MS;
  4003b4:	f240 3302 	movw	r3, #770	; 0x302
  4003b8:	80fb      	strh	r3, [r7, #6]
  4003ba:	e001      	b.n	4003c0 <main+0x208>
			} else {
				dev_config.sample_interval = 0;
  4003bc:	2300      	movs	r3, #0
  4003be:	80fb      	strh	r3, [r7, #6]
			}

			/* Set detection thresholds (CH201 only) */
			if (ch_get_part_number(dev_ptr) == CH201_PART_NUMBER) {
  4003c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4003c2:	4b29      	ldr	r3, [pc, #164]	; (400468 <main+0x2b0>)
  4003c4:	4798      	blx	r3
  4003c6:	4603      	mov	r3, r0
  4003c8:	2bc9      	cmp	r3, #201	; 0xc9
  4003ca:	d102      	bne.n	4003d2 <main+0x21a>
				/* Set pointer to struct containing detection thresholds */
				dev_config.thresh_ptr = &chirp_ch201_thresholds;	
  4003cc:	4b34      	ldr	r3, [pc, #208]	; (4004a0 <main+0x2e8>)
  4003ce:	60bb      	str	r3, [r7, #8]
  4003d0:	e001      	b.n	4003d6 <main+0x21e>
			} else {
				dev_config.thresh_ptr = 0;							
  4003d2:	2300      	movs	r3, #0
  4003d4:	60bb      	str	r3, [r7, #8]
			}

			/* Apply sensor configuration */
			chirp_error = ch_set_config(dev_ptr, &dev_config);
  4003d6:	463b      	mov	r3, r7
  4003d8:	4619      	mov	r1, r3
  4003da:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4003dc:	4b31      	ldr	r3, [pc, #196]	; (4004a4 <main+0x2ec>)
  4003de:	4798      	blx	r3
  4003e0:	4603      	mov	r3, r0
  4003e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			/* Enable sensor interrupt if using free-running mode 
			 *   Note that interrupt is automatically enabled if using 
			 *   triggered modes.
			 */
			if ((!chirp_error) && (dev_config.mode == CH_MODE_FREERUN)) {
  4003e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d108      	bne.n	400400 <main+0x248>
  4003ee:	783b      	ldrb	r3, [r7, #0]
  4003f0:	2b02      	cmp	r3, #2
  4003f2:	d105      	bne.n	400400 <main+0x248>
				chbsp_set_io_dir_in(dev_ptr);
  4003f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4003f6:	4b2c      	ldr	r3, [pc, #176]	; (4004a8 <main+0x2f0>)
  4003f8:	4798      	blx	r3
				chbsp_io_interrupt_enable(dev_ptr);
  4003fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4003fc:	4b2b      	ldr	r3, [pc, #172]	; (4004ac <main+0x2f4>)
  4003fe:	4798      	blx	r3
			}

			/* Read back and display config settings */
			if (!chirp_error) {
  400400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  400404:	2b00      	cmp	r3, #0
  400406:	d155      	bne.n	4004b4 <main+0x2fc>
				display_config_info(dev_ptr);
  400408:	6a78      	ldr	r0, [r7, #36]	; 0x24
  40040a:	4b29      	ldr	r3, [pc, #164]	; (4004b0 <main+0x2f8>)
  40040c:	4798      	blx	r3
  40040e:	e057      	b.n	4004c0 <main+0x308>
  400410:	2000043c 	.word	0x2000043c
  400414:	00401f79 	.word	0x00401f79
  400418:	0040c0dc 	.word	0x0040c0dc
  40041c:	004094a1 	.word	0x004094a1
  400420:	0040c114 	.word	0x0040c114
  400424:	0040c120 	.word	0x0040c120
  400428:	0040c12c 	.word	0x0040c12c
  40042c:	0040c148 	.word	0x0040c148
  400430:	0040c160 	.word	0x0040c160
  400434:	0040c180 	.word	0x0040c180
  400438:	004059fb 	.word	0x004059fb
  40043c:	0040c184 	.word	0x0040c184
  400440:	20000510 	.word	0x20000510
  400444:	00405585 	.word	0x00405585
  400448:	00405789 	.word	0x00405789
  40044c:	0040c1a0 	.word	0x0040c1a0
  400450:	00405921 	.word	0x00405921
  400454:	0040c1b4 	.word	0x0040c1b4
  400458:	0040c1b8 	.word	0x0040c1b8
  40045c:	0040c1c4 	.word	0x0040c1c4
  400460:	004059a7 	.word	0x004059a7
  400464:	0040595d 	.word	0x0040595d
  400468:	00405975 	.word	0x00405975
  40046c:	00405beb 	.word	0x00405beb
  400470:	00405c1d 	.word	0x00405c1d
  400474:	00405c03 	.word	0x00405c03
  400478:	00405a13 	.word	0x00405a13
  40047c:	0040c1f0 	.word	0x0040c1f0
  400480:	0040061d 	.word	0x0040061d
  400484:	00405db3 	.word	0x00405db3
  400488:	004006b1 	.word	0x004006b1
  40048c:	00405dcf 	.word	0x00405dcf
  400490:	0040c20c 	.word	0x0040c20c
  400494:	20000370 	.word	0x20000370
  400498:	20000368 	.word	0x20000368
  40049c:	20000371 	.word	0x20000371
  4004a0:	200000fc 	.word	0x200000fc
  4004a4:	00405829 	.word	0x00405829
  4004a8:	0040207d 	.word	0x0040207d
  4004ac:	0040242d 	.word	0x0040242d
  4004b0:	004006d5 	.word	0x004006d5
			} else {
				printf("Device %d: Error during ch_set_config()\n", dev_num);
  4004b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4004b8:	4619      	mov	r1, r3
  4004ba:	483b      	ldr	r0, [pc, #236]	; (4005a8 <main+0x3f0>)
  4004bc:	4b3b      	ldr	r3, [pc, #236]	; (4005ac <main+0x3f4>)
  4004be:	4798      	blx	r3
			}

			/* Turn on an LED to indicate device connected */
			if (!chirp_error) {
  4004c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  4004c4:	2b00      	cmp	r3, #0
  4004c6:	d104      	bne.n	4004d2 <main+0x31a>
				chbsp_led_on(dev_num);
  4004c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4004cc:	4618      	mov	r0, r3
  4004ce:	4b38      	ldr	r3, [pc, #224]	; (4005b0 <main+0x3f8>)
  4004d0:	4798      	blx	r3
	for (dev_num = 0; dev_num < num_ports; dev_num++) {
  4004d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4004d6:	3301      	adds	r3, #1
  4004d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  4004dc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
  4004e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  4004e4:	429a      	cmp	r2, r3
  4004e6:	f4ff af2c 	bcc.w	400342 <main+0x18a>
			}
		}
	}

	printf("\n");
  4004ea:	4832      	ldr	r0, [pc, #200]	; (4005b4 <main+0x3fc>)
  4004ec:	4b2f      	ldr	r3, [pc, #188]	; (4005ac <main+0x3f4>)
  4004ee:	4798      	blx	r3

	/* Enable receive sensor pre-triggering, if specified */
	ch_set_rx_pretrigger(grp_ptr, RX_PRETRIGGER_ENABLE);
  4004f0:	2101      	movs	r1, #1
  4004f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4004f4:	4b30      	ldr	r3, [pc, #192]	; (4005b8 <main+0x400>)
  4004f6:	4798      	blx	r3
	 *   expires, after the specified measurement interval.  The function also 
	 *   registers a callback function that will be called from the timer 
	 *   handler when the interrupt occurs.  The callback function will be 
	 *   used to trigger a measurement cycle on the group of sensors.
	 */
	if (num_triggered_devices > 0) {
  4004f8:	4b30      	ldr	r3, [pc, #192]	; (4005bc <main+0x404>)
  4004fa:	781b      	ldrb	r3, [r3, #0]
  4004fc:	2b00      	cmp	r3, #0
  4004fe:	d010      	beq.n	400522 <main+0x36a>
		printf("Initializing sample timer for %dms interval... ", 
  400500:	f240 3102 	movw	r1, #770	; 0x302
  400504:	482e      	ldr	r0, [pc, #184]	; (4005c0 <main+0x408>)
  400506:	4b29      	ldr	r3, [pc, #164]	; (4005ac <main+0x3f4>)
  400508:	4798      	blx	r3
				MEASUREMENT_INTERVAL_MS);

		chbsp_periodic_timer_init(MEASUREMENT_INTERVAL_MS, 
  40050a:	492e      	ldr	r1, [pc, #184]	; (4005c4 <main+0x40c>)
  40050c:	f240 3002 	movw	r0, #770	; 0x302
  400510:	4b2d      	ldr	r3, [pc, #180]	; (4005c8 <main+0x410>)
  400512:	4798      	blx	r3
							      periodic_timer_callback);

		/* Enable interrupt and start timer to trigger sensor sampling */
		chbsp_periodic_timer_irq_enable();
  400514:	4b2d      	ldr	r3, [pc, #180]	; (4005cc <main+0x414>)
  400516:	4798      	blx	r3
		chbsp_periodic_timer_start();
  400518:	4b2d      	ldr	r3, [pc, #180]	; (4005d0 <main+0x418>)
  40051a:	4798      	blx	r3

		printf("OK\n");
  40051c:	482d      	ldr	r0, [pc, #180]	; (4005d4 <main+0x41c>)
  40051e:	4b23      	ldr	r3, [pc, #140]	; (4005ac <main+0x3f4>)
  400520:	4798      	blx	r3
	}

	printf("Starting measurements\n");
  400522:	482d      	ldr	r0, [pc, #180]	; (4005d8 <main+0x420>)
  400524:	4b21      	ldr	r3, [pc, #132]	; (4005ac <main+0x3f4>)
  400526:	4798      	blx	r3
		/*
		 * Put processor in light sleep mode if there are no pending tasks, but 
		 * never turn off the main clock, so that interrupts can still wake 
		 * the processor.
		 */
		printf("\n");
  400528:	4822      	ldr	r0, [pc, #136]	; (4005b4 <main+0x3fc>)
  40052a:	4b20      	ldr	r3, [pc, #128]	; (4005ac <main+0x3f4>)
  40052c:	4798      	blx	r3
		if (taskflags==0) {
  40052e:	4b2b      	ldr	r3, [pc, #172]	; (4005dc <main+0x424>)
  400530:	681b      	ldr	r3, [r3, #0]
  400532:	2b00      	cmp	r3, #0
  400534:	d101      	bne.n	40053a <main+0x382>
			chbsp_proc_sleep();			// put processor in low-power sleep mode
  400536:	4b2a      	ldr	r3, [pc, #168]	; (4005e0 <main+0x428>)
  400538:	4798      	blx	r3

			/* We only continue here after an interrupt wakes the processor */
		}

		/* Check for sensor data-ready interrupt(s) */
		if (taskflags & DATA_READY_FLAG) {
  40053a:	4b28      	ldr	r3, [pc, #160]	; (4005dc <main+0x424>)
  40053c:	681b      	ldr	r3, [r3, #0]
  40053e:	f003 0301 	and.w	r3, r3, #1
  400542:	2b00      	cmp	r3, #0
  400544:	d0f0      	beq.n	400528 <main+0x370>

			/* All sensors have interrupted - handle sensor data */
			// &= 按位与运算后赋值
			// ~ 按位取反
			taskflags &= ~DATA_READY_FLAG;		// clear flag
  400546:	4b25      	ldr	r3, [pc, #148]	; (4005dc <main+0x424>)
  400548:	681b      	ldr	r3, [r3, #0]
  40054a:	f023 0301 	bic.w	r3, r3, #1
  40054e:	4a23      	ldr	r2, [pc, #140]	; (4005dc <main+0x424>)
  400550:	6013      	str	r3, [r2, #0]
			handle_data_ready(grp_ptr);			// read and display measurement
  400552:	6b78      	ldr	r0, [r7, #52]	; 0x34
  400554:	4b23      	ldr	r3, [pc, #140]	; (4005e4 <main+0x42c>)
  400556:	4798      	blx	r3
			uint64_t cur_time = time_get_in_us();			
  400558:	4b23      	ldr	r3, [pc, #140]	; (4005e8 <main+0x430>)
  40055a:	4798      	blx	r3
  40055c:	e9c7 0106 	strd	r0, r1, [r7, #24]
			double time = (cur_time - pre_time)/1000000.0;
  400560:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
  400564:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
  400568:	1acb      	subs	r3, r1, r3
  40056a:	eb62 0404 	sbc.w	r4, r2, r4
  40056e:	4a1f      	ldr	r2, [pc, #124]	; (4005ec <main+0x434>)
  400570:	4618      	mov	r0, r3
  400572:	4621      	mov	r1, r4
  400574:	4790      	blx	r2
  400576:	4c1e      	ldr	r4, [pc, #120]	; (4005f0 <main+0x438>)
  400578:	a309      	add	r3, pc, #36	; (adr r3, 4005a0 <main+0x3e8>)
  40057a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40057e:	47a0      	blx	r4
  400580:	4603      	mov	r3, r0
  400582:	460c      	mov	r4, r1
  400584:	e9c7 3404 	strd	r3, r4, [r7, #16]
			pre_time = cur_time;
  400588:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  40058c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			
			printf("Time pass %.6f s", time);
  400590:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
  400594:	4817      	ldr	r0, [pc, #92]	; (4005f4 <main+0x43c>)
  400596:	4905      	ldr	r1, [pc, #20]	; (4005ac <main+0x3f4>)
  400598:	4788      	blx	r1
		printf("\n");
  40059a:	e7c5      	b.n	400528 <main+0x370>
  40059c:	f3af 8000 	nop.w
  4005a0:	00000000 	.word	0x00000000
  4005a4:	412e8480 	.word	0x412e8480
  4005a8:	0040c228 	.word	0x0040c228
  4005ac:	004094a1 	.word	0x004094a1
  4005b0:	00402eb9 	.word	0x00402eb9
  4005b4:	0040c180 	.word	0x0040c180
  4005b8:	00405e49 	.word	0x00405e49
  4005bc:	20000371 	.word	0x20000371
  4005c0:	0040c254 	.word	0x0040c254
  4005c4:	004005f9 	.word	0x004005f9
  4005c8:	00402bad 	.word	0x00402bad
  4005cc:	00402df5 	.word	0x00402df5
  4005d0:	00402e1d 	.word	0x00402e1d
  4005d4:	0040c1b4 	.word	0x0040c1b4
  4005d8:	0040c284 	.word	0x0040c284
  4005dc:	20000364 	.word	0x20000364
  4005e0:	00402ea5 	.word	0x00402ea5
  4005e4:	004008ad 	.word	0x004008ad
  4005e8:	00400a0d 	.word	0x00400a0d
  4005ec:	0040b771 	.word	0x0040b771
  4005f0:	0040ba31 	.word	0x0040ba31
  4005f4:	0040c29c 	.word	0x0040c29c

004005f8 <periodic_timer_callback>:
 *
 * This function is registered by the call to chbsp_periodic_timer_init() 
 * in main().
 */

void periodic_timer_callback(void) {
  4005f8:	b580      	push	{r7, lr}
  4005fa:	af00      	add	r7, sp, #0

	if (num_triggered_devices > 0) {
  4005fc:	4b04      	ldr	r3, [pc, #16]	; (400610 <periodic_timer_callback+0x18>)
  4005fe:	781b      	ldrb	r3, [r3, #0]
  400600:	2b00      	cmp	r3, #0
  400602:	d002      	beq.n	40060a <periodic_timer_callback+0x12>
		ch_group_trigger(&chirp_group);
  400604:	4803      	ldr	r0, [pc, #12]	; (400614 <periodic_timer_callback+0x1c>)
  400606:	4b04      	ldr	r3, [pc, #16]	; (400618 <periodic_timer_callback+0x20>)
  400608:	4798      	blx	r3
	}
}
  40060a:	bf00      	nop
  40060c:	bd80      	pop	{r7, pc}
  40060e:	bf00      	nop
  400610:	20000371 	.word	0x20000371
  400614:	2000043c 	.word	0x2000043c
  400618:	00405941 	.word	0x00405941

0040061c <sensor_int_callback>:
 * DATA_READY_FLAG is set.  That flag will be detected in the main() loop.
 *
 * This callback function is registered by the call to ch_io_int_callback_set() 
 * in main().
 */
static void sensor_int_callback(ch_group_t *grp_ptr, uint8_t dev_num) {
  40061c:	b580      	push	{r7, lr}
  40061e:	b084      	sub	sp, #16
  400620:	af00      	add	r7, sp, #0
  400622:	6078      	str	r0, [r7, #4]
  400624:	460b      	mov	r3, r1
  400626:	70fb      	strb	r3, [r7, #3]
	ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  400628:	78fb      	ldrb	r3, [r7, #3]
  40062a:	4619      	mov	r1, r3
  40062c:	6878      	ldr	r0, [r7, #4]
  40062e:	4b18      	ldr	r3, [pc, #96]	; (400690 <sensor_int_callback+0x74>)
  400630:	4798      	blx	r3
  400632:	60f8      	str	r0, [r7, #12]

	data_ready_devices |= (1 << dev_num);		// add to data-ready bit mask
  400634:	78fb      	ldrb	r3, [r7, #3]
  400636:	2201      	movs	r2, #1
  400638:	fa02 f303 	lsl.w	r3, r2, r3
  40063c:	461a      	mov	r2, r3
  40063e:	4b15      	ldr	r3, [pc, #84]	; (400694 <sensor_int_callback+0x78>)
  400640:	681b      	ldr	r3, [r3, #0]
  400642:	4313      	orrs	r3, r2
  400644:	4a13      	ldr	r2, [pc, #76]	; (400694 <sensor_int_callback+0x78>)
  400646:	6013      	str	r3, [r2, #0]

	if (data_ready_devices == active_devices) {
  400648:	4b12      	ldr	r3, [pc, #72]	; (400694 <sensor_int_callback+0x78>)
  40064a:	681a      	ldr	r2, [r3, #0]
  40064c:	4b12      	ldr	r3, [pc, #72]	; (400698 <sensor_int_callback+0x7c>)
  40064e:	681b      	ldr	r3, [r3, #0]
  400650:	429a      	cmp	r2, r3
  400652:	d118      	bne.n	400686 <sensor_int_callback+0x6a>
		/* All active sensors have interrupted after performing a measurement */
		data_ready_devices = 0;
  400654:	4b0f      	ldr	r3, [pc, #60]	; (400694 <sensor_int_callback+0x78>)
  400656:	2200      	movs	r2, #0
  400658:	601a      	str	r2, [r3, #0]

		/* Set data-ready flag - it will be checked in main() loop */
		taskflags |= DATA_READY_FLAG;
  40065a:	4b10      	ldr	r3, [pc, #64]	; (40069c <sensor_int_callback+0x80>)
  40065c:	681b      	ldr	r3, [r3, #0]
  40065e:	f043 0301 	orr.w	r3, r3, #1
  400662:	4a0e      	ldr	r2, [pc, #56]	; (40069c <sensor_int_callback+0x80>)
  400664:	6013      	str	r3, [r2, #0]

		/* Disable interrupt unless in free-running mode
		 *   It will automatically be re-enabled by the next ch_group_trigger() 
		 */
		if (ch_get_mode(dev_ptr) == CH_MODE_FREERUN) {
  400666:	68f8      	ldr	r0, [r7, #12]
  400668:	4b0d      	ldr	r3, [pc, #52]	; (4006a0 <sensor_int_callback+0x84>)
  40066a:	4798      	blx	r3
  40066c:	4603      	mov	r3, r0
  40066e:	2b02      	cmp	r3, #2
  400670:	d106      	bne.n	400680 <sensor_int_callback+0x64>
			chbsp_set_io_dir_in(dev_ptr);				// set INT line as input
  400672:	68f8      	ldr	r0, [r7, #12]
  400674:	4b0b      	ldr	r3, [pc, #44]	; (4006a4 <sensor_int_callback+0x88>)
  400676:	4798      	blx	r3
			chbsp_group_io_interrupt_enable(grp_ptr);
  400678:	6878      	ldr	r0, [r7, #4]
  40067a:	4b0b      	ldr	r3, [pc, #44]	; (4006a8 <sensor_int_callback+0x8c>)
  40067c:	4798      	blx	r3
		} else {
			chbsp_group_io_interrupt_disable(grp_ptr);
		}
	}
}
  40067e:	e002      	b.n	400686 <sensor_int_callback+0x6a>
			chbsp_group_io_interrupt_disable(grp_ptr);
  400680:	6878      	ldr	r0, [r7, #4]
  400682:	4b0a      	ldr	r3, [pc, #40]	; (4006ac <sensor_int_callback+0x90>)
  400684:	4798      	blx	r3
}
  400686:	bf00      	nop
  400688:	3710      	adds	r7, #16
  40068a:	46bd      	mov	sp, r7
  40068c:	bd80      	pop	{r7, pc}
  40068e:	bf00      	nop
  400690:	004059a7 	.word	0x004059a7
  400694:	2000036c 	.word	0x2000036c
  400698:	20000368 	.word	0x20000368
  40069c:	20000364 	.word	0x20000364
  4006a0:	00405a2b 	.word	0x00405a2b
  4006a4:	0040207d 	.word	0x0040207d
  4006a8:	004023e1 	.word	0x004023e1
  4006ac:	0040248d 	.word	0x0040248d

004006b0 <io_complete_callback>:
 * ch_io_complete_callback_set() in main().
 *
 *  Note: This callback is only used if READ_IQ_NONBLOCKING is defined to 
 *  select non-blocking I/Q readout in this application.
 */
static void io_complete_callback(ch_group_t __attribute__((unused)) *grp_ptr) {
  4006b0:	b480      	push	{r7}
  4006b2:	b083      	sub	sp, #12
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	6078      	str	r0, [r7, #4]

	taskflags |= IQ_READY_FLAG;
  4006b8:	4b05      	ldr	r3, [pc, #20]	; (4006d0 <io_complete_callback+0x20>)
  4006ba:	681b      	ldr	r3, [r3, #0]
  4006bc:	f043 0302 	orr.w	r3, r3, #2
  4006c0:	4a03      	ldr	r2, [pc, #12]	; (4006d0 <io_complete_callback+0x20>)
  4006c2:	6013      	str	r3, [r2, #0]
}
  4006c4:	bf00      	nop
  4006c6:	370c      	adds	r7, #12
  4006c8:	46bd      	mov	sp, r7
  4006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ce:	4770      	bx	lr
  4006d0:	20000364 	.word	0x20000364

004006d4 <display_config_info>:
 * range (if used) are displayed.
 *
 * For CH201 sensors only, the multiple detection threshold values are also 
 * displayed.
 */
static uint8_t display_config_info(ch_dev_t *dev_ptr) {
  4006d4:	b590      	push	{r4, r7, lr}
  4006d6:	b091      	sub	sp, #68	; 0x44
  4006d8:	af00      	add	r7, sp, #0
  4006da:	6078      	str	r0, [r7, #4]
	ch_config_t 	read_config;
	uint8_t 		chirp_error;
	uint8_t 		dev_num = ch_get_dev_num(dev_ptr);
  4006dc:	6878      	ldr	r0, [r7, #4]
  4006de:	4b62      	ldr	r3, [pc, #392]	; (400868 <display_config_info+0x194>)
  4006e0:	4798      	blx	r3
  4006e2:	4603      	mov	r3, r0
  4006e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	/* Read configuration values for the device into ch_config_t structure */
	chirp_error = ch_get_config(dev_ptr, &read_config);
  4006e8:	f107 0320 	add.w	r3, r7, #32
  4006ec:	4619      	mov	r1, r3
  4006ee:	6878      	ldr	r0, [r7, #4]
  4006f0:	4b5e      	ldr	r3, [pc, #376]	; (40086c <display_config_info+0x198>)
  4006f2:	4798      	blx	r3
  4006f4:	4603      	mov	r3, r0
  4006f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (!chirp_error) {
  4006fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
  4006fe:	2b00      	cmp	r3, #0
  400700:	f040 80a5 	bne.w	40084e <display_config_info+0x17a>
		const char *mode_string;

		switch (read_config.mode) {
  400704:	f897 3020 	ldrb.w	r3, [r7, #32]
  400708:	2b20      	cmp	r3, #32
  40070a:	d851      	bhi.n	4007b0 <display_config_info+0xdc>
  40070c:	a201      	add	r2, pc, #4	; (adr r2, 400714 <display_config_info+0x40>)
  40070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400712:	bf00      	nop
  400714:	00400799 	.word	0x00400799
  400718:	004007b1 	.word	0x004007b1
  40071c:	0040079f 	.word	0x0040079f
  400720:	004007b1 	.word	0x004007b1
  400724:	004007b1 	.word	0x004007b1
  400728:	004007b1 	.word	0x004007b1
  40072c:	004007b1 	.word	0x004007b1
  400730:	004007b1 	.word	0x004007b1
  400734:	004007b1 	.word	0x004007b1
  400738:	004007b1 	.word	0x004007b1
  40073c:	004007b1 	.word	0x004007b1
  400740:	004007b1 	.word	0x004007b1
  400744:	004007b1 	.word	0x004007b1
  400748:	004007b1 	.word	0x004007b1
  40074c:	004007b1 	.word	0x004007b1
  400750:	004007b1 	.word	0x004007b1
  400754:	004007a5 	.word	0x004007a5
  400758:	004007b1 	.word	0x004007b1
  40075c:	004007b1 	.word	0x004007b1
  400760:	004007b1 	.word	0x004007b1
  400764:	004007b1 	.word	0x004007b1
  400768:	004007b1 	.word	0x004007b1
  40076c:	004007b1 	.word	0x004007b1
  400770:	004007b1 	.word	0x004007b1
  400774:	004007b1 	.word	0x004007b1
  400778:	004007b1 	.word	0x004007b1
  40077c:	004007b1 	.word	0x004007b1
  400780:	004007b1 	.word	0x004007b1
  400784:	004007b1 	.word	0x004007b1
  400788:	004007b1 	.word	0x004007b1
  40078c:	004007b1 	.word	0x004007b1
  400790:	004007b1 	.word	0x004007b1
  400794:	004007ab 	.word	0x004007ab
			case CH_MODE_IDLE:
				mode_string = "IDLE";
  400798:	4b35      	ldr	r3, [pc, #212]	; (400870 <display_config_info+0x19c>)
  40079a:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
  40079c:	e00a      	b.n	4007b4 <display_config_info+0xe0>
			case CH_MODE_FREERUN:
				mode_string = "FREERUN";
  40079e:	4b35      	ldr	r3, [pc, #212]	; (400874 <display_config_info+0x1a0>)
  4007a0:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
  4007a2:	e007      	b.n	4007b4 <display_config_info+0xe0>
			case CH_MODE_TRIGGERED_TX_RX:
				mode_string = "TRIGGERED_TX_RX";
  4007a4:	4b34      	ldr	r3, [pc, #208]	; (400878 <display_config_info+0x1a4>)
  4007a6:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
  4007a8:	e004      	b.n	4007b4 <display_config_info+0xe0>
			case CH_MODE_TRIGGERED_RX_ONLY:
				mode_string = "TRIGGERED_RX_ONLY";
  4007aa:	4b34      	ldr	r3, [pc, #208]	; (40087c <display_config_info+0x1a8>)
  4007ac:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
  4007ae:	e001      	b.n	4007b4 <display_config_info+0xe0>
			default:
				mode_string = "UNKNOWN";
  4007b0:	4b33      	ldr	r3, [pc, #204]	; (400880 <display_config_info+0x1ac>)
  4007b2:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		/* Display sensor number, mode and max range */
		printf("Sensor %d:\tmax_range=%dmm \tmode=%s  ", dev_num,
  4007b4:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
				read_config.max_range, mode_string);
  4007b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
		printf("Sensor %d:\tmax_range=%dmm \tmode=%s  ", dev_num,
  4007ba:	461a      	mov	r2, r3
  4007bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4007be:	4831      	ldr	r0, [pc, #196]	; (400884 <display_config_info+0x1b0>)
  4007c0:	4c31      	ldr	r4, [pc, #196]	; (400888 <display_config_info+0x1b4>)
  4007c2:	47a0      	blx	r4

		/* Display static target rejection range, if used */
		if (read_config.static_range != 0) {
  4007c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4007c6:	2b00      	cmp	r3, #0
  4007c8:	d004      	beq.n	4007d4 <display_config_info+0x100>
			printf("static_range=%d samples", read_config.static_range);
  4007ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4007cc:	4619      	mov	r1, r3
  4007ce:	482f      	ldr	r0, [pc, #188]	; (40088c <display_config_info+0x1b8>)
  4007d0:	4b2d      	ldr	r3, [pc, #180]	; (400888 <display_config_info+0x1b4>)
  4007d2:	4798      	blx	r3
		}
	
		/* Display detection thresholds (only supported on CH201) */
		if (ch_get_part_number(dev_ptr) == CH201_PART_NUMBER) {
  4007d4:	6878      	ldr	r0, [r7, #4]
  4007d6:	4b2e      	ldr	r3, [pc, #184]	; (400890 <display_config_info+0x1bc>)
  4007d8:	4798      	blx	r3
  4007da:	4603      	mov	r3, r0
  4007dc:	2bc9      	cmp	r3, #201	; 0xc9
  4007de:	d132      	bne.n	400846 <display_config_info+0x172>
			ch_thresholds_t read_thresholds;

			/* Get threshold values in structure */
			chirp_error = ch_get_thresholds(dev_ptr, &read_thresholds);
  4007e0:	f107 0308 	add.w	r3, r7, #8
  4007e4:	4619      	mov	r1, r3
  4007e6:	6878      	ldr	r0, [r7, #4]
  4007e8:	4b2a      	ldr	r3, [pc, #168]	; (400894 <display_config_info+0x1c0>)
  4007ea:	4798      	blx	r3
  4007ec:	4603      	mov	r3, r0
  4007ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			if (!chirp_error) {
  4007f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
  4007f6:	2b00      	cmp	r3, #0
  4007f8:	d11f      	bne.n	40083a <display_config_info+0x166>
				printf("\n  Detection thresholds:\n");
  4007fa:	4827      	ldr	r0, [pc, #156]	; (400898 <display_config_info+0x1c4>)
  4007fc:	4b22      	ldr	r3, [pc, #136]	; (400888 <display_config_info+0x1b4>)
  4007fe:	4798      	blx	r3
				for (int i = 0; i < CH_NUM_THRESHOLDS; i++) {
  400800:	2300      	movs	r3, #0
  400802:	637b      	str	r3, [r7, #52]	; 0x34
  400804:	e015      	b.n	400832 <display_config_info+0x15e>
					printf("     %d\tstart: %2d\tlevel: %d\n", i, 
							read_thresholds.threshold[i].start_sample,
  400806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400808:	009b      	lsls	r3, r3, #2
  40080a:	f107 0240 	add.w	r2, r7, #64	; 0x40
  40080e:	4413      	add	r3, r2
  400810:	f833 3c38 	ldrh.w	r3, [r3, #-56]
					printf("     %d\tstart: %2d\tlevel: %d\n", i, 
  400814:	461a      	mov	r2, r3
							read_thresholds.threshold[i].level);
  400816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400818:	009b      	lsls	r3, r3, #2
  40081a:	f107 0140 	add.w	r1, r7, #64	; 0x40
  40081e:	440b      	add	r3, r1
  400820:	f833 3c36 	ldrh.w	r3, [r3, #-54]
					printf("     %d\tstart: %2d\tlevel: %d\n", i, 
  400824:	6b79      	ldr	r1, [r7, #52]	; 0x34
  400826:	481d      	ldr	r0, [pc, #116]	; (40089c <display_config_info+0x1c8>)
  400828:	4c17      	ldr	r4, [pc, #92]	; (400888 <display_config_info+0x1b4>)
  40082a:	47a0      	blx	r4
				for (int i = 0; i < CH_NUM_THRESHOLDS; i++) {
  40082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40082e:	3301      	adds	r3, #1
  400830:	637b      	str	r3, [r7, #52]	; 0x34
  400832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400834:	2b05      	cmp	r3, #5
  400836:	dde6      	ble.n	400806 <display_config_info+0x132>
  400838:	e005      	b.n	400846 <display_config_info+0x172>
				}
			} else {
				printf(" Device %d: Error during ch_get_thresholds()", dev_num);
  40083a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  40083e:	4619      	mov	r1, r3
  400840:	4817      	ldr	r0, [pc, #92]	; (4008a0 <display_config_info+0x1cc>)
  400842:	4b11      	ldr	r3, [pc, #68]	; (400888 <display_config_info+0x1b4>)
  400844:	4798      	blx	r3
			}
		}
		printf("\n");
  400846:	4817      	ldr	r0, [pc, #92]	; (4008a4 <display_config_info+0x1d0>)
  400848:	4b0f      	ldr	r3, [pc, #60]	; (400888 <display_config_info+0x1b4>)
  40084a:	4798      	blx	r3
  40084c:	e005      	b.n	40085a <display_config_info+0x186>

	} else {
		printf(" Device %d: Error during ch_get_config()\n", dev_num);
  40084e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  400852:	4619      	mov	r1, r3
  400854:	4814      	ldr	r0, [pc, #80]	; (4008a8 <display_config_info+0x1d4>)
  400856:	4b0c      	ldr	r3, [pc, #48]	; (400888 <display_config_info+0x1b4>)
  400858:	4798      	blx	r3
	}

	return chirp_error;
  40085a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
  40085e:	4618      	mov	r0, r3
  400860:	3744      	adds	r7, #68	; 0x44
  400862:	46bd      	mov	sp, r7
  400864:	bd90      	pop	{r4, r7, pc}
  400866:	bf00      	nop
  400868:	0040598d 	.word	0x0040598d
  40086c:	004057e5 	.word	0x004057e5
  400870:	0040c2b0 	.word	0x0040c2b0
  400874:	0040c2b8 	.word	0x0040c2b8
  400878:	0040c2c0 	.word	0x0040c2c0
  40087c:	0040c2d0 	.word	0x0040c2d0
  400880:	0040c2e4 	.word	0x0040c2e4
  400884:	0040c2ec 	.word	0x0040c2ec
  400888:	004094a1 	.word	0x004094a1
  40088c:	0040c314 	.word	0x0040c314
  400890:	00405975 	.word	0x00405975
  400894:	00405d43 	.word	0x00405d43
  400898:	0040c32c 	.word	0x0040c32c
  40089c:	0040c348 	.word	0x0040c348
  4008a0:	0040c368 	.word	0x0040c368
  4008a4:	0040c180 	.word	0x0040c180
  4008a8:	0040c398 	.word	0x0040c398

004008ac <handle_data_ready>:
 *
 * See the comments in app_config.h for information about the amplitude data
 * and I/Q readout build options.
 *
 */
static uint8_t handle_data_ready(ch_group_t *grp_ptr) {
  4008ac:	b590      	push	{r4, r7, lr}
  4008ae:	b089      	sub	sp, #36	; 0x24
  4008b0:	af02      	add	r7, sp, #8
  4008b2:	6078      	str	r0, [r7, #4]
	uint8_t 	dev_num;
	int 		num_samples = 0;
  4008b4:	2300      	movs	r3, #0
  4008b6:	613b      	str	r3, [r7, #16]
	uint8_t 	ret_val = 0;
  4008b8:	2300      	movs	r3, #0
  4008ba:	73fb      	strb	r3, [r7, #15]
	 *   This loop will write the sensor data to this application's "chirp_data"
	 *   array.  Each sensor has a separate chirp_data_t structure in that 
	 *   array, so the device number is used as an index.
	 */

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  4008bc:	2300      	movs	r3, #0
  4008be:	75fb      	strb	r3, [r7, #23]
  4008c0:	e076      	b.n	4009b0 <handle_data_ready+0x104>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  4008c2:	7dfb      	ldrb	r3, [r7, #23]
  4008c4:	4619      	mov	r1, r3
  4008c6:	6878      	ldr	r0, [r7, #4]
  4008c8:	4b41      	ldr	r3, [pc, #260]	; (4009d0 <handle_data_ready+0x124>)
  4008ca:	4798      	blx	r3
  4008cc:	60b8      	str	r0, [r7, #8]

		if (ch_sensor_is_connected(dev_ptr)) {
  4008ce:	68b8      	ldr	r0, [r7, #8]
  4008d0:	4b40      	ldr	r3, [pc, #256]	; (4009d4 <handle_data_ready+0x128>)
  4008d2:	4798      	blx	r3
  4008d4:	4603      	mov	r3, r0
  4008d6:	2b00      	cmp	r3, #0
  4008d8:	d067      	beq.n	4009aa <handle_data_ready+0xfe>
			 *   For sensor in transmit/receive mode, report one-way echo 
			 *   distance,  For sensor(s) in receive-only mode, report direct 
			 *   one-way distance from transmitting sensor 
			 */
			
			if (ch_get_mode(dev_ptr) == CH_MODE_TRIGGERED_RX_ONLY) {
  4008da:	68b8      	ldr	r0, [r7, #8]
  4008dc:	4b3e      	ldr	r3, [pc, #248]	; (4009d8 <handle_data_ready+0x12c>)
  4008de:	4798      	blx	r3
  4008e0:	4603      	mov	r3, r0
  4008e2:	2b20      	cmp	r3, #32
  4008e4:	d109      	bne.n	4008fa <handle_data_ready+0x4e>
				chirp_data[dev_num].range = ch_get_range(dev_ptr, 
  4008e6:	7dfc      	ldrb	r4, [r7, #23]
  4008e8:	2102      	movs	r1, #2
  4008ea:	68b8      	ldr	r0, [r7, #8]
  4008ec:	4b3b      	ldr	r3, [pc, #236]	; (4009dc <handle_data_ready+0x130>)
  4008ee:	4798      	blx	r3
  4008f0:	4602      	mov	r2, r0
  4008f2:	4b3b      	ldr	r3, [pc, #236]	; (4009e0 <handle_data_ready+0x134>)
  4008f4:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
  4008f8:	e008      	b.n	40090c <handle_data_ready+0x60>
														CH_RANGE_DIRECT);
			} else {
				chirp_data[dev_num].range = ch_get_range(dev_ptr, 
  4008fa:	7dfc      	ldrb	r4, [r7, #23]
  4008fc:	2100      	movs	r1, #0
  4008fe:	68b8      	ldr	r0, [r7, #8]
  400900:	4b36      	ldr	r3, [pc, #216]	; (4009dc <handle_data_ready+0x130>)
  400902:	4798      	blx	r3
  400904:	4602      	mov	r2, r0
  400906:	4b36      	ldr	r3, [pc, #216]	; (4009e0 <handle_data_ready+0x134>)
  400908:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
														CH_RANGE_ECHO_ONE_WAY);
			}

			if (chirp_data[dev_num].range == CH_NO_TARGET) {
  40090c:	7dfb      	ldrb	r3, [r7, #23]
  40090e:	4a34      	ldr	r2, [pc, #208]	; (4009e0 <handle_data_ready+0x134>)
  400910:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400914:	f1b3 3fff 	cmp.w	r3, #4294967295
  400918:	d10b      	bne.n	400932 <handle_data_ready+0x86>
				/* No target object was detected - no range value */

				chirp_data[dev_num].amplitude = 0;  /* no updated amplitude */
  40091a:	7dfb      	ldrb	r3, [r7, #23]
  40091c:	4a30      	ldr	r2, [pc, #192]	; (4009e0 <handle_data_ready+0x134>)
  40091e:	00db      	lsls	r3, r3, #3
  400920:	4413      	add	r3, r2
  400922:	2200      	movs	r2, #0
  400924:	809a      	strh	r2, [r3, #4]

				printf("Port %d:          no target found        ", dev_num);
  400926:	7dfb      	ldrb	r3, [r7, #23]
  400928:	4619      	mov	r1, r3
  40092a:	482e      	ldr	r0, [pc, #184]	; (4009e4 <handle_data_ready+0x138>)
  40092c:	4b2e      	ldr	r3, [pc, #184]	; (4009e8 <handle_data_ready+0x13c>)
  40092e:	4798      	blx	r3
  400930:	e027      	b.n	400982 <handle_data_ready+0xd6>
			} else {
				/* Target object was successfully detected (range available) */

				 /* Get the new amplitude value - it's only updated if range 
				  * was successfully measured.  */
				chirp_data[dev_num].amplitude = ch_get_amplitude(dev_ptr);
  400932:	7dfc      	ldrb	r4, [r7, #23]
  400934:	68b8      	ldr	r0, [r7, #8]
  400936:	4b2d      	ldr	r3, [pc, #180]	; (4009ec <handle_data_ready+0x140>)
  400938:	4798      	blx	r3
  40093a:	4603      	mov	r3, r0
  40093c:	4619      	mov	r1, r3
  40093e:	4a28      	ldr	r2, [pc, #160]	; (4009e0 <handle_data_ready+0x134>)
  400940:	00e3      	lsls	r3, r4, #3
  400942:	4413      	add	r3, r2
  400944:	460a      	mov	r2, r1
  400946:	809a      	strh	r2, [r3, #4]

				printf("Port %d:  Range: %0.1f mm  Amp: %u  ", dev_num, 
  400948:	7dfc      	ldrb	r4, [r7, #23]
						(float) chirp_data[dev_num].range/32.0f,
  40094a:	7dfb      	ldrb	r3, [r7, #23]
  40094c:	4a24      	ldr	r2, [pc, #144]	; (4009e0 <handle_data_ready+0x134>)
  40094e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400952:	ee07 3a90 	vmov	s15, r3
  400956:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40095a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 4009f0 <handle_data_ready+0x144>
  40095e:	eec7 6a87 	vdiv.f32	s13, s15, s14
				printf("Port %d:  Range: %0.1f mm  Amp: %u  ", dev_num, 
  400962:	4b24      	ldr	r3, [pc, #144]	; (4009f4 <handle_data_ready+0x148>)
  400964:	ee16 0a90 	vmov	r0, s13
  400968:	4798      	blx	r3
					   	chirp_data[dev_num].amplitude);
  40096a:	7dfb      	ldrb	r3, [r7, #23]
  40096c:	4a1c      	ldr	r2, [pc, #112]	; (4009e0 <handle_data_ready+0x134>)
  40096e:	00db      	lsls	r3, r3, #3
  400970:	4413      	add	r3, r2
  400972:	889b      	ldrh	r3, [r3, #4]
				printf("Port %d:  Range: %0.1f mm  Amp: %u  ", dev_num, 
  400974:	9300      	str	r3, [sp, #0]
  400976:	4602      	mov	r2, r0
  400978:	460b      	mov	r3, r1
  40097a:	4621      	mov	r1, r4
  40097c:	481e      	ldr	r0, [pc, #120]	; (4009f8 <handle_data_ready+0x14c>)
  40097e:	4c1a      	ldr	r4, [pc, #104]	; (4009e8 <handle_data_ready+0x13c>)
  400980:	47a0      	blx	r4
			}

			/* Store number of active samples in this measurement */
			num_samples = ch_get_num_samples(dev_ptr);
  400982:	68b8      	ldr	r0, [r7, #8]
  400984:	4b1d      	ldr	r3, [pc, #116]	; (4009fc <handle_data_ready+0x150>)
  400986:	4798      	blx	r3
  400988:	4603      	mov	r3, r0
  40098a:	613b      	str	r3, [r7, #16]
			chirp_data[dev_num].num_samples = num_samples;
  40098c:	7dfb      	ldrb	r3, [r7, #23]
  40098e:	693a      	ldr	r2, [r7, #16]
  400990:	b291      	uxth	r1, r2
  400992:	4a13      	ldr	r2, [pc, #76]	; (4009e0 <handle_data_ready+0x134>)
  400994:	00db      	lsls	r3, r3, #3
  400996:	4413      	add	r3, r2
  400998:	460a      	mov	r2, r1
  40099a:	80da      	strh	r2, [r3, #6]
			/* Optionally read raw I/Q values for all samples */
#ifdef READ_IQ_DATA
			display_iq_data(dev_ptr);
#endif
			/* If more than 2 sensors, put each on its own line */
			if (num_connected_sensors > 2) {
  40099c:	4b18      	ldr	r3, [pc, #96]	; (400a00 <handle_data_ready+0x154>)
  40099e:	781b      	ldrb	r3, [r3, #0]
  4009a0:	2b02      	cmp	r3, #2
  4009a2:	d902      	bls.n	4009aa <handle_data_ready+0xfe>
				printf("\n");
  4009a4:	4817      	ldr	r0, [pc, #92]	; (400a04 <handle_data_ready+0x158>)
  4009a6:	4b10      	ldr	r3, [pc, #64]	; (4009e8 <handle_data_ready+0x13c>)
  4009a8:	4798      	blx	r3
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  4009aa:	7dfb      	ldrb	r3, [r7, #23]
  4009ac:	3301      	adds	r3, #1
  4009ae:	75fb      	strb	r3, [r7, #23]
  4009b0:	6878      	ldr	r0, [r7, #4]
  4009b2:	4b15      	ldr	r3, [pc, #84]	; (400a08 <handle_data_ready+0x15c>)
  4009b4:	4798      	blx	r3
  4009b6:	4603      	mov	r3, r0
  4009b8:	461a      	mov	r2, r3
  4009ba:	7dfb      	ldrb	r3, [r7, #23]
  4009bc:	4293      	cmp	r3, r2
  4009be:	d380      	bcc.n	4008c2 <handle_data_ready+0x16>
			}
		}
	}
	printf("\n");
  4009c0:	4810      	ldr	r0, [pc, #64]	; (400a04 <handle_data_ready+0x158>)
  4009c2:	4b09      	ldr	r3, [pc, #36]	; (4009e8 <handle_data_ready+0x13c>)
  4009c4:	4798      	blx	r3
	
	return ret_val;
  4009c6:	7bfb      	ldrb	r3, [r7, #15]
}
  4009c8:	4618      	mov	r0, r3
  4009ca:	371c      	adds	r7, #28
  4009cc:	46bd      	mov	sp, r7
  4009ce:	bd90      	pop	{r4, r7, pc}
  4009d0:	004059a7 	.word	0x004059a7
  4009d4:	0040595d 	.word	0x0040595d
  4009d8:	00405a2b 	.word	0x00405a2b
  4009dc:	00405b8b 	.word	0x00405b8b
  4009e0:	200004f0 	.word	0x200004f0
  4009e4:	0040c3c4 	.word	0x0040c3c4
  4009e8:	004094a1 	.word	0x004094a1
  4009ec:	00405bbd 	.word	0x00405bbd
  4009f0:	42000000 	.word	0x42000000
  4009f4:	0040b735 	.word	0x0040b735
  4009f8:	0040c3f0 	.word	0x0040c3f0
  4009fc:	00405abb 	.word	0x00405abb
  400a00:	20000370 	.word	0x20000370
  400a04:	0040c180 	.word	0x0040c180
  400a08:	004059fb 	.word	0x004059fb

00400a0c <time_get_in_us>:
  400a0c:	b598      	push	{r3, r4, r7, lr}
  400a0e:	af00      	add	r7, sp, #0
  400a10:	4b03      	ldr	r3, [pc, #12]	; (400a20 <time_get_in_us+0x14>)
  400a12:	4798      	blx	r3
  400a14:	4603      	mov	r3, r0
  400a16:	460c      	mov	r4, r1
  400a18:	4618      	mov	r0, r3
  400a1a:	4621      	mov	r1, r4
  400a1c:	bd98      	pop	{r3, r4, r7, pc}
  400a1e:	bf00      	nop
  400a20:	00402f0d 	.word	0x00402f0d

00400a24 <osc_enable>:
  400a24:	b580      	push	{r7, lr}
  400a26:	b082      	sub	sp, #8
  400a28:	af00      	add	r7, sp, #0
  400a2a:	6078      	str	r0, [r7, #4]
  400a2c:	687b      	ldr	r3, [r7, #4]
  400a2e:	2b07      	cmp	r3, #7
  400a30:	d831      	bhi.n	400a96 <osc_enable+0x72>
  400a32:	a201      	add	r2, pc, #4	; (adr r2, 400a38 <osc_enable+0x14>)
  400a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a38:	00400a95 	.word	0x00400a95
  400a3c:	00400a59 	.word	0x00400a59
  400a40:	00400a61 	.word	0x00400a61
  400a44:	00400a69 	.word	0x00400a69
  400a48:	00400a71 	.word	0x00400a71
  400a4c:	00400a79 	.word	0x00400a79
  400a50:	00400a81 	.word	0x00400a81
  400a54:	00400a8b 	.word	0x00400a8b
  400a58:	2000      	movs	r0, #0
  400a5a:	4b11      	ldr	r3, [pc, #68]	; (400aa0 <osc_enable+0x7c>)
  400a5c:	4798      	blx	r3
  400a5e:	e01a      	b.n	400a96 <osc_enable+0x72>
  400a60:	2001      	movs	r0, #1
  400a62:	4b0f      	ldr	r3, [pc, #60]	; (400aa0 <osc_enable+0x7c>)
  400a64:	4798      	blx	r3
  400a66:	e016      	b.n	400a96 <osc_enable+0x72>
  400a68:	2000      	movs	r0, #0
  400a6a:	4b0e      	ldr	r3, [pc, #56]	; (400aa4 <osc_enable+0x80>)
  400a6c:	4798      	blx	r3
  400a6e:	e012      	b.n	400a96 <osc_enable+0x72>
  400a70:	2010      	movs	r0, #16
  400a72:	4b0c      	ldr	r3, [pc, #48]	; (400aa4 <osc_enable+0x80>)
  400a74:	4798      	blx	r3
  400a76:	e00e      	b.n	400a96 <osc_enable+0x72>
  400a78:	2020      	movs	r0, #32
  400a7a:	4b0a      	ldr	r3, [pc, #40]	; (400aa4 <osc_enable+0x80>)
  400a7c:	4798      	blx	r3
  400a7e:	e00a      	b.n	400a96 <osc_enable+0x72>
  400a80:	213e      	movs	r1, #62	; 0x3e
  400a82:	2000      	movs	r0, #0
  400a84:	4b08      	ldr	r3, [pc, #32]	; (400aa8 <osc_enable+0x84>)
  400a86:	4798      	blx	r3
  400a88:	e005      	b.n	400a96 <osc_enable+0x72>
  400a8a:	213e      	movs	r1, #62	; 0x3e
  400a8c:	2001      	movs	r0, #1
  400a8e:	4b06      	ldr	r3, [pc, #24]	; (400aa8 <osc_enable+0x84>)
  400a90:	4798      	blx	r3
  400a92:	e000      	b.n	400a96 <osc_enable+0x72>
  400a94:	bf00      	nop
  400a96:	bf00      	nop
  400a98:	3708      	adds	r7, #8
  400a9a:	46bd      	mov	sp, r7
  400a9c:	bd80      	pop	{r7, pc}
  400a9e:	bf00      	nop
  400aa0:	0040419d 	.word	0x0040419d
  400aa4:	00404209 	.word	0x00404209
  400aa8:	00404279 	.word	0x00404279

00400aac <osc_is_ready>:
  400aac:	b580      	push	{r7, lr}
  400aae:	b082      	sub	sp, #8
  400ab0:	af00      	add	r7, sp, #0
  400ab2:	6078      	str	r0, [r7, #4]
  400ab4:	687b      	ldr	r3, [r7, #4]
  400ab6:	2b07      	cmp	r3, #7
  400ab8:	d826      	bhi.n	400b08 <osc_is_ready+0x5c>
  400aba:	a201      	add	r2, pc, #4	; (adr r2, 400ac0 <osc_is_ready+0x14>)
  400abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ac0:	00400ae1 	.word	0x00400ae1
  400ac4:	00400ae5 	.word	0x00400ae5
  400ac8:	00400ae5 	.word	0x00400ae5
  400acc:	00400af7 	.word	0x00400af7
  400ad0:	00400af7 	.word	0x00400af7
  400ad4:	00400af7 	.word	0x00400af7
  400ad8:	00400af7 	.word	0x00400af7
  400adc:	00400af7 	.word	0x00400af7
  400ae0:	2301      	movs	r3, #1
  400ae2:	e012      	b.n	400b0a <osc_is_ready+0x5e>
  400ae4:	4b0b      	ldr	r3, [pc, #44]	; (400b14 <osc_is_ready+0x68>)
  400ae6:	4798      	blx	r3
  400ae8:	4603      	mov	r3, r0
  400aea:	2b00      	cmp	r3, #0
  400aec:	bf14      	ite	ne
  400aee:	2301      	movne	r3, #1
  400af0:	2300      	moveq	r3, #0
  400af2:	b2db      	uxtb	r3, r3
  400af4:	e009      	b.n	400b0a <osc_is_ready+0x5e>
  400af6:	4b08      	ldr	r3, [pc, #32]	; (400b18 <osc_is_ready+0x6c>)
  400af8:	4798      	blx	r3
  400afa:	4603      	mov	r3, r0
  400afc:	2b00      	cmp	r3, #0
  400afe:	bf14      	ite	ne
  400b00:	2301      	movne	r3, #1
  400b02:	2300      	moveq	r3, #0
  400b04:	b2db      	uxtb	r3, r3
  400b06:	e000      	b.n	400b0a <osc_is_ready+0x5e>
  400b08:	2300      	movs	r3, #0
  400b0a:	4618      	mov	r0, r3
  400b0c:	3708      	adds	r7, #8
  400b0e:	46bd      	mov	sp, r7
  400b10:	bd80      	pop	{r7, pc}
  400b12:	bf00      	nop
  400b14:	004041d5 	.word	0x004041d5
  400b18:	004042f1 	.word	0x004042f1

00400b1c <osc_get_rate>:
  400b1c:	b480      	push	{r7}
  400b1e:	b083      	sub	sp, #12
  400b20:	af00      	add	r7, sp, #0
  400b22:	6078      	str	r0, [r7, #4]
  400b24:	687b      	ldr	r3, [r7, #4]
  400b26:	2b07      	cmp	r3, #7
  400b28:	d825      	bhi.n	400b76 <osc_get_rate+0x5a>
  400b2a:	a201      	add	r2, pc, #4	; (adr r2, 400b30 <osc_get_rate+0x14>)
  400b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b30:	00400b51 	.word	0x00400b51
  400b34:	00400b57 	.word	0x00400b57
  400b38:	00400b5d 	.word	0x00400b5d
  400b3c:	00400b63 	.word	0x00400b63
  400b40:	00400b67 	.word	0x00400b67
  400b44:	00400b6b 	.word	0x00400b6b
  400b48:	00400b6f 	.word	0x00400b6f
  400b4c:	00400b73 	.word	0x00400b73
  400b50:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400b54:	e010      	b.n	400b78 <osc_get_rate+0x5c>
  400b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b5a:	e00d      	b.n	400b78 <osc_get_rate+0x5c>
  400b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b60:	e00a      	b.n	400b78 <osc_get_rate+0x5c>
  400b62:	4b08      	ldr	r3, [pc, #32]	; (400b84 <osc_get_rate+0x68>)
  400b64:	e008      	b.n	400b78 <osc_get_rate+0x5c>
  400b66:	4b08      	ldr	r3, [pc, #32]	; (400b88 <osc_get_rate+0x6c>)
  400b68:	e006      	b.n	400b78 <osc_get_rate+0x5c>
  400b6a:	4b08      	ldr	r3, [pc, #32]	; (400b8c <osc_get_rate+0x70>)
  400b6c:	e004      	b.n	400b78 <osc_get_rate+0x5c>
  400b6e:	2300      	movs	r3, #0
  400b70:	e002      	b.n	400b78 <osc_get_rate+0x5c>
  400b72:	2300      	movs	r3, #0
  400b74:	e000      	b.n	400b78 <osc_get_rate+0x5c>
  400b76:	2300      	movs	r3, #0
  400b78:	4618      	mov	r0, r3
  400b7a:	370c      	adds	r7, #12
  400b7c:	46bd      	mov	sp, r7
  400b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b82:	4770      	bx	lr
  400b84:	007a1200 	.word	0x007a1200
  400b88:	00f42400 	.word	0x00f42400
  400b8c:	016e3600 	.word	0x016e3600

00400b90 <osc_wait_ready>:
  400b90:	b580      	push	{r7, lr}
  400b92:	b082      	sub	sp, #8
  400b94:	af00      	add	r7, sp, #0
  400b96:	4603      	mov	r3, r0
  400b98:	71fb      	strb	r3, [r7, #7]
  400b9a:	bf00      	nop
  400b9c:	79fb      	ldrb	r3, [r7, #7]
  400b9e:	4618      	mov	r0, r3
  400ba0:	4b05      	ldr	r3, [pc, #20]	; (400bb8 <osc_wait_ready+0x28>)
  400ba2:	4798      	blx	r3
  400ba4:	4603      	mov	r3, r0
  400ba6:	f083 0301 	eor.w	r3, r3, #1
  400baa:	b2db      	uxtb	r3, r3
  400bac:	2b00      	cmp	r3, #0
  400bae:	d1f5      	bne.n	400b9c <osc_wait_ready+0xc>
  400bb0:	bf00      	nop
  400bb2:	3708      	adds	r7, #8
  400bb4:	46bd      	mov	sp, r7
  400bb6:	bd80      	pop	{r7, pc}
  400bb8:	00400aad 	.word	0x00400aad

00400bbc <pll_config_init>:
  400bbc:	b580      	push	{r7, lr}
  400bbe:	b086      	sub	sp, #24
  400bc0:	af00      	add	r7, sp, #0
  400bc2:	60f8      	str	r0, [r7, #12]
  400bc4:	607a      	str	r2, [r7, #4]
  400bc6:	603b      	str	r3, [r7, #0]
  400bc8:	460b      	mov	r3, r1
  400bca:	72fb      	strb	r3, [r7, #11]
  400bcc:	7afb      	ldrb	r3, [r7, #11]
  400bce:	4618      	mov	r0, r3
  400bd0:	4b0d      	ldr	r3, [pc, #52]	; (400c08 <pll_config_init+0x4c>)
  400bd2:	4798      	blx	r3
  400bd4:	4602      	mov	r2, r0
  400bd6:	687b      	ldr	r3, [r7, #4]
  400bd8:	fbb2 f3f3 	udiv	r3, r2, r3
  400bdc:	617b      	str	r3, [r7, #20]
  400bde:	697b      	ldr	r3, [r7, #20]
  400be0:	683a      	ldr	r2, [r7, #0]
  400be2:	fb02 f303 	mul.w	r3, r2, r3
  400be6:	617b      	str	r3, [r7, #20]
  400be8:	683b      	ldr	r3, [r7, #0]
  400bea:	3b01      	subs	r3, #1
  400bec:	041a      	lsls	r2, r3, #16
  400bee:	4b07      	ldr	r3, [pc, #28]	; (400c0c <pll_config_init+0x50>)
  400bf0:	4013      	ands	r3, r2
  400bf2:	687a      	ldr	r2, [r7, #4]
  400bf4:	b2d2      	uxtb	r2, r2
  400bf6:	4313      	orrs	r3, r2
  400bf8:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400bfc:	68fb      	ldr	r3, [r7, #12]
  400bfe:	601a      	str	r2, [r3, #0]
  400c00:	bf00      	nop
  400c02:	3718      	adds	r7, #24
  400c04:	46bd      	mov	sp, r7
  400c06:	bd80      	pop	{r7, pc}
  400c08:	00400b1d 	.word	0x00400b1d
  400c0c:	1fff0000 	.word	0x1fff0000

00400c10 <pll_enable>:
  400c10:	b580      	push	{r7, lr}
  400c12:	b082      	sub	sp, #8
  400c14:	af00      	add	r7, sp, #0
  400c16:	6078      	str	r0, [r7, #4]
  400c18:	6039      	str	r1, [r7, #0]
  400c1a:	683b      	ldr	r3, [r7, #0]
  400c1c:	2b00      	cmp	r3, #0
  400c1e:	d106      	bne.n	400c2e <pll_enable+0x1e>
  400c20:	4b08      	ldr	r3, [pc, #32]	; (400c44 <pll_enable+0x34>)
  400c22:	4798      	blx	r3
  400c24:	4a08      	ldr	r2, [pc, #32]	; (400c48 <pll_enable+0x38>)
  400c26:	687b      	ldr	r3, [r7, #4]
  400c28:	681b      	ldr	r3, [r3, #0]
  400c2a:	6293      	str	r3, [r2, #40]	; 0x28
  400c2c:	e005      	b.n	400c3a <pll_enable+0x2a>
  400c2e:	4b07      	ldr	r3, [pc, #28]	; (400c4c <pll_enable+0x3c>)
  400c30:	4798      	blx	r3
  400c32:	4a05      	ldr	r2, [pc, #20]	; (400c48 <pll_enable+0x38>)
  400c34:	687b      	ldr	r3, [r7, #4]
  400c36:	681b      	ldr	r3, [r3, #0]
  400c38:	62d3      	str	r3, [r2, #44]	; 0x2c
  400c3a:	bf00      	nop
  400c3c:	3708      	adds	r7, #8
  400c3e:	46bd      	mov	sp, r7
  400c40:	bd80      	pop	{r7, pc}
  400c42:	bf00      	nop
  400c44:	0040430d 	.word	0x0040430d
  400c48:	400e0400 	.word	0x400e0400
  400c4c:	00404341 	.word	0x00404341

00400c50 <pll_is_locked>:
  400c50:	b580      	push	{r7, lr}
  400c52:	b082      	sub	sp, #8
  400c54:	af00      	add	r7, sp, #0
  400c56:	6078      	str	r0, [r7, #4]
  400c58:	687b      	ldr	r3, [r7, #4]
  400c5a:	2b00      	cmp	r3, #0
  400c5c:	d103      	bne.n	400c66 <pll_is_locked+0x16>
  400c5e:	4b08      	ldr	r3, [pc, #32]	; (400c80 <pll_is_locked+0x30>)
  400c60:	4798      	blx	r3
  400c62:	4603      	mov	r3, r0
  400c64:	e007      	b.n	400c76 <pll_is_locked+0x26>
  400c66:	687b      	ldr	r3, [r7, #4]
  400c68:	2b01      	cmp	r3, #1
  400c6a:	d103      	bne.n	400c74 <pll_is_locked+0x24>
  400c6c:	4b05      	ldr	r3, [pc, #20]	; (400c84 <pll_is_locked+0x34>)
  400c6e:	4798      	blx	r3
  400c70:	4603      	mov	r3, r0
  400c72:	e000      	b.n	400c76 <pll_is_locked+0x26>
  400c74:	2300      	movs	r3, #0
  400c76:	4618      	mov	r0, r3
  400c78:	3708      	adds	r7, #8
  400c7a:	46bd      	mov	sp, r7
  400c7c:	bd80      	pop	{r7, pc}
  400c7e:	bf00      	nop
  400c80:	00404325 	.word	0x00404325
  400c84:	00404359 	.word	0x00404359

00400c88 <pll_enable_source>:
  400c88:	b580      	push	{r7, lr}
  400c8a:	b082      	sub	sp, #8
  400c8c:	af00      	add	r7, sp, #0
  400c8e:	4603      	mov	r3, r0
  400c90:	71fb      	strb	r3, [r7, #7]
  400c92:	79fb      	ldrb	r3, [r7, #7]
  400c94:	3300      	adds	r3, #0
  400c96:	2b01      	cmp	r3, #1
  400c98:	d808      	bhi.n	400cac <pll_enable_source+0x24>
  400c9a:	79fb      	ldrb	r3, [r7, #7]
  400c9c:	4618      	mov	r0, r3
  400c9e:	4b06      	ldr	r3, [pc, #24]	; (400cb8 <pll_enable_source+0x30>)
  400ca0:	4798      	blx	r3
  400ca2:	79fb      	ldrb	r3, [r7, #7]
  400ca4:	4618      	mov	r0, r3
  400ca6:	4b05      	ldr	r3, [pc, #20]	; (400cbc <pll_enable_source+0x34>)
  400ca8:	4798      	blx	r3
  400caa:	e000      	b.n	400cae <pll_enable_source+0x26>
  400cac:	bf00      	nop
  400cae:	bf00      	nop
  400cb0:	3708      	adds	r7, #8
  400cb2:	46bd      	mov	sp, r7
  400cb4:	bd80      	pop	{r7, pc}
  400cb6:	bf00      	nop
  400cb8:	00400a25 	.word	0x00400a25
  400cbc:	00400b91 	.word	0x00400b91

00400cc0 <pll_wait_for_lock>:
  400cc0:	b580      	push	{r7, lr}
  400cc2:	b082      	sub	sp, #8
  400cc4:	af00      	add	r7, sp, #0
  400cc6:	6078      	str	r0, [r7, #4]
  400cc8:	bf00      	nop
  400cca:	6878      	ldr	r0, [r7, #4]
  400ccc:	4b04      	ldr	r3, [pc, #16]	; (400ce0 <pll_wait_for_lock+0x20>)
  400cce:	4798      	blx	r3
  400cd0:	4603      	mov	r3, r0
  400cd2:	2b00      	cmp	r3, #0
  400cd4:	d0f9      	beq.n	400cca <pll_wait_for_lock+0xa>
  400cd6:	2300      	movs	r3, #0
  400cd8:	4618      	mov	r0, r3
  400cda:	3708      	adds	r7, #8
  400cdc:	46bd      	mov	sp, r7
  400cde:	bd80      	pop	{r7, pc}
  400ce0:	00400c51 	.word	0x00400c51

00400ce4 <sysclk_get_main_hz>:
  400ce4:	b580      	push	{r7, lr}
  400ce6:	af00      	add	r7, sp, #0
  400ce8:	2001      	movs	r0, #1
  400cea:	4b04      	ldr	r3, [pc, #16]	; (400cfc <sysclk_get_main_hz+0x18>)
  400cec:	4798      	blx	r3
  400cee:	4602      	mov	r2, r0
  400cf0:	f640 634e 	movw	r3, #3662	; 0xe4e
  400cf4:	fb03 f302 	mul.w	r3, r3, r2
  400cf8:	4618      	mov	r0, r3
  400cfa:	bd80      	pop	{r7, pc}
  400cfc:	00400b1d 	.word	0x00400b1d

00400d00 <sysclk_get_cpu_hz>:
  400d00:	b580      	push	{r7, lr}
  400d02:	af00      	add	r7, sp, #0
  400d04:	4b02      	ldr	r3, [pc, #8]	; (400d10 <sysclk_get_cpu_hz+0x10>)
  400d06:	4798      	blx	r3
  400d08:	4603      	mov	r3, r0
  400d0a:	4618      	mov	r0, r3
  400d0c:	bd80      	pop	{r7, pc}
  400d0e:	bf00      	nop
  400d10:	00400ce5 	.word	0x00400ce5

00400d14 <sysclk_init>:
  400d14:	b590      	push	{r4, r7, lr}
  400d16:	b0a5      	sub	sp, #148	; 0x94
  400d18:	af02      	add	r7, sp, #8
  400d1a:	4820      	ldr	r0, [pc, #128]	; (400d9c <sysclk_init+0x88>)
  400d1c:	4b20      	ldr	r3, [pc, #128]	; (400da0 <sysclk_init+0x8c>)
  400d1e:	4798      	blx	r3
  400d20:	2001      	movs	r0, #1
  400d22:	4b20      	ldr	r3, [pc, #128]	; (400da4 <sysclk_init+0x90>)
  400d24:	4798      	blx	r3
  400d26:	4638      	mov	r0, r7
  400d28:	f640 634e 	movw	r3, #3662	; 0xe4e
  400d2c:	2201      	movs	r2, #1
  400d2e:	2101      	movs	r1, #1
  400d30:	4c1d      	ldr	r4, [pc, #116]	; (400da8 <sysclk_init+0x94>)
  400d32:	47a0      	blx	r4
  400d34:	463b      	mov	r3, r7
  400d36:	2100      	movs	r1, #0
  400d38:	4618      	mov	r0, r3
  400d3a:	4b1c      	ldr	r3, [pc, #112]	; (400dac <sysclk_init+0x98>)
  400d3c:	4798      	blx	r3
  400d3e:	2000      	movs	r0, #0
  400d40:	4b1b      	ldr	r3, [pc, #108]	; (400db0 <sysclk_init+0x9c>)
  400d42:	4798      	blx	r3
  400d44:	2000      	movs	r0, #0
  400d46:	4b1b      	ldr	r3, [pc, #108]	; (400db4 <sysclk_init+0xa0>)
  400d48:	4798      	blx	r3
  400d4a:	4b1b      	ldr	r3, [pc, #108]	; (400db8 <sysclk_init+0xa4>)
  400d4c:	4798      	blx	r3
  400d4e:	4b1b      	ldr	r3, [pc, #108]	; (400dbc <sysclk_init+0xa8>)
  400d50:	4798      	blx	r3
  400d52:	4603      	mov	r3, r0
  400d54:	4618      	mov	r0, r3
  400d56:	4b12      	ldr	r3, [pc, #72]	; (400da0 <sysclk_init+0x8c>)
  400d58:	4798      	blx	r3
  400d5a:	4b19      	ldr	r3, [pc, #100]	; (400dc0 <sysclk_init+0xac>)
  400d5c:	681b      	ldr	r3, [r3, #0]
  400d5e:	4a19      	ldr	r2, [pc, #100]	; (400dc4 <sysclk_init+0xb0>)
  400d60:	4293      	cmp	r3, r2
  400d62:	d816      	bhi.n	400d92 <sysclk_init+0x7e>
  400d64:	4b16      	ldr	r3, [pc, #88]	; (400dc0 <sysclk_init+0xac>)
  400d66:	681b      	ldr	r3, [r3, #0]
  400d68:	4a17      	ldr	r2, [pc, #92]	; (400dc8 <sysclk_init+0xb4>)
  400d6a:	4293      	cmp	r3, r2
  400d6c:	d911      	bls.n	400d92 <sysclk_init+0x7e>
  400d6e:	1d3a      	adds	r2, r7, #4
  400d70:	2320      	movs	r3, #32
  400d72:	9300      	str	r3, [sp, #0]
  400d74:	4613      	mov	r3, r2
  400d76:	220f      	movs	r2, #15
  400d78:	210e      	movs	r1, #14
  400d7a:	4814      	ldr	r0, [pc, #80]	; (400dcc <sysclk_init+0xb8>)
  400d7c:	4c14      	ldr	r4, [pc, #80]	; (400dd0 <sysclk_init+0xbc>)
  400d7e:	47a0      	blx	r4
  400d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  400d82:	b29b      	uxth	r3, r3
  400d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  400d88:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
  400d8c:	4811      	ldr	r0, [pc, #68]	; (400dd4 <sysclk_init+0xc0>)
  400d8e:	4b12      	ldr	r3, [pc, #72]	; (400dd8 <sysclk_init+0xc4>)
  400d90:	4798      	blx	r3
  400d92:	bf00      	nop
  400d94:	378c      	adds	r7, #140	; 0x8c
  400d96:	46bd      	mov	sp, r7
  400d98:	bd90      	pop	{r4, r7, pc}
  400d9a:	bf00      	nop
  400d9c:	07270e00 	.word	0x07270e00
  400da0:	0040542d 	.word	0x0040542d
  400da4:	00400c89 	.word	0x00400c89
  400da8:	00400bbd 	.word	0x00400bbd
  400dac:	00400c11 	.word	0x00400c11
  400db0:	00400cc1 	.word	0x00400cc1
  400db4:	00404119 	.word	0x00404119
  400db8:	00405309 	.word	0x00405309
  400dbc:	00400d01 	.word	0x00400d01
  400dc0:	20000170 	.word	0x20000170
  400dc4:	080befc0 	.word	0x080befc0
  400dc8:	06422c3f 	.word	0x06422c3f
  400dcc:	400e0a00 	.word	0x400e0a00
  400dd0:	2000000b 	.word	0x2000000b
  400dd4:	400e1410 	.word	0x400e1410
  400dd8:	00404949 	.word	0x00404949

00400ddc <cpu_irq_enter_critical>:
  400ddc:	b480      	push	{r7}
  400dde:	b083      	sub	sp, #12
  400de0:	af00      	add	r7, sp, #0
  400de2:	4b11      	ldr	r3, [pc, #68]	; (400e28 <cpu_irq_enter_critical+0x4c>)
  400de4:	681b      	ldr	r3, [r3, #0]
  400de6:	2b00      	cmp	r3, #0
  400de8:	d112      	bne.n	400e10 <cpu_irq_enter_critical+0x34>
  400dea:	f3ef 8310 	mrs	r3, PRIMASK
  400dee:	607b      	str	r3, [r7, #4]
  400df0:	687b      	ldr	r3, [r7, #4]
  400df2:	2b00      	cmp	r3, #0
  400df4:	d109      	bne.n	400e0a <cpu_irq_enter_critical+0x2e>
  400df6:	b672      	cpsid	i
  400df8:	f3bf 8f5f 	dmb	sy
  400dfc:	4b0b      	ldr	r3, [pc, #44]	; (400e2c <cpu_irq_enter_critical+0x50>)
  400dfe:	2200      	movs	r2, #0
  400e00:	701a      	strb	r2, [r3, #0]
  400e02:	4b0b      	ldr	r3, [pc, #44]	; (400e30 <cpu_irq_enter_critical+0x54>)
  400e04:	2201      	movs	r2, #1
  400e06:	701a      	strb	r2, [r3, #0]
  400e08:	e002      	b.n	400e10 <cpu_irq_enter_critical+0x34>
  400e0a:	4b09      	ldr	r3, [pc, #36]	; (400e30 <cpu_irq_enter_critical+0x54>)
  400e0c:	2200      	movs	r2, #0
  400e0e:	701a      	strb	r2, [r3, #0]
  400e10:	4b05      	ldr	r3, [pc, #20]	; (400e28 <cpu_irq_enter_critical+0x4c>)
  400e12:	681b      	ldr	r3, [r3, #0]
  400e14:	3301      	adds	r3, #1
  400e16:	4a04      	ldr	r2, [pc, #16]	; (400e28 <cpu_irq_enter_critical+0x4c>)
  400e18:	6013      	str	r3, [r2, #0]
  400e1a:	bf00      	nop
  400e1c:	370c      	adds	r7, #12
  400e1e:	46bd      	mov	sp, r7
  400e20:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e24:	4770      	bx	lr
  400e26:	bf00      	nop
  400e28:	20000374 	.word	0x20000374
  400e2c:	20000114 	.word	0x20000114
  400e30:	20000378 	.word	0x20000378

00400e34 <cpu_irq_leave_critical>:
  400e34:	b480      	push	{r7}
  400e36:	af00      	add	r7, sp, #0
  400e38:	4b0c      	ldr	r3, [pc, #48]	; (400e6c <cpu_irq_leave_critical+0x38>)
  400e3a:	681b      	ldr	r3, [r3, #0]
  400e3c:	3b01      	subs	r3, #1
  400e3e:	4a0b      	ldr	r2, [pc, #44]	; (400e6c <cpu_irq_leave_critical+0x38>)
  400e40:	6013      	str	r3, [r2, #0]
  400e42:	4b0a      	ldr	r3, [pc, #40]	; (400e6c <cpu_irq_leave_critical+0x38>)
  400e44:	681b      	ldr	r3, [r3, #0]
  400e46:	2b00      	cmp	r3, #0
  400e48:	d10a      	bne.n	400e60 <cpu_irq_leave_critical+0x2c>
  400e4a:	4b09      	ldr	r3, [pc, #36]	; (400e70 <cpu_irq_leave_critical+0x3c>)
  400e4c:	781b      	ldrb	r3, [r3, #0]
  400e4e:	b2db      	uxtb	r3, r3
  400e50:	2b00      	cmp	r3, #0
  400e52:	d005      	beq.n	400e60 <cpu_irq_leave_critical+0x2c>
  400e54:	4b07      	ldr	r3, [pc, #28]	; (400e74 <cpu_irq_leave_critical+0x40>)
  400e56:	2201      	movs	r2, #1
  400e58:	701a      	strb	r2, [r3, #0]
  400e5a:	f3bf 8f5f 	dmb	sy
  400e5e:	b662      	cpsie	i
  400e60:	bf00      	nop
  400e62:	46bd      	mov	sp, r7
  400e64:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e68:	4770      	bx	lr
  400e6a:	bf00      	nop
  400e6c:	20000374 	.word	0x20000374
  400e70:	20000378 	.word	0x20000378
  400e74:	20000114 	.word	0x20000114

00400e78 <_read>:
  400e78:	b580      	push	{r7, lr}
  400e7a:	b086      	sub	sp, #24
  400e7c:	af00      	add	r7, sp, #0
  400e7e:	60f8      	str	r0, [r7, #12]
  400e80:	60b9      	str	r1, [r7, #8]
  400e82:	607a      	str	r2, [r7, #4]
  400e84:	2300      	movs	r3, #0
  400e86:	617b      	str	r3, [r7, #20]
  400e88:	68fb      	ldr	r3, [r7, #12]
  400e8a:	2b00      	cmp	r3, #0
  400e8c:	d012      	beq.n	400eb4 <_read+0x3c>
  400e8e:	f04f 33ff 	mov.w	r3, #4294967295
  400e92:	e013      	b.n	400ebc <_read+0x44>
  400e94:	4b0b      	ldr	r3, [pc, #44]	; (400ec4 <_read+0x4c>)
  400e96:	681b      	ldr	r3, [r3, #0]
  400e98:	4a0b      	ldr	r2, [pc, #44]	; (400ec8 <_read+0x50>)
  400e9a:	6812      	ldr	r2, [r2, #0]
  400e9c:	68b9      	ldr	r1, [r7, #8]
  400e9e:	4610      	mov	r0, r2
  400ea0:	4798      	blx	r3
  400ea2:	68bb      	ldr	r3, [r7, #8]
  400ea4:	3301      	adds	r3, #1
  400ea6:	60bb      	str	r3, [r7, #8]
  400ea8:	697b      	ldr	r3, [r7, #20]
  400eaa:	3301      	adds	r3, #1
  400eac:	617b      	str	r3, [r7, #20]
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	3b01      	subs	r3, #1
  400eb2:	607b      	str	r3, [r7, #4]
  400eb4:	687b      	ldr	r3, [r7, #4]
  400eb6:	2b00      	cmp	r3, #0
  400eb8:	dcec      	bgt.n	400e94 <_read+0x1c>
  400eba:	697b      	ldr	r3, [r7, #20]
  400ebc:	4618      	mov	r0, r3
  400ebe:	3718      	adds	r7, #24
  400ec0:	46bd      	mov	sp, r7
  400ec2:	bd80      	pop	{r7, pc}
  400ec4:	20000878 	.word	0x20000878
  400ec8:	20000880 	.word	0x20000880

00400ecc <_write>:
  400ecc:	b580      	push	{r7, lr}
  400ece:	b086      	sub	sp, #24
  400ed0:	af00      	add	r7, sp, #0
  400ed2:	60f8      	str	r0, [r7, #12]
  400ed4:	60b9      	str	r1, [r7, #8]
  400ed6:	607a      	str	r2, [r7, #4]
  400ed8:	2300      	movs	r3, #0
  400eda:	617b      	str	r3, [r7, #20]
  400edc:	68fb      	ldr	r3, [r7, #12]
  400ede:	2b01      	cmp	r3, #1
  400ee0:	d01e      	beq.n	400f20 <_write+0x54>
  400ee2:	68fb      	ldr	r3, [r7, #12]
  400ee4:	2b02      	cmp	r3, #2
  400ee6:	d01b      	beq.n	400f20 <_write+0x54>
  400ee8:	68fb      	ldr	r3, [r7, #12]
  400eea:	2b03      	cmp	r3, #3
  400eec:	d018      	beq.n	400f20 <_write+0x54>
  400eee:	f04f 33ff 	mov.w	r3, #4294967295
  400ef2:	e019      	b.n	400f28 <_write+0x5c>
  400ef4:	4b0e      	ldr	r3, [pc, #56]	; (400f30 <_write+0x64>)
  400ef6:	681a      	ldr	r2, [r3, #0]
  400ef8:	4b0e      	ldr	r3, [pc, #56]	; (400f34 <_write+0x68>)
  400efa:	6818      	ldr	r0, [r3, #0]
  400efc:	68bb      	ldr	r3, [r7, #8]
  400efe:	1c59      	adds	r1, r3, #1
  400f00:	60b9      	str	r1, [r7, #8]
  400f02:	781b      	ldrb	r3, [r3, #0]
  400f04:	4619      	mov	r1, r3
  400f06:	4790      	blx	r2
  400f08:	4603      	mov	r3, r0
  400f0a:	2b00      	cmp	r3, #0
  400f0c:	da02      	bge.n	400f14 <_write+0x48>
  400f0e:	f04f 33ff 	mov.w	r3, #4294967295
  400f12:	e009      	b.n	400f28 <_write+0x5c>
  400f14:	697b      	ldr	r3, [r7, #20]
  400f16:	3301      	adds	r3, #1
  400f18:	617b      	str	r3, [r7, #20]
  400f1a:	687b      	ldr	r3, [r7, #4]
  400f1c:	3b01      	subs	r3, #1
  400f1e:	607b      	str	r3, [r7, #4]
  400f20:	687b      	ldr	r3, [r7, #4]
  400f22:	2b00      	cmp	r3, #0
  400f24:	d1e6      	bne.n	400ef4 <_write+0x28>
  400f26:	697b      	ldr	r3, [r7, #20]
  400f28:	4618      	mov	r0, r3
  400f2a:	3718      	adds	r7, #24
  400f2c:	46bd      	mov	sp, r7
  400f2e:	bd80      	pop	{r7, pc}
  400f30:	2000087c 	.word	0x2000087c
  400f34:	20000880 	.word	0x20000880

00400f38 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400f38:	b480      	push	{r7}
  400f3a:	b083      	sub	sp, #12
  400f3c:	af00      	add	r7, sp, #0
  400f3e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400f40:	687b      	ldr	r3, [r7, #4]
  400f42:	2b07      	cmp	r3, #7
  400f44:	d825      	bhi.n	400f92 <osc_get_rate+0x5a>
  400f46:	a201      	add	r2, pc, #4	; (adr r2, 400f4c <osc_get_rate+0x14>)
  400f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f4c:	00400f6d 	.word	0x00400f6d
  400f50:	00400f73 	.word	0x00400f73
  400f54:	00400f79 	.word	0x00400f79
  400f58:	00400f7f 	.word	0x00400f7f
  400f5c:	00400f83 	.word	0x00400f83
  400f60:	00400f87 	.word	0x00400f87
  400f64:	00400f8b 	.word	0x00400f8b
  400f68:	00400f8f 	.word	0x00400f8f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400f6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400f70:	e010      	b.n	400f94 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f76:	e00d      	b.n	400f94 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f7c:	e00a      	b.n	400f94 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400f7e:	4b08      	ldr	r3, [pc, #32]	; (400fa0 <osc_get_rate+0x68>)
  400f80:	e008      	b.n	400f94 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  400f82:	4b08      	ldr	r3, [pc, #32]	; (400fa4 <osc_get_rate+0x6c>)
  400f84:	e006      	b.n	400f94 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  400f86:	4b08      	ldr	r3, [pc, #32]	; (400fa8 <osc_get_rate+0x70>)
  400f88:	e004      	b.n	400f94 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400f8a:	2300      	movs	r3, #0
  400f8c:	e002      	b.n	400f94 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400f8e:	2300      	movs	r3, #0
  400f90:	e000      	b.n	400f94 <osc_get_rate+0x5c>
#endif
	}

	return 0;
  400f92:	2300      	movs	r3, #0
}
  400f94:	4618      	mov	r0, r3
  400f96:	370c      	adds	r7, #12
  400f98:	46bd      	mov	sp, r7
  400f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f9e:	4770      	bx	lr
  400fa0:	007a1200 	.word	0x007a1200
  400fa4:	00f42400 	.word	0x00f42400
  400fa8:	016e3600 	.word	0x016e3600

00400fac <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400fac:	b580      	push	{r7, lr}
  400fae:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400fb0:	2001      	movs	r0, #1
  400fb2:	4b04      	ldr	r3, [pc, #16]	; (400fc4 <sysclk_get_main_hz+0x18>)
  400fb4:	4798      	blx	r3
  400fb6:	4602      	mov	r2, r0
  400fb8:	f640 634e 	movw	r3, #3662	; 0xe4e
  400fbc:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400fc0:	4618      	mov	r0, r3
  400fc2:	bd80      	pop	{r7, pc}
  400fc4:	00400f39 	.word	0x00400f39

00400fc8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400fc8:	b580      	push	{r7, lr}
  400fca:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400fcc:	4b02      	ldr	r3, [pc, #8]	; (400fd8 <sysclk_get_cpu_hz+0x10>)
  400fce:	4798      	blx	r3
  400fd0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400fd2:	4618      	mov	r0, r3
  400fd4:	bd80      	pop	{r7, pc}
  400fd6:	bf00      	nop
  400fd8:	00400fad 	.word	0x00400fad

00400fdc <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400fdc:	b480      	push	{r7}
  400fde:	b08d      	sub	sp, #52	; 0x34
  400fe0:	af00      	add	r7, sp, #0
  400fe2:	6078      	str	r0, [r7, #4]
  400fe4:	460b      	mov	r3, r1
  400fe6:	70fb      	strb	r3, [r7, #3]
  400fe8:	687b      	ldr	r3, [r7, #4]
  400fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  400fec:	78fb      	ldrb	r3, [r7, #3]
  400fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400ff4:	627b      	str	r3, [r7, #36]	; 0x24
  400ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400ff8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400ffa:	6a3b      	ldr	r3, [r7, #32]
  400ffc:	095b      	lsrs	r3, r3, #5
  400ffe:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401000:	69fb      	ldr	r3, [r7, #28]
  401002:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401006:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40100a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40100c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40100e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401012:	2b01      	cmp	r3, #1
  401014:	d109      	bne.n	40102a <ioport_set_pin_dir+0x4e>
  401016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401018:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40101a:	697b      	ldr	r3, [r7, #20]
  40101c:	f003 031f 	and.w	r3, r3, #31
  401020:	2201      	movs	r2, #1
  401022:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401024:	69bb      	ldr	r3, [r7, #24]
  401026:	611a      	str	r2, [r3, #16]
  401028:	e00c      	b.n	401044 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  40102a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40102e:	2b00      	cmp	r3, #0
  401030:	d108      	bne.n	401044 <ioport_set_pin_dir+0x68>
  401032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401034:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401036:	693b      	ldr	r3, [r7, #16]
  401038:	f003 031f 	and.w	r3, r3, #31
  40103c:	2201      	movs	r2, #1
  40103e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401040:	69bb      	ldr	r3, [r7, #24]
  401042:	615a      	str	r2, [r3, #20]
  401044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401046:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401048:	68fb      	ldr	r3, [r7, #12]
  40104a:	f003 031f 	and.w	r3, r3, #31
  40104e:	2201      	movs	r2, #1
  401050:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401052:	69bb      	ldr	r3, [r7, #24]
  401054:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  401058:	bf00      	nop
  40105a:	3734      	adds	r7, #52	; 0x34
  40105c:	46bd      	mov	sp, r7
  40105e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401062:	4770      	bx	lr

00401064 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401064:	b480      	push	{r7}
  401066:	b08b      	sub	sp, #44	; 0x2c
  401068:	af00      	add	r7, sp, #0
  40106a:	6078      	str	r0, [r7, #4]
  40106c:	460b      	mov	r3, r1
  40106e:	70fb      	strb	r3, [r7, #3]
  401070:	687b      	ldr	r3, [r7, #4]
  401072:	627b      	str	r3, [r7, #36]	; 0x24
  401074:	78fb      	ldrb	r3, [r7, #3]
  401076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40107c:	61fb      	str	r3, [r7, #28]
  40107e:	69fb      	ldr	r3, [r7, #28]
  401080:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401082:	69bb      	ldr	r3, [r7, #24]
  401084:	095b      	lsrs	r3, r3, #5
  401086:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401088:	697b      	ldr	r3, [r7, #20]
  40108a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40108e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401092:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401094:	613b      	str	r3, [r7, #16]

	if (level) {
  401096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40109a:	2b00      	cmp	r3, #0
  40109c:	d009      	beq.n	4010b2 <ioport_set_pin_level+0x4e>
  40109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010a0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4010a2:	68fb      	ldr	r3, [r7, #12]
  4010a4:	f003 031f 	and.w	r3, r3, #31
  4010a8:	2201      	movs	r2, #1
  4010aa:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4010ac:	693b      	ldr	r3, [r7, #16]
  4010ae:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4010b0:	e008      	b.n	4010c4 <ioport_set_pin_level+0x60>
  4010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010b4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4010b6:	68bb      	ldr	r3, [r7, #8]
  4010b8:	f003 031f 	and.w	r3, r3, #31
  4010bc:	2201      	movs	r2, #1
  4010be:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4010c0:	693b      	ldr	r3, [r7, #16]
  4010c2:	635a      	str	r2, [r3, #52]	; 0x34
  4010c4:	bf00      	nop
  4010c6:	372c      	adds	r7, #44	; 0x2c
  4010c8:	46bd      	mov	sp, r7
  4010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010ce:	4770      	bx	lr

004010d0 <PIOA_Handler>:
 *    the ISR must be as short as possible to ensure the INT level is set back to
 *    0 logical level before the CHx01 is ready for a new measurement. The maximum
 *    time for ISR is 8 us.
 */
void PIOA_Handler(void)
{
  4010d0:	b580      	push	{r7, lr}
  4010d2:	b082      	sub	sp, #8
  4010d4:	af00      	add	r7, sp, #0
	/* Read the ISR and IMR registers to know which interrupt(s) is(are) pending */
	uint32_t status = pio_get_interrupt_status(PIOA);
  4010d6:	481b      	ldr	r0, [pc, #108]	; (401144 <PIOA_Handler+0x74>)
  4010d8:	4b1b      	ldr	r3, [pc, #108]	; (401148 <PIOA_Handler+0x78>)
  4010da:	4798      	blx	r3
  4010dc:	6078      	str	r0, [r7, #4]
	status &= pio_get_interrupt_mask(PIOA);
  4010de:	4819      	ldr	r0, [pc, #100]	; (401144 <PIOA_Handler+0x74>)
  4010e0:	4b1a      	ldr	r3, [pc, #104]	; (40114c <PIOA_Handler+0x7c>)
  4010e2:	4798      	blx	r3
  4010e4:	4602      	mov	r2, r0
  4010e6:	687b      	ldr	r3, [r7, #4]
  4010e8:	4013      	ands	r3, r2
  4010ea:	607b      	str	r3, [r7, #4]

	if (status & PIN_EXT_MotionINT_MASK)
  4010ec:	687b      	ldr	r3, [r7, #4]
  4010ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  4010f2:	2b00      	cmp	r3, #0
  4010f4:	d001      	beq.n	4010fa <PIOA_Handler+0x2a>
		ext_MotionINT_handler();
  4010f6:	4b16      	ldr	r3, [pc, #88]	; (401150 <PIOA_Handler+0x80>)
  4010f8:	4798      	blx	r3
	if (status & PIN_EXT_ChirpINT0_MASK)
  4010fa:	687b      	ldr	r3, [r7, #4]
  4010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  401100:	2b00      	cmp	r3, #0
  401102:	d002      	beq.n	40110a <PIOA_Handler+0x3a>
		ext_int_handler(0);
  401104:	2000      	movs	r0, #0
  401106:	4b13      	ldr	r3, [pc, #76]	; (401154 <PIOA_Handler+0x84>)
  401108:	4798      	blx	r3
	if (status & PIN_EXT_ChirpINT1_MASK)
  40110a:	687b      	ldr	r3, [r7, #4]
  40110c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  401110:	2b00      	cmp	r3, #0
  401112:	d002      	beq.n	40111a <PIOA_Handler+0x4a>
		ext_int_handler(1);
  401114:	2001      	movs	r0, #1
  401116:	4b0f      	ldr	r3, [pc, #60]	; (401154 <PIOA_Handler+0x84>)
  401118:	4798      	blx	r3
	if (status & PIN_EXT_ChirpINT2_MASK)
  40111a:	687b      	ldr	r3, [r7, #4]
  40111c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  401120:	2b00      	cmp	r3, #0
  401122:	d002      	beq.n	40112a <PIOA_Handler+0x5a>
		ext_int_handler(2);
  401124:	2002      	movs	r0, #2
  401126:	4b0b      	ldr	r3, [pc, #44]	; (401154 <PIOA_Handler+0x84>)
  401128:	4798      	blx	r3
	if (status & PIN_EXT_ChirpINT3_MASK)
  40112a:	687b      	ldr	r3, [r7, #4]
  40112c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
  401130:	2b00      	cmp	r3, #0
  401132:	d002      	beq.n	40113a <PIOA_Handler+0x6a>
		ext_int_handler(3);
  401134:	2003      	movs	r0, #3
  401136:	4b07      	ldr	r3, [pc, #28]	; (401154 <PIOA_Handler+0x84>)
  401138:	4798      	blx	r3
}
  40113a:	bf00      	nop
  40113c:	3708      	adds	r7, #8
  40113e:	46bd      	mov	sp, r7
  401140:	bd80      	pop	{r7, pc}
  401142:	bf00      	nop
  401144:	400e0e00 	.word	0x400e0e00
  401148:	00403d91 	.word	0x00403d91
  40114c:	00403da9 	.word	0x00403da9
  401150:	00401159 	.word	0x00401159
  401154:	00401169 	.word	0x00401169

00401158 <ext_MotionINT_handler>:

void ext_MotionINT_handler(void) {
  401158:	b480      	push	{r7}
  40115a:	af00      	add	r7, sp, #0
#ifdef ICM42688
	imu_data_ready_isr_callback();
#endif // ICM42688
}
  40115c:	bf00      	nop
  40115e:	46bd      	mov	sp, r7
  401160:	f85d 7b04 	ldr.w	r7, [sp], #4
  401164:	4770      	bx	lr
	...

00401168 <ext_int_handler>:

static void ext_int_handler(uint32_t sensor_id) {
  401168:	b580      	push	{r7, lr}
  40116a:	b084      	sub	sp, #16
  40116c:	af00      	add	r7, sp, #0
  40116e:	6078      	str	r0, [r7, #4]
	ch_io_int_callback_t func_ptr = sensor_group_ptr->io_int_callback;
  401170:	4b13      	ldr	r3, [pc, #76]	; (4011c0 <ext_int_handler+0x58>)
  401172:	681b      	ldr	r3, [r3, #0]
  401174:	691b      	ldr	r3, [r3, #16]
  401176:	60fb      	str	r3, [r7, #12]
	uint32_t gpio_pin = chirp_pin_io[sensor_id];
  401178:	4a12      	ldr	r2, [pc, #72]	; (4011c4 <ext_int_handler+0x5c>)
  40117a:	687b      	ldr	r3, [r7, #4]
  40117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401180:	60bb      	str	r3, [r7, #8]

	/* Put the line in output to stabilize it to 0V until the next trig */
	ioport_set_pin_level(gpio_pin, IOPORT_PIN_LEVEL_LOW);	// set to low level
  401182:	2100      	movs	r1, #0
  401184:	68b8      	ldr	r0, [r7, #8]
  401186:	4b10      	ldr	r3, [pc, #64]	; (4011c8 <ext_int_handler+0x60>)
  401188:	4798      	blx	r3
	ioport_set_pin_dir(gpio_pin, IOPORT_DIR_OUTPUT);		// set pin direction as output
  40118a:	2101      	movs	r1, #1
  40118c:	68b8      	ldr	r0, [r7, #8]
  40118e:	4b0f      	ldr	r3, [pc, #60]	; (4011cc <ext_int_handler+0x64>)
  401190:	4798      	blx	r3
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, chirp_pin_io_irq[sensor_id]); // disable interrupt
  401192:	4a0f      	ldr	r2, [pc, #60]	; (4011d0 <ext_int_handler+0x68>)
  401194:	687b      	ldr	r3, [r7, #4]
  401196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40119a:	4619      	mov	r1, r3
  40119c:	480d      	ldr	r0, [pc, #52]	; (4011d4 <ext_int_handler+0x6c>)
  40119e:	4b0e      	ldr	r3, [pc, #56]	; (4011d8 <ext_int_handler+0x70>)
  4011a0:	4798      	blx	r3

	if (func_ptr != NULL) {
  4011a2:	68fb      	ldr	r3, [r7, #12]
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	d006      	beq.n	4011b6 <ext_int_handler+0x4e>
		// Call application callback function - pass I/O index to identify interrupting device
		(*func_ptr)(sensor_group_ptr, sensor_id);
  4011a8:	4b05      	ldr	r3, [pc, #20]	; (4011c0 <ext_int_handler+0x58>)
  4011aa:	681a      	ldr	r2, [r3, #0]
  4011ac:	687b      	ldr	r3, [r7, #4]
  4011ae:	b2d9      	uxtb	r1, r3
  4011b0:	68fb      	ldr	r3, [r7, #12]
  4011b2:	4610      	mov	r0, r2
  4011b4:	4798      	blx	r3
	}
}
  4011b6:	bf00      	nop
  4011b8:	3710      	adds	r7, #16
  4011ba:	46bd      	mov	sp, r7
  4011bc:	bd80      	pop	{r7, pc}
  4011be:	bf00      	nop
  4011c0:	20000894 	.word	0x20000894
  4011c4:	20000130 	.word	0x20000130
  4011c8:	00401065 	.word	0x00401065
  4011cc:	00400fdd 	.word	0x00400fdd
  4011d0:	20000140 	.word	0x20000140
  4011d4:	400e0e00 	.word	0x400e0e00
  4011d8:	00403d75 	.word	0x00403d75

004011dc <FLEXCOM1_Handler>:

void FLEXCOM1_Handler(void) {
  4011dc:	b580      	push	{r7, lr}
  4011de:	af00      	add	r7, sp, #0
	flexcom_handler(1);			// call local handler with index value
  4011e0:	2001      	movs	r0, #1
  4011e2:	4b02      	ldr	r3, [pc, #8]	; (4011ec <FLEXCOM1_Handler+0x10>)
  4011e4:	4798      	blx	r3
}
  4011e6:	bf00      	nop
  4011e8:	bd80      	pop	{r7, pc}
  4011ea:	bf00      	nop
  4011ec:	00401205 	.word	0x00401205

004011f0 <FLEXCOM3_Handler>:
	
void FLEXCOM3_Handler(void) {
  4011f0:	b580      	push	{r7, lr}
  4011f2:	af00      	add	r7, sp, #0
	flexcom_handler(3);			// call local handler with index value
  4011f4:	2003      	movs	r0, #3
  4011f6:	4b02      	ldr	r3, [pc, #8]	; (401200 <FLEXCOM3_Handler+0x10>)
  4011f8:	4798      	blx	r3
}
  4011fa:	bf00      	nop
  4011fc:	bd80      	pop	{r7, pc}
  4011fe:	bf00      	nop
  401200:	00401205 	.word	0x00401205

00401204 <flexcom_handler>:


void flexcom_handler(uint8_t port_index) {
  401204:	b580      	push	{r7, lr}
  401206:	b08a      	sub	sp, #40	; 0x28
  401208:	af00      	add	r7, sp, #0
  40120a:	4603      	mov	r3, r0
  40120c:	71fb      	strb	r3, [r7, #7]
	Twi *twi_ptr;
	Pdc *pdc_ptr;
	uint8_t *buf_ptr;
	uint32_t num_bytes;
	uint8_t	 bus_index = 0;
  40120e:	2300      	movs	r3, #0
  401210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t twi_status;
	uint32_t timeout_count = 0;
  401214:	2300      	movs	r3, #0
  401216:	61fb      	str	r3, [r7, #28]
	uint8_t error = 0;
  401218:	2300      	movs	r3, #0
  40121a:	76fb      	strb	r3, [r7, #27]

	if (port_index == 1) {
  40121c:	79fb      	ldrb	r3, [r7, #7]
  40121e:	2b01      	cmp	r3, #1
  401220:	d105      	bne.n	40122e <flexcom_handler+0x2a>
		twi_ptr = BOARD_BASE_TWI1;
  401222:	4b4b      	ldr	r3, [pc, #300]	; (401350 <flexcom_handler+0x14c>)
  401224:	627b      	str	r3, [r7, #36]	; 0x24
		bus_index = 0;
  401226:	2300      	movs	r3, #0
  401228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40122c:	e00b      	b.n	401246 <flexcom_handler+0x42>
	} else if (port_index == 3) {
  40122e:	79fb      	ldrb	r3, [r7, #7]
  401230:	2b03      	cmp	r3, #3
  401232:	d105      	bne.n	401240 <flexcom_handler+0x3c>
		twi_ptr = BOARD_BASE_TWI3;
  401234:	4b47      	ldr	r3, [pc, #284]	; (401354 <flexcom_handler+0x150>)
  401236:	627b      	str	r3, [r7, #36]	; 0x24
		bus_index = 1;
  401238:	2301      	movs	r3, #1
  40123a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40123e:	e002      	b.n	401246 <flexcom_handler+0x42>
	} else {
		error = 1;		// bad port index
  401240:	2301      	movs	r3, #1
  401242:	76fb      	strb	r3, [r7, #27]
		return;
  401244:	e080      	b.n	401348 <flexcom_handler+0x144>
	}

	pdc_ptr   = twi_get_pdc_base(twi_ptr);
  401246:	6a78      	ldr	r0, [r7, #36]	; 0x24
  401248:	4b43      	ldr	r3, [pc, #268]	; (401358 <flexcom_handler+0x154>)
  40124a:	4798      	blx	r3
  40124c:	6178      	str	r0, [r7, #20]
	buf_ptr   = i2c_nb_transactions[bus_index].buf_ptr;
  40124e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401252:	4a42      	ldr	r2, [pc, #264]	; (40135c <flexcom_handler+0x158>)
  401254:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401258:	613b      	str	r3, [r7, #16]
	num_bytes = i2c_nb_transactions[bus_index].num_bytes;	
  40125a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40125e:	4a3f      	ldr	r2, [pc, #252]	; (40135c <flexcom_handler+0x158>)
  401260:	00db      	lsls	r3, r3, #3
  401262:	4413      	add	r3, r2
  401264:	889b      	ldrh	r3, [r3, #4]
  401266:	60fb      	str	r3, [r7, #12]

	twi_status = twi_get_interrupt_status(twi_ptr);
  401268:	6a78      	ldr	r0, [r7, #36]	; 0x24
  40126a:	4b3d      	ldr	r3, [pc, #244]	; (401360 <flexcom_handler+0x15c>)
  40126c:	4798      	blx	r3
  40126e:	60b8      	str	r0, [r7, #8]
	twi_status &= twi_get_interrupt_mask(twi_ptr);
  401270:	6a78      	ldr	r0, [r7, #36]	; 0x24
  401272:	4b3c      	ldr	r3, [pc, #240]	; (401364 <flexcom_handler+0x160>)
  401274:	4798      	blx	r3
  401276:	4602      	mov	r2, r0
  401278:	68bb      	ldr	r3, [r7, #8]
  40127a:	4013      	ands	r3, r2
  40127c:	60bb      	str	r3, [r7, #8]


	if ((!error) && (twi_status & TWI_SR_ENDRX))  {
  40127e:	7efb      	ldrb	r3, [r7, #27]
  401280:	2b00      	cmp	r3, #0
  401282:	d161      	bne.n	401348 <flexcom_handler+0x144>
  401284:	68bb      	ldr	r3, [r7, #8]
  401286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  40128a:	2b00      	cmp	r3, #0
  40128c:	d05c      	beq.n	401348 <flexcom_handler+0x144>
		/* Disable the RX PDC transfer requests */
		pdc_disable_transfer(pdc_ptr, PERIPH_PTCR_RXTDIS);
  40128e:	2102      	movs	r1, #2
  401290:	6978      	ldr	r0, [r7, #20]
  401292:	4b35      	ldr	r3, [pc, #212]	; (401368 <flexcom_handler+0x164>)
  401294:	4798      	blx	r3

		/* Disable TWI interrupts */
		twi_disable_interrupt(twi_ptr, TWI_SR_ENDRX);
  401296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40129a:	6a78      	ldr	r0, [r7, #36]	; 0x24
  40129c:	4b33      	ldr	r3, [pc, #204]	; (40136c <flexcom_handler+0x168>)
  40129e:	4798      	blx	r3

		/* Wait for next-to-last byte to be read */
		timeout_count = 0;
  4012a0:	2300      	movs	r3, #0
  4012a2:	61fb      	str	r3, [r7, #28]
		while ((twi_ptr->TWI_SR & TWI_SR_RXRDY) == 0) {
  4012a4:	e007      	b.n	4012b6 <flexcom_handler+0xb2>
			if (++timeout_count >= I2C_TIMEOUT_COUNT) {
  4012a6:	69fb      	ldr	r3, [r7, #28]
  4012a8:	3301      	adds	r3, #1
  4012aa:	61fb      	str	r3, [r7, #28]
  4012ac:	69fb      	ldr	r3, [r7, #28]
  4012ae:	f242 720f 	movw	r2, #9999	; 0x270f
  4012b2:	4293      	cmp	r3, r2
  4012b4:	d806      	bhi.n	4012c4 <flexcom_handler+0xc0>
		while ((twi_ptr->TWI_SR & TWI_SR_RXRDY) == 0) {
  4012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012b8:	6a1b      	ldr	r3, [r3, #32]
  4012ba:	f003 0302 	and.w	r3, r3, #2
  4012be:	2b00      	cmp	r3, #0
  4012c0:	d0f1      	beq.n	4012a6 <flexcom_handler+0xa2>
  4012c2:	e000      	b.n	4012c6 <flexcom_handler+0xc2>
				break;
  4012c4:	bf00      	nop
			}
		}

		/* Set stop command */
		twi_ptr->TWI_CR = TWI_CR_STOP;
  4012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012c8:	2202      	movs	r2, #2
  4012ca:	601a      	str	r2, [r3, #0]

		buf_ptr[num_bytes-2] = twi_ptr->TWI_RHR;
  4012cc:	68fb      	ldr	r3, [r7, #12]
  4012ce:	3b02      	subs	r3, #2
  4012d0:	693a      	ldr	r2, [r7, #16]
  4012d2:	4413      	add	r3, r2
  4012d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4012d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4012d8:	b2d2      	uxtb	r2, r2
  4012da:	701a      	strb	r2, [r3, #0]

		/* Wait for last byte to be read */
		timeout_count = 0;
  4012dc:	2300      	movs	r3, #0
  4012de:	61fb      	str	r3, [r7, #28]
		while ((twi_ptr->TWI_SR & TWI_SR_RXRDY) == 0) {
  4012e0:	e007      	b.n	4012f2 <flexcom_handler+0xee>
			if (++timeout_count >= I2C_TIMEOUT_COUNT) {
  4012e2:	69fb      	ldr	r3, [r7, #28]
  4012e4:	3301      	adds	r3, #1
  4012e6:	61fb      	str	r3, [r7, #28]
  4012e8:	69fb      	ldr	r3, [r7, #28]
  4012ea:	f242 720f 	movw	r2, #9999	; 0x270f
  4012ee:	4293      	cmp	r3, r2
  4012f0:	d806      	bhi.n	401300 <flexcom_handler+0xfc>
		while ((twi_ptr->TWI_SR & TWI_SR_RXRDY) == 0) {
  4012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012f4:	6a1b      	ldr	r3, [r3, #32]
  4012f6:	f003 0302 	and.w	r3, r3, #2
  4012fa:	2b00      	cmp	r3, #0
  4012fc:	d0f1      	beq.n	4012e2 <flexcom_handler+0xde>
  4012fe:	e000      	b.n	401302 <flexcom_handler+0xfe>
				break;
  401300:	bf00      	nop
			}
		}

		buf_ptr[num_bytes-1] = twi_ptr->TWI_RHR;
  401302:	68fb      	ldr	r3, [r7, #12]
  401304:	3b01      	subs	r3, #1
  401306:	693a      	ldr	r2, [r7, #16]
  401308:	4413      	add	r3, r2
  40130a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40130c:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40130e:	b2d2      	uxtb	r2, r2
  401310:	701a      	strb	r2, [r3, #0]

		/* Wait for transfer to complete */
		timeout_count = 0;
  401312:	2300      	movs	r3, #0
  401314:	61fb      	str	r3, [r7, #28]
		while ((twi_ptr->TWI_SR & TWI_SR_TXCOMP) == 0) {
  401316:	e007      	b.n	401328 <flexcom_handler+0x124>
			if (++timeout_count >= I2C_TIMEOUT_COUNT) {
  401318:	69fb      	ldr	r3, [r7, #28]
  40131a:	3301      	adds	r3, #1
  40131c:	61fb      	str	r3, [r7, #28]
  40131e:	69fb      	ldr	r3, [r7, #28]
  401320:	f242 720f 	movw	r2, #9999	; 0x270f
  401324:	4293      	cmp	r3, r2
  401326:	d806      	bhi.n	401336 <flexcom_handler+0x132>
		while ((twi_ptr->TWI_SR & TWI_SR_TXCOMP) == 0) {
  401328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40132a:	6a1b      	ldr	r3, [r3, #32]
  40132c:	f003 0301 	and.w	r3, r3, #1
  401330:	2b00      	cmp	r3, #0
  401332:	d0f1      	beq.n	401318 <flexcom_handler+0x114>
  401334:	e000      	b.n	401338 <flexcom_handler+0x134>
				break;
  401336:	bf00      	nop
			}
		}

		/* Notify sensor driver that this transaction is complete */
		ch_io_notify(sensor_group_ptr, bus_index);
  401338:	4b0d      	ldr	r3, [pc, #52]	; (401370 <flexcom_handler+0x16c>)
  40133a:	681b      	ldr	r3, [r3, #0]
  40133c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  401340:	4611      	mov	r1, r2
  401342:	4618      	mov	r0, r3
  401344:	4b0b      	ldr	r3, [pc, #44]	; (401374 <flexcom_handler+0x170>)
  401346:	4798      	blx	r3
	}

}
  401348:	3728      	adds	r7, #40	; 0x28
  40134a:	46bd      	mov	sp, r7
  40134c:	bd80      	pop	{r7, pc}
  40134e:	bf00      	nop
  401350:	40020600 	.word	0x40020600
  401354:	40018600 	.word	0x40018600
  401358:	00404ec1 	.word	0x00404ec1
  40135c:	20000884 	.word	0x20000884
  401360:	00404e71 	.word	0x00404e71
  401364:	00404e89 	.word	0x00404e89
  401368:	00403a2d 	.word	0x00403a2d
  40136c:	00404e51 	.word	0x00404e51
  401370:	20000894 	.word	0x20000894
  401374:	00405ded 	.word	0x00405ded

00401378 <RTT_Handler>:


void RTT_Handler(void) {
  401378:	b580      	push	{r7, lr}
  40137a:	af00      	add	r7, sp, #0

	/* Get RTT status */
	rtt_get_status(RTT);
  40137c:	4802      	ldr	r0, [pc, #8]	; (401388 <RTT_Handler+0x10>)
  40137e:	4b03      	ldr	r3, [pc, #12]	; (40138c <RTT_Handler+0x14>)
  401380:	4798      	blx	r3
}
  401382:	bf00      	nop
  401384:	bd80      	pop	{r7, pc}
  401386:	bf00      	nop
  401388:	400e1430 	.word	0x400e1430
  40138c:	00404931 	.word	0x00404931

00401390 <TC0_Handler>:

/* Interrupt handler for TC0/Channel0 peripheral */
void TC0_Handler(void)
{
  401390:	b580      	push	{r7, lr}
  401392:	af00      	add	r7, sp, #0
	/* This handles the case of counter overflow on TC_CHANNEL_LSEPOCH and clears the status register */
	time_get_in_us();
  401394:	4b01      	ldr	r3, [pc, #4]	; (40139c <TC0_Handler+0xc>)
  401396:	4798      	blx	r3
}
  401398:	bf00      	nop
  40139a:	bd80      	pop	{r7, pc}
  40139c:	00400a0d 	.word	0x00400a0d

004013a0 <TC1_Handler>:

/* Interrupt handler for TC0/Channel1 peripheral */
void TC1_Handler(void)
{
  4013a0:	b580      	push	{r7, lr}
  4013a2:	b082      	sub	sp, #8
  4013a4:	af00      	add	r7, sp, #0
	uint32_t status = tc_get_status(TC0, TC_CHANNEL_US);
  4013a6:	2101      	movs	r1, #1
  4013a8:	480a      	ldr	r0, [pc, #40]	; (4013d4 <TC1_Handler+0x34>)
  4013aa:	4b0b      	ldr	r3, [pc, #44]	; (4013d8 <TC1_Handler+0x38>)
  4013ac:	4798      	blx	r3
  4013ae:	6078      	str	r0, [r7, #4]
	uint32_t int_mask = tc_get_interrupt_mask(TC0, TC_CHANNEL_US);
  4013b0:	2101      	movs	r1, #1
  4013b2:	4808      	ldr	r0, [pc, #32]	; (4013d4 <TC1_Handler+0x34>)
  4013b4:	4b09      	ldr	r3, [pc, #36]	; (4013dc <TC1_Handler+0x3c>)
  4013b6:	4798      	blx	r3
  4013b8:	6038      	str	r0, [r7, #0]

	if (status & (int_mask & TC_IMR_CPCS)) {
  4013ba:	683a      	ldr	r2, [r7, #0]
  4013bc:	687b      	ldr	r3, [r7, #4]
  4013be:	4013      	ands	r3, r2
  4013c0:	f003 0310 	and.w	r3, r3, #16
  4013c4:	2b00      	cmp	r3, #0
  4013c6:	d001      	beq.n	4013cc <TC1_Handler+0x2c>
		chbsp_periodic_timer_handler();
  4013c8:	4b05      	ldr	r3, [pc, #20]	; (4013e0 <TC1_Handler+0x40>)
  4013ca:	4798      	blx	r3
	}
}
  4013cc:	bf00      	nop
  4013ce:	3708      	adds	r7, #8
  4013d0:	46bd      	mov	sp, r7
  4013d2:	bd80      	pop	{r7, pc}
  4013d4:	40010000 	.word	0x40010000
  4013d8:	00404a4f 	.word	0x00404a4f
  4013dc:	00404a2b 	.word	0x00404a2b
  4013e0:	00402e55 	.word	0x00402e55

004013e4 <sensor_led_on>:

void sensor_led_on(uint32_t chirp_led_pin) {
  4013e4:	b580      	push	{r7, lr}
  4013e6:	b082      	sub	sp, #8
  4013e8:	af00      	add	r7, sp, #0
  4013ea:	6078      	str	r0, [r7, #4]
	ioport_set_pin_dir(chirp_led_pin, IOPORT_DIR_OUTPUT); 
  4013ec:	2101      	movs	r1, #1
  4013ee:	6878      	ldr	r0, [r7, #4]
  4013f0:	4b04      	ldr	r3, [pc, #16]	; (401404 <sensor_led_on+0x20>)
  4013f2:	4798      	blx	r3
	ioport_set_pin_level(chirp_led_pin, IOPORT_PIN_LEVEL_LOW); 
  4013f4:	2100      	movs	r1, #0
  4013f6:	6878      	ldr	r0, [r7, #4]
  4013f8:	4b03      	ldr	r3, [pc, #12]	; (401408 <sensor_led_on+0x24>)
  4013fa:	4798      	blx	r3
}	
  4013fc:	bf00      	nop
  4013fe:	3708      	adds	r7, #8
  401400:	46bd      	mov	sp, r7
  401402:	bd80      	pop	{r7, pc}
  401404:	00400fdd 	.word	0x00400fdd
  401408:	00401065 	.word	0x00401065

0040140c <indicate_alive>:
void sensor_led_toggle(uint32_t chirp_led_pin)
{
	ioport_toggle_pin_level(chirp_led_pin);
}

void indicate_alive(void) {
  40140c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401410:	af00      	add	r7, sp, #0
	ioport_set_pin_dir(CHIRP_OK_0, IOPORT_DIR_OUTPUT); //CHIRP_OK_0=output
  401412:	2101      	movs	r1, #1
  401414:	2000      	movs	r0, #0
  401416:	4b35      	ldr	r3, [pc, #212]	; (4014ec <indicate_alive+0xe0>)
  401418:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_OK_1, IOPORT_DIR_OUTPUT);
  40141a:	2101      	movs	r1, #1
  40141c:	2001      	movs	r0, #1
  40141e:	4b33      	ldr	r3, [pc, #204]	; (4014ec <indicate_alive+0xe0>)
  401420:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_OK_2, IOPORT_DIR_OUTPUT);
  401422:	2101      	movs	r1, #1
  401424:	2005      	movs	r0, #5
  401426:	4b31      	ldr	r3, [pc, #196]	; (4014ec <indicate_alive+0xe0>)
  401428:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_OK_3, IOPORT_DIR_OUTPUT);
  40142a:	2101      	movs	r1, #1
  40142c:	202f      	movs	r0, #47	; 0x2f
  40142e:	4b2f      	ldr	r3, [pc, #188]	; (4014ec <indicate_alive+0xe0>)
  401430:	4798      	blx	r3
	
	ioport_set_pin_level(CHIRP_OK_0, IOPORT_PIN_LEVEL_LOW); //CHIRP_OK_0=L LED=on
  401432:	2100      	movs	r1, #0
  401434:	2000      	movs	r0, #0
  401436:	4b2e      	ldr	r3, [pc, #184]	; (4014f0 <indicate_alive+0xe4>)
  401438:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_1, IOPORT_PIN_LEVEL_LOW);
  40143a:	2100      	movs	r1, #0
  40143c:	2001      	movs	r0, #1
  40143e:	4b2c      	ldr	r3, [pc, #176]	; (4014f0 <indicate_alive+0xe4>)
  401440:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_2, IOPORT_PIN_LEVEL_LOW);
  401442:	2100      	movs	r1, #0
  401444:	2005      	movs	r0, #5
  401446:	4b2a      	ldr	r3, [pc, #168]	; (4014f0 <indicate_alive+0xe4>)
  401448:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_3, IOPORT_PIN_LEVEL_LOW);
  40144a:	2100      	movs	r1, #0
  40144c:	202f      	movs	r0, #47	; 0x2f
  40144e:	4b28      	ldr	r3, [pc, #160]	; (4014f0 <indicate_alive+0xe4>)
  401450:	4798      	blx	r3
	
	delay_s(1);		//light up for 1s
  401452:	4b28      	ldr	r3, [pc, #160]	; (4014f4 <indicate_alive+0xe8>)
  401454:	4798      	blx	r3
  401456:	4603      	mov	r3, r0
  401458:	4619      	mov	r1, r3
  40145a:	f04f 0200 	mov.w	r2, #0
  40145e:	460b      	mov	r3, r1
  401460:	4614      	mov	r4, r2
  401462:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  401466:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  40146a:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  40146e:	4653      	mov	r3, sl
  401470:	465c      	mov	r4, fp
  401472:	1a5b      	subs	r3, r3, r1
  401474:	eb64 0402 	sbc.w	r4, r4, r2
  401478:	ea4f 0984 	mov.w	r9, r4, lsl #2
  40147c:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  401480:	ea4f 0883 	mov.w	r8, r3, lsl #2
  401484:	4643      	mov	r3, r8
  401486:	464c      	mov	r4, r9
  401488:	185b      	adds	r3, r3, r1
  40148a:	eb44 0402 	adc.w	r4, r4, r2
  40148e:	00e6      	lsls	r6, r4, #3
  401490:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401494:	00dd      	lsls	r5, r3, #3
  401496:	462b      	mov	r3, r5
  401498:	4634      	mov	r4, r6
  40149a:	4619      	mov	r1, r3
  40149c:	4622      	mov	r2, r4
  40149e:	f243 63af 	movw	r3, #13999	; 0x36af
  4014a2:	f04f 0400 	mov.w	r4, #0
  4014a6:	18cd      	adds	r5, r1, r3
  4014a8:	eb42 0604 	adc.w	r6, r2, r4
  4014ac:	4628      	mov	r0, r5
  4014ae:	4631      	mov	r1, r6
  4014b0:	4c11      	ldr	r4, [pc, #68]	; (4014f8 <indicate_alive+0xec>)
  4014b2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4014b6:	f04f 0300 	mov.w	r3, #0
  4014ba:	47a0      	blx	r4
  4014bc:	4603      	mov	r3, r0
  4014be:	460c      	mov	r4, r1
  4014c0:	4618      	mov	r0, r3
  4014c2:	4b0e      	ldr	r3, [pc, #56]	; (4014fc <indicate_alive+0xf0>)
  4014c4:	4798      	blx	r3
	
	ioport_set_pin_level(CHIRP_OK_0, IOPORT_PIN_LEVEL_HIGH); //CHIRP_OK_0=H LED=off
  4014c6:	2101      	movs	r1, #1
  4014c8:	2000      	movs	r0, #0
  4014ca:	4b09      	ldr	r3, [pc, #36]	; (4014f0 <indicate_alive+0xe4>)
  4014cc:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_1, IOPORT_PIN_LEVEL_HIGH);
  4014ce:	2101      	movs	r1, #1
  4014d0:	2001      	movs	r0, #1
  4014d2:	4b07      	ldr	r3, [pc, #28]	; (4014f0 <indicate_alive+0xe4>)
  4014d4:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_2, IOPORT_PIN_LEVEL_HIGH);
  4014d6:	2101      	movs	r1, #1
  4014d8:	2005      	movs	r0, #5
  4014da:	4b05      	ldr	r3, [pc, #20]	; (4014f0 <indicate_alive+0xe4>)
  4014dc:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_OK_3, IOPORT_PIN_LEVEL_HIGH);
  4014de:	2101      	movs	r1, #1
  4014e0:	202f      	movs	r0, #47	; 0x2f
  4014e2:	4b03      	ldr	r3, [pc, #12]	; (4014f0 <indicate_alive+0xe4>)
  4014e4:	4798      	blx	r3
}
  4014e6:	bf00      	nop
  4014e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014ec:	00400fdd 	.word	0x00400fdd
  4014f0:	00401065 	.word	0x00401065
  4014f4:	00400fc9 	.word	0x00400fc9
  4014f8:	0040bdcd 	.word	0x0040bdcd
  4014fc:	20000001 	.word	0x20000001

00401500 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401500:	b480      	push	{r7}
  401502:	b083      	sub	sp, #12
  401504:	af00      	add	r7, sp, #0
  401506:	4603      	mov	r3, r0
  401508:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40150a:	4909      	ldr	r1, [pc, #36]	; (401530 <NVIC_EnableIRQ+0x30>)
  40150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401510:	095b      	lsrs	r3, r3, #5
  401512:	79fa      	ldrb	r2, [r7, #7]
  401514:	f002 021f 	and.w	r2, r2, #31
  401518:	2001      	movs	r0, #1
  40151a:	fa00 f202 	lsl.w	r2, r0, r2
  40151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401522:	bf00      	nop
  401524:	370c      	adds	r7, #12
  401526:	46bd      	mov	sp, r7
  401528:	f85d 7b04 	ldr.w	r7, [sp], #4
  40152c:	4770      	bx	lr
  40152e:	bf00      	nop
  401530:	e000e100 	.word	0xe000e100

00401534 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401534:	b480      	push	{r7}
  401536:	b083      	sub	sp, #12
  401538:	af00      	add	r7, sp, #0
  40153a:	4603      	mov	r3, r0
  40153c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40153e:	4909      	ldr	r1, [pc, #36]	; (401564 <NVIC_DisableIRQ+0x30>)
  401540:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401544:	095b      	lsrs	r3, r3, #5
  401546:	79fa      	ldrb	r2, [r7, #7]
  401548:	f002 021f 	and.w	r2, r2, #31
  40154c:	2001      	movs	r0, #1
  40154e:	fa00 f202 	lsl.w	r2, r0, r2
  401552:	3320      	adds	r3, #32
  401554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401558:	bf00      	nop
  40155a:	370c      	adds	r7, #12
  40155c:	46bd      	mov	sp, r7
  40155e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401562:	4770      	bx	lr
  401564:	e000e100 	.word	0xe000e100

00401568 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401568:	b480      	push	{r7}
  40156a:	b083      	sub	sp, #12
  40156c:	af00      	add	r7, sp, #0
  40156e:	4603      	mov	r3, r0
  401570:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401572:	4909      	ldr	r1, [pc, #36]	; (401598 <NVIC_ClearPendingIRQ+0x30>)
  401574:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401578:	095b      	lsrs	r3, r3, #5
  40157a:	79fa      	ldrb	r2, [r7, #7]
  40157c:	f002 021f 	and.w	r2, r2, #31
  401580:	2001      	movs	r0, #1
  401582:	fa00 f202 	lsl.w	r2, r0, r2
  401586:	3360      	adds	r3, #96	; 0x60
  401588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40158c:	bf00      	nop
  40158e:	370c      	adds	r7, #12
  401590:	46bd      	mov	sp, r7
  401592:	f85d 7b04 	ldr.w	r7, [sp], #4
  401596:	4770      	bx	lr
  401598:	e000e100 	.word	0xe000e100

0040159c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40159c:	b480      	push	{r7}
  40159e:	b083      	sub	sp, #12
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	4603      	mov	r3, r0
  4015a4:	6039      	str	r1, [r7, #0]
  4015a6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4015ac:	2b00      	cmp	r3, #0
  4015ae:	da0b      	bge.n	4015c8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4015b0:	490d      	ldr	r1, [pc, #52]	; (4015e8 <NVIC_SetPriority+0x4c>)
  4015b2:	79fb      	ldrb	r3, [r7, #7]
  4015b4:	f003 030f 	and.w	r3, r3, #15
  4015b8:	3b04      	subs	r3, #4
  4015ba:	683a      	ldr	r2, [r7, #0]
  4015bc:	b2d2      	uxtb	r2, r2
  4015be:	0112      	lsls	r2, r2, #4
  4015c0:	b2d2      	uxtb	r2, r2
  4015c2:	440b      	add	r3, r1
  4015c4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  4015c6:	e009      	b.n	4015dc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4015c8:	4908      	ldr	r1, [pc, #32]	; (4015ec <NVIC_SetPriority+0x50>)
  4015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4015ce:	683a      	ldr	r2, [r7, #0]
  4015d0:	b2d2      	uxtb	r2, r2
  4015d2:	0112      	lsls	r2, r2, #4
  4015d4:	b2d2      	uxtb	r2, r2
  4015d6:	440b      	add	r3, r1
  4015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4015dc:	bf00      	nop
  4015de:	370c      	adds	r7, #12
  4015e0:	46bd      	mov	sp, r7
  4015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e6:	4770      	bx	lr
  4015e8:	e000ed00 	.word	0xe000ed00
  4015ec:	e000e100 	.word	0xe000e100

004015f0 <osc_get_rate>:
{
  4015f0:	b480      	push	{r7}
  4015f2:	b083      	sub	sp, #12
  4015f4:	af00      	add	r7, sp, #0
  4015f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4015f8:	687b      	ldr	r3, [r7, #4]
  4015fa:	2b07      	cmp	r3, #7
  4015fc:	d825      	bhi.n	40164a <osc_get_rate+0x5a>
  4015fe:	a201      	add	r2, pc, #4	; (adr r2, 401604 <osc_get_rate+0x14>)
  401600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401604:	00401625 	.word	0x00401625
  401608:	0040162b 	.word	0x0040162b
  40160c:	00401631 	.word	0x00401631
  401610:	00401637 	.word	0x00401637
  401614:	0040163b 	.word	0x0040163b
  401618:	0040163f 	.word	0x0040163f
  40161c:	00401643 	.word	0x00401643
  401620:	00401647 	.word	0x00401647
		return OSC_SLCK_32K_RC_HZ;
  401624:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401628:	e010      	b.n	40164c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40162a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40162e:	e00d      	b.n	40164c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401634:	e00a      	b.n	40164c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401636:	4b08      	ldr	r3, [pc, #32]	; (401658 <osc_get_rate+0x68>)
  401638:	e008      	b.n	40164c <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  40163a:	4b08      	ldr	r3, [pc, #32]	; (40165c <osc_get_rate+0x6c>)
  40163c:	e006      	b.n	40164c <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  40163e:	4b08      	ldr	r3, [pc, #32]	; (401660 <osc_get_rate+0x70>)
  401640:	e004      	b.n	40164c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401642:	2300      	movs	r3, #0
  401644:	e002      	b.n	40164c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401646:	2300      	movs	r3, #0
  401648:	e000      	b.n	40164c <osc_get_rate+0x5c>
	return 0;
  40164a:	2300      	movs	r3, #0
}
  40164c:	4618      	mov	r0, r3
  40164e:	370c      	adds	r7, #12
  401650:	46bd      	mov	sp, r7
  401652:	f85d 7b04 	ldr.w	r7, [sp], #4
  401656:	4770      	bx	lr
  401658:	007a1200 	.word	0x007a1200
  40165c:	00f42400 	.word	0x00f42400
  401660:	016e3600 	.word	0x016e3600

00401664 <sysclk_get_main_hz>:
{
  401664:	b580      	push	{r7, lr}
  401666:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401668:	2001      	movs	r0, #1
  40166a:	4b04      	ldr	r3, [pc, #16]	; (40167c <sysclk_get_main_hz+0x18>)
  40166c:	4798      	blx	r3
  40166e:	4602      	mov	r2, r0
  401670:	f640 634e 	movw	r3, #3662	; 0xe4e
  401674:	fb03 f302 	mul.w	r3, r3, r2
}
  401678:	4618      	mov	r0, r3
  40167a:	bd80      	pop	{r7, pc}
  40167c:	004015f1 	.word	0x004015f1

00401680 <sysclk_get_cpu_hz>:
{
  401680:	b580      	push	{r7, lr}
  401682:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401684:	4b02      	ldr	r3, [pc, #8]	; (401690 <sysclk_get_cpu_hz+0x10>)
  401686:	4798      	blx	r3
  401688:	4603      	mov	r3, r0
}
  40168a:	4618      	mov	r0, r3
  40168c:	bd80      	pop	{r7, pc}
  40168e:	bf00      	nop
  401690:	00401665 	.word	0x00401665

00401694 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401694:	b580      	push	{r7, lr}
  401696:	b082      	sub	sp, #8
  401698:	af00      	add	r7, sp, #0
  40169a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40169c:	6878      	ldr	r0, [r7, #4]
  40169e:	4b03      	ldr	r3, [pc, #12]	; (4016ac <sysclk_enable_peripheral_clock+0x18>)
  4016a0:	4798      	blx	r3
}
  4016a2:	bf00      	nop
  4016a4:	3708      	adds	r7, #8
  4016a6:	46bd      	mov	sp, r7
  4016a8:	bd80      	pop	{r7, pc}
  4016aa:	bf00      	nop
  4016ac:	00404375 	.word	0x00404375

004016b0 <ioport_set_port_dir>:
{
  4016b0:	b480      	push	{r7}
  4016b2:	b08b      	sub	sp, #44	; 0x2c
  4016b4:	af00      	add	r7, sp, #0
  4016b6:	60f8      	str	r0, [r7, #12]
  4016b8:	60b9      	str	r1, [r7, #8]
  4016ba:	4613      	mov	r3, r2
  4016bc:	71fb      	strb	r3, [r7, #7]
  4016be:	68fb      	ldr	r3, [r7, #12]
  4016c0:	627b      	str	r3, [r7, #36]	; 0x24
  4016c2:	68bb      	ldr	r3, [r7, #8]
  4016c4:	623b      	str	r3, [r7, #32]
  4016c6:	79fb      	ldrb	r3, [r7, #7]
  4016c8:	77fb      	strb	r3, [r7, #31]
  4016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4016cc:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4016ce:	69bb      	ldr	r3, [r7, #24]
  4016d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4016d4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4016d8:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  4016da:	617b      	str	r3, [r7, #20]
	if (group_direction == IOPORT_DIR_OUTPUT) {
  4016dc:	7ffb      	ldrb	r3, [r7, #31]
  4016de:	2b01      	cmp	r3, #1
  4016e0:	d103      	bne.n	4016ea <ioport_set_port_dir+0x3a>
		base->PIO_OER = mask;
  4016e2:	697b      	ldr	r3, [r7, #20]
  4016e4:	6a3a      	ldr	r2, [r7, #32]
  4016e6:	611a      	str	r2, [r3, #16]
  4016e8:	e005      	b.n	4016f6 <ioport_set_port_dir+0x46>
	} else if (group_direction == IOPORT_DIR_INPUT) {
  4016ea:	7ffb      	ldrb	r3, [r7, #31]
  4016ec:	2b00      	cmp	r3, #0
  4016ee:	d102      	bne.n	4016f6 <ioport_set_port_dir+0x46>
		base->PIO_ODR = mask;
  4016f0:	697b      	ldr	r3, [r7, #20]
  4016f2:	6a3a      	ldr	r2, [r7, #32]
  4016f4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = mask;
  4016f6:	697b      	ldr	r3, [r7, #20]
  4016f8:	6a3a      	ldr	r2, [r7, #32]
  4016fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  4016fe:	bf00      	nop
  401700:	372c      	adds	r7, #44	; 0x2c
  401702:	46bd      	mov	sp, r7
  401704:	f85d 7b04 	ldr.w	r7, [sp], #4
  401708:	4770      	bx	lr

0040170a <ioport_set_pin_dir>:
{
  40170a:	b480      	push	{r7}
  40170c:	b08d      	sub	sp, #52	; 0x34
  40170e:	af00      	add	r7, sp, #0
  401710:	6078      	str	r0, [r7, #4]
  401712:	460b      	mov	r3, r1
  401714:	70fb      	strb	r3, [r7, #3]
  401716:	687b      	ldr	r3, [r7, #4]
  401718:	62fb      	str	r3, [r7, #44]	; 0x2c
  40171a:	78fb      	ldrb	r3, [r7, #3]
  40171c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401722:	627b      	str	r3, [r7, #36]	; 0x24
  401724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401726:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401728:	6a3b      	ldr	r3, [r7, #32]
  40172a:	095b      	lsrs	r3, r3, #5
  40172c:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40172e:	69fb      	ldr	r3, [r7, #28]
  401730:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401734:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401738:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  40173a:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  40173c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401740:	2b01      	cmp	r3, #1
  401742:	d109      	bne.n	401758 <ioport_set_pin_dir+0x4e>
  401744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401746:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401748:	697b      	ldr	r3, [r7, #20]
  40174a:	f003 031f 	and.w	r3, r3, #31
  40174e:	2201      	movs	r2, #1
  401750:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401752:	69bb      	ldr	r3, [r7, #24]
  401754:	611a      	str	r2, [r3, #16]
  401756:	e00c      	b.n	401772 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40175c:	2b00      	cmp	r3, #0
  40175e:	d108      	bne.n	401772 <ioport_set_pin_dir+0x68>
  401760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401762:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401764:	693b      	ldr	r3, [r7, #16]
  401766:	f003 031f 	and.w	r3, r3, #31
  40176a:	2201      	movs	r2, #1
  40176c:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40176e:	69bb      	ldr	r3, [r7, #24]
  401770:	615a      	str	r2, [r3, #20]
  401772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401774:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401776:	68fb      	ldr	r3, [r7, #12]
  401778:	f003 031f 	and.w	r3, r3, #31
  40177c:	2201      	movs	r2, #1
  40177e:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401780:	69bb      	ldr	r3, [r7, #24]
  401782:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401786:	bf00      	nop
  401788:	3734      	adds	r7, #52	; 0x34
  40178a:	46bd      	mov	sp, r7
  40178c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401790:	4770      	bx	lr

00401792 <ioport_set_pin_level>:
{
  401792:	b480      	push	{r7}
  401794:	b08b      	sub	sp, #44	; 0x2c
  401796:	af00      	add	r7, sp, #0
  401798:	6078      	str	r0, [r7, #4]
  40179a:	460b      	mov	r3, r1
  40179c:	70fb      	strb	r3, [r7, #3]
  40179e:	687b      	ldr	r3, [r7, #4]
  4017a0:	627b      	str	r3, [r7, #36]	; 0x24
  4017a2:	78fb      	ldrb	r3, [r7, #3]
  4017a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4017aa:	61fb      	str	r3, [r7, #28]
  4017ac:	69fb      	ldr	r3, [r7, #28]
  4017ae:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4017b0:	69bb      	ldr	r3, [r7, #24]
  4017b2:	095b      	lsrs	r3, r3, #5
  4017b4:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4017b6:	697b      	ldr	r3, [r7, #20]
  4017b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4017bc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4017c0:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4017c2:	613b      	str	r3, [r7, #16]
	if (level) {
  4017c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4017c8:	2b00      	cmp	r3, #0
  4017ca:	d009      	beq.n	4017e0 <ioport_set_pin_level+0x4e>
  4017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4017ce:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4017d0:	68fb      	ldr	r3, [r7, #12]
  4017d2:	f003 031f 	and.w	r3, r3, #31
  4017d6:	2201      	movs	r2, #1
  4017d8:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4017da:	693b      	ldr	r3, [r7, #16]
  4017dc:	631a      	str	r2, [r3, #48]	; 0x30
}
  4017de:	e008      	b.n	4017f2 <ioport_set_pin_level+0x60>
  4017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4017e2:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4017e4:	68bb      	ldr	r3, [r7, #8]
  4017e6:	f003 031f 	and.w	r3, r3, #31
  4017ea:	2201      	movs	r2, #1
  4017ec:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4017ee:	693b      	ldr	r3, [r7, #16]
  4017f0:	635a      	str	r2, [r3, #52]	; 0x34
  4017f2:	bf00      	nop
  4017f4:	372c      	adds	r7, #44	; 0x2c
  4017f6:	46bd      	mov	sp, r7
  4017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017fc:	4770      	bx	lr

004017fe <ioport_set_port_level>:
 * \param mask Pin mask of pins to modify
 * \param level Level of the pins to be modified
 */
static inline void ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_value level)
{
  4017fe:	b480      	push	{r7}
  401800:	b08b      	sub	sp, #44	; 0x2c
  401802:	af00      	add	r7, sp, #0
  401804:	60f8      	str	r0, [r7, #12]
  401806:	60b9      	str	r1, [r7, #8]
  401808:	4613      	mov	r3, r2
  40180a:	71fb      	strb	r3, [r7, #7]
  40180c:	68fb      	ldr	r3, [r7, #12]
  40180e:	627b      	str	r3, [r7, #36]	; 0x24
  401810:	68bb      	ldr	r3, [r7, #8]
  401812:	623b      	str	r3, [r7, #32]
  401814:	79fb      	ldrb	r3, [r7, #7]
  401816:	77fb      	strb	r3, [r7, #31]
  401818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40181a:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40181c:	69bb      	ldr	r3, [r7, #24]
  40181e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401822:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401826:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_value level)
{
	Pio *base = arch_ioport_port_to_base(port);
  401828:	617b      	str	r3, [r7, #20]

	if (level){
  40182a:	7ffb      	ldrb	r3, [r7, #31]
  40182c:	2b00      	cmp	r3, #0
  40182e:	d003      	beq.n	401838 <ioport_set_port_level+0x3a>
		base->PIO_SODR = mask;
  401830:	697b      	ldr	r3, [r7, #20]
  401832:	6a3a      	ldr	r2, [r7, #32]
  401834:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_port_level(port, mask, level);
}
  401836:	e002      	b.n	40183e <ioport_set_port_level+0x40>
	} else {
		base->PIO_CODR = mask;
  401838:	697b      	ldr	r3, [r7, #20]
  40183a:	6a3a      	ldr	r2, [r7, #32]
  40183c:	635a      	str	r2, [r3, #52]	; 0x34
  40183e:	bf00      	nop
  401840:	372c      	adds	r7, #44	; 0x2c
  401842:	46bd      	mov	sp, r7
  401844:	f85d 7b04 	ldr.w	r7, [sp], #4
  401848:	4770      	bx	lr

0040184a <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
  40184a:	b480      	push	{r7}
  40184c:	b085      	sub	sp, #20
  40184e:	af00      	add	r7, sp, #0
  401850:	6078      	str	r0, [r7, #4]
  401852:	687b      	ldr	r3, [r7, #4]
  401854:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401856:	68fb      	ldr	r3, [r7, #12]
  401858:	f003 031f 	and.w	r3, r3, #31
  40185c:	2201      	movs	r2, #1
  40185e:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
  401862:	bf00      	nop
}
  401864:	4618      	mov	r0, r3
  401866:	3714      	adds	r7, #20
  401868:	46bd      	mov	sp, r7
  40186a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40186e:	4770      	bx	lr

00401870 <adc_ch_sanity_check>:
 * \param channel  Adc channel number.
 *
 */
static inline void adc_ch_sanity_check(Adc *const adc,
		const enum adc_channel_num channel)
{
  401870:	b480      	push	{r7}
  401872:	b083      	sub	sp, #12
  401874:	af00      	add	r7, sp, #0
  401876:	6078      	str	r0, [r7, #4]
  401878:	460b      	mov	r3, r1
  40187a:	807b      	strh	r3, [r7, #2]
#endif
				);
	}

	UNUSED(channel);
}
  40187c:	bf00      	nop
  40187e:	370c      	adds	r7, #12
  401880:	46bd      	mov	sp, r7
  401882:	f85d 7b04 	ldr.w	r7, [sp], #4
  401886:	4770      	bx	lr

00401888 <adc_select_clock_source_mck>:
 *
 * \param adc  Base address of the ADC.
 *
 */
static inline void adc_select_clock_source_mck(Adc *const adc)
{
  401888:	b480      	push	{r7}
  40188a:	b085      	sub	sp, #20
  40188c:	af00      	add	r7, sp, #0
  40188e:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	reg = adc->ADC_EMR;
  401890:	687b      	ldr	r3, [r7, #4]
  401892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401894:	60fb      	str	r3, [r7, #12]

	reg &= ~ADC_EMR_SRCCLK_PMC_PCK;
  401896:	68fb      	ldr	r3, [r7, #12]
  401898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40189c:	60fb      	str	r3, [r7, #12]

	adc->ADC_EMR = reg;
  40189e:	687b      	ldr	r3, [r7, #4]
  4018a0:	68fa      	ldr	r2, [r7, #12]
  4018a2:	641a      	str	r2, [r3, #64]	; 0x40
}
  4018a4:	bf00      	nop
  4018a6:	3714      	adds	r7, #20
  4018a8:	46bd      	mov	sp, r7
  4018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018ae:	4770      	bx	lr

004018b0 <adc_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void adc_set_trigger(Adc *const adc,
		const enum adc_trigger trigger)
{
  4018b0:	b480      	push	{r7}
  4018b2:	b085      	sub	sp, #20
  4018b4:	af00      	add	r7, sp, #0
  4018b6:	6078      	str	r0, [r7, #4]
  4018b8:	460b      	mov	r3, r1
  4018ba:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = adc->ADC_MR;
  4018bc:	687b      	ldr	r3, [r7, #4]
  4018be:	685b      	ldr	r3, [r3, #4]
  4018c0:	60fb      	str	r3, [r7, #12]

	if (trigger == ADC_TRIG_FREERUN) {
  4018c2:	78fb      	ldrb	r3, [r7, #3]
  4018c4:	2bff      	cmp	r3, #255	; 0xff
  4018c6:	d104      	bne.n	4018d2 <adc_set_trigger+0x22>
		reg |= ADC_MR_FREERUN_ON;
  4018c8:	68fb      	ldr	r3, [r7, #12]
  4018ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4018ce:	60fb      	str	r3, [r7, #12]
  4018d0:	e007      	b.n	4018e2 <adc_set_trigger+0x32>
	} else {
		reg &= ~(ADC_MR_TRGSEL_Msk | ADC_MR_TRGEN | ADC_MR_FREERUN_ON);
  4018d2:	68fb      	ldr	r3, [r7, #12]
  4018d4:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  4018d8:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  4018da:	78fb      	ldrb	r3, [r7, #3]
  4018dc:	68fa      	ldr	r2, [r7, #12]
  4018de:	4313      	orrs	r3, r2
  4018e0:	60fb      	str	r3, [r7, #12]
	}

	adc->ADC_MR = reg;
  4018e2:	687b      	ldr	r3, [r7, #4]
  4018e4:	68fa      	ldr	r2, [r7, #12]
  4018e6:	605a      	str	r2, [r3, #4]
}
  4018e8:	bf00      	nop
  4018ea:	3714      	adds	r7, #20
  4018ec:	46bd      	mov	sp, r7
  4018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018f2:	4770      	bx	lr

004018f4 <adc_set_writeprotect>:
 * \param adc  Base address of the ADC.
 * \param is_enable 1 to enable, 0 to disable.
 */
static inline void adc_set_writeprotect(Adc *const adc,
		const bool is_enable)
{
  4018f4:	b480      	push	{r7}
  4018f6:	b083      	sub	sp, #12
  4018f8:	af00      	add	r7, sp, #0
  4018fa:	6078      	str	r0, [r7, #4]
  4018fc:	460b      	mov	r3, r1
  4018fe:	70fb      	strb	r3, [r7, #3]
	if (is_enable) {
  401900:	78fb      	ldrb	r3, [r7, #3]
  401902:	2b00      	cmp	r3, #0
  401904:	d004      	beq.n	401910 <adc_set_writeprotect+0x1c>
		adc->ADC_WPMR = ADC_WPMR_WPEN | ADC_WPMR_WPKEY_PASSWD;
  401906:	687b      	ldr	r3, [r7, #4]
  401908:	4a06      	ldr	r2, [pc, #24]	; (401924 <adc_set_writeprotect+0x30>)
  40190a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		adc->ADC_WPMR = ADC_WPMR_WPKEY_PASSWD;
	}
}
  40190e:	e003      	b.n	401918 <adc_set_writeprotect+0x24>
		adc->ADC_WPMR = ADC_WPMR_WPKEY_PASSWD;
  401910:	687b      	ldr	r3, [r7, #4]
  401912:	4a05      	ldr	r2, [pc, #20]	; (401928 <adc_set_writeprotect+0x34>)
  401914:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401918:	bf00      	nop
  40191a:	370c      	adds	r7, #12
  40191c:	46bd      	mov	sp, r7
  40191e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401922:	4770      	bx	lr
  401924:	41444301 	.word	0x41444301
  401928:	41444300 	.word	0x41444300

0040192c <adc_channel_enable>:
 * \param adc  Base address of the ADC.
 * \param adc_ch Adc channel number.
 */
static inline void adc_channel_enable(Adc *const adc,
		const enum adc_channel_num adc_ch)
{
  40192c:	b580      	push	{r7, lr}
  40192e:	b082      	sub	sp, #8
  401930:	af00      	add	r7, sp, #0
  401932:	6078      	str	r0, [r7, #4]
  401934:	460b      	mov	r3, r1
  401936:	807b      	strh	r3, [r7, #2]
	if (adc_ch != ADC_CHANNEL_ALL) {
  401938:	887b      	ldrh	r3, [r7, #2]
  40193a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40193e:	4293      	cmp	r3, r2
  401940:	d004      	beq.n	40194c <adc_channel_enable+0x20>
		adc_ch_sanity_check(adc, adc_ch);
  401942:	887b      	ldrh	r3, [r7, #2]
  401944:	4619      	mov	r1, r3
  401946:	6878      	ldr	r0, [r7, #4]
  401948:	4b0a      	ldr	r3, [pc, #40]	; (401974 <adc_channel_enable+0x48>)
  40194a:	4798      	blx	r3
	}

	adc->ADC_CHER = (adc_ch == ADC_CHANNEL_ALL) ?
			ADC_CHANNEL_ALL : 1 << adc_ch;
  40194c:	887b      	ldrh	r3, [r7, #2]
  40194e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401952:	4293      	cmp	r3, r2
  401954:	d005      	beq.n	401962 <adc_channel_enable+0x36>
  401956:	887b      	ldrh	r3, [r7, #2]
  401958:	2201      	movs	r2, #1
  40195a:	fa02 f303 	lsl.w	r3, r2, r3
  40195e:	461a      	mov	r2, r3
  401960:	e001      	b.n	401966 <adc_channel_enable+0x3a>
  401962:	f64f 72ff 	movw	r2, #65535	; 0xffff
	adc->ADC_CHER = (adc_ch == ADC_CHANNEL_ALL) ?
  401966:	687b      	ldr	r3, [r7, #4]
  401968:	611a      	str	r2, [r3, #16]
}
  40196a:	bf00      	nop
  40196c:	3708      	adds	r7, #8
  40196e:	46bd      	mov	sp, r7
  401970:	bd80      	pop	{r7, pc}
  401972:	bf00      	nop
  401974:	00401871 	.word	0x00401871

00401978 <adc_channel_get_value>:
 *
 * \return ADC converted value of the selected channel.
 */
static inline uint32_t adc_channel_get_value(Adc *const adc,
		enum adc_channel_num adc_ch)
{
  401978:	b580      	push	{r7, lr}
  40197a:	b082      	sub	sp, #8
  40197c:	af00      	add	r7, sp, #0
  40197e:	6078      	str	r0, [r7, #4]
  401980:	460b      	mov	r3, r1
  401982:	807b      	strh	r3, [r7, #2]
	adc_ch_sanity_check(adc, adc_ch);
  401984:	887b      	ldrh	r3, [r7, #2]
  401986:	4619      	mov	r1, r3
  401988:	6878      	ldr	r0, [r7, #4]
  40198a:	4b05      	ldr	r3, [pc, #20]	; (4019a0 <adc_channel_get_value+0x28>)
  40198c:	4798      	blx	r3

	return adc->ADC_CDR[adc_ch];
  40198e:	887a      	ldrh	r2, [r7, #2]
  401990:	687b      	ldr	r3, [r7, #4]
  401992:	3214      	adds	r2, #20
  401994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  401998:	4618      	mov	r0, r3
  40199a:	3708      	adds	r7, #8
  40199c:	46bd      	mov	sp, r7
  40199e:	bd80      	pop	{r7, pc}
  4019a0:	00401871 	.word	0x00401871

004019a4 <find_sensors>:
static void ADC0_init(void);
static void ext_int_init(void);
static void find_sensors(void);
static uint32_t Measure_Idd(unsigned int count);

void find_sensors(void) {
  4019a4:	b590      	push	{r4, r7, lr}
  4019a6:	b083      	sub	sp, #12
  4019a8:	af00      	add	r7, sp, #0
	uint8_t sig_bytes[2];
	
	ioport_set_pin_dir(CHIRP_RST, IOPORT_DIR_OUTPUT); //reset=output
  4019aa:	2101      	movs	r1, #1
  4019ac:	200f      	movs	r0, #15
  4019ae:	4b5d      	ldr	r3, [pc, #372]	; (401b24 <find_sensors+0x180>)
  4019b0:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_RST, IOPORT_PIN_LEVEL_HIGH); //reset=H
  4019b2:	2101      	movs	r1, #1
  4019b4:	200f      	movs	r0, #15
  4019b6:	4b5c      	ldr	r3, [pc, #368]	; (401b28 <find_sensors+0x184>)
  4019b8:	4798      	blx	r3
	
	/* Drive PROG low on all sensor ports */
	ioport_set_pin_dir(CHIRP_PROG_0, IOPORT_DIR_OUTPUT); //PROG_0=output
  4019ba:	2101      	movs	r1, #1
  4019bc:	2010      	movs	r0, #16
  4019be:	4b59      	ldr	r3, [pc, #356]	; (401b24 <find_sensors+0x180>)
  4019c0:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_1, IOPORT_DIR_OUTPUT); //PROG_1=output
  4019c2:	2101      	movs	r1, #1
  4019c4:	2012      	movs	r0, #18
  4019c6:	4b57      	ldr	r3, [pc, #348]	; (401b24 <find_sensors+0x180>)
  4019c8:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_2, IOPORT_DIR_OUTPUT); //PROG_2=output
  4019ca:	2101      	movs	r1, #1
  4019cc:	2013      	movs	r0, #19
  4019ce:	4b55      	ldr	r3, [pc, #340]	; (401b24 <find_sensors+0x180>)
  4019d0:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_3, IOPORT_DIR_OUTPUT); //PROG_3=output
  4019d2:	2101      	movs	r1, #1
  4019d4:	201f      	movs	r0, #31
  4019d6:	4b53      	ldr	r3, [pc, #332]	; (401b24 <find_sensors+0x180>)
  4019d8:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_0, IOPORT_PIN_LEVEL_LOW); //PROG_0=L
  4019da:	2100      	movs	r1, #0
  4019dc:	2010      	movs	r0, #16
  4019de:	4b52      	ldr	r3, [pc, #328]	; (401b28 <find_sensors+0x184>)
  4019e0:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_1, IOPORT_PIN_LEVEL_LOW); //PROG_1=L
  4019e2:	2100      	movs	r1, #0
  4019e4:	2012      	movs	r0, #18
  4019e6:	4b50      	ldr	r3, [pc, #320]	; (401b28 <find_sensors+0x184>)
  4019e8:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_2, IOPORT_PIN_LEVEL_LOW); //PROG_2=L
  4019ea:	2100      	movs	r1, #0
  4019ec:	2013      	movs	r0, #19
  4019ee:	4b4e      	ldr	r3, [pc, #312]	; (401b28 <find_sensors+0x184>)
  4019f0:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_3, IOPORT_PIN_LEVEL_LOW); //PROG_3=L
  4019f2:	2100      	movs	r1, #0
  4019f4:	201f      	movs	r0, #31
  4019f6:	4b4c      	ldr	r3, [pc, #304]	; (401b28 <find_sensors+0x184>)
  4019f8:	4798      	blx	r3
	
	/* check sensor 0 (on board chip or J6) */
	ioport_set_pin_level(CHIRP_PROG_0, IOPORT_PIN_LEVEL_HIGH);
  4019fa:	2101      	movs	r1, #1
  4019fc:	2010      	movs	r0, #16
  4019fe:	4b4a      	ldr	r3, [pc, #296]	; (401b28 <find_sensors+0x184>)
  401a00:	4798      	blx	r3
	i2c_master_initialize1();
  401a02:	4b4a      	ldr	r3, [pc, #296]	; (401b2c <find_sensors+0x188>)
  401a04:	4798      	blx	r3
	sig_bytes[0] = 0;
  401a06:	2300      	movs	r3, #0
  401a08:	713b      	strb	r3, [r7, #4]
	sig_bytes[1] = 0;
  401a0a:	2300      	movs	r3, #0
  401a0c:	717b      	strb	r3, [r7, #5]
	i2c_master_read_register1(CH_I2C_ADDR_PROG, 0x00, 2, sig_bytes);
  401a0e:	1d3b      	adds	r3, r7, #4
  401a10:	2202      	movs	r2, #2
  401a12:	2100      	movs	r1, #0
  401a14:	2045      	movs	r0, #69	; 0x45
  401a16:	4c46      	ldr	r4, [pc, #280]	; (401b30 <find_sensors+0x18c>)
  401a18:	47a0      	blx	r4
	printf("Chirp sensor 0 ");
  401a1a:	4846      	ldr	r0, [pc, #280]	; (401b34 <find_sensors+0x190>)
  401a1c:	4b46      	ldr	r3, [pc, #280]	; (401b38 <find_sensors+0x194>)
  401a1e:	4798      	blx	r3
	if ((sig_bytes[0] == CH_SIG_BYTE_0) && (sig_bytes[1] == CH_SIG_BYTE_1)) {
  401a20:	793b      	ldrb	r3, [r7, #4]
  401a22:	2b0a      	cmp	r3, #10
  401a24:	d106      	bne.n	401a34 <find_sensors+0x90>
  401a26:	797b      	ldrb	r3, [r7, #5]
  401a28:	2b02      	cmp	r3, #2
  401a2a:	d103      	bne.n	401a34 <find_sensors+0x90>
		printf("found\n");
  401a2c:	4843      	ldr	r0, [pc, #268]	; (401b3c <find_sensors+0x198>)
  401a2e:	4b42      	ldr	r3, [pc, #264]	; (401b38 <find_sensors+0x194>)
  401a30:	4798      	blx	r3
  401a32:	e002      	b.n	401a3a <find_sensors+0x96>
		} else {
		printf("not found\n");
  401a34:	4842      	ldr	r0, [pc, #264]	; (401b40 <find_sensors+0x19c>)
  401a36:	4b40      	ldr	r3, [pc, #256]	; (401b38 <find_sensors+0x194>)
  401a38:	4798      	blx	r3
	}
	ioport_set_pin_level(CHIRP_PROG_0, IOPORT_PIN_LEVEL_LOW);
  401a3a:	2100      	movs	r1, #0
  401a3c:	2010      	movs	r0, #16
  401a3e:	4b3a      	ldr	r3, [pc, #232]	; (401b28 <find_sensors+0x184>)
  401a40:	4798      	blx	r3

	/* check sensor 1 (J7) */
	ioport_set_pin_level(CHIRP_PROG_1, IOPORT_PIN_LEVEL_HIGH);
  401a42:	2101      	movs	r1, #1
  401a44:	2012      	movs	r0, #18
  401a46:	4b38      	ldr	r3, [pc, #224]	; (401b28 <find_sensors+0x184>)
  401a48:	4798      	blx	r3
	i2c_master_initialize1();
  401a4a:	4b38      	ldr	r3, [pc, #224]	; (401b2c <find_sensors+0x188>)
  401a4c:	4798      	blx	r3
	sig_bytes[0] = 0;
  401a4e:	2300      	movs	r3, #0
  401a50:	713b      	strb	r3, [r7, #4]
	sig_bytes[1] = 0;
  401a52:	2300      	movs	r3, #0
  401a54:	717b      	strb	r3, [r7, #5]
	i2c_master_read_register1(CH_I2C_ADDR_PROG, 0x00, 2, sig_bytes);
  401a56:	1d3b      	adds	r3, r7, #4
  401a58:	2202      	movs	r2, #2
  401a5a:	2100      	movs	r1, #0
  401a5c:	2045      	movs	r0, #69	; 0x45
  401a5e:	4c34      	ldr	r4, [pc, #208]	; (401b30 <find_sensors+0x18c>)
  401a60:	47a0      	blx	r4
	printf("Chirp sensor 1 ");
  401a62:	4838      	ldr	r0, [pc, #224]	; (401b44 <find_sensors+0x1a0>)
  401a64:	4b34      	ldr	r3, [pc, #208]	; (401b38 <find_sensors+0x194>)
  401a66:	4798      	blx	r3
	if ((sig_bytes[0] == CH_SIG_BYTE_0) && (sig_bytes[1] == CH_SIG_BYTE_1)) {
  401a68:	793b      	ldrb	r3, [r7, #4]
  401a6a:	2b0a      	cmp	r3, #10
  401a6c:	d106      	bne.n	401a7c <find_sensors+0xd8>
  401a6e:	797b      	ldrb	r3, [r7, #5]
  401a70:	2b02      	cmp	r3, #2
  401a72:	d103      	bne.n	401a7c <find_sensors+0xd8>
		printf("found\n");
  401a74:	4831      	ldr	r0, [pc, #196]	; (401b3c <find_sensors+0x198>)
  401a76:	4b30      	ldr	r3, [pc, #192]	; (401b38 <find_sensors+0x194>)
  401a78:	4798      	blx	r3
  401a7a:	e002      	b.n	401a82 <find_sensors+0xde>
		} else {
		printf("not found\n");
  401a7c:	4830      	ldr	r0, [pc, #192]	; (401b40 <find_sensors+0x19c>)
  401a7e:	4b2e      	ldr	r3, [pc, #184]	; (401b38 <find_sensors+0x194>)
  401a80:	4798      	blx	r3
	}
	ioport_set_pin_level(CHIRP_PROG_1, IOPORT_PIN_LEVEL_LOW);
  401a82:	2100      	movs	r1, #0
  401a84:	2012      	movs	r0, #18
  401a86:	4b28      	ldr	r3, [pc, #160]	; (401b28 <find_sensors+0x184>)
  401a88:	4798      	blx	r3
	
	/* check sensor 2 (J8) */
	ioport_set_pin_level(CHIRP_PROG_2, IOPORT_PIN_LEVEL_HIGH);
  401a8a:	2101      	movs	r1, #1
  401a8c:	2013      	movs	r0, #19
  401a8e:	4b26      	ldr	r3, [pc, #152]	; (401b28 <find_sensors+0x184>)
  401a90:	4798      	blx	r3
	i2c_master_initialize3();
  401a92:	4b2d      	ldr	r3, [pc, #180]	; (401b48 <find_sensors+0x1a4>)
  401a94:	4798      	blx	r3
	sig_bytes[0] = 0;
  401a96:	2300      	movs	r3, #0
  401a98:	713b      	strb	r3, [r7, #4]
	sig_bytes[1] = 0;
  401a9a:	2300      	movs	r3, #0
  401a9c:	717b      	strb	r3, [r7, #5]
	i2c_master_read_register3(CH_I2C_ADDR_PROG, 0x00, 2, sig_bytes);
  401a9e:	1d3b      	adds	r3, r7, #4
  401aa0:	2202      	movs	r2, #2
  401aa2:	2100      	movs	r1, #0
  401aa4:	2045      	movs	r0, #69	; 0x45
  401aa6:	4c29      	ldr	r4, [pc, #164]	; (401b4c <find_sensors+0x1a8>)
  401aa8:	47a0      	blx	r4
	printf("Chirp sensor 2 ");
  401aaa:	4829      	ldr	r0, [pc, #164]	; (401b50 <find_sensors+0x1ac>)
  401aac:	4b22      	ldr	r3, [pc, #136]	; (401b38 <find_sensors+0x194>)
  401aae:	4798      	blx	r3
	if ((sig_bytes[0] == CH_SIG_BYTE_0) && (sig_bytes[1] == CH_SIG_BYTE_1)) {
  401ab0:	793b      	ldrb	r3, [r7, #4]
  401ab2:	2b0a      	cmp	r3, #10
  401ab4:	d106      	bne.n	401ac4 <find_sensors+0x120>
  401ab6:	797b      	ldrb	r3, [r7, #5]
  401ab8:	2b02      	cmp	r3, #2
  401aba:	d103      	bne.n	401ac4 <find_sensors+0x120>
		printf("found\n");
  401abc:	481f      	ldr	r0, [pc, #124]	; (401b3c <find_sensors+0x198>)
  401abe:	4b1e      	ldr	r3, [pc, #120]	; (401b38 <find_sensors+0x194>)
  401ac0:	4798      	blx	r3
  401ac2:	e002      	b.n	401aca <find_sensors+0x126>
		} else {
		printf("not found\n");
  401ac4:	481e      	ldr	r0, [pc, #120]	; (401b40 <find_sensors+0x19c>)
  401ac6:	4b1c      	ldr	r3, [pc, #112]	; (401b38 <find_sensors+0x194>)
  401ac8:	4798      	blx	r3
	}
	ioport_set_pin_level(CHIRP_PROG_2, IOPORT_PIN_LEVEL_LOW);
  401aca:	2100      	movs	r1, #0
  401acc:	2013      	movs	r0, #19
  401ace:	4b16      	ldr	r3, [pc, #88]	; (401b28 <find_sensors+0x184>)
  401ad0:	4798      	blx	r3
	
	/* check sensor 3 (J9) */
	ioport_set_pin_level(CHIRP_PROG_3, IOPORT_PIN_LEVEL_HIGH);
  401ad2:	2101      	movs	r1, #1
  401ad4:	201f      	movs	r0, #31
  401ad6:	4b14      	ldr	r3, [pc, #80]	; (401b28 <find_sensors+0x184>)
  401ad8:	4798      	blx	r3
	i2c_master_initialize3();
  401ada:	4b1b      	ldr	r3, [pc, #108]	; (401b48 <find_sensors+0x1a4>)
  401adc:	4798      	blx	r3
	sig_bytes[0] = 0;
  401ade:	2300      	movs	r3, #0
  401ae0:	713b      	strb	r3, [r7, #4]
	sig_bytes[1] = 0;
  401ae2:	2300      	movs	r3, #0
  401ae4:	717b      	strb	r3, [r7, #5]
	i2c_master_read_register3(CH_I2C_ADDR_PROG, 0x00, 2, sig_bytes);
  401ae6:	1d3b      	adds	r3, r7, #4
  401ae8:	2202      	movs	r2, #2
  401aea:	2100      	movs	r1, #0
  401aec:	2045      	movs	r0, #69	; 0x45
  401aee:	4c17      	ldr	r4, [pc, #92]	; (401b4c <find_sensors+0x1a8>)
  401af0:	47a0      	blx	r4
	printf("Chirp sensor 3 ");
  401af2:	4818      	ldr	r0, [pc, #96]	; (401b54 <find_sensors+0x1b0>)
  401af4:	4b10      	ldr	r3, [pc, #64]	; (401b38 <find_sensors+0x194>)
  401af6:	4798      	blx	r3
	if ((sig_bytes[0] == CH_SIG_BYTE_0) && (sig_bytes[1] == CH_SIG_BYTE_1)) {
  401af8:	793b      	ldrb	r3, [r7, #4]
  401afa:	2b0a      	cmp	r3, #10
  401afc:	d106      	bne.n	401b0c <find_sensors+0x168>
  401afe:	797b      	ldrb	r3, [r7, #5]
  401b00:	2b02      	cmp	r3, #2
  401b02:	d103      	bne.n	401b0c <find_sensors+0x168>
		printf("found\n");
  401b04:	480d      	ldr	r0, [pc, #52]	; (401b3c <find_sensors+0x198>)
  401b06:	4b0c      	ldr	r3, [pc, #48]	; (401b38 <find_sensors+0x194>)
  401b08:	4798      	blx	r3
  401b0a:	e002      	b.n	401b12 <find_sensors+0x16e>
		} else {
		printf("not found\n");
  401b0c:	480c      	ldr	r0, [pc, #48]	; (401b40 <find_sensors+0x19c>)
  401b0e:	4b0a      	ldr	r3, [pc, #40]	; (401b38 <find_sensors+0x194>)
  401b10:	4798      	blx	r3
	}
	ioport_set_pin_level(CHIRP_PROG_3, IOPORT_PIN_LEVEL_LOW);
  401b12:	2100      	movs	r1, #0
  401b14:	201f      	movs	r0, #31
  401b16:	4b04      	ldr	r3, [pc, #16]	; (401b28 <find_sensors+0x184>)
  401b18:	4798      	blx	r3
}
  401b1a:	bf00      	nop
  401b1c:	370c      	adds	r7, #12
  401b1e:	46bd      	mov	sp, r7
  401b20:	bd90      	pop	{r4, r7, pc}
  401b22:	bf00      	nop
  401b24:	0040170b 	.word	0x0040170b
  401b28:	00401793 	.word	0x00401793
  401b2c:	00407ee5 	.word	0x00407ee5
  401b30:	00408025 	.word	0x00408025
  401b34:	0040c418 	.word	0x0040c418
  401b38:	004094a1 	.word	0x004094a1
  401b3c:	0040c428 	.word	0x0040c428
  401b40:	0040c430 	.word	0x0040c430
  401b44:	0040c43c 	.word	0x0040c43c
  401b48:	00407f5d 	.word	0x00407f5d
  401b4c:	004080bd 	.word	0x004080bd
  401b50:	0040c44c 	.word	0x0040c44c
  401b54:	0040c45c 	.word	0x0040c45c

00401b58 <ADC0_init>:

void ADC0_init(void) {
  401b58:	b580      	push	{r7, lr}
  401b5a:	af00      	add	r7, sp, #0
	adc_enable();
  401b5c:	4b14      	ldr	r3, [pc, #80]	; (401bb0 <ADC0_init+0x58>)
  401b5e:	4798      	blx	r3
	adc_select_clock_source_mck(ADC);
  401b60:	4814      	ldr	r0, [pc, #80]	; (401bb4 <ADC0_init+0x5c>)
  401b62:	4b15      	ldr	r3, [pc, #84]	; (401bb8 <ADC0_init+0x60>)
  401b64:	4798      	blx	r3
	adc_get_config_defaults(&adc_cfg);
  401b66:	4815      	ldr	r0, [pc, #84]	; (401bbc <ADC0_init+0x64>)
  401b68:	4b15      	ldr	r3, [pc, #84]	; (401bc0 <ADC0_init+0x68>)
  401b6a:	4798      	blx	r3
	adc_init(ADC, &adc_cfg);
  401b6c:	4913      	ldr	r1, [pc, #76]	; (401bbc <ADC0_init+0x64>)
  401b6e:	4811      	ldr	r0, [pc, #68]	; (401bb4 <ADC0_init+0x5c>)
  401b70:	4b14      	ldr	r3, [pc, #80]	; (401bc4 <ADC0_init+0x6c>)
  401b72:	4798      	blx	r3
	adc_channel_enable(ADC, ADC_CHANNEL_0);
  401b74:	2100      	movs	r1, #0
  401b76:	480f      	ldr	r0, [pc, #60]	; (401bb4 <ADC0_init+0x5c>)
  401b78:	4b13      	ldr	r3, [pc, #76]	; (401bc8 <ADC0_init+0x70>)
  401b7a:	4798      	blx	r3
	adc_set_trigger(ADC, ADC_TRIG_FREERUN);
  401b7c:	21ff      	movs	r1, #255	; 0xff
  401b7e:	480d      	ldr	r0, [pc, #52]	; (401bb4 <ADC0_init+0x5c>)
  401b80:	4b12      	ldr	r3, [pc, #72]	; (401bcc <ADC0_init+0x74>)
  401b82:	4798      	blx	r3

	g_max_digital = MAX_DIGITAL_12_BIT;
  401b84:	4b12      	ldr	r3, [pc, #72]	; (401bd0 <ADC0_init+0x78>)
  401b86:	f640 72ff 	movw	r2, #4095	; 0xfff
  401b8a:	601a      	str	r2, [r3, #0]
	adc_set_resolution(ADC, ADC_12_BITS);
  401b8c:	2100      	movs	r1, #0
  401b8e:	4809      	ldr	r0, [pc, #36]	; (401bb4 <ADC0_init+0x5c>)
  401b90:	4b10      	ldr	r3, [pc, #64]	; (401bd4 <ADC0_init+0x7c>)
  401b92:	4798      	blx	r3
	
	adc_set_writeprotect(ADC, 0);
  401b94:	2100      	movs	r1, #0
  401b96:	4807      	ldr	r0, [pc, #28]	; (401bb4 <ADC0_init+0x5c>)
  401b98:	4b0f      	ldr	r3, [pc, #60]	; (401bd8 <ADC0_init+0x80>)
  401b9a:	4798      	blx	r3
	*adc_reg = ADC_MODE_NO_AUTOTEST;// Set ADC converter to normal operation
  401b9c:	4b0f      	ldr	r3, [pc, #60]	; (401bdc <ADC0_init+0x84>)
  401b9e:	681b      	ldr	r3, [r3, #0]
  401ba0:	2200      	movs	r2, #0
  401ba2:	601a      	str	r2, [r3, #0]
	adc_set_writeprotect(ADC, 1);
  401ba4:	2101      	movs	r1, #1
  401ba6:	4803      	ldr	r0, [pc, #12]	; (401bb4 <ADC0_init+0x5c>)
  401ba8:	4b0b      	ldr	r3, [pc, #44]	; (401bd8 <ADC0_init+0x80>)
  401baa:	4798      	blx	r3
}
  401bac:	bf00      	nop
  401bae:	bd80      	pop	{r7, pc}
  401bb0:	0040373d 	.word	0x0040373d
  401bb4:	40038000 	.word	0x40038000
  401bb8:	00401889 	.word	0x00401889
  401bbc:	2000038c 	.word	0x2000038c
  401bc0:	00403539 	.word	0x00403539
  401bc4:	00403625 	.word	0x00403625
  401bc8:	0040192d 	.word	0x0040192d
  401bcc:	004018b1 	.word	0x004018b1
  401bd0:	20000388 	.word	0x20000388
  401bd4:	00403685 	.word	0x00403685
  401bd8:	004018f5 	.word	0x004018f5
  401bdc:	20000168 	.word	0x20000168

00401be0 <Measure_Idd>:

uint32_t Measure_Idd(unsigned int count) {
  401be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401be4:	b08f      	sub	sp, #60	; 0x3c
  401be6:	af00      	add	r7, sp, #0
  401be8:	6178      	str	r0, [r7, #20]
	uint32_t i;
	uint64_t Sum_Idd = 0;
  401bea:	f04f 0300 	mov.w	r3, #0
  401bee:	f04f 0400 	mov.w	r4, #0
  401bf2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	unsigned int Average_Idd, WaitTime, ODR = 100;
  401bf6:	2364      	movs	r3, #100	; 0x64
  401bf8:	627b      	str	r3, [r7, #36]	; 0x24
	
	for (i=0; i < count; ++i) {
  401bfa:	2300      	movs	r3, #0
  401bfc:	637b      	str	r3, [r7, #52]	; 0x34
  401bfe:	e088      	b.n	401d12 <Measure_Idd+0x132>
		WaitTime = (1000000/ODR/10)-30; //10 samples per ODR cycle, it was for motion sensor
  401c00:	4a79      	ldr	r2, [pc, #484]	; (401de8 <Measure_Idd+0x208>)
  401c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c04:	fbb2 f3f3 	udiv	r3, r2, r3
  401c08:	3b1e      	subs	r3, #30
  401c0a:	623b      	str	r3, [r7, #32]
		delay_us(WaitTime);
  401c0c:	6a3b      	ldr	r3, [r7, #32]
  401c0e:	2b00      	cmp	r3, #0
  401c10:	d025      	beq.n	401c5e <Measure_Idd+0x7e>
  401c12:	6a3b      	ldr	r3, [r7, #32]
  401c14:	4698      	mov	r8, r3
  401c16:	f04f 0900 	mov.w	r9, #0
  401c1a:	4b74      	ldr	r3, [pc, #464]	; (401dec <Measure_Idd+0x20c>)
  401c1c:	4798      	blx	r3
  401c1e:	4603      	mov	r3, r0
  401c20:	f04f 0400 	mov.w	r4, #0
  401c24:	fb03 f109 	mul.w	r1, r3, r9
  401c28:	fb08 f204 	mul.w	r2, r8, r4
  401c2c:	440a      	add	r2, r1
  401c2e:	fba8 3403 	umull	r3, r4, r8, r3
  401c32:	4422      	add	r2, r4
  401c34:	4614      	mov	r4, r2
  401c36:	a268      	add	r2, pc, #416	; (adr r2, 401dd8 <Measure_Idd+0x1f8>)
  401c38:	e9d2 1200 	ldrd	r1, r2, [r2]
  401c3c:	eb13 0801 	adds.w	r8, r3, r1
  401c40:	eb44 0902 	adc.w	r9, r4, r2
  401c44:	4640      	mov	r0, r8
  401c46:	4649      	mov	r1, r9
  401c48:	4c69      	ldr	r4, [pc, #420]	; (401df0 <Measure_Idd+0x210>)
  401c4a:	4a6a      	ldr	r2, [pc, #424]	; (401df4 <Measure_Idd+0x214>)
  401c4c:	f04f 0300 	mov.w	r3, #0
  401c50:	47a0      	blx	r4
  401c52:	4603      	mov	r3, r0
  401c54:	460c      	mov	r4, r1
  401c56:	4618      	mov	r0, r3
  401c58:	4b67      	ldr	r3, [pc, #412]	; (401df8 <Measure_Idd+0x218>)
  401c5a:	4798      	blx	r3
  401c5c:	e017      	b.n	401c8e <Measure_Idd+0xae>
  401c5e:	4b63      	ldr	r3, [pc, #396]	; (401dec <Measure_Idd+0x20c>)
  401c60:	4798      	blx	r3
  401c62:	4603      	mov	r3, r0
  401c64:	f04f 0400 	mov.w	r4, #0
  401c68:	a25b      	add	r2, pc, #364	; (adr r2, 401dd8 <Measure_Idd+0x1f8>)
  401c6a:	e9d2 1200 	ldrd	r1, r2, [r2]
  401c6e:	eb13 0801 	adds.w	r8, r3, r1
  401c72:	eb44 0902 	adc.w	r9, r4, r2
  401c76:	4640      	mov	r0, r8
  401c78:	4649      	mov	r1, r9
  401c7a:	4c5d      	ldr	r4, [pc, #372]	; (401df0 <Measure_Idd+0x210>)
  401c7c:	4a5d      	ldr	r2, [pc, #372]	; (401df4 <Measure_Idd+0x214>)
  401c7e:	f04f 0300 	mov.w	r3, #0
  401c82:	47a0      	blx	r4
  401c84:	4603      	mov	r3, r0
  401c86:	460c      	mov	r4, r1
  401c88:	4618      	mov	r0, r3
  401c8a:	4b5b      	ldr	r3, [pc, #364]	; (401df8 <Measure_Idd+0x218>)
  401c8c:	4798      	blx	r3
		adc_local->ADC_CR = ADC_CR_START; //start ADC conversion
  401c8e:	4b5b      	ldr	r3, [pc, #364]	; (401dfc <Measure_Idd+0x21c>)
  401c90:	681b      	ldr	r3, [r3, #0]
  401c92:	2202      	movs	r2, #2
  401c94:	601a      	str	r2, [r3, #0]
		delay_us(30); //wait for ADC conversion time
  401c96:	4b55      	ldr	r3, [pc, #340]	; (401dec <Measure_Idd+0x20c>)
  401c98:	4798      	blx	r3
  401c9a:	4603      	mov	r3, r0
  401c9c:	4619      	mov	r1, r3
  401c9e:	f04f 0200 	mov.w	r2, #0
  401ca2:	460b      	mov	r3, r1
  401ca4:	4614      	mov	r4, r2
  401ca6:	0120      	lsls	r0, r4, #4
  401ca8:	60f8      	str	r0, [r7, #12]
  401caa:	68f8      	ldr	r0, [r7, #12]
  401cac:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  401cb0:	60f8      	str	r0, [r7, #12]
  401cb2:	011b      	lsls	r3, r3, #4
  401cb4:	60bb      	str	r3, [r7, #8]
  401cb6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  401cba:	1a5b      	subs	r3, r3, r1
  401cbc:	eb64 0402 	sbc.w	r4, r4, r2
  401cc0:	18db      	adds	r3, r3, r3
  401cc2:	eb44 0404 	adc.w	r4, r4, r4
  401cc6:	4619      	mov	r1, r3
  401cc8:	4622      	mov	r2, r4
  401cca:	a443      	add	r4, pc, #268	; (adr r4, 401dd8 <Measure_Idd+0x1f8>)
  401ccc:	e9d4 3400 	ldrd	r3, r4, [r4]
  401cd0:	eb11 0803 	adds.w	r8, r1, r3
  401cd4:	eb42 0904 	adc.w	r9, r2, r4
  401cd8:	4640      	mov	r0, r8
  401cda:	4649      	mov	r1, r9
  401cdc:	4c44      	ldr	r4, [pc, #272]	; (401df0 <Measure_Idd+0x210>)
  401cde:	4a45      	ldr	r2, [pc, #276]	; (401df4 <Measure_Idd+0x214>)
  401ce0:	f04f 0300 	mov.w	r3, #0
  401ce4:	47a0      	blx	r4
  401ce6:	4603      	mov	r3, r0
  401ce8:	460c      	mov	r4, r1
  401cea:	4618      	mov	r0, r3
  401cec:	4b42      	ldr	r3, [pc, #264]	; (401df8 <Measure_Idd+0x218>)
  401cee:	4798      	blx	r3
		Sum_Idd += adc_channel_get_value(ADC, ADC_CHANNEL_0);
  401cf0:	2100      	movs	r1, #0
  401cf2:	4843      	ldr	r0, [pc, #268]	; (401e00 <Measure_Idd+0x220>)
  401cf4:	4b43      	ldr	r3, [pc, #268]	; (401e04 <Measure_Idd+0x224>)
  401cf6:	4798      	blx	r3
  401cf8:	4603      	mov	r3, r0
  401cfa:	f04f 0400 	mov.w	r4, #0
  401cfe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
  401d02:	185b      	adds	r3, r3, r1
  401d04:	eb44 0402 	adc.w	r4, r4, r2
  401d08:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	for (i=0; i < count; ++i) {
  401d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401d0e:	3301      	adds	r3, #1
  401d10:	637b      	str	r3, [r7, #52]	; 0x34
  401d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  401d14:	697b      	ldr	r3, [r7, #20]
  401d16:	429a      	cmp	r2, r3
  401d18:	f4ff af72 	bcc.w	401c00 <Measure_Idd+0x20>
	}

	Average_Idd = (Sum_Idd / count)* VOLT_REF / g_max_digital/0.6171; //5.1R sense, x100 and 1.21 Op-amp gain. mA to uA
  401d1c:	697b      	ldr	r3, [r7, #20]
  401d1e:	f04f 0400 	mov.w	r4, #0
  401d22:	4a33      	ldr	r2, [pc, #204]	; (401df0 <Measure_Idd+0x210>)
  401d24:	60ba      	str	r2, [r7, #8]
  401d26:	461a      	mov	r2, r3
  401d28:	4623      	mov	r3, r4
  401d2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
  401d2e:	68bc      	ldr	r4, [r7, #8]
  401d30:	47a0      	blx	r4
  401d32:	4603      	mov	r3, r0
  401d34:	460c      	mov	r4, r1
  401d36:	4619      	mov	r1, r3
  401d38:	4622      	mov	r2, r4
  401d3a:	460b      	mov	r3, r1
  401d3c:	4614      	mov	r4, r2
  401d3e:	18db      	adds	r3, r3, r3
  401d40:	eb44 0404 	adc.w	r4, r4, r4
  401d44:	185b      	adds	r3, r3, r1
  401d46:	eb44 0402 	adc.w	r4, r4, r2
  401d4a:	00a0      	lsls	r0, r4, #2
  401d4c:	6078      	str	r0, [r7, #4]
  401d4e:	6878      	ldr	r0, [r7, #4]
  401d50:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  401d54:	6078      	str	r0, [r7, #4]
  401d56:	009b      	lsls	r3, r3, #2
  401d58:	603b      	str	r3, [r7, #0]
  401d5a:	e9d7 3400 	ldrd	r3, r4, [r7]
  401d5e:	185b      	adds	r3, r3, r1
  401d60:	eb44 0402 	adc.w	r4, r4, r2
  401d64:	01a6      	lsls	r6, r4, #6
  401d66:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
  401d6a:	019d      	lsls	r5, r3, #6
  401d6c:	1aed      	subs	r5, r5, r3
  401d6e:	eb66 0604 	sbc.w	r6, r6, r4
  401d72:	ea4f 0b86 	mov.w	fp, r6, lsl #2
  401d76:	ea4b 7b95 	orr.w	fp, fp, r5, lsr #30
  401d7a:	ea4f 0a85 	mov.w	sl, r5, lsl #2
  401d7e:	4655      	mov	r5, sl
  401d80:	465e      	mov	r6, fp
  401d82:	186b      	adds	r3, r5, r1
  401d84:	eb46 0402 	adc.w	r4, r6, r2
  401d88:	4618      	mov	r0, r3
  401d8a:	4621      	mov	r1, r4
  401d8c:	4b1e      	ldr	r3, [pc, #120]	; (401e08 <Measure_Idd+0x228>)
  401d8e:	681b      	ldr	r3, [r3, #0]
  401d90:	f04f 0400 	mov.w	r4, #0
  401d94:	4d16      	ldr	r5, [pc, #88]	; (401df0 <Measure_Idd+0x210>)
  401d96:	461a      	mov	r2, r3
  401d98:	4623      	mov	r3, r4
  401d9a:	47a8      	blx	r5
  401d9c:	4603      	mov	r3, r0
  401d9e:	460c      	mov	r4, r1
  401da0:	4619      	mov	r1, r3
  401da2:	4622      	mov	r2, r4
  401da4:	4b19      	ldr	r3, [pc, #100]	; (401e0c <Measure_Idd+0x22c>)
  401da6:	4608      	mov	r0, r1
  401da8:	4611      	mov	r1, r2
  401daa:	4798      	blx	r3
  401dac:	4c18      	ldr	r4, [pc, #96]	; (401e10 <Measure_Idd+0x230>)
  401dae:	a30c      	add	r3, pc, #48	; (adr r3, 401de0 <Measure_Idd+0x200>)
  401db0:	e9d3 2300 	ldrd	r2, r3, [r3]
  401db4:	47a0      	blx	r4
  401db6:	4603      	mov	r3, r0
  401db8:	460c      	mov	r4, r1
  401dba:	4619      	mov	r1, r3
  401dbc:	4622      	mov	r2, r4
  401dbe:	4b15      	ldr	r3, [pc, #84]	; (401e14 <Measure_Idd+0x234>)
  401dc0:	4608      	mov	r0, r1
  401dc2:	4611      	mov	r1, r2
  401dc4:	4798      	blx	r3
  401dc6:	4603      	mov	r3, r0
  401dc8:	61fb      	str	r3, [r7, #28]
	
	return Average_Idd;
  401dca:	69fb      	ldr	r3, [r7, #28]
}
  401dcc:	4618      	mov	r0, r3
  401dce:	373c      	adds	r7, #60	; 0x3c
  401dd0:	46bd      	mov	sp, r7
  401dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dd6:	bf00      	nop
  401dd8:	00d59f7f 	.word	0x00d59f7f
  401ddc:	00000000 	.word	0x00000000
  401de0:	7fcb923a 	.word	0x7fcb923a
  401de4:	3fe3bf48 	.word	0x3fe3bf48
  401de8:	000186a0 	.word	0x000186a0
  401dec:	00401681 	.word	0x00401681
  401df0:	0040bdcd 	.word	0x0040bdcd
  401df4:	00d59f80 	.word	0x00d59f80
  401df8:	20000001 	.word	0x20000001
  401dfc:	20000164 	.word	0x20000164
  401e00:	40038000 	.word	0x40038000
  401e04:	00401979 	.word	0x00401979
  401e08:	20000388 	.word	0x20000388
  401e0c:	0040b771 	.word	0x0040b771
  401e10:	0040ba31 	.word	0x0040ba31
  401e14:	0040bd8d 	.word	0x0040bd8d

00401e18 <Measure_power>:

void Measure_power(void) {
  401e18:	b580      	push	{r7, lr}
  401e1a:	b082      	sub	sp, #8
  401e1c:	af00      	add	r7, sp, #0
	uint32_t ul_vol;
	
	ul_vol = Measure_Idd(100);  //300 averaging
  401e1e:	2064      	movs	r0, #100	; 0x64
  401e20:	4b05      	ldr	r3, [pc, #20]	; (401e38 <Measure_power+0x20>)
  401e22:	4798      	blx	r3
  401e24:	6078      	str	r0, [r7, #4]
	printf("Chirp sensor Idd: %ld uA\n\n", ul_vol);
  401e26:	6879      	ldr	r1, [r7, #4]
  401e28:	4804      	ldr	r0, [pc, #16]	; (401e3c <Measure_power+0x24>)
  401e2a:	4b05      	ldr	r3, [pc, #20]	; (401e40 <Measure_power+0x28>)
  401e2c:	4798      	blx	r3
}
  401e2e:	bf00      	nop
  401e30:	3708      	adds	r7, #8
  401e32:	46bd      	mov	sp, r7
  401e34:	bd80      	pop	{r7, pc}
  401e36:	bf00      	nop
  401e38:	00401be1 	.word	0x00401be1
  401e3c:	0040c46c 	.word	0x0040c46c
  401e40:	004094a1 	.word	0x004094a1

00401e44 <ext_int_init>:

void ext_int_init(void)
{
  401e44:	b590      	push	{r4, r7, lr}
  401e46:	b083      	sub	sp, #12
  401e48:	af02      	add	r7, sp, #8
	/* Enable the peripheral clock for the MAG extension board interrupt pin. */
	pmc_enable_periph_clk(PIN_EXT_INTERRUPT_ID);
  401e4a:	200b      	movs	r0, #11
  401e4c:	4b41      	ldr	r3, [pc, #260]	; (401f54 <ext_int_init+0x110>)
  401e4e:	4798      	blx	r3

	// Enable pull-downs on the INT pins
	pio_pull_up(PIN_EXT_INTERRUPT_PIO, 1 << CHIRP_INT_0 | 1 << CHIRP_INT_1 | 1 << CHIRP_INT_2 | 1 << CHIRP_INT_3, 0);
  401e50:	2200      	movs	r2, #0
  401e52:	4941      	ldr	r1, [pc, #260]	; (401f58 <ext_int_init+0x114>)
  401e54:	4841      	ldr	r0, [pc, #260]	; (401f5c <ext_int_init+0x118>)
  401e56:	4b42      	ldr	r3, [pc, #264]	; (401f60 <ext_int_init+0x11c>)
  401e58:	4798      	blx	r3
	pio_pull_down(PIN_EXT_INTERRUPT_PIO, 1 << CHIRP_INT_0 | 1 << CHIRP_INT_1 | 1 << CHIRP_INT_2 | 1 << CHIRP_INT_3, 1);
  401e5a:	2201      	movs	r2, #1
  401e5c:	493e      	ldr	r1, [pc, #248]	; (401f58 <ext_int_init+0x114>)
  401e5e:	483f      	ldr	r0, [pc, #252]	; (401f5c <ext_int_init+0x118>)
  401e60:	4b40      	ldr	r3, [pc, #256]	; (401f64 <ext_int_init+0x120>)
  401e62:	4798      	blx	r3

	/* Configure PIOs as input pins. */
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_MotionINT_MASK, PIN_EXT_INTERRUPT_ATTR);
  401e64:	2370      	movs	r3, #112	; 0x70
  401e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401e6a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401e6e:	483b      	ldr	r0, [pc, #236]	; (401f5c <ext_int_init+0x118>)
  401e70:	4c3d      	ldr	r4, [pc, #244]	; (401f68 <ext_int_init+0x124>)
  401e72:	47a0      	blx	r4
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_ChirpINT0_MASK, PIN_EXT_INTERRUPT_ATTR);
  401e74:	2370      	movs	r3, #112	; 0x70
  401e76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401e7a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401e7e:	4837      	ldr	r0, [pc, #220]	; (401f5c <ext_int_init+0x118>)
  401e80:	4c39      	ldr	r4, [pc, #228]	; (401f68 <ext_int_init+0x124>)
  401e82:	47a0      	blx	r4
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_ChirpINT1_MASK, PIN_EXT_INTERRUPT_ATTR);
  401e84:	2370      	movs	r3, #112	; 0x70
  401e86:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401e8a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401e8e:	4833      	ldr	r0, [pc, #204]	; (401f5c <ext_int_init+0x118>)
  401e90:	4c35      	ldr	r4, [pc, #212]	; (401f68 <ext_int_init+0x124>)
  401e92:	47a0      	blx	r4
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_ChirpINT2_MASK, PIN_EXT_INTERRUPT_ATTR);
  401e94:	2370      	movs	r3, #112	; 0x70
  401e96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401e9a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401e9e:	482f      	ldr	r0, [pc, #188]	; (401f5c <ext_int_init+0x118>)
  401ea0:	4c31      	ldr	r4, [pc, #196]	; (401f68 <ext_int_init+0x124>)
  401ea2:	47a0      	blx	r4
	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_ChirpINT3_MASK, PIN_EXT_INTERRUPT_ATTR);
  401ea4:	2370      	movs	r3, #112	; 0x70
  401ea6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401eaa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401eae:	482b      	ldr	r0, [pc, #172]	; (401f5c <ext_int_init+0x118>)
  401eb0:	4c2d      	ldr	r4, [pc, #180]	; (401f68 <ext_int_init+0x124>)
  401eb2:	47a0      	blx	r4

	/* Initialize PIO interrupt handler, interrupt on rising edge. */
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_MotionINT_MASK,
  401eb4:	2300      	movs	r3, #0
  401eb6:	9300      	str	r3, [sp, #0]
  401eb8:	2370      	movs	r3, #112	; 0x70
  401eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401ebe:	210b      	movs	r1, #11
  401ec0:	4826      	ldr	r0, [pc, #152]	; (401f5c <ext_int_init+0x118>)
  401ec2:	4c2a      	ldr	r4, [pc, #168]	; (401f6c <ext_int_init+0x128>)
  401ec4:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_ChirpINT0_MASK,
  401ec6:	2300      	movs	r3, #0
  401ec8:	9300      	str	r3, [sp, #0]
  401eca:	2370      	movs	r3, #112	; 0x70
  401ecc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401ed0:	210b      	movs	r1, #11
  401ed2:	4822      	ldr	r0, [pc, #136]	; (401f5c <ext_int_init+0x118>)
  401ed4:	4c25      	ldr	r4, [pc, #148]	; (401f6c <ext_int_init+0x128>)
  401ed6:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_ChirpINT1_MASK,
  401ed8:	2300      	movs	r3, #0
  401eda:	9300      	str	r3, [sp, #0]
  401edc:	2370      	movs	r3, #112	; 0x70
  401ede:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401ee2:	210b      	movs	r1, #11
  401ee4:	481d      	ldr	r0, [pc, #116]	; (401f5c <ext_int_init+0x118>)
  401ee6:	4c21      	ldr	r4, [pc, #132]	; (401f6c <ext_int_init+0x128>)
  401ee8:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_ChirpINT2_MASK,
  401eea:	2300      	movs	r3, #0
  401eec:	9300      	str	r3, [sp, #0]
  401eee:	2370      	movs	r3, #112	; 0x70
  401ef0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401ef4:	210b      	movs	r1, #11
  401ef6:	4819      	ldr	r0, [pc, #100]	; (401f5c <ext_int_init+0x118>)
  401ef8:	4c1c      	ldr	r4, [pc, #112]	; (401f6c <ext_int_init+0x128>)
  401efa:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_ChirpINT3_MASK,
  401efc:	2300      	movs	r3, #0
  401efe:	9300      	str	r3, [sp, #0]
  401f00:	2370      	movs	r3, #112	; 0x70
  401f02:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401f06:	210b      	movs	r1, #11
  401f08:	4814      	ldr	r0, [pc, #80]	; (401f5c <ext_int_init+0x118>)
  401f0a:	4c18      	ldr	r4, [pc, #96]	; (401f6c <ext_int_init+0x128>)
  401f0c:	47a0      	blx	r4
		PIN_EXT_INTERRUPT_ATTR, NULL);

	/* Initialize and enable push button (PIO) interrupt. */
	pio_handler_set_priority(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_IRQn, 0);
  401f0e:	2200      	movs	r2, #0
  401f10:	210b      	movs	r1, #11
  401f12:	4812      	ldr	r0, [pc, #72]	; (401f5c <ext_int_init+0x118>)
  401f14:	4b16      	ldr	r3, [pc, #88]	; (401f70 <ext_int_init+0x12c>)
  401f16:	4798      	blx	r3

	/* Disable Motion interrupt before IMU initialization */
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_MotionINT_MASK);
  401f18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f1c:	480f      	ldr	r0, [pc, #60]	; (401f5c <ext_int_init+0x118>)
  401f1e:	4b15      	ldr	r3, [pc, #84]	; (401f74 <ext_int_init+0x130>)
  401f20:	4798      	blx	r3
	/* Disable all CHx01 interrupts */
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_ChirpINT0_MASK);
  401f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401f26:	480d      	ldr	r0, [pc, #52]	; (401f5c <ext_int_init+0x118>)
  401f28:	4b12      	ldr	r3, [pc, #72]	; (401f74 <ext_int_init+0x130>)
  401f2a:	4798      	blx	r3
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_ChirpINT1_MASK);
  401f2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  401f30:	480a      	ldr	r0, [pc, #40]	; (401f5c <ext_int_init+0x118>)
  401f32:	4b10      	ldr	r3, [pc, #64]	; (401f74 <ext_int_init+0x130>)
  401f34:	4798      	blx	r3
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_ChirpINT2_MASK);
  401f36:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  401f3a:	4808      	ldr	r0, [pc, #32]	; (401f5c <ext_int_init+0x118>)
  401f3c:	4b0d      	ldr	r3, [pc, #52]	; (401f74 <ext_int_init+0x130>)
  401f3e:	4798      	blx	r3
	pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, PIN_EXT_ChirpINT3_MASK);
  401f40:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401f44:	4805      	ldr	r0, [pc, #20]	; (401f5c <ext_int_init+0x118>)
  401f46:	4b0b      	ldr	r3, [pc, #44]	; (401f74 <ext_int_init+0x130>)
  401f48:	4798      	blx	r3
}
  401f4a:	bf00      	nop
  401f4c:	3704      	adds	r7, #4
  401f4e:	46bd      	mov	sp, r7
  401f50:	bd90      	pop	{r4, r7, pc}
  401f52:	bf00      	nop
  401f54:	00404375 	.word	0x00404375
  401f58:	20e00000 	.word	0x20e00000
  401f5c:	400e0e00 	.word	0x400e0e00
  401f60:	00403a4f 	.word	0x00403a4f
  401f64:	00403cbd 	.word	0x00403cbd
  401f68:	00403bfd 	.word	0x00403bfd
  401f6c:	00403f65 	.word	0x00403f65
  401f70:	00404021 	.word	0x00404021
  401f74:	00403d75 	.word	0x00403d75

00401f78 <chbsp_board_init>:
/*!
 * \brief Initialize board hardware
 *
 * \note This function performs all necessary initialization on the board.
 */
void chbsp_board_init(ch_group_t *grp_ptr) {
  401f78:	b580      	push	{r7, lr}
  401f7a:	b082      	sub	sp, #8
  401f7c:	af00      	add	r7, sp, #0
  401f7e:	6078      	str	r0, [r7, #4]

	/* Make local copy of group pointer */
	sensor_group_ptr = grp_ptr;
  401f80:	4a0f      	ldr	r2, [pc, #60]	; (401fc0 <chbsp_board_init+0x48>)
  401f82:	687b      	ldr	r3, [r7, #4]
  401f84:	6013      	str	r3, [r2, #0]

	/* Initialize group descriptor */
	grp_ptr->num_ports = CHBSP_MAX_DEVICES;
  401f86:	687b      	ldr	r3, [r7, #4]
  401f88:	2204      	movs	r2, #4
  401f8a:	701a      	strb	r2, [r3, #0]
	grp_ptr->num_i2c_buses = CHBSP_NUM_I2C_BUSES;
  401f8c:	687b      	ldr	r3, [r7, #4]
  401f8e:	2202      	movs	r2, #2
  401f90:	705a      	strb	r2, [r3, #1]
	grp_ptr->rtc_cal_pulse_ms = CHBSP_RTC_CAL_PULSE_MS;
  401f92:	687b      	ldr	r3, [r7, #4]
  401f94:	2264      	movs	r2, #100	; 0x64
  401f96:	80da      	strh	r2, [r3, #6]
	
	/* Initialize the SAM system. */
	sysclk_init();
  401f98:	4b0a      	ldr	r3, [pc, #40]	; (401fc4 <chbsp_board_init+0x4c>)
  401f9a:	4798      	blx	r3
	board_init_I2C();
  401f9c:	4b0a      	ldr	r3, [pc, #40]	; (401fc8 <chbsp_board_init+0x50>)
  401f9e:	4798      	blx	r3

	configure_console();	
  401fa0:	4b0a      	ldr	r3, [pc, #40]	; (401fcc <chbsp_board_init+0x54>)
  401fa2:	4798      	blx	r3
	
	ADC0_init();	
  401fa4:	4b0a      	ldr	r3, [pc, #40]	; (401fd0 <chbsp_board_init+0x58>)
  401fa6:	4798      	blx	r3
	ext_int_init();
  401fa8:	4b0a      	ldr	r3, [pc, #40]	; (401fd4 <chbsp_board_init+0x5c>)
  401faa:	4798      	blx	r3

	/* Probe I2C bus to find connected sensor(s) */
	find_sensors();
  401fac:	4b0a      	ldr	r3, [pc, #40]	; (401fd8 <chbsp_board_init+0x60>)
  401fae:	4798      	blx	r3
	Measure_power();
  401fb0:	4b0a      	ldr	r3, [pc, #40]	; (401fdc <chbsp_board_init+0x64>)
  401fb2:	4798      	blx	r3

	indicate_alive();
  401fb4:	4b0a      	ldr	r3, [pc, #40]	; (401fe0 <chbsp_board_init+0x68>)
  401fb6:	4798      	blx	r3
}
  401fb8:	bf00      	nop
  401fba:	3708      	adds	r7, #8
  401fbc:	46bd      	mov	sp, r7
  401fbe:	bd80      	pop	{r7, pc}
  401fc0:	20000894 	.word	0x20000894
  401fc4:	00400d15 	.word	0x00400d15
  401fc8:	0040328d 	.word	0x0040328d
  401fcc:	00408ad9 	.word	0x00408ad9
  401fd0:	00401b59 	.word	0x00401b59
  401fd4:	00401e45 	.word	0x00401e45
  401fd8:	004019a5 	.word	0x004019a5
  401fdc:	00401e19 	.word	0x00401e19
  401fe0:	0040140d 	.word	0x0040140d

00401fe4 <chbsp_reset_assert>:
/*!
 * \brief Assert the reset pin
 *
 * This function drives the sensor reset pin low.
 */
void chbsp_reset_assert(void) {
  401fe4:	b580      	push	{r7, lr}
  401fe6:	af00      	add	r7, sp, #0

	ioport_set_pin_level(CHIRP_RST, IOPORT_PIN_LEVEL_LOW); //reset=L 
  401fe8:	2100      	movs	r1, #0
  401fea:	200f      	movs	r0, #15
  401fec:	4b01      	ldr	r3, [pc, #4]	; (401ff4 <chbsp_reset_assert+0x10>)
  401fee:	4798      	blx	r3
}
  401ff0:	bf00      	nop
  401ff2:	bd80      	pop	{r7, pc}
  401ff4:	00401793 	.word	0x00401793

00401ff8 <chbsp_reset_release>:
/*!
 * \brief Deassert the reset pin
 *
 * This function drives the sensor reset pin high.
 */
void chbsp_reset_release(void) {
  401ff8:	b580      	push	{r7, lr}
  401ffa:	af00      	add	r7, sp, #0

	ioport_set_pin_level(CHIRP_RST, IOPORT_PIN_LEVEL_HIGH); //reset=H
  401ffc:	2101      	movs	r1, #1
  401ffe:	200f      	movs	r0, #15
  402000:	4b01      	ldr	r3, [pc, #4]	; (402008 <chbsp_reset_release+0x10>)
  402002:	4798      	blx	r3
}
  402004:	bf00      	nop
  402006:	bd80      	pop	{r7, pc}
  402008:	00401793 	.word	0x00401793

0040200c <chbsp_program_enable>:
 *
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function drives the sensor PROG pin high on the specified port.
 */
void chbsp_program_enable(ch_dev_t *dev_ptr) {
  40200c:	b580      	push	{r7, lr}
  40200e:	b084      	sub	sp, #16
  402010:	af00      	add	r7, sp, #0
  402012:	6078      	str	r0, [r7, #4]
	uint8_t dev_num = ch_get_dev_num(dev_ptr);
  402014:	6878      	ldr	r0, [r7, #4]
  402016:	4b08      	ldr	r3, [pc, #32]	; (402038 <chbsp_program_enable+0x2c>)
  402018:	4798      	blx	r3
  40201a:	4603      	mov	r3, r0
  40201c:	73fb      	strb	r3, [r7, #15]
	
	// select Chirp chip PROGRAM line on Atmel board according to chip number
	ioport_set_pin_level(chirp_pin_prog[dev_num], IOPORT_PIN_LEVEL_HIGH); //PROG_0=H
  40201e:	7bfb      	ldrb	r3, [r7, #15]
  402020:	4a06      	ldr	r2, [pc, #24]	; (40203c <chbsp_program_enable+0x30>)
  402022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402026:	2101      	movs	r1, #1
  402028:	4618      	mov	r0, r3
  40202a:	4b05      	ldr	r3, [pc, #20]	; (402040 <chbsp_program_enable+0x34>)
  40202c:	4798      	blx	r3
}
  40202e:	bf00      	nop
  402030:	3710      	adds	r7, #16
  402032:	46bd      	mov	sp, r7
  402034:	bd80      	pop	{r7, pc}
  402036:	bf00      	nop
  402038:	0040598d 	.word	0x0040598d
  40203c:	20000120 	.word	0x20000120
  402040:	00401793 	.word	0x00401793

00402044 <chbsp_program_disable>:
 *
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function drives the sensor PROG pin low on the specified port.
 */
void chbsp_program_disable(ch_dev_t *dev_ptr) {
  402044:	b580      	push	{r7, lr}
  402046:	b084      	sub	sp, #16
  402048:	af00      	add	r7, sp, #0
  40204a:	6078      	str	r0, [r7, #4]
	uint8_t dev_num = ch_get_dev_num(dev_ptr);
  40204c:	6878      	ldr	r0, [r7, #4]
  40204e:	4b08      	ldr	r3, [pc, #32]	; (402070 <chbsp_program_disable+0x2c>)
  402050:	4798      	blx	r3
  402052:	4603      	mov	r3, r0
  402054:	73fb      	strb	r3, [r7, #15]

	// select Chirp chip PROGRAM line on Atmel board according to chip number
	ioport_set_pin_level(chirp_pin_prog[dev_num], IOPORT_PIN_LEVEL_LOW); //PROG_0=L
  402056:	7bfb      	ldrb	r3, [r7, #15]
  402058:	4a06      	ldr	r2, [pc, #24]	; (402074 <chbsp_program_disable+0x30>)
  40205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40205e:	2100      	movs	r1, #0
  402060:	4618      	mov	r0, r3
  402062:	4b05      	ldr	r3, [pc, #20]	; (402078 <chbsp_program_disable+0x34>)
  402064:	4798      	blx	r3
}
  402066:	bf00      	nop
  402068:	3710      	adds	r7, #16
  40206a:	46bd      	mov	sp, r7
  40206c:	bd80      	pop	{r7, pc}
  40206e:	bf00      	nop
  402070:	0040598d 	.word	0x0040598d
  402074:	20000120 	.word	0x20000120
  402078:	00401793 	.word	0x00401793

0040207c <chbsp_set_io_dir_in>:
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function configures the Chirp sensor INT pin as an input (from the perspective of 
 * the host system).
 */
void chbsp_set_io_dir_in(ch_dev_t *dev_ptr) {
  40207c:	b580      	push	{r7, lr}
  40207e:	b084      	sub	sp, #16
  402080:	af00      	add	r7, sp, #0
  402082:	6078      	str	r0, [r7, #4]
	uint8_t dev_num = ch_get_dev_num(dev_ptr);
  402084:	6878      	ldr	r0, [r7, #4]
  402086:	4b08      	ldr	r3, [pc, #32]	; (4020a8 <chbsp_set_io_dir_in+0x2c>)
  402088:	4798      	blx	r3
  40208a:	4603      	mov	r3, r0
  40208c:	73fb      	strb	r3, [r7, #15]

	ioport_set_pin_dir(chirp_pin_io[dev_num], IOPORT_DIR_INPUT);
  40208e:	7bfb      	ldrb	r3, [r7, #15]
  402090:	4a06      	ldr	r2, [pc, #24]	; (4020ac <chbsp_set_io_dir_in+0x30>)
  402092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402096:	2100      	movs	r1, #0
  402098:	4618      	mov	r0, r3
  40209a:	4b05      	ldr	r3, [pc, #20]	; (4020b0 <chbsp_set_io_dir_in+0x34>)
  40209c:	4798      	blx	r3
}
  40209e:	bf00      	nop
  4020a0:	3710      	adds	r7, #16
  4020a2:	46bd      	mov	sp, r7
  4020a4:	bd80      	pop	{r7, pc}
  4020a6:	bf00      	nop
  4020a8:	0040598d 	.word	0x0040598d
  4020ac:	20000130 	.word	0x20000130
  4020b0:	0040170b 	.word	0x0040170b

004020b4 <chbsp_group_set_io_dir_out>:
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 *
 * This function configures each Chirp sensor's INT pin as an output (from the perspective 
 * of the host system).
 */
void chbsp_group_set_io_dir_out(ch_group_t *grp_ptr) {
  4020b4:	b580      	push	{r7, lr}
  4020b6:	b086      	sub	sp, #24
  4020b8:	af00      	add	r7, sp, #0
  4020ba:	6078      	str	r0, [r7, #4]
	ioport_port_mask_t mask = 0;
  4020bc:	2300      	movs	r3, #0
  4020be:	617b      	str	r3, [r7, #20]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++)
  4020c0:	2300      	movs	r3, #0
  4020c2:	74fb      	strb	r3, [r7, #19]
  4020c4:	e019      	b.n	4020fa <chbsp_group_set_io_dir_out+0x46>
	{
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  4020c6:	7cfb      	ldrb	r3, [r7, #19]
  4020c8:	4619      	mov	r1, r3
  4020ca:	6878      	ldr	r0, [r7, #4]
  4020cc:	4b13      	ldr	r3, [pc, #76]	; (40211c <chbsp_group_set_io_dir_out+0x68>)
  4020ce:	4798      	blx	r3
  4020d0:	60f8      	str	r0, [r7, #12]

		if (ch_sensor_is_connected(dev_ptr))
  4020d2:	68f8      	ldr	r0, [r7, #12]
  4020d4:	4b12      	ldr	r3, [pc, #72]	; (402120 <chbsp_group_set_io_dir_out+0x6c>)
  4020d6:	4798      	blx	r3
  4020d8:	4603      	mov	r3, r0
  4020da:	2b00      	cmp	r3, #0
  4020dc:	d00a      	beq.n	4020f4 <chbsp_group_set_io_dir_out+0x40>
			mask |= ioport_pin_to_mask(chirp_pin_io[dev_num]);
  4020de:	7cfb      	ldrb	r3, [r7, #19]
  4020e0:	4a10      	ldr	r2, [pc, #64]	; (402124 <chbsp_group_set_io_dir_out+0x70>)
  4020e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4020e6:	4618      	mov	r0, r3
  4020e8:	4b0f      	ldr	r3, [pc, #60]	; (402128 <chbsp_group_set_io_dir_out+0x74>)
  4020ea:	4798      	blx	r3
  4020ec:	4602      	mov	r2, r0
  4020ee:	697b      	ldr	r3, [r7, #20]
  4020f0:	4313      	orrs	r3, r2
  4020f2:	617b      	str	r3, [r7, #20]
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++)
  4020f4:	7cfb      	ldrb	r3, [r7, #19]
  4020f6:	3301      	adds	r3, #1
  4020f8:	74fb      	strb	r3, [r7, #19]
  4020fa:	6878      	ldr	r0, [r7, #4]
  4020fc:	4b0b      	ldr	r3, [pc, #44]	; (40212c <chbsp_group_set_io_dir_out+0x78>)
  4020fe:	4798      	blx	r3
  402100:	4603      	mov	r3, r0
  402102:	461a      	mov	r2, r3
  402104:	7cfb      	ldrb	r3, [r7, #19]
  402106:	4293      	cmp	r3, r2
  402108:	d3dd      	bcc.n	4020c6 <chbsp_group_set_io_dir_out+0x12>
	}

	ioport_set_port_dir(IOPORT_PIOA, mask, IOPORT_DIR_OUTPUT);
  40210a:	2201      	movs	r2, #1
  40210c:	6979      	ldr	r1, [r7, #20]
  40210e:	2000      	movs	r0, #0
  402110:	4b07      	ldr	r3, [pc, #28]	; (402130 <chbsp_group_set_io_dir_out+0x7c>)
  402112:	4798      	blx	r3
}
  402114:	bf00      	nop
  402116:	3718      	adds	r7, #24
  402118:	46bd      	mov	sp, r7
  40211a:	bd80      	pop	{r7, pc}
  40211c:	004059a7 	.word	0x004059a7
  402120:	0040595d 	.word	0x0040595d
  402124:	20000130 	.word	0x20000130
  402128:	0040184b 	.word	0x0040184b
  40212c:	004059fb 	.word	0x004059fb
  402130:	004016b1 	.word	0x004016b1

00402134 <chbsp_group_set_io_dir_in>:
 *
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 * 
 * \note This function assumes a bidirectional level shifter is interfacing the ICs.
 */
void chbsp_group_set_io_dir_in(ch_group_t *grp_ptr) {
  402134:	b580      	push	{r7, lr}
  402136:	b086      	sub	sp, #24
  402138:	af00      	add	r7, sp, #0
  40213a:	6078      	str	r0, [r7, #4]
	ioport_port_mask_t mask = 0;
  40213c:	2300      	movs	r3, #0
  40213e:	617b      	str	r3, [r7, #20]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402140:	2300      	movs	r3, #0
  402142:	74fb      	strb	r3, [r7, #19]
  402144:	e019      	b.n	40217a <chbsp_group_set_io_dir_in+0x46>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  402146:	7cfb      	ldrb	r3, [r7, #19]
  402148:	4619      	mov	r1, r3
  40214a:	6878      	ldr	r0, [r7, #4]
  40214c:	4b13      	ldr	r3, [pc, #76]	; (40219c <chbsp_group_set_io_dir_in+0x68>)
  40214e:	4798      	blx	r3
  402150:	60f8      	str	r0, [r7, #12]

		if (ch_sensor_is_connected(dev_ptr)) {
  402152:	68f8      	ldr	r0, [r7, #12]
  402154:	4b12      	ldr	r3, [pc, #72]	; (4021a0 <chbsp_group_set_io_dir_in+0x6c>)
  402156:	4798      	blx	r3
  402158:	4603      	mov	r3, r0
  40215a:	2b00      	cmp	r3, #0
  40215c:	d00a      	beq.n	402174 <chbsp_group_set_io_dir_in+0x40>
			mask |= ioport_pin_to_mask(chirp_pin_io[dev_num]);
  40215e:	7cfb      	ldrb	r3, [r7, #19]
  402160:	4a10      	ldr	r2, [pc, #64]	; (4021a4 <chbsp_group_set_io_dir_in+0x70>)
  402162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402166:	4618      	mov	r0, r3
  402168:	4b0f      	ldr	r3, [pc, #60]	; (4021a8 <chbsp_group_set_io_dir_in+0x74>)
  40216a:	4798      	blx	r3
  40216c:	4602      	mov	r2, r0
  40216e:	697b      	ldr	r3, [r7, #20]
  402170:	4313      	orrs	r3, r2
  402172:	617b      	str	r3, [r7, #20]
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402174:	7cfb      	ldrb	r3, [r7, #19]
  402176:	3301      	adds	r3, #1
  402178:	74fb      	strb	r3, [r7, #19]
  40217a:	6878      	ldr	r0, [r7, #4]
  40217c:	4b0b      	ldr	r3, [pc, #44]	; (4021ac <chbsp_group_set_io_dir_in+0x78>)
  40217e:	4798      	blx	r3
  402180:	4603      	mov	r3, r0
  402182:	461a      	mov	r2, r3
  402184:	7cfb      	ldrb	r3, [r7, #19]
  402186:	4293      	cmp	r3, r2
  402188:	d3dd      	bcc.n	402146 <chbsp_group_set_io_dir_in+0x12>
		}
	}

	ioport_set_port_dir(IOPORT_PIOA, mask, IOPORT_DIR_INPUT);
  40218a:	2200      	movs	r2, #0
  40218c:	6979      	ldr	r1, [r7, #20]
  40218e:	2000      	movs	r0, #0
  402190:	4b07      	ldr	r3, [pc, #28]	; (4021b0 <chbsp_group_set_io_dir_in+0x7c>)
  402192:	4798      	blx	r3
}
  402194:	bf00      	nop
  402196:	3718      	adds	r7, #24
  402198:	46bd      	mov	sp, r7
  40219a:	bd80      	pop	{r7, pc}
  40219c:	004059a7 	.word	0x004059a7
  4021a0:	0040595d 	.word	0x0040595d
  4021a4:	20000130 	.word	0x20000130
  4021a8:	0040184b 	.word	0x0040184b
  4021ac:	004059fb 	.word	0x004059fb
  4021b0:	004016b1 	.word	0x004016b1

004021b4 <chbsp_group_pin_init>:
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 * 
 * Configure reset and program pins as outputs. Assert reset and program. Configure 
 * sensor INT pin as input.
 */
void chbsp_group_pin_init(ch_group_t *grp_ptr) {
  4021b4:	b590      	push	{r4, r7, lr}
  4021b6:	b087      	sub	sp, #28
  4021b8:	af02      	add	r7, sp, #8
  4021ba:	6078      	str	r0, [r7, #4]
	uint8_t dev_num;
	uint8_t port_num;

	ioport_set_pin_dir(CHIRP_PROG_0, IOPORT_DIR_OUTPUT); //PROG_0=output
  4021bc:	2101      	movs	r1, #1
  4021be:	2010      	movs	r0, #16
  4021c0:	4b3a      	ldr	r3, [pc, #232]	; (4022ac <chbsp_group_pin_init+0xf8>)
  4021c2:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_1, IOPORT_DIR_OUTPUT); //PROG_1=output
  4021c4:	2101      	movs	r1, #1
  4021c6:	2012      	movs	r0, #18
  4021c8:	4b38      	ldr	r3, [pc, #224]	; (4022ac <chbsp_group_pin_init+0xf8>)
  4021ca:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_2, IOPORT_DIR_OUTPUT); //PROG_2=output
  4021cc:	2101      	movs	r1, #1
  4021ce:	2013      	movs	r0, #19
  4021d0:	4b36      	ldr	r3, [pc, #216]	; (4022ac <chbsp_group_pin_init+0xf8>)
  4021d2:	4798      	blx	r3
	ioport_set_pin_dir(CHIRP_PROG_3, IOPORT_DIR_OUTPUT); //PROG_3=output
  4021d4:	2101      	movs	r1, #1
  4021d6:	201f      	movs	r0, #31
  4021d8:	4b34      	ldr	r3, [pc, #208]	; (4022ac <chbsp_group_pin_init+0xf8>)
  4021da:	4798      	blx	r3

	ioport_set_pin_level(CHIRP_PROG_0, IOPORT_PIN_LEVEL_LOW); //PROG_0=L
  4021dc:	2100      	movs	r1, #0
  4021de:	2010      	movs	r0, #16
  4021e0:	4b33      	ldr	r3, [pc, #204]	; (4022b0 <chbsp_group_pin_init+0xfc>)
  4021e2:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_1, IOPORT_PIN_LEVEL_LOW); //PROG_1=L
  4021e4:	2100      	movs	r1, #0
  4021e6:	2012      	movs	r0, #18
  4021e8:	4b31      	ldr	r3, [pc, #196]	; (4022b0 <chbsp_group_pin_init+0xfc>)
  4021ea:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_2, IOPORT_PIN_LEVEL_LOW); //PROG_2=L
  4021ec:	2100      	movs	r1, #0
  4021ee:	2013      	movs	r0, #19
  4021f0:	4b2f      	ldr	r3, [pc, #188]	; (4022b0 <chbsp_group_pin_init+0xfc>)
  4021f2:	4798      	blx	r3
	ioport_set_pin_level(CHIRP_PROG_3, IOPORT_PIN_LEVEL_LOW); //PROG_3=L	
  4021f4:	2100      	movs	r1, #0
  4021f6:	201f      	movs	r0, #31
  4021f8:	4b2d      	ldr	r3, [pc, #180]	; (4022b0 <chbsp_group_pin_init+0xfc>)
  4021fa:	4798      	blx	r3

	ioport_set_pin_dir(CHIRP_RST, IOPORT_DIR_OUTPUT); //reset=output
  4021fc:	2101      	movs	r1, #1
  4021fe:	200f      	movs	r0, #15
  402200:	4b2a      	ldr	r3, [pc, #168]	; (4022ac <chbsp_group_pin_init+0xf8>)
  402202:	4798      	blx	r3
	chbsp_reset_assert();
  402204:	4b2b      	ldr	r3, [pc, #172]	; (4022b4 <chbsp_group_pin_init+0x100>)
  402206:	4798      	blx	r3


	for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  402208:	2300      	movs	r3, #0
  40220a:	73fb      	strb	r3, [r7, #15]
  40220c:	e00b      	b.n	402226 <chbsp_group_pin_init+0x72>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  40220e:	7bfb      	ldrb	r3, [r7, #15]
  402210:	4619      	mov	r1, r3
  402212:	6878      	ldr	r0, [r7, #4]
  402214:	4b28      	ldr	r3, [pc, #160]	; (4022b8 <chbsp_group_pin_init+0x104>)
  402216:	4798      	blx	r3
  402218:	60b8      	str	r0, [r7, #8]

		chbsp_program_enable(dev_ptr);
  40221a:	68b8      	ldr	r0, [r7, #8]
  40221c:	4b27      	ldr	r3, [pc, #156]	; (4022bc <chbsp_group_pin_init+0x108>)
  40221e:	4798      	blx	r3
	for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  402220:	7bfb      	ldrb	r3, [r7, #15]
  402222:	3301      	adds	r3, #1
  402224:	73fb      	strb	r3, [r7, #15]
  402226:	687b      	ldr	r3, [r7, #4]
  402228:	781b      	ldrb	r3, [r3, #0]
  40222a:	7bfa      	ldrb	r2, [r7, #15]
  40222c:	429a      	cmp	r2, r3
  40222e:	d3ee      	bcc.n	40220e <chbsp_group_pin_init+0x5a>
	}

	/* Initialize IO pins */
	chbsp_group_set_io_dir_in(grp_ptr);  
  402230:	6878      	ldr	r0, [r7, #4]
  402232:	4b23      	ldr	r3, [pc, #140]	; (4022c0 <chbsp_group_pin_init+0x10c>)
  402234:	4798      	blx	r3

	/* Enable the peripheral clock for the MAG extension board interrupt pin. */
	pmc_enable_periph_clk(PIN_EXT_INTERRUPT_ID);
  402236:	200b      	movs	r0, #11
  402238:	4b22      	ldr	r3, [pc, #136]	; (4022c4 <chbsp_group_pin_init+0x110>)
  40223a:	4798      	blx	r3
	
	/* Configure PIOs as input pins. */
	for(port_num = 0; port_num < grp_ptr->num_ports; port_num++ ) {
  40223c:	2300      	movs	r3, #0
  40223e:	73bb      	strb	r3, [r7, #14]
  402240:	e00c      	b.n	40225c <chbsp_group_pin_init+0xa8>
		pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, chirp_pin_io_irq[port_num], 
  402242:	7bbb      	ldrb	r3, [r7, #14]
  402244:	4a20      	ldr	r2, [pc, #128]	; (4022c8 <chbsp_group_pin_init+0x114>)
  402246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40224a:	2370      	movs	r3, #112	; 0x70
  40224c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402250:	481e      	ldr	r0, [pc, #120]	; (4022cc <chbsp_group_pin_init+0x118>)
  402252:	4c1f      	ldr	r4, [pc, #124]	; (4022d0 <chbsp_group_pin_init+0x11c>)
  402254:	47a0      	blx	r4
	for(port_num = 0; port_num < grp_ptr->num_ports; port_num++ ) {
  402256:	7bbb      	ldrb	r3, [r7, #14]
  402258:	3301      	adds	r3, #1
  40225a:	73bb      	strb	r3, [r7, #14]
  40225c:	687b      	ldr	r3, [r7, #4]
  40225e:	781b      	ldrb	r3, [r3, #0]
  402260:	7bba      	ldrb	r2, [r7, #14]
  402262:	429a      	cmp	r2, r3
  402264:	d3ed      	bcc.n	402242 <chbsp_group_pin_init+0x8e>
				      PIN_EXT_INTERRUPT_ATTR);
	}

	pio_configure(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_TYPE, PIN_EXT_MotionINT_MASK, 
  402266:	2370      	movs	r3, #112	; 0x70
  402268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40226c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402270:	4816      	ldr	r0, [pc, #88]	; (4022cc <chbsp_group_pin_init+0x118>)
  402272:	4c17      	ldr	r4, [pc, #92]	; (4022d0 <chbsp_group_pin_init+0x11c>)
  402274:	47a0      	blx	r4
			      PIN_EXT_INTERRUPT_ATTR);		//configure motionINT pin (although not used)
	
	/* Initialize PIO interrupt handler, interrupt on rising edge. */
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, chirp_pin_io_irq[0],
  402276:	4b14      	ldr	r3, [pc, #80]	; (4022c8 <chbsp_group_pin_init+0x114>)
  402278:	681a      	ldr	r2, [r3, #0]
  40227a:	2300      	movs	r3, #0
  40227c:	9300      	str	r3, [sp, #0]
  40227e:	2370      	movs	r3, #112	; 0x70
  402280:	210b      	movs	r1, #11
  402282:	4812      	ldr	r0, [pc, #72]	; (4022cc <chbsp_group_pin_init+0x118>)
  402284:	4c13      	ldr	r4, [pc, #76]	; (4022d4 <chbsp_group_pin_init+0x120>)
  402286:	47a0      	blx	r4
						PIN_EXT_INTERRUPT_ATTR, NULL);
								
	pio_handler_set(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_ID, PIN_EXT_MotionINT_MASK,
  402288:	4b13      	ldr	r3, [pc, #76]	; (4022d8 <chbsp_group_pin_init+0x124>)
  40228a:	9300      	str	r3, [sp, #0]
  40228c:	2370      	movs	r3, #112	; 0x70
  40228e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402292:	210b      	movs	r1, #11
  402294:	480d      	ldr	r0, [pc, #52]	; (4022cc <chbsp_group_pin_init+0x118>)
  402296:	4c0f      	ldr	r4, [pc, #60]	; (4022d4 <chbsp_group_pin_init+0x120>)
  402298:	47a0      	blx	r4
						PIN_EXT_INTERRUPT_ATTR, (void (*) (uint32_t, uint32_t))ext_MotionINT_handler);

	/* Initialize and enable push button (PIO) interrupt. */
	pio_handler_set_priority(PIN_EXT_INTERRUPT_PIO, PIN_EXT_INTERRUPT_IRQn, 0);		
  40229a:	2200      	movs	r2, #0
  40229c:	210b      	movs	r1, #11
  40229e:	480b      	ldr	r0, [pc, #44]	; (4022cc <chbsp_group_pin_init+0x118>)
  4022a0:	4b0e      	ldr	r3, [pc, #56]	; (4022dc <chbsp_group_pin_init+0x128>)
  4022a2:	4798      	blx	r3
	
}
  4022a4:	bf00      	nop
  4022a6:	3714      	adds	r7, #20
  4022a8:	46bd      	mov	sp, r7
  4022aa:	bd90      	pop	{r4, r7, pc}
  4022ac:	0040170b 	.word	0x0040170b
  4022b0:	00401793 	.word	0x00401793
  4022b4:	00401fe5 	.word	0x00401fe5
  4022b8:	004059a7 	.word	0x004059a7
  4022bc:	0040200d 	.word	0x0040200d
  4022c0:	00402135 	.word	0x00402135
  4022c4:	00404375 	.word	0x00404375
  4022c8:	20000140 	.word	0x20000140
  4022cc:	400e0e00 	.word	0x400e0e00
  4022d0:	00403bfd 	.word	0x00403bfd
  4022d4:	00403f65 	.word	0x00403f65
  4022d8:	00401159 	.word	0x00401159
  4022dc:	00404021 	.word	0x00404021

004022e0 <chbsp_group_io_clear>:
 *
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 * 
 * This function drives the INT line low for each sensor in the group.
 */
void chbsp_group_io_clear(ch_group_t *grp_ptr) {
  4022e0:	b580      	push	{r7, lr}
  4022e2:	b086      	sub	sp, #24
  4022e4:	af00      	add	r7, sp, #0
  4022e6:	6078      	str	r0, [r7, #4]
	ioport_port_mask_t mask = 0;
  4022e8:	2300      	movs	r3, #0
  4022ea:	617b      	str	r3, [r7, #20]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  4022ec:	2300      	movs	r3, #0
  4022ee:	74fb      	strb	r3, [r7, #19]
  4022f0:	e019      	b.n	402326 <chbsp_group_io_clear+0x46>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  4022f2:	7cfb      	ldrb	r3, [r7, #19]
  4022f4:	4619      	mov	r1, r3
  4022f6:	6878      	ldr	r0, [r7, #4]
  4022f8:	4b13      	ldr	r3, [pc, #76]	; (402348 <chbsp_group_io_clear+0x68>)
  4022fa:	4798      	blx	r3
  4022fc:	60f8      	str	r0, [r7, #12]

		if (ch_sensor_is_connected(dev_ptr)) {
  4022fe:	68f8      	ldr	r0, [r7, #12]
  402300:	4b12      	ldr	r3, [pc, #72]	; (40234c <chbsp_group_io_clear+0x6c>)
  402302:	4798      	blx	r3
  402304:	4603      	mov	r3, r0
  402306:	2b00      	cmp	r3, #0
  402308:	d00a      	beq.n	402320 <chbsp_group_io_clear+0x40>
			mask |= ioport_pin_to_mask(chirp_pin_io[dev_num]);
  40230a:	7cfb      	ldrb	r3, [r7, #19]
  40230c:	4a10      	ldr	r2, [pc, #64]	; (402350 <chbsp_group_io_clear+0x70>)
  40230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402312:	4618      	mov	r0, r3
  402314:	4b0f      	ldr	r3, [pc, #60]	; (402354 <chbsp_group_io_clear+0x74>)
  402316:	4798      	blx	r3
  402318:	4602      	mov	r2, r0
  40231a:	697b      	ldr	r3, [r7, #20]
  40231c:	4313      	orrs	r3, r2
  40231e:	617b      	str	r3, [r7, #20]
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402320:	7cfb      	ldrb	r3, [r7, #19]
  402322:	3301      	adds	r3, #1
  402324:	74fb      	strb	r3, [r7, #19]
  402326:	6878      	ldr	r0, [r7, #4]
  402328:	4b0b      	ldr	r3, [pc, #44]	; (402358 <chbsp_group_io_clear+0x78>)
  40232a:	4798      	blx	r3
  40232c:	4603      	mov	r3, r0
  40232e:	461a      	mov	r2, r3
  402330:	7cfb      	ldrb	r3, [r7, #19]
  402332:	4293      	cmp	r3, r2
  402334:	d3dd      	bcc.n	4022f2 <chbsp_group_io_clear+0x12>
		}
	}

	ioport_set_port_level(IOPORT_PIOA, mask, IOPORT_PIN_LEVEL_LOW);
  402336:	2200      	movs	r2, #0
  402338:	6979      	ldr	r1, [r7, #20]
  40233a:	2000      	movs	r0, #0
  40233c:	4b07      	ldr	r3, [pc, #28]	; (40235c <chbsp_group_io_clear+0x7c>)
  40233e:	4798      	blx	r3
}
  402340:	bf00      	nop
  402342:	3718      	adds	r7, #24
  402344:	46bd      	mov	sp, r7
  402346:	bd80      	pop	{r7, pc}
  402348:	004059a7 	.word	0x004059a7
  40234c:	0040595d 	.word	0x0040595d
  402350:	20000130 	.word	0x20000130
  402354:	0040184b 	.word	0x0040184b
  402358:	004059fb 	.word	0x004059fb
  40235c:	004017ff 	.word	0x004017ff

00402360 <chbsp_group_io_set>:
 * 
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 *
 * This function drives the INT line high for each sensor in the group.
 */
void chbsp_group_io_set(ch_group_t *grp_ptr) {
  402360:	b580      	push	{r7, lr}
  402362:	b086      	sub	sp, #24
  402364:	af00      	add	r7, sp, #0
  402366:	6078      	str	r0, [r7, #4]
	uint8_t dev_num;
	ioport_port_mask_t mask = 0;
  402368:	2300      	movs	r3, #0
  40236a:	613b      	str	r3, [r7, #16]

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  40236c:	2300      	movs	r3, #0
  40236e:	75fb      	strb	r3, [r7, #23]
  402370:	e019      	b.n	4023a6 <chbsp_group_io_set+0x46>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  402372:	7dfb      	ldrb	r3, [r7, #23]
  402374:	4619      	mov	r1, r3
  402376:	6878      	ldr	r0, [r7, #4]
  402378:	4b13      	ldr	r3, [pc, #76]	; (4023c8 <chbsp_group_io_set+0x68>)
  40237a:	4798      	blx	r3
  40237c:	60f8      	str	r0, [r7, #12]

		if (ch_sensor_is_connected(dev_ptr)) {
  40237e:	68f8      	ldr	r0, [r7, #12]
  402380:	4b12      	ldr	r3, [pc, #72]	; (4023cc <chbsp_group_io_set+0x6c>)
  402382:	4798      	blx	r3
  402384:	4603      	mov	r3, r0
  402386:	2b00      	cmp	r3, #0
  402388:	d00a      	beq.n	4023a0 <chbsp_group_io_set+0x40>
			mask |= ioport_pin_to_mask(chirp_pin_io[dev_num]);
  40238a:	7dfb      	ldrb	r3, [r7, #23]
  40238c:	4a10      	ldr	r2, [pc, #64]	; (4023d0 <chbsp_group_io_set+0x70>)
  40238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402392:	4618      	mov	r0, r3
  402394:	4b0f      	ldr	r3, [pc, #60]	; (4023d4 <chbsp_group_io_set+0x74>)
  402396:	4798      	blx	r3
  402398:	4602      	mov	r2, r0
  40239a:	693b      	ldr	r3, [r7, #16]
  40239c:	4313      	orrs	r3, r2
  40239e:	613b      	str	r3, [r7, #16]
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  4023a0:	7dfb      	ldrb	r3, [r7, #23]
  4023a2:	3301      	adds	r3, #1
  4023a4:	75fb      	strb	r3, [r7, #23]
  4023a6:	6878      	ldr	r0, [r7, #4]
  4023a8:	4b0b      	ldr	r3, [pc, #44]	; (4023d8 <chbsp_group_io_set+0x78>)
  4023aa:	4798      	blx	r3
  4023ac:	4603      	mov	r3, r0
  4023ae:	461a      	mov	r2, r3
  4023b0:	7dfb      	ldrb	r3, [r7, #23]
  4023b2:	4293      	cmp	r3, r2
  4023b4:	d3dd      	bcc.n	402372 <chbsp_group_io_set+0x12>
		}
	}

	ioport_set_port_level(IOPORT_PIOA, mask, IOPORT_PIN_LEVEL_HIGH);
  4023b6:	2201      	movs	r2, #1
  4023b8:	6939      	ldr	r1, [r7, #16]
  4023ba:	2000      	movs	r0, #0
  4023bc:	4b07      	ldr	r3, [pc, #28]	; (4023dc <chbsp_group_io_set+0x7c>)
  4023be:	4798      	blx	r3
}
  4023c0:	bf00      	nop
  4023c2:	3718      	adds	r7, #24
  4023c4:	46bd      	mov	sp, r7
  4023c6:	bd80      	pop	{r7, pc}
  4023c8:	004059a7 	.word	0x004059a7
  4023cc:	0040595d 	.word	0x0040595d
  4023d0:	20000130 	.word	0x20000130
  4023d4:	0040184b 	.word	0x0040184b
  4023d8:	004059fb 	.word	0x004059fb
  4023dc:	004017ff 	.word	0x004017ff

004023e0 <chbsp_group_io_interrupt_enable>:
 * \param grp_ptr 	pointer to the ch_group_t config structure for a group of sensors
 *
 * For each sensor in the group, this function disables the host interrupt associated 
 * with the Chirp sensor device's INT line.
 */
void chbsp_group_io_interrupt_enable(ch_group_t *grp_ptr) {
  4023e0:	b580      	push	{r7, lr}
  4023e2:	b084      	sub	sp, #16
  4023e4:	af00      	add	r7, sp, #0
  4023e6:	6078      	str	r0, [r7, #4]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  4023e8:	2300      	movs	r3, #0
  4023ea:	73fb      	strb	r3, [r7, #15]
  4023ec:	e00b      	b.n	402406 <chbsp_group_io_interrupt_enable+0x26>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  4023ee:	7bfb      	ldrb	r3, [r7, #15]
  4023f0:	4619      	mov	r1, r3
  4023f2:	6878      	ldr	r0, [r7, #4]
  4023f4:	4b0a      	ldr	r3, [pc, #40]	; (402420 <chbsp_group_io_interrupt_enable+0x40>)
  4023f6:	4798      	blx	r3
  4023f8:	60b8      	str	r0, [r7, #8]

		chbsp_io_interrupt_enable(dev_ptr);
  4023fa:	68b8      	ldr	r0, [r7, #8]
  4023fc:	4b09      	ldr	r3, [pc, #36]	; (402424 <chbsp_group_io_interrupt_enable+0x44>)
  4023fe:	4798      	blx	r3
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402400:	7bfb      	ldrb	r3, [r7, #15]
  402402:	3301      	adds	r3, #1
  402404:	73fb      	strb	r3, [r7, #15]
  402406:	6878      	ldr	r0, [r7, #4]
  402408:	4b07      	ldr	r3, [pc, #28]	; (402428 <chbsp_group_io_interrupt_enable+0x48>)
  40240a:	4798      	blx	r3
  40240c:	4603      	mov	r3, r0
  40240e:	461a      	mov	r2, r3
  402410:	7bfb      	ldrb	r3, [r7, #15]
  402412:	4293      	cmp	r3, r2
  402414:	d3eb      	bcc.n	4023ee <chbsp_group_io_interrupt_enable+0xe>
	}
}
  402416:	bf00      	nop
  402418:	3710      	adds	r7, #16
  40241a:	46bd      	mov	sp, r7
  40241c:	bd80      	pop	{r7, pc}
  40241e:	bf00      	nop
  402420:	004059a7 	.word	0x004059a7
  402424:	0040242d 	.word	0x0040242d
  402428:	004059fb 	.word	0x004059fb

0040242c <chbsp_io_interrupt_enable>:
 * \param dev_ptr	pointer to the ch_dev_t config structure for a sensor
 *
 * This function enables the host interrupt associated with the Chirp sensor device's 
 * INT line.
 */
void chbsp_io_interrupt_enable(ch_dev_t *dev_ptr) {
  40242c:	b580      	push	{r7, lr}
  40242e:	b084      	sub	sp, #16
  402430:	af00      	add	r7, sp, #0
  402432:	6078      	str	r0, [r7, #4]
	uint8_t dev_num = ch_get_dev_num(dev_ptr);
  402434:	6878      	ldr	r0, [r7, #4]
  402436:	4b0f      	ldr	r3, [pc, #60]	; (402474 <chbsp_io_interrupt_enable+0x48>)
  402438:	4798      	blx	r3
  40243a:	4603      	mov	r3, r0
  40243c:	73fb      	strb	r3, [r7, #15]

	if (ch_sensor_is_connected(dev_ptr)) {
  40243e:	6878      	ldr	r0, [r7, #4]
  402440:	4b0d      	ldr	r3, [pc, #52]	; (402478 <chbsp_io_interrupt_enable+0x4c>)
  402442:	4798      	blx	r3
  402444:	4603      	mov	r3, r0
  402446:	2b00      	cmp	r3, #0
  402448:	d010      	beq.n	40246c <chbsp_io_interrupt_enable+0x40>
		pio_handler_clear_pending_IRQ(PIN_EXT_INTERRUPT_PIO, chirp_pin_io_irq[dev_num]);
  40244a:	7bfb      	ldrb	r3, [r7, #15]
  40244c:	4a0b      	ldr	r2, [pc, #44]	; (40247c <chbsp_io_interrupt_enable+0x50>)
  40244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402452:	b25b      	sxtb	r3, r3
  402454:	4619      	mov	r1, r3
  402456:	480a      	ldr	r0, [pc, #40]	; (402480 <chbsp_io_interrupt_enable+0x54>)
  402458:	4b0a      	ldr	r3, [pc, #40]	; (402484 <chbsp_io_interrupt_enable+0x58>)
  40245a:	4798      	blx	r3
		pio_enable_interrupt(PIN_EXT_INTERRUPT_PIO, chirp_pin_io_irq[dev_num]);
  40245c:	7bfb      	ldrb	r3, [r7, #15]
  40245e:	4a07      	ldr	r2, [pc, #28]	; (40247c <chbsp_io_interrupt_enable+0x50>)
  402460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402464:	4619      	mov	r1, r3
  402466:	4806      	ldr	r0, [pc, #24]	; (402480 <chbsp_io_interrupt_enable+0x54>)
  402468:	4b07      	ldr	r3, [pc, #28]	; (402488 <chbsp_io_interrupt_enable+0x5c>)
  40246a:	4798      	blx	r3
	}
}
  40246c:	bf00      	nop
  40246e:	3710      	adds	r7, #16
  402470:	46bd      	mov	sp, r7
  402472:	bd80      	pop	{r7, pc}
  402474:	0040598d 	.word	0x0040598d
  402478:	0040595d 	.word	0x0040595d
  40247c:	20000140 	.word	0x20000140
  402480:	400e0e00 	.word	0x400e0e00
  402484:	004040a5 	.word	0x004040a5
  402488:	00403d59 	.word	0x00403d59

0040248c <chbsp_group_io_interrupt_disable>:
 * \param grp_ptr 		pointer to the ch_group_t config structure for a group of sensors
 *
 * For each sensor in the group, this function disables the host interrupt associated 
 * with the Chirp sensor device's INT line.
 */
void chbsp_group_io_interrupt_disable(ch_group_t *grp_ptr) {
  40248c:	b580      	push	{r7, lr}
  40248e:	b084      	sub	sp, #16
  402490:	af00      	add	r7, sp, #0
  402492:	6078      	str	r0, [r7, #4]
	uint8_t dev_num;

	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  402494:	2300      	movs	r3, #0
  402496:	73fb      	strb	r3, [r7, #15]
  402498:	e00b      	b.n	4024b2 <chbsp_group_io_interrupt_disable+0x26>
		ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
  40249a:	7bfb      	ldrb	r3, [r7, #15]
  40249c:	4619      	mov	r1, r3
  40249e:	6878      	ldr	r0, [r7, #4]
  4024a0:	4b0a      	ldr	r3, [pc, #40]	; (4024cc <chbsp_group_io_interrupt_disable+0x40>)
  4024a2:	4798      	blx	r3
  4024a4:	60b8      	str	r0, [r7, #8]

		chbsp_io_interrupt_disable(dev_ptr);
  4024a6:	68b8      	ldr	r0, [r7, #8]
  4024a8:	4b09      	ldr	r3, [pc, #36]	; (4024d0 <chbsp_group_io_interrupt_disable+0x44>)
  4024aa:	4798      	blx	r3
	for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
  4024ac:	7bfb      	ldrb	r3, [r7, #15]
  4024ae:	3301      	adds	r3, #1
  4024b0:	73fb      	strb	r3, [r7, #15]
  4024b2:	6878      	ldr	r0, [r7, #4]
  4024b4:	4b07      	ldr	r3, [pc, #28]	; (4024d4 <chbsp_group_io_interrupt_disable+0x48>)
  4024b6:	4798      	blx	r3
  4024b8:	4603      	mov	r3, r0
  4024ba:	461a      	mov	r2, r3
  4024bc:	7bfb      	ldrb	r3, [r7, #15]
  4024be:	4293      	cmp	r3, r2
  4024c0:	d3eb      	bcc.n	40249a <chbsp_group_io_interrupt_disable+0xe>
	}
}
  4024c2:	bf00      	nop
  4024c4:	3710      	adds	r7, #16
  4024c6:	46bd      	mov	sp, r7
  4024c8:	bd80      	pop	{r7, pc}
  4024ca:	bf00      	nop
  4024cc:	004059a7 	.word	0x004059a7
  4024d0:	004024d9 	.word	0x004024d9
  4024d4:	004059fb 	.word	0x004059fb

004024d8 <chbsp_io_interrupt_disable>:
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function disables the host interrupt associated with the Chirp sensor device's 
 * INT line.
 */
void chbsp_io_interrupt_disable(ch_dev_t *dev_ptr) {
  4024d8:	b580      	push	{r7, lr}
  4024da:	b082      	sub	sp, #8
  4024dc:	af00      	add	r7, sp, #0
  4024de:	6078      	str	r0, [r7, #4]

	if (dev_ptr->sensor_connected) {
  4024e0:	687b      	ldr	r3, [r7, #4]
  4024e2:	7fdb      	ldrb	r3, [r3, #31]
  4024e4:	2b00      	cmp	r3, #0
  4024e6:	d00a      	beq.n	4024fe <chbsp_io_interrupt_disable+0x26>
		pio_disable_interrupt(PIN_EXT_INTERRUPT_PIO, chirp_pin_io_irq[dev_ptr->io_index]);
  4024e8:	687b      	ldr	r3, [r7, #4]
  4024ea:	f893 3020 	ldrb.w	r3, [r3, #32]
  4024ee:	461a      	mov	r2, r3
  4024f0:	4b05      	ldr	r3, [pc, #20]	; (402508 <chbsp_io_interrupt_disable+0x30>)
  4024f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4024f6:	4619      	mov	r1, r3
  4024f8:	4804      	ldr	r0, [pc, #16]	; (40250c <chbsp_io_interrupt_disable+0x34>)
  4024fa:	4b05      	ldr	r3, [pc, #20]	; (402510 <chbsp_io_interrupt_disable+0x38>)
  4024fc:	4798      	blx	r3
	}
}
  4024fe:	bf00      	nop
  402500:	3708      	adds	r7, #8
  402502:	46bd      	mov	sp, r7
  402504:	bd80      	pop	{r7, pc}
  402506:	bf00      	nop
  402508:	20000140 	.word	0x20000140
  40250c:	400e0e00 	.word	0x400e0e00
  402510:	00403d75 	.word	0x00403d75

00402514 <chbsp_io_set>:
 * 
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function drives the INT line high for one sensor.
 */
void chbsp_io_set(ch_dev_t *dev_ptr) {
  402514:	b580      	push	{r7, lr}
  402516:	b082      	sub	sp, #8
  402518:	af00      	add	r7, sp, #0
  40251a:	6078      	str	r0, [r7, #4]
	ioport_set_pin_level(chirp_pin_io[dev_ptr->io_index], IOPORT_PIN_LEVEL_HIGH);
  40251c:	687b      	ldr	r3, [r7, #4]
  40251e:	f893 3020 	ldrb.w	r3, [r3, #32]
  402522:	461a      	mov	r2, r3
  402524:	4b05      	ldr	r3, [pc, #20]	; (40253c <chbsp_io_set+0x28>)
  402526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40252a:	2101      	movs	r1, #1
  40252c:	4618      	mov	r0, r3
  40252e:	4b04      	ldr	r3, [pc, #16]	; (402540 <chbsp_io_set+0x2c>)
  402530:	4798      	blx	r3
}
  402532:	bf00      	nop
  402534:	3708      	adds	r7, #8
  402536:	46bd      	mov	sp, r7
  402538:	bd80      	pop	{r7, pc}
  40253a:	bf00      	nop
  40253c:	20000130 	.word	0x20000130
  402540:	00401793 	.word	0x00401793
  402544:	00000000 	.word	0x00000000

00402548 <chbsp_delay_us>:
 * \param us  	number of microseconds to delay before returning
 *
 * This function waits for the specified number of microseconds before returning to 
 * the caller.
 */
void chbsp_delay_us(uint32_t us) {
  402548:	b5f0      	push	{r4, r5, r6, r7, lr}
  40254a:	b083      	sub	sp, #12
  40254c:	af00      	add	r7, sp, #0
  40254e:	6078      	str	r0, [r7, #4]

	delay_us(us);
  402550:	687b      	ldr	r3, [r7, #4]
  402552:	2b00      	cmp	r3, #0
  402554:	d024      	beq.n	4025a0 <chbsp_delay_us+0x58>
  402556:	687b      	ldr	r3, [r7, #4]
  402558:	461d      	mov	r5, r3
  40255a:	f04f 0600 	mov.w	r6, #0
  40255e:	4b20      	ldr	r3, [pc, #128]	; (4025e0 <chbsp_delay_us+0x98>)
  402560:	4798      	blx	r3
  402562:	4603      	mov	r3, r0
  402564:	f04f 0400 	mov.w	r4, #0
  402568:	fb03 f106 	mul.w	r1, r3, r6
  40256c:	fb05 f204 	mul.w	r2, r5, r4
  402570:	440a      	add	r2, r1
  402572:	fba5 3403 	umull	r3, r4, r5, r3
  402576:	4422      	add	r2, r4
  402578:	4614      	mov	r4, r2
  40257a:	a217      	add	r2, pc, #92	; (adr r2, 4025d8 <chbsp_delay_us+0x90>)
  40257c:	e9d2 1200 	ldrd	r1, r2, [r2]
  402580:	185d      	adds	r5, r3, r1
  402582:	eb44 0602 	adc.w	r6, r4, r2
  402586:	4628      	mov	r0, r5
  402588:	4631      	mov	r1, r6
  40258a:	4c16      	ldr	r4, [pc, #88]	; (4025e4 <chbsp_delay_us+0x9c>)
  40258c:	4a16      	ldr	r2, [pc, #88]	; (4025e8 <chbsp_delay_us+0xa0>)
  40258e:	f04f 0300 	mov.w	r3, #0
  402592:	47a0      	blx	r4
  402594:	4603      	mov	r3, r0
  402596:	460c      	mov	r4, r1
  402598:	4618      	mov	r0, r3
  40259a:	4b14      	ldr	r3, [pc, #80]	; (4025ec <chbsp_delay_us+0xa4>)
  40259c:	4798      	blx	r3
}
  40259e:	e016      	b.n	4025ce <chbsp_delay_us+0x86>
	delay_us(us);
  4025a0:	4b0f      	ldr	r3, [pc, #60]	; (4025e0 <chbsp_delay_us+0x98>)
  4025a2:	4798      	blx	r3
  4025a4:	4603      	mov	r3, r0
  4025a6:	f04f 0400 	mov.w	r4, #0
  4025aa:	a20b      	add	r2, pc, #44	; (adr r2, 4025d8 <chbsp_delay_us+0x90>)
  4025ac:	e9d2 1200 	ldrd	r1, r2, [r2]
  4025b0:	185d      	adds	r5, r3, r1
  4025b2:	eb44 0602 	adc.w	r6, r4, r2
  4025b6:	4628      	mov	r0, r5
  4025b8:	4631      	mov	r1, r6
  4025ba:	4c0a      	ldr	r4, [pc, #40]	; (4025e4 <chbsp_delay_us+0x9c>)
  4025bc:	4a0a      	ldr	r2, [pc, #40]	; (4025e8 <chbsp_delay_us+0xa0>)
  4025be:	f04f 0300 	mov.w	r3, #0
  4025c2:	47a0      	blx	r4
  4025c4:	4603      	mov	r3, r0
  4025c6:	460c      	mov	r4, r1
  4025c8:	4618      	mov	r0, r3
  4025ca:	4b08      	ldr	r3, [pc, #32]	; (4025ec <chbsp_delay_us+0xa4>)
  4025cc:	4798      	blx	r3
}
  4025ce:	bf00      	nop
  4025d0:	370c      	adds	r7, #12
  4025d2:	46bd      	mov	sp, r7
  4025d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025d6:	bf00      	nop
  4025d8:	00d59f7f 	.word	0x00d59f7f
  4025dc:	00000000 	.word	0x00000000
  4025e0:	00401681 	.word	0x00401681
  4025e4:	0040bdcd 	.word	0x0040bdcd
  4025e8:	00d59f80 	.word	0x00d59f80
  4025ec:	20000001 	.word	0x20000001

004025f0 <chbsp_delay_ms>:
 * \param ms 	number of milliseconds to delay before returning
 *
 * This function waits for the specified number of milliseconds before returning to 
 * the caller.
 */
void chbsp_delay_ms(uint32_t ms) {
  4025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4025f2:	b083      	sub	sp, #12
  4025f4:	af00      	add	r7, sp, #0
  4025f6:	6078      	str	r0, [r7, #4]

	delay_us(ms*1000);
  4025f8:	687b      	ldr	r3, [r7, #4]
  4025fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4025fe:	fb02 f303 	mul.w	r3, r2, r3
  402602:	2b00      	cmp	r3, #0
  402604:	d028      	beq.n	402658 <chbsp_delay_ms+0x68>
  402606:	687b      	ldr	r3, [r7, #4]
  402608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40260c:	fb02 f303 	mul.w	r3, r2, r3
  402610:	461d      	mov	r5, r3
  402612:	f04f 0600 	mov.w	r6, #0
  402616:	4b20      	ldr	r3, [pc, #128]	; (402698 <chbsp_delay_ms+0xa8>)
  402618:	4798      	blx	r3
  40261a:	4603      	mov	r3, r0
  40261c:	f04f 0400 	mov.w	r4, #0
  402620:	fb03 f106 	mul.w	r1, r3, r6
  402624:	fb05 f204 	mul.w	r2, r5, r4
  402628:	440a      	add	r2, r1
  40262a:	fba5 3403 	umull	r3, r4, r5, r3
  40262e:	4422      	add	r2, r4
  402630:	4614      	mov	r4, r2
  402632:	a217      	add	r2, pc, #92	; (adr r2, 402690 <chbsp_delay_ms+0xa0>)
  402634:	e9d2 1200 	ldrd	r1, r2, [r2]
  402638:	185d      	adds	r5, r3, r1
  40263a:	eb44 0602 	adc.w	r6, r4, r2
  40263e:	4628      	mov	r0, r5
  402640:	4631      	mov	r1, r6
  402642:	4c16      	ldr	r4, [pc, #88]	; (40269c <chbsp_delay_ms+0xac>)
  402644:	4a16      	ldr	r2, [pc, #88]	; (4026a0 <chbsp_delay_ms+0xb0>)
  402646:	f04f 0300 	mov.w	r3, #0
  40264a:	47a0      	blx	r4
  40264c:	4603      	mov	r3, r0
  40264e:	460c      	mov	r4, r1
  402650:	4618      	mov	r0, r3
  402652:	4b14      	ldr	r3, [pc, #80]	; (4026a4 <chbsp_delay_ms+0xb4>)
  402654:	4798      	blx	r3
}
  402656:	e016      	b.n	402686 <chbsp_delay_ms+0x96>
	delay_us(ms*1000);
  402658:	4b0f      	ldr	r3, [pc, #60]	; (402698 <chbsp_delay_ms+0xa8>)
  40265a:	4798      	blx	r3
  40265c:	4603      	mov	r3, r0
  40265e:	f04f 0400 	mov.w	r4, #0
  402662:	a20b      	add	r2, pc, #44	; (adr r2, 402690 <chbsp_delay_ms+0xa0>)
  402664:	e9d2 1200 	ldrd	r1, r2, [r2]
  402668:	185d      	adds	r5, r3, r1
  40266a:	eb44 0602 	adc.w	r6, r4, r2
  40266e:	4628      	mov	r0, r5
  402670:	4631      	mov	r1, r6
  402672:	4c0a      	ldr	r4, [pc, #40]	; (40269c <chbsp_delay_ms+0xac>)
  402674:	4a0a      	ldr	r2, [pc, #40]	; (4026a0 <chbsp_delay_ms+0xb0>)
  402676:	f04f 0300 	mov.w	r3, #0
  40267a:	47a0      	blx	r4
  40267c:	4603      	mov	r3, r0
  40267e:	460c      	mov	r4, r1
  402680:	4618      	mov	r0, r3
  402682:	4b08      	ldr	r3, [pc, #32]	; (4026a4 <chbsp_delay_ms+0xb4>)
  402684:	4798      	blx	r3
}
  402686:	bf00      	nop
  402688:	370c      	adds	r7, #12
  40268a:	46bd      	mov	sp, r7
  40268c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40268e:	bf00      	nop
  402690:	00d59f7f 	.word	0x00d59f7f
  402694:	00000000 	.word	0x00000000
  402698:	00401681 	.word	0x00401681
  40269c:	0040bdcd 	.word	0x0040bdcd
  4026a0:	00d59f80 	.word	0x00d59f80
  4026a4:	20000001 	.word	0x20000001

004026a8 <chbsp_i2c_init>:
 *
 * \return 0 if successful, 1 on error
 *
 * This function performs general I2C initialization on the host system.
 */
int chbsp_i2c_init(void) {
  4026a8:	b580      	push	{r7, lr}
  4026aa:	af00      	add	r7, sp, #0

	i2c_master_init(); 
  4026ac:	4b02      	ldr	r3, [pc, #8]	; (4026b8 <chbsp_i2c_init+0x10>)
  4026ae:	4798      	blx	r3
	return 0;
  4026b0:	2300      	movs	r3, #0

}
  4026b2:	4618      	mov	r0, r3
  4026b4:	bd80      	pop	{r7, pc}
  4026b6:	bf00      	nop
  4026b8:	00407fd5 	.word	0x00407fd5

004026bc <chbsp_i2c_get_info>:
 *  - The \a address field contains the I2C address for the sensor.  
 *  - The \a bus_num field contains the I2C bus number (index).  
 *  - The \a drv_flags field contains various bit flags through which the BSP can inform 
 *  SonicLib driver functions to perform specific actions during I2C I/O operations.
 */
uint8_t chbsp_i2c_get_info(ch_group_t __attribute__((unused)) *grp_ptr, uint8_t io_index, ch_i2c_info_t *info_ptr) {
  4026bc:	b480      	push	{r7}
  4026be:	b087      	sub	sp, #28
  4026c0:	af00      	add	r7, sp, #0
  4026c2:	60f8      	str	r0, [r7, #12]
  4026c4:	460b      	mov	r3, r1
  4026c6:	607a      	str	r2, [r7, #4]
  4026c8:	72fb      	strb	r3, [r7, #11]
	uint8_t ret_val = 1;
  4026ca:	2301      	movs	r3, #1
  4026cc:	75fb      	strb	r3, [r7, #23]

	if (io_index <= CHBSP_MAX_DEVICES) {
  4026ce:	7afb      	ldrb	r3, [r7, #11]
  4026d0:	2b04      	cmp	r3, #4
  4026d2:	d80e      	bhi.n	4026f2 <chbsp_i2c_get_info+0x36>
		info_ptr->address = chirp_i2c_addrs[io_index];
  4026d4:	7afb      	ldrb	r3, [r7, #11]
  4026d6:	4a0a      	ldr	r2, [pc, #40]	; (402700 <chbsp_i2c_get_info+0x44>)
  4026d8:	5cd2      	ldrb	r2, [r2, r3]
  4026da:	687b      	ldr	r3, [r7, #4]
  4026dc:	701a      	strb	r2, [r3, #0]
		info_ptr->bus_num = chirp_i2c_buses[io_index];
  4026de:	7afb      	ldrb	r3, [r7, #11]
  4026e0:	4a08      	ldr	r2, [pc, #32]	; (402704 <chbsp_i2c_get_info+0x48>)
  4026e2:	5cd2      	ldrb	r2, [r2, r3]
  4026e4:	687b      	ldr	r3, [r7, #4]
  4026e6:	705a      	strb	r2, [r3, #1]

		info_ptr->drv_flags = 0;	// no special I2C handling by SonicLib driver is needed
  4026e8:	687b      	ldr	r3, [r7, #4]
  4026ea:	2200      	movs	r2, #0
  4026ec:	805a      	strh	r2, [r3, #2]

		ret_val = 0;
  4026ee:	2300      	movs	r3, #0
  4026f0:	75fb      	strb	r3, [r7, #23]
	}

	return ret_val;
  4026f2:	7dfb      	ldrb	r3, [r7, #23]
}
  4026f4:	4618      	mov	r0, r3
  4026f6:	371c      	adds	r7, #28
  4026f8:	46bd      	mov	sp, r7
  4026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026fe:	4770      	bx	lr
  402700:	20000118 	.word	0x20000118
  402704:	2000011c 	.word	0x2000011c

00402708 <chbsp_i2c_write>:
 * \return 0 if successful, 1 on error or NACK
 *
 * This function writes one or more bytes of data to an I2C slave device.
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_write(ch_dev_t *dev_ptr, uint8_t *data, uint16_t num_bytes) {
  402708:	b580      	push	{r7, lr}
  40270a:	b086      	sub	sp, #24
  40270c:	af00      	add	r7, sp, #0
  40270e:	60f8      	str	r0, [r7, #12]
  402710:	60b9      	str	r1, [r7, #8]
  402712:	4613      	mov	r3, r2
  402714:	80fb      	strh	r3, [r7, #6]
	int error = 0;
  402716:	2300      	movs	r3, #0
  402718:	617b      	str	r3, [r7, #20]

	if (dev_ptr->i2c_bus_index == 0) {
  40271a:	68fb      	ldr	r3, [r7, #12]
  40271c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  402720:	2b00      	cmp	r3, #0
  402722:	d109      	bne.n	402738 <chbsp_i2c_write+0x30>
		error = i2c_master_write_register1_raw(dev_ptr->i2c_address, num_bytes, data); //I2C bus 0 (TWI1)
  402724:	68fb      	ldr	r3, [r7, #12]
  402726:	7e1b      	ldrb	r3, [r3, #24]
  402728:	88f9      	ldrh	r1, [r7, #6]
  40272a:	68ba      	ldr	r2, [r7, #8]
  40272c:	4618      	mov	r0, r3
  40272e:	4b0c      	ldr	r3, [pc, #48]	; (402760 <chbsp_i2c_write+0x58>)
  402730:	4798      	blx	r3
  402732:	4603      	mov	r3, r0
  402734:	617b      	str	r3, [r7, #20]
  402736:	e00d      	b.n	402754 <chbsp_i2c_write+0x4c>
		
	} else if (dev_ptr->i2c_bus_index == 1) {
  402738:	68fb      	ldr	r3, [r7, #12]
  40273a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  40273e:	2b01      	cmp	r3, #1
  402740:	d108      	bne.n	402754 <chbsp_i2c_write+0x4c>
		error = i2c_master_write_register3_raw(dev_ptr->i2c_address, num_bytes, data); //I2C bus 1 (TWI3)
  402742:	68fb      	ldr	r3, [r7, #12]
  402744:	7e1b      	ldrb	r3, [r3, #24]
  402746:	88f9      	ldrh	r1, [r7, #6]
  402748:	68ba      	ldr	r2, [r7, #8]
  40274a:	4618      	mov	r0, r3
  40274c:	4b05      	ldr	r3, [pc, #20]	; (402764 <chbsp_i2c_write+0x5c>)
  40274e:	4798      	blx	r3
  402750:	4603      	mov	r3, r0
  402752:	617b      	str	r3, [r7, #20]
	}

	return error;
  402754:	697b      	ldr	r3, [r7, #20]
}
  402756:	4618      	mov	r0, r3
  402758:	3718      	adds	r7, #24
  40275a:	46bd      	mov	sp, r7
  40275c:	bd80      	pop	{r7, pc}
  40275e:	bf00      	nop
  402760:	0040819d 	.word	0x0040819d
  402764:	00408225 	.word	0x00408225

00402768 <chbsp_i2c_mem_write>:
 * This function writes one or more bytes of data to an I2C slave device using an internal 
 * memory or register address.  The remote device will write \a num_bytes bytes of
 * data starting at internal memory/register address \a mem_addr.
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_mem_write(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data, uint16_t num_bytes) {
  402768:	b590      	push	{r4, r7, lr}
  40276a:	b087      	sub	sp, #28
  40276c:	af00      	add	r7, sp, #0
  40276e:	60f8      	str	r0, [r7, #12]
  402770:	607a      	str	r2, [r7, #4]
  402772:	461a      	mov	r2, r3
  402774:	460b      	mov	r3, r1
  402776:	817b      	strh	r3, [r7, #10]
  402778:	4613      	mov	r3, r2
  40277a:	813b      	strh	r3, [r7, #8]
	int error=0;
  40277c:	2300      	movs	r3, #0
  40277e:	617b      	str	r3, [r7, #20]
	if (dev_ptr->i2c_bus_index == 0) {
  402780:	68fb      	ldr	r3, [r7, #12]
  402782:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  402786:	2b00      	cmp	r3, #0
  402788:	d10a      	bne.n	4027a0 <chbsp_i2c_mem_write+0x38>
		// I2C bus 0 (TWI1)
		error = i2c_master_write_register1(dev_ptr->i2c_address, mem_addr, num_bytes, data); 
  40278a:	68fb      	ldr	r3, [r7, #12]
  40278c:	7e18      	ldrb	r0, [r3, #24]
  40278e:	897b      	ldrh	r3, [r7, #10]
  402790:	b2d9      	uxtb	r1, r3
  402792:	893a      	ldrh	r2, [r7, #8]
  402794:	687b      	ldr	r3, [r7, #4]
  402796:	4c0c      	ldr	r4, [pc, #48]	; (4027c8 <chbsp_i2c_mem_write+0x60>)
  402798:	47a0      	blx	r4
  40279a:	4603      	mov	r3, r0
  40279c:	617b      	str	r3, [r7, #20]
  40279e:	e00e      	b.n	4027be <chbsp_i2c_mem_write+0x56>
		
		} else if (dev_ptr->i2c_bus_index == 1) {
  4027a0:	68fb      	ldr	r3, [r7, #12]
  4027a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  4027a6:	2b01      	cmp	r3, #1
  4027a8:	d109      	bne.n	4027be <chbsp_i2c_mem_write+0x56>
		// I2C bus 1 (TWI3)
		error = i2c_master_write_register3(dev_ptr->i2c_address, mem_addr, num_bytes, data); 
  4027aa:	68fb      	ldr	r3, [r7, #12]
  4027ac:	7e18      	ldrb	r0, [r3, #24]
  4027ae:	897b      	ldrh	r3, [r7, #10]
  4027b0:	b2d9      	uxtb	r1, r3
  4027b2:	893a      	ldrh	r2, [r7, #8]
  4027b4:	687b      	ldr	r3, [r7, #4]
  4027b6:	4c05      	ldr	r4, [pc, #20]	; (4027cc <chbsp_i2c_mem_write+0x64>)
  4027b8:	47a0      	blx	r4
  4027ba:	4603      	mov	r3, r0
  4027bc:	617b      	str	r3, [r7, #20]
	}
	return error;
  4027be:	697b      	ldr	r3, [r7, #20]
}
  4027c0:	4618      	mov	r0, r3
  4027c2:	371c      	adds	r7, #28
  4027c4:	46bd      	mov	sp, r7
  4027c6:	bd90      	pop	{r4, r7, pc}
  4027c8:	00408155 	.word	0x00408155
  4027cc:	004081dd 	.word	0x004081dd

004027d0 <chbsp_i2c_mem_write_nb>:
 * I2C slave device, using an internal memory or register address.  The remote device will write 
 * \a num_bytes bytes of data starting at internal memory/register address \a mem_addr.
 *
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_mem_write_nb(ch_dev_t __attribute__((unused)) *dev_ptr, uint16_t __attribute__((unused)) mem_addr, uint8_t __attribute__((unused)) *data, uint16_t __attribute__((unused)) num_bytes) {
  4027d0:	b480      	push	{r7}
  4027d2:	b085      	sub	sp, #20
  4027d4:	af00      	add	r7, sp, #0
  4027d6:	60f8      	str	r0, [r7, #12]
  4027d8:	607a      	str	r2, [r7, #4]
  4027da:	461a      	mov	r2, r3
  4027dc:	460b      	mov	r3, r1
  4027de:	817b      	strh	r3, [r7, #10]
  4027e0:	4613      	mov	r3, r2
  4027e2:	813b      	strh	r3, [r7, #8]

	// XXX not implemented
	return 1;
  4027e4:	2301      	movs	r3, #1
}
  4027e6:	4618      	mov	r0, r3
  4027e8:	3714      	adds	r7, #20
  4027ea:	46bd      	mov	sp, r7
  4027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027f0:	4770      	bx	lr
	...

004027f4 <chbsp_i2c_read>:
 * \return 0 if successful, 1 on error or NACK
 *
 * This function reads the specified number of bytes from an I2C slave device.
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_read(ch_dev_t *dev_ptr, uint8_t *data, uint16_t num_bytes) {
  4027f4:	b580      	push	{r7, lr}
  4027f6:	b086      	sub	sp, #24
  4027f8:	af00      	add	r7, sp, #0
  4027fa:	60f8      	str	r0, [r7, #12]
  4027fc:	60b9      	str	r1, [r7, #8]
  4027fe:	4613      	mov	r3, r2
  402800:	80fb      	strh	r3, [r7, #6]
	int error = 1;		// default is error return
  402802:	2301      	movs	r3, #1
  402804:	617b      	str	r3, [r7, #20]
	uint8_t i2c_addr = ch_get_i2c_address(dev_ptr);
  402806:	68f8      	ldr	r0, [r7, #12]
  402808:	4b12      	ldr	r3, [pc, #72]	; (402854 <chbsp_i2c_read+0x60>)
  40280a:	4798      	blx	r3
  40280c:	4603      	mov	r3, r0
  40280e:	74fb      	strb	r3, [r7, #19]
	uint8_t bus_num  = ch_get_i2c_bus(dev_ptr);
  402810:	68f8      	ldr	r0, [r7, #12]
  402812:	4b11      	ldr	r3, [pc, #68]	; (402858 <chbsp_i2c_read+0x64>)
  402814:	4798      	blx	r3
  402816:	4603      	mov	r3, r0
  402818:	74bb      	strb	r3, [r7, #18]

	if (bus_num == 0) {
  40281a:	7cbb      	ldrb	r3, [r7, #18]
  40281c:	2b00      	cmp	r3, #0
  40281e:	d108      	bne.n	402832 <chbsp_i2c_read+0x3e>
		// I2C bus 0 (TWI1)
		error = i2c_master_read_register1_raw(i2c_addr, num_bytes, data); 
  402820:	88f9      	ldrh	r1, [r7, #6]
  402822:	7cfb      	ldrb	r3, [r7, #19]
  402824:	68ba      	ldr	r2, [r7, #8]
  402826:	4618      	mov	r0, r3
  402828:	4b0c      	ldr	r3, [pc, #48]	; (40285c <chbsp_i2c_read+0x68>)
  40282a:	4798      	blx	r3
  40282c:	4603      	mov	r3, r0
  40282e:	617b      	str	r3, [r7, #20]
  402830:	e00a      	b.n	402848 <chbsp_i2c_read+0x54>
		
	} else if (bus_num == 1) {
  402832:	7cbb      	ldrb	r3, [r7, #18]
  402834:	2b01      	cmp	r3, #1
  402836:	d107      	bne.n	402848 <chbsp_i2c_read+0x54>
		// I2C bus 1 (TWI3)
		error = i2c_master_read_register3_raw(i2c_addr, num_bytes, data); 
  402838:	88f9      	ldrh	r1, [r7, #6]
  40283a:	7cfb      	ldrb	r3, [r7, #19]
  40283c:	68ba      	ldr	r2, [r7, #8]
  40283e:	4618      	mov	r0, r3
  402840:	4b07      	ldr	r3, [pc, #28]	; (402860 <chbsp_i2c_read+0x6c>)
  402842:	4798      	blx	r3
  402844:	4603      	mov	r3, r0
  402846:	617b      	str	r3, [r7, #20]
	}
	return error;
  402848:	697b      	ldr	r3, [r7, #20]
}
  40284a:	4618      	mov	r0, r3
  40284c:	3718      	adds	r7, #24
  40284e:	46bd      	mov	sp, r7
  402850:	bd80      	pop	{r7, pc}
  402852:	bf00      	nop
  402854:	004059c9 	.word	0x004059c9
  402858:	004059e1 	.word	0x004059e1
  40285c:	00408075 	.word	0x00408075
  402860:	0040810d 	.word	0x0040810d

00402864 <chbsp_i2c_mem_read>:
 * an internal memory or register address.  The remote device will return \a num_bytes bytes
 * starting at internal memory/register address \a mem_addr.
 *
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_mem_read(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data, uint16_t num_bytes) {
  402864:	b590      	push	{r4, r7, lr}
  402866:	b087      	sub	sp, #28
  402868:	af00      	add	r7, sp, #0
  40286a:	60f8      	str	r0, [r7, #12]
  40286c:	607a      	str	r2, [r7, #4]
  40286e:	461a      	mov	r2, r3
  402870:	460b      	mov	r3, r1
  402872:	817b      	strh	r3, [r7, #10]
  402874:	4613      	mov	r3, r2
  402876:	813b      	strh	r3, [r7, #8]
	int error = 1;		// default is error return
  402878:	2301      	movs	r3, #1
  40287a:	617b      	str	r3, [r7, #20]
	uint8_t i2c_addr = ch_get_i2c_address(dev_ptr);
  40287c:	68f8      	ldr	r0, [r7, #12]
  40287e:	4b13      	ldr	r3, [pc, #76]	; (4028cc <chbsp_i2c_mem_read+0x68>)
  402880:	4798      	blx	r3
  402882:	4603      	mov	r3, r0
  402884:	74fb      	strb	r3, [r7, #19]
	uint8_t bus_num  = ch_get_i2c_bus(dev_ptr);
  402886:	68f8      	ldr	r0, [r7, #12]
  402888:	4b11      	ldr	r3, [pc, #68]	; (4028d0 <chbsp_i2c_mem_read+0x6c>)
  40288a:	4798      	blx	r3
  40288c:	4603      	mov	r3, r0
  40288e:	74bb      	strb	r3, [r7, #18]

	if (bus_num == 0) {
  402890:	7cbb      	ldrb	r3, [r7, #18]
  402892:	2b00      	cmp	r3, #0
  402894:	d109      	bne.n	4028aa <chbsp_i2c_mem_read+0x46>
		// I2C bus 0 (TWI1)
		error = i2c_master_read_register1(i2c_addr, mem_addr, num_bytes, data); 
  402896:	897b      	ldrh	r3, [r7, #10]
  402898:	b2d9      	uxtb	r1, r3
  40289a:	893a      	ldrh	r2, [r7, #8]
  40289c:	7cf8      	ldrb	r0, [r7, #19]
  40289e:	687b      	ldr	r3, [r7, #4]
  4028a0:	4c0c      	ldr	r4, [pc, #48]	; (4028d4 <chbsp_i2c_mem_read+0x70>)
  4028a2:	47a0      	blx	r4
  4028a4:	4603      	mov	r3, r0
  4028a6:	617b      	str	r3, [r7, #20]
  4028a8:	e00b      	b.n	4028c2 <chbsp_i2c_mem_read+0x5e>
		
		} else if (bus_num == 1) {
  4028aa:	7cbb      	ldrb	r3, [r7, #18]
  4028ac:	2b01      	cmp	r3, #1
  4028ae:	d108      	bne.n	4028c2 <chbsp_i2c_mem_read+0x5e>
		// I2C bus 1 (TWI3)
		error = i2c_master_read_register3(i2c_addr, mem_addr, num_bytes, data); 
  4028b0:	897b      	ldrh	r3, [r7, #10]
  4028b2:	b2d9      	uxtb	r1, r3
  4028b4:	893a      	ldrh	r2, [r7, #8]
  4028b6:	7cf8      	ldrb	r0, [r7, #19]
  4028b8:	687b      	ldr	r3, [r7, #4]
  4028ba:	4c07      	ldr	r4, [pc, #28]	; (4028d8 <chbsp_i2c_mem_read+0x74>)
  4028bc:	47a0      	blx	r4
  4028be:	4603      	mov	r3, r0
  4028c0:	617b      	str	r3, [r7, #20]
	}
	return error;
  4028c2:	697b      	ldr	r3, [r7, #20]
}
  4028c4:	4618      	mov	r0, r3
  4028c6:	371c      	adds	r7, #28
  4028c8:	46bd      	mov	sp, r7
  4028ca:	bd90      	pop	{r4, r7, pc}
  4028cc:	004059c9 	.word	0x004059c9
  4028d0:	004059e1 	.word	0x004059e1
  4028d4:	00408025 	.word	0x00408025
  4028d8:	004080bd 	.word	0x004080bd

004028dc <chbsp_i2c_read_nb>:
 * This function initiates a non-blocking read of the specified number of bytes from 
 * an I2C slave.
 * 
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_read_nb(ch_dev_t *dev_ptr, uint8_t *data, uint16_t num_bytes) {
  4028dc:	b580      	push	{r7, lr}
  4028de:	b090      	sub	sp, #64	; 0x40
  4028e0:	af00      	add	r7, sp, #0
  4028e2:	60f8      	str	r0, [r7, #12]
  4028e4:	60b9      	str	r1, [r7, #8]
  4028e6:	4613      	mov	r3, r2
  4028e8:	80fb      	strh	r3, [r7, #6]
	Twi *twi_ptr;		// pointer to Atmel TWI (I2C) control struct
	Pdc *pdc_ptr;		// pointer to Atmel peripheral DMA controller struct
	pdc_packet_t pdc_packet;
	uint8_t  i2c_addr = ch_get_i2c_address(dev_ptr);
  4028ea:	68f8      	ldr	r0, [r7, #12]
  4028ec:	4b3f      	ldr	r3, [pc, #252]	; (4029ec <chbsp_i2c_read_nb+0x110>)
  4028ee:	4798      	blx	r3
  4028f0:	4603      	mov	r3, r0
  4028f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bus_num  = ch_get_i2c_bus(dev_ptr);
  4028f6:	68f8      	ldr	r0, [r7, #12]
  4028f8:	4b3d      	ldr	r3, [pc, #244]	; (4029f0 <chbsp_i2c_read_nb+0x114>)
  4028fa:	4798      	blx	r3
  4028fc:	4603      	mov	r3, r0
  4028fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	int error = 0;
  402902:	2300      	movs	r3, #0
  402904:	637b      	str	r3, [r7, #52]	; 0x34

	if (bus_num == 0) {
  402906:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  40290a:	2b00      	cmp	r3, #0
  40290c:	d106      	bne.n	40291c <chbsp_i2c_read_nb+0x40>
		twi_ptr = BOARD_BASE_TWI1;
  40290e:	4b39      	ldr	r3, [pc, #228]	; (4029f4 <chbsp_i2c_read_nb+0x118>)
  402910:	63fb      	str	r3, [r7, #60]	; 0x3c
		pdc_ptr = twi_get_pdc_base(BOARD_BASE_TWI1);
  402912:	4838      	ldr	r0, [pc, #224]	; (4029f4 <chbsp_i2c_read_nb+0x118>)
  402914:	4b38      	ldr	r3, [pc, #224]	; (4029f8 <chbsp_i2c_read_nb+0x11c>)
  402916:	4798      	blx	r3
  402918:	63b8      	str	r0, [r7, #56]	; 0x38
  40291a:	e00c      	b.n	402936 <chbsp_i2c_read_nb+0x5a>
	} else if (bus_num == 1) {
  40291c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  402920:	2b01      	cmp	r3, #1
  402922:	d106      	bne.n	402932 <chbsp_i2c_read_nb+0x56>
		twi_ptr = BOARD_BASE_TWI3;
  402924:	4b35      	ldr	r3, [pc, #212]	; (4029fc <chbsp_i2c_read_nb+0x120>)
  402926:	63fb      	str	r3, [r7, #60]	; 0x3c
		pdc_ptr = twi_get_pdc_base(BOARD_BASE_TWI3);
  402928:	4834      	ldr	r0, [pc, #208]	; (4029fc <chbsp_i2c_read_nb+0x120>)
  40292a:	4b33      	ldr	r3, [pc, #204]	; (4029f8 <chbsp_i2c_read_nb+0x11c>)
  40292c:	4798      	blx	r3
  40292e:	63b8      	str	r0, [r7, #56]	; 0x38
  402930:	e001      	b.n	402936 <chbsp_i2c_read_nb+0x5a>
	} else {
		error = 1;
  402932:	2301      	movs	r3, #1
  402934:	637b      	str	r3, [r7, #52]	; 0x34
	}

	/* Save buffer pointer and transfer length - it will be needed when reading final 2 bytes 
	 * in DMA interrupt handler 
	 */
	if ((!error) && (data != NULL)) {
  402936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402938:	2b00      	cmp	r3, #0
  40293a:	d110      	bne.n	40295e <chbsp_i2c_read_nb+0x82>
  40293c:	68bb      	ldr	r3, [r7, #8]
  40293e:	2b00      	cmp	r3, #0
  402940:	d00d      	beq.n	40295e <chbsp_i2c_read_nb+0x82>
		i2c_nb_transactions[bus_num].buf_ptr = data;
  402942:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  402946:	492e      	ldr	r1, [pc, #184]	; (402a00 <chbsp_i2c_read_nb+0x124>)
  402948:	68ba      	ldr	r2, [r7, #8]
  40294a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		i2c_nb_transactions[bus_num].num_bytes = num_bytes;
  40294e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  402952:	4a2b      	ldr	r2, [pc, #172]	; (402a00 <chbsp_i2c_read_nb+0x124>)
  402954:	00db      	lsls	r3, r3, #3
  402956:	4413      	add	r3, r2
  402958:	88fa      	ldrh	r2, [r7, #6]
  40295a:	809a      	strh	r2, [r3, #4]
  40295c:	e001      	b.n	402962 <chbsp_i2c_read_nb+0x86>
	} else {
		error = 1;
  40295e:	2301      	movs	r3, #1
  402960:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (!error) {
  402962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402964:	2b00      	cmp	r3, #0
  402966:	d13c      	bne.n	4029e2 <chbsp_i2c_read_nb+0x106>
		/* Construct transfer packet */
	 	twi_packet_t twi_packet;

	 	twi_packet.chip = i2c_addr;		 	//address of I2C device to be accessed	
  402968:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  40296c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		twi_packet.addr[0] = 0;
  402970:	2300      	movs	r3, #0
  402972:	753b      	strb	r3, [r7, #20]
		twi_packet.addr_length = 0;			// no internal mem/reg address
  402974:	2300      	movs	r3, #0
  402976:	61bb      	str	r3, [r7, #24]
	 	twi_packet.buffer = data;
  402978:	68bb      	ldr	r3, [r7, #8]
  40297a:	61fb      	str	r3, [r7, #28]
	 	twi_packet.length = num_bytes;
  40297c:	88fb      	ldrh	r3, [r7, #6]
  40297e:	623b      	str	r3, [r7, #32]
	 
		pdc_disable_transfer(pdc_ptr, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  402980:	f240 2102 	movw	r1, #514	; 0x202
  402984:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402986:	4b1f      	ldr	r3, [pc, #124]	; (402a04 <chbsp_i2c_read_nb+0x128>)
  402988:	4798      	blx	r3

		pdc_packet.ul_addr = (uint32_t) data;
  40298a:	68bb      	ldr	r3, [r7, #8]
  40298c:	62bb      	str	r3, [r7, #40]	; 0x28
    	pdc_packet.ul_size = (num_bytes - 2);	
  40298e:	88fb      	ldrh	r3, [r7, #6]
  402990:	3b02      	subs	r3, #2
  402992:	62fb      	str	r3, [r7, #44]	; 0x2c

		pdc_rx_init(pdc_ptr, &pdc_packet, NULL);
  402994:	f107 0328 	add.w	r3, r7, #40	; 0x28
  402998:	2200      	movs	r2, #0
  40299a:	4619      	mov	r1, r3
  40299c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  40299e:	4b1a      	ldr	r3, [pc, #104]	; (402a08 <chbsp_i2c_read_nb+0x12c>)
  4029a0:	4798      	blx	r3

		/* Set read mode, slave address, and internal address length */
		twi_ptr->TWI_MMR = 0;
  4029a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4029a4:	2200      	movs	r2, #0
  4029a6:	605a      	str	r2, [r3, #4]
		twi_ptr->TWI_MMR = TWI_MMR_MREAD | 
						   TWI_MMR_DADR(twi_packet.chip) |
  4029a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  4029ac:	041b      	lsls	r3, r3, #16
  4029ae:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
						   ((twi_packet.addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
  4029b2:	69bb      	ldr	r3, [r7, #24]
  4029b4:	021b      	lsls	r3, r3, #8
  4029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
						   TWI_MMR_DADR(twi_packet.chip) |
  4029ba:	4313      	orrs	r3, r2
  4029bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
		twi_ptr->TWI_MMR = TWI_MMR_MREAD | 
  4029c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4029c2:	605a      	str	r2, [r3, #4]

		/* No internal memory (register) address within remote device */
		twi_ptr->TWI_IADR = 0;
  4029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4029c6:	2200      	movs	r2, #0
  4029c8:	60da      	str	r2, [r3, #12]
		
		/* Enable the RX PDC transfer requests */
		pdc_enable_transfer(pdc_ptr, PERIPH_PTCR_RXTEN);
  4029ca:	2101      	movs	r1, #1
  4029cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  4029ce:	4b0f      	ldr	r3, [pc, #60]	; (402a0c <chbsp_i2c_read_nb+0x130>)
  4029d0:	4798      	blx	r3

		/* Start the transfer */
		twi_ptr->TWI_CR = TWI_CR_START;		
  4029d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4029d4:	2201      	movs	r2, #1
  4029d6:	601a      	str	r2, [r3, #0]
	
		/* Enable end-of-receive interrupt */
		twi_enable_interrupt(twi_ptr, TWI_IER_ENDRX);	
  4029d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4029dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  4029de:	4b0c      	ldr	r3, [pc, #48]	; (402a10 <chbsp_i2c_read_nb+0x134>)
  4029e0:	4798      	blx	r3
		
	}
	return error;
  4029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
  4029e4:	4618      	mov	r0, r3
  4029e6:	3740      	adds	r7, #64	; 0x40
  4029e8:	46bd      	mov	sp, r7
  4029ea:	bd80      	pop	{r7, pc}
  4029ec:	004059c9 	.word	0x004059c9
  4029f0:	004059e1 	.word	0x004059e1
  4029f4:	40020600 	.word	0x40020600
  4029f8:	00404ec1 	.word	0x00404ec1
  4029fc:	40018600 	.word	0x40018600
  402a00:	20000884 	.word	0x20000884
  402a04:	00403a2d 	.word	0x00403a2d
  402a08:	004039c7 	.word	0x004039c7
  402a0c:	00403a0b 	.word	0x00403a0b
  402a10:	00404e35 	.word	0x00404e35

00402a14 <chbsp_i2c_mem_read_nb>:
 *
 * This function initiates a non-blocking read of the specified number of bytes from an I2C slave.
 *
 * The I2C interface must have already been initialized using \a chbsp_i2c_init().
 */
int chbsp_i2c_mem_read_nb(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data, uint16_t num_bytes) {
  402a14:	b580      	push	{r7, lr}
  402a16:	b090      	sub	sp, #64	; 0x40
  402a18:	af00      	add	r7, sp, #0
  402a1a:	60f8      	str	r0, [r7, #12]
  402a1c:	607a      	str	r2, [r7, #4]
  402a1e:	461a      	mov	r2, r3
  402a20:	460b      	mov	r3, r1
  402a22:	817b      	strh	r3, [r7, #10]
  402a24:	4613      	mov	r3, r2
  402a26:	813b      	strh	r3, [r7, #8]
	Twi *twi_ptr;		// pointer to Atmel TWI (I2C) control struct
	Pdc *pdc_ptr;		// pointer to Atmel peripheral DMA controller struct
	pdc_packet_t pdc_packet;
	uint8_t  i2c_addr = ch_get_i2c_address(dev_ptr);
  402a28:	68f8      	ldr	r0, [r7, #12]
  402a2a:	4b46      	ldr	r3, [pc, #280]	; (402b44 <chbsp_i2c_mem_read_nb+0x130>)
  402a2c:	4798      	blx	r3
  402a2e:	4603      	mov	r3, r0
  402a30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bus_num  = ch_get_i2c_bus(dev_ptr);
  402a34:	68f8      	ldr	r0, [r7, #12]
  402a36:	4b44      	ldr	r3, [pc, #272]	; (402b48 <chbsp_i2c_mem_read_nb+0x134>)
  402a38:	4798      	blx	r3
  402a3a:	4603      	mov	r3, r0
  402a3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	int error=0;;
  402a40:	2300      	movs	r3, #0
  402a42:	637b      	str	r3, [r7, #52]	; 0x34

	if (bus_num == 0) {
  402a44:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  402a48:	2b00      	cmp	r3, #0
  402a4a:	d106      	bne.n	402a5a <chbsp_i2c_mem_read_nb+0x46>
		twi_ptr = BOARD_BASE_TWI1;
  402a4c:	4b3f      	ldr	r3, [pc, #252]	; (402b4c <chbsp_i2c_mem_read_nb+0x138>)
  402a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
		pdc_ptr = twi_get_pdc_base(BOARD_BASE_TWI1);
  402a50:	483e      	ldr	r0, [pc, #248]	; (402b4c <chbsp_i2c_mem_read_nb+0x138>)
  402a52:	4b3f      	ldr	r3, [pc, #252]	; (402b50 <chbsp_i2c_mem_read_nb+0x13c>)
  402a54:	4798      	blx	r3
  402a56:	63b8      	str	r0, [r7, #56]	; 0x38
  402a58:	e00c      	b.n	402a74 <chbsp_i2c_mem_read_nb+0x60>
	} else if (bus_num == 1) {
  402a5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  402a5e:	2b01      	cmp	r3, #1
  402a60:	d106      	bne.n	402a70 <chbsp_i2c_mem_read_nb+0x5c>
		twi_ptr = BOARD_BASE_TWI3;
  402a62:	4b3c      	ldr	r3, [pc, #240]	; (402b54 <chbsp_i2c_mem_read_nb+0x140>)
  402a64:	63fb      	str	r3, [r7, #60]	; 0x3c
		pdc_ptr = twi_get_pdc_base(BOARD_BASE_TWI3);
  402a66:	483b      	ldr	r0, [pc, #236]	; (402b54 <chbsp_i2c_mem_read_nb+0x140>)
  402a68:	4b39      	ldr	r3, [pc, #228]	; (402b50 <chbsp_i2c_mem_read_nb+0x13c>)
  402a6a:	4798      	blx	r3
  402a6c:	63b8      	str	r0, [r7, #56]	; 0x38
  402a6e:	e001      	b.n	402a74 <chbsp_i2c_mem_read_nb+0x60>
	} else {
		error = 1;
  402a70:	2301      	movs	r3, #1
  402a72:	637b      	str	r3, [r7, #52]	; 0x34
	}

	/* Save buffer pointer and transfer length - it will be needed when reading final 2 bytes 
	 * in DMA interrupt handler 
	 */
	if ((!error) && (data != NULL)) {
  402a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402a76:	2b00      	cmp	r3, #0
  402a78:	d110      	bne.n	402a9c <chbsp_i2c_mem_read_nb+0x88>
  402a7a:	687b      	ldr	r3, [r7, #4]
  402a7c:	2b00      	cmp	r3, #0
  402a7e:	d00d      	beq.n	402a9c <chbsp_i2c_mem_read_nb+0x88>
		i2c_nb_transactions[bus_num].buf_ptr = data;
  402a80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  402a84:	4934      	ldr	r1, [pc, #208]	; (402b58 <chbsp_i2c_mem_read_nb+0x144>)
  402a86:	687a      	ldr	r2, [r7, #4]
  402a88:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		i2c_nb_transactions[bus_num].num_bytes = num_bytes;
  402a8c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
  402a90:	4a31      	ldr	r2, [pc, #196]	; (402b58 <chbsp_i2c_mem_read_nb+0x144>)
  402a92:	00db      	lsls	r3, r3, #3
  402a94:	4413      	add	r3, r2
  402a96:	893a      	ldrh	r2, [r7, #8]
  402a98:	809a      	strh	r2, [r3, #4]
  402a9a:	e001      	b.n	402aa0 <chbsp_i2c_mem_read_nb+0x8c>
	} else {
		error = 1;
  402a9c:	2301      	movs	r3, #1
  402a9e:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (!error) {
  402aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402aa2:	2b00      	cmp	r3, #0
  402aa4:	d148      	bne.n	402b38 <chbsp_i2c_mem_read_nb+0x124>
		/* Construct transfer packet */
	 	twi_packet_t twi_packet;
	 
	 	twi_packet.chip = i2c_addr; 			// address of I2C device to be accessed	
  402aa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
  402aaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		twi_packet.addr[0] = mem_addr;			// internal mem address
  402aae:	897b      	ldrh	r3, [r7, #10]
  402ab0:	b2db      	uxtb	r3, r3
  402ab2:	753b      	strb	r3, [r7, #20]
		twi_packet.addr_length = 1;				// mem address is single byte
  402ab4:	2301      	movs	r3, #1
  402ab6:	61bb      	str	r3, [r7, #24]
	 	twi_packet.buffer = data;
  402ab8:	687b      	ldr	r3, [r7, #4]
  402aba:	61fb      	str	r3, [r7, #28]
	 	twi_packet.length = num_bytes;
  402abc:	893b      	ldrh	r3, [r7, #8]
  402abe:	623b      	str	r3, [r7, #32]
	 
		pdc_disable_transfer(pdc_ptr, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  402ac0:	f240 2102 	movw	r1, #514	; 0x202
  402ac4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402ac6:	4b25      	ldr	r3, [pc, #148]	; (402b5c <chbsp_i2c_mem_read_nb+0x148>)
  402ac8:	4798      	blx	r3

		pdc_packet.ul_addr = (uint32_t) data;
  402aca:	687b      	ldr	r3, [r7, #4]
  402acc:	62bb      	str	r3, [r7, #40]	; 0x28
		pdc_packet.ul_size = (num_bytes - 2);
  402ace:	893b      	ldrh	r3, [r7, #8]
  402ad0:	3b02      	subs	r3, #2
  402ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

		pdc_rx_init(pdc_ptr, &pdc_packet, NULL);
  402ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
  402ad8:	2200      	movs	r2, #0
  402ada:	4619      	mov	r1, r3
  402adc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402ade:	4b20      	ldr	r3, [pc, #128]	; (402b60 <chbsp_i2c_mem_read_nb+0x14c>)
  402ae0:	4798      	blx	r3

		/* Set read mode, slave address, and internal address length */
		twi_ptr->TWI_MMR = 0;
  402ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402ae4:	2200      	movs	r2, #0
  402ae6:	605a      	str	r2, [r3, #4]
		twi_ptr->TWI_MMR = TWI_MMR_MREAD | 
						   TWI_MMR_DADR(twi_packet.chip) |
  402ae8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  402aec:	041b      	lsls	r3, r3, #16
  402aee:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
						   ((twi_packet.addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
  402af2:	69bb      	ldr	r3, [r7, #24]
  402af4:	021b      	lsls	r3, r3, #8
  402af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
						   TWI_MMR_DADR(twi_packet.chip) |
  402afa:	4313      	orrs	r3, r2
  402afc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
		twi_ptr->TWI_MMR = TWI_MMR_MREAD | 
  402b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402b02:	605a      	str	r2, [r3, #4]

		/* Set internal memory (register) address within remote device */
		twi_ptr->TWI_IADR = 0;
  402b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402b06:	2200      	movs	r2, #0
  402b08:	60da      	str	r2, [r3, #12]
		twi_ptr->TWI_IADR = twi_mk_addr(twi_packet.addr, twi_packet.addr_length);
  402b0a:	69bb      	ldr	r3, [r7, #24]
  402b0c:	461a      	mov	r2, r3
  402b0e:	f107 0314 	add.w	r3, r7, #20
  402b12:	4611      	mov	r1, r2
  402b14:	4618      	mov	r0, r3
  402b16:	4b13      	ldr	r3, [pc, #76]	; (402b64 <chbsp_i2c_mem_read_nb+0x150>)
  402b18:	4798      	blx	r3
  402b1a:	4602      	mov	r2, r0
  402b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402b1e:	60da      	str	r2, [r3, #12]
		
		/* Enable the RX PDC transfer requests */
		pdc_enable_transfer(pdc_ptr, PERIPH_PTCR_RXTEN);
  402b20:	2101      	movs	r1, #1
  402b22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402b24:	4b10      	ldr	r3, [pc, #64]	; (402b68 <chbsp_i2c_mem_read_nb+0x154>)
  402b26:	4798      	blx	r3

		/* Start the transfer */
		twi_ptr->TWI_CR = TWI_CR_START;		
  402b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402b2a:	2201      	movs	r2, #1
  402b2c:	601a      	str	r2, [r3, #0]
	
		/* Enable end-of-receive interrupt */
		twi_enable_interrupt(twi_ptr, TWI_IER_ENDRX);	
  402b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402b32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  402b34:	4b0d      	ldr	r3, [pc, #52]	; (402b6c <chbsp_i2c_mem_read_nb+0x158>)
  402b36:	4798      	blx	r3
		
	}
	return error;
  402b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
  402b3a:	4618      	mov	r0, r3
  402b3c:	3740      	adds	r7, #64	; 0x40
  402b3e:	46bd      	mov	sp, r7
  402b40:	bd80      	pop	{r7, pc}
  402b42:	bf00      	nop
  402b44:	004059c9 	.word	0x004059c9
  402b48:	004059e1 	.word	0x004059e1
  402b4c:	40020600 	.word	0x40020600
  402b50:	00404ec1 	.word	0x00404ec1
  402b54:	40018600 	.word	0x40018600
  402b58:	20000884 	.word	0x20000884
  402b5c:	00403a2d 	.word	0x00403a2d
  402b60:	004039c7 	.word	0x004039c7
  402b64:	00404bf1 	.word	0x00404bf1
  402b68:	00403a0b 	.word	0x00403a0b
  402b6c:	00404e35 	.word	0x00404e35

00402b70 <chbsp_i2c_reset>:
 *
 * \param dev_ptr 		pointer to the ch_dev_t config structure for a sensor
 *
 * This function performs a reset of the I2C interface for the specified device.
 */
void chbsp_i2c_reset(ch_dev_t * dev_ptr) {
  402b70:	b580      	push	{r7, lr}
  402b72:	b084      	sub	sp, #16
  402b74:	af00      	add	r7, sp, #0
  402b76:	6078      	str	r0, [r7, #4]
	uint8_t  bus_num  = ch_get_i2c_bus(dev_ptr);
  402b78:	6878      	ldr	r0, [r7, #4]
  402b7a:	4b09      	ldr	r3, [pc, #36]	; (402ba0 <chbsp_i2c_reset+0x30>)
  402b7c:	4798      	blx	r3
  402b7e:	4603      	mov	r3, r0
  402b80:	73fb      	strb	r3, [r7, #15]

	if (bus_num == 0) {					 // I2C bus 0 (TWI1)
  402b82:	7bfb      	ldrb	r3, [r7, #15]
  402b84:	2b00      	cmp	r3, #0
  402b86:	d102      	bne.n	402b8e <chbsp_i2c_reset+0x1e>
		i2c_master_initialize1();
  402b88:	4b06      	ldr	r3, [pc, #24]	; (402ba4 <chbsp_i2c_reset+0x34>)
  402b8a:	4798      	blx	r3
	} else if (bus_num == 1) {			 // I2C bus 1 (TWI3)
		i2c_master_initialize3();
	}
}
  402b8c:	e004      	b.n	402b98 <chbsp_i2c_reset+0x28>
	} else if (bus_num == 1) {			 // I2C bus 1 (TWI3)
  402b8e:	7bfb      	ldrb	r3, [r7, #15]
  402b90:	2b01      	cmp	r3, #1
  402b92:	d101      	bne.n	402b98 <chbsp_i2c_reset+0x28>
		i2c_master_initialize3();
  402b94:	4b04      	ldr	r3, [pc, #16]	; (402ba8 <chbsp_i2c_reset+0x38>)
  402b96:	4798      	blx	r3
}
  402b98:	bf00      	nop
  402b9a:	3710      	adds	r7, #16
  402b9c:	46bd      	mov	sp, r7
  402b9e:	bd80      	pop	{r7, pc}
  402ba0:	004059e1 	.word	0x004059e1
  402ba4:	00407ee5 	.word	0x00407ee5
  402ba8:	00407f5d 	.word	0x00407f5d

00402bac <chbsp_periodic_timer_init>:
 *
 * The \a callback_func_ptr parameter specifies a callback routine that will be called when the 
 * timer expires (and interrupt occurs).  The \a chbsp_periodic_timer_handler function 
 * will call this function.
 */
uint8_t chbsp_periodic_timer_init(uint16_t interval_ms, ch_timer_callback_t callback_func_ptr) {
  402bac:	b580      	push	{r7, lr}
  402bae:	b082      	sub	sp, #8
  402bb0:	af00      	add	r7, sp, #0
  402bb2:	4603      	mov	r3, r0
  402bb4:	6039      	str	r1, [r7, #0]
  402bb6:	80fb      	strh	r3, [r7, #6]
	static bool is_hw_init_done = false;

	/* Save timer interval and callback function */
	periodic_timer_interval_ms = interval_ms;
  402bb8:	4a32      	ldr	r2, [pc, #200]	; (402c84 <chbsp_periodic_timer_init+0xd8>)
  402bba:	88fb      	ldrh	r3, [r7, #6]
  402bbc:	8013      	strh	r3, [r2, #0]
	periodic_timer_callback_ptr = callback_func_ptr;
  402bbe:	4a32      	ldr	r2, [pc, #200]	; (402c88 <chbsp_periodic_timer_init+0xdc>)
  402bc0:	683b      	ldr	r3, [r7, #0]
  402bc2:	6013      	str	r3, [r2, #0]

	/* Initialize the HW only 1 time at startup. Skip the init on subsequent calls. */
	if (!is_hw_init_done) {
  402bc4:	4b31      	ldr	r3, [pc, #196]	; (402c8c <chbsp_periodic_timer_init+0xe0>)
  402bc6:	781b      	ldrb	r3, [r3, #0]
  402bc8:	f083 0301 	eor.w	r3, r3, #1
  402bcc:	b2db      	uxtb	r3, r3
  402bce:	2b00      	cmp	r3, #0
  402bd0:	d043      	beq.n	402c5a <chbsp_periodic_timer_init+0xae>
		/* Configure the PMC to enable the TC module and channels */
		sysclk_enable_peripheral_clock(ID_TC0);
  402bd2:	2017      	movs	r0, #23
  402bd4:	4b2e      	ldr	r3, [pc, #184]	; (402c90 <chbsp_periodic_timer_init+0xe4>)
  402bd6:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_TC1);
  402bd8:	2018      	movs	r0, #24
  402bda:	4b2d      	ldr	r3, [pc, #180]	; (402c90 <chbsp_periodic_timer_init+0xe4>)
  402bdc:	4798      	blx	r3
		/* Create on PCK3 a 499985 Hz clock from the PLLA clock. */
		pmc_disable_pck(PMC_PCK_3);
  402bde:	2003      	movs	r0, #3
  402be0:	4b2c      	ldr	r3, [pc, #176]	; (402c94 <chbsp_periodic_timer_init+0xe8>)
  402be2:	4798      	blx	r3
		pmc_switch_pck_to_pllack(PMC_PCK_3, PMC_PCK_PRES(240 - 1));
  402be4:	f44f 616f 	mov.w	r1, #3824	; 0xef0
  402be8:	2003      	movs	r0, #3
  402bea:	4b2b      	ldr	r3, [pc, #172]	; (402c98 <chbsp_periodic_timer_init+0xec>)
  402bec:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_3);
  402bee:	2003      	movs	r0, #3
  402bf0:	4b2a      	ldr	r3, [pc, #168]	; (402c9c <chbsp_periodic_timer_init+0xf0>)
  402bf2:	4798      	blx	r3

		/* Reset all TC0 counters */
		TC0->TC_BCR = TC_BCR_SYNC;
  402bf4:	4b2a      	ldr	r3, [pc, #168]	; (402ca0 <chbsp_periodic_timer_init+0xf4>)
  402bf6:	2201      	movs	r2, #1
  402bf8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

		/* Enable TC0 - Channel 0 interrupt */
		NVIC_DisableIRQ(TC0_IRQn);
  402bfc:	2017      	movs	r0, #23
  402bfe:	4b29      	ldr	r3, [pc, #164]	; (402ca4 <chbsp_periodic_timer_init+0xf8>)
  402c00:	4798      	blx	r3
		NVIC_ClearPendingIRQ(TC0_IRQn);
  402c02:	2017      	movs	r0, #23
  402c04:	4b28      	ldr	r3, [pc, #160]	; (402ca8 <chbsp_periodic_timer_init+0xfc>)
  402c06:	4798      	blx	r3
		NVIC_SetPriority(TC0_IRQn, 1);
  402c08:	2101      	movs	r1, #1
  402c0a:	2017      	movs	r0, #23
  402c0c:	4b27      	ldr	r3, [pc, #156]	; (402cac <chbsp_periodic_timer_init+0x100>)
  402c0e:	4798      	blx	r3
		NVIC_EnableIRQ(TC0_IRQn);
  402c10:	2017      	movs	r0, #23
  402c12:	4b27      	ldr	r3, [pc, #156]	; (402cb0 <chbsp_periodic_timer_init+0x104>)
  402c14:	4798      	blx	r3

		/* Enable TC0 - Channel 1 interrupt */
		NVIC_DisableIRQ(TC1_IRQn);
  402c16:	2018      	movs	r0, #24
  402c18:	4b22      	ldr	r3, [pc, #136]	; (402ca4 <chbsp_periodic_timer_init+0xf8>)
  402c1a:	4798      	blx	r3
		NVIC_ClearPendingIRQ(TC1_IRQn);
  402c1c:	2018      	movs	r0, #24
  402c1e:	4b22      	ldr	r3, [pc, #136]	; (402ca8 <chbsp_periodic_timer_init+0xfc>)
  402c20:	4798      	blx	r3
		NVIC_SetPriority(TC1_IRQn, 1);
  402c22:	2101      	movs	r1, #1
  402c24:	2018      	movs	r0, #24
  402c26:	4b21      	ldr	r3, [pc, #132]	; (402cac <chbsp_periodic_timer_init+0x100>)
  402c28:	4798      	blx	r3
		NVIC_EnableIRQ(TC1_IRQn);
  402c2a:	2018      	movs	r0, #24
  402c2c:	4b20      	ldr	r3, [pc, #128]	; (402cb0 <chbsp_periodic_timer_init+0x104>)
  402c2e:	4798      	blx	r3

		/* Create the lsepoch timer running on PCK3 and start it immediately */
		tc_init(TC0, TC_CHANNEL_LSEPOCH,
  402c30:	f248 0204 	movw	r2, #32772	; 0x8004
  402c34:	2100      	movs	r1, #0
  402c36:	481a      	ldr	r0, [pc, #104]	; (402ca0 <chbsp_periodic_timer_init+0xf4>)
  402c38:	4b1e      	ldr	r3, [pc, #120]	; (402cb4 <chbsp_periodic_timer_init+0x108>)
  402c3a:	4798      	blx	r3
			TC_CMR_TCCLKS_TIMER_CLOCK5 | TC_CMR_WAVE | TC_CMR_WAVSEL_UP);
		tc_enable_interrupt(TC0, TC_CHANNEL_LSEPOCH, TC_IER_COVFS);
  402c3c:	2201      	movs	r2, #1
  402c3e:	2100      	movs	r1, #0
  402c40:	4817      	ldr	r0, [pc, #92]	; (402ca0 <chbsp_periodic_timer_init+0xf4>)
  402c42:	4b1d      	ldr	r3, [pc, #116]	; (402cb8 <chbsp_periodic_timer_init+0x10c>)
  402c44:	4798      	blx	r3
		tc_start(TC0, TC_CHANNEL_LSEPOCH);
  402c46:	2100      	movs	r1, #0
  402c48:	4815      	ldr	r0, [pc, #84]	; (402ca0 <chbsp_periodic_timer_init+0xf4>)
  402c4a:	4b1c      	ldr	r3, [pc, #112]	; (402cbc <chbsp_periodic_timer_init+0x110>)
  402c4c:	4798      	blx	r3

		/* Create the ultrasound periodic timer. */
		tc_init(TC0, TC_CHANNEL_US,
  402c4e:	f248 0204 	movw	r2, #32772	; 0x8004
  402c52:	2101      	movs	r1, #1
  402c54:	4812      	ldr	r0, [pc, #72]	; (402ca0 <chbsp_periodic_timer_init+0xf4>)
  402c56:	4b17      	ldr	r3, [pc, #92]	; (402cb4 <chbsp_periodic_timer_init+0x108>)
  402c58:	4798      	blx	r3
			TC_CMR_TCCLKS_TIMER_CLOCK5 | TC_CMR_WAVE | TC_CMR_WAVSEL_UP);
	}

	/* Mark the HW init as done */
	is_hw_init_done = true;
  402c5a:	4b0c      	ldr	r3, [pc, #48]	; (402c8c <chbsp_periodic_timer_init+0xe0>)
  402c5c:	2201      	movs	r2, #1
  402c5e:	701a      	strb	r2, [r3, #0]

	/* Convert the ODR in ms to ticks */
	ultrasound_timer_period_in_tick = get_period_in_tick(interval_ms * 1000);
  402c60:	88fb      	ldrh	r3, [r7, #6]
  402c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402c66:	fb02 f303 	mul.w	r3, r2, r3
  402c6a:	4618      	mov	r0, r3
  402c6c:	4b14      	ldr	r3, [pc, #80]	; (402cc0 <chbsp_periodic_timer_init+0x114>)
  402c6e:	4798      	blx	r3
  402c70:	4603      	mov	r3, r0
  402c72:	b29a      	uxth	r2, r3
  402c74:	4b13      	ldr	r3, [pc, #76]	; (402cc4 <chbsp_periodic_timer_init+0x118>)
  402c76:	801a      	strh	r2, [r3, #0]
	
	return 0;
  402c78:	2300      	movs	r3, #0
}
  402c7a:	4618      	mov	r0, r3
  402c7c:	3708      	adds	r7, #8
  402c7e:	46bd      	mov	sp, r7
  402c80:	bd80      	pop	{r7, pc}
  402c82:	bf00      	nop
  402c84:	20000380 	.word	0x20000380
  402c88:	2000037c 	.word	0x2000037c
  402c8c:	200003a4 	.word	0x200003a4
  402c90:	00401695 	.word	0x00401695
  402c94:	004044d1 	.word	0x004044d1
  402c98:	004043f9 	.word	0x004043f9
  402c9c:	004044a9 	.word	0x004044a9
  402ca0:	40010000 	.word	0x40010000
  402ca4:	00401535 	.word	0x00401535
  402ca8:	00401569 	.word	0x00401569
  402cac:	0040159d 	.word	0x0040159d
  402cb0:	00401501 	.word	0x00401501
  402cb4:	00404981 	.word	0x00404981
  402cb8:	00404a03 	.word	0x00404a03
  402cbc:	004049bb 	.word	0x004049bb
  402cc0:	00402cc9 	.word	0x00402cc9
  402cc4:	20000160 	.word	0x20000160

00402cc8 <get_period_in_tick>:
    ultrasound_prev_period_end_in_tick = prev_expiration;
	
    program_next_period();
}

uint32_t get_period_in_tick(uint32_t interval_us) {
  402cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ccc:	b087      	sub	sp, #28
  402cce:	af00      	add	r7, sp, #0
  402cd0:	60f8      	str	r0, [r7, #12]
	uint64_t timer_period_in_tick = (uint64_t) ULTRASOUND_TIMER_FREQUENCY * interval_us / 1000000;
  402cd2:	68fa      	ldr	r2, [r7, #12]
  402cd4:	4615      	mov	r5, r2
  402cd6:	f04f 0600 	mov.w	r6, #0
  402cda:	4629      	mov	r1, r5
  402cdc:	4632      	mov	r2, r6
  402cde:	0150      	lsls	r0, r2, #5
  402ce0:	6078      	str	r0, [r7, #4]
  402ce2:	6878      	ldr	r0, [r7, #4]
  402ce4:	ea40 60d1 	orr.w	r0, r0, r1, lsr #27
  402ce8:	6078      	str	r0, [r7, #4]
  402cea:	014a      	lsls	r2, r1, #5
  402cec:	603a      	str	r2, [r7, #0]
  402cee:	e9d7 1200 	ldrd	r1, r2, [r7]
  402cf2:	1b49      	subs	r1, r1, r5
  402cf4:	eb62 0206 	sbc.w	r2, r2, r6
  402cf8:	0194      	lsls	r4, r2, #6
  402cfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
  402cfe:	018b      	lsls	r3, r1, #6
  402d00:	1a5b      	subs	r3, r3, r1
  402d02:	eb64 0402 	sbc.w	r4, r4, r2
  402d06:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  402d0a:	ea4b 7b13 	orr.w	fp, fp, r3, lsr #28
  402d0e:	ea4f 1a03 	mov.w	sl, r3, lsl #4
  402d12:	4653      	mov	r3, sl
  402d14:	465c      	mov	r4, fp
  402d16:	195b      	adds	r3, r3, r5
  402d18:	eb44 0406 	adc.w	r4, r4, r6
  402d1c:	ea4f 1904 	mov.w	r9, r4, lsl #4
  402d20:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  402d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
  402d28:	4643      	mov	r3, r8
  402d2a:	464c      	mov	r4, r9
  402d2c:	1958      	adds	r0, r3, r5
  402d2e:	eb44 0106 	adc.w	r1, r4, r6
  402d32:	4c1c      	ldr	r4, [pc, #112]	; (402da4 <get_period_in_tick+0xdc>)
  402d34:	4a1c      	ldr	r2, [pc, #112]	; (402da8 <get_period_in_tick+0xe0>)
  402d36:	f04f 0300 	mov.w	r3, #0
  402d3a:	47a0      	blx	r4
  402d3c:	4603      	mov	r3, r0
  402d3e:	460c      	mov	r4, r1
  402d40:	e9c7 3404 	strd	r3, r4, [r7, #16]

	/* If the ODR is too slow to be handled then program a faster interrupt and decimate it */
	if (timer_period_in_tick > UINT16_MAX)
  402d44:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  402d48:	f64f 71ff 	movw	r1, #65535	; 0xffff
  402d4c:	f04f 0200 	mov.w	r2, #0
  402d50:	42a2      	cmp	r2, r4
  402d52:	bf08      	it	eq
  402d54:	4299      	cmpeq	r1, r3
  402d56:	d20f      	bcs.n	402d78 <get_period_in_tick+0xb0>
		decimation_factor = timer_period_in_tick / UINT16_MAX + 1;
  402d58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
  402d5c:	4c11      	ldr	r4, [pc, #68]	; (402da4 <get_period_in_tick+0xdc>)
  402d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402d62:	f04f 0300 	mov.w	r3, #0
  402d66:	47a0      	blx	r4
  402d68:	4603      	mov	r3, r0
  402d6a:	460c      	mov	r4, r1
  402d6c:	b2db      	uxtb	r3, r3
  402d6e:	3301      	adds	r3, #1
  402d70:	b2da      	uxtb	r2, r3
  402d72:	4b0e      	ldr	r3, [pc, #56]	; (402dac <get_period_in_tick+0xe4>)
  402d74:	701a      	strb	r2, [r3, #0]
  402d76:	e002      	b.n	402d7e <get_period_in_tick+0xb6>
	else
		decimation_factor = 1;
  402d78:	4b0c      	ldr	r3, [pc, #48]	; (402dac <get_period_in_tick+0xe4>)
  402d7a:	2201      	movs	r2, #1
  402d7c:	701a      	strb	r2, [r3, #0]

	/* Calculate the final tick in case a decimation is needed */
	return (uint32_t) (timer_period_in_tick / decimation_factor);	
  402d7e:	4b0b      	ldr	r3, [pc, #44]	; (402dac <get_period_in_tick+0xe4>)
  402d80:	781b      	ldrb	r3, [r3, #0]
  402d82:	b2db      	uxtb	r3, r3
  402d84:	f04f 0400 	mov.w	r4, #0
  402d88:	4d06      	ldr	r5, [pc, #24]	; (402da4 <get_period_in_tick+0xdc>)
  402d8a:	461a      	mov	r2, r3
  402d8c:	4623      	mov	r3, r4
  402d8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
  402d92:	47a8      	blx	r5
  402d94:	4603      	mov	r3, r0
  402d96:	460c      	mov	r4, r1
}
  402d98:	4618      	mov	r0, r3
  402d9a:	371c      	adds	r7, #28
  402d9c:	46bd      	mov	sp, r7
  402d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402da2:	bf00      	nop
  402da4:	0040bdcd 	.word	0x0040bdcd
  402da8:	000f4240 	.word	0x000f4240
  402dac:	20000385 	.word	0x20000385

00402db0 <program_next_period>:

void program_next_period(void)
{
  402db0:	b580      	push	{r7, lr}
  402db2:	b082      	sub	sp, #8
  402db4:	af00      	add	r7, sp, #0
	uint32_t time = ultrasound_prev_period_end_in_tick + ultrasound_timer_period_in_tick;
  402db6:	4b0b      	ldr	r3, [pc, #44]	; (402de4 <program_next_period+0x34>)
  402db8:	881b      	ldrh	r3, [r3, #0]
  402dba:	461a      	mov	r2, r3
  402dbc:	4b0a      	ldr	r3, [pc, #40]	; (402de8 <program_next_period+0x38>)
  402dbe:	881b      	ldrh	r3, [r3, #0]
  402dc0:	4413      	add	r3, r2
  402dc2:	607b      	str	r3, [r7, #4]
	ultrasound_prev_period_end_in_tick = time;
  402dc4:	687b      	ldr	r3, [r7, #4]
  402dc6:	b29a      	uxth	r2, r3
  402dc8:	4b06      	ldr	r3, [pc, #24]	; (402de4 <program_next_period+0x34>)
  402dca:	801a      	strh	r2, [r3, #0]
	tc_write_rc(TC0, TC_CHANNEL_US, (uint16_t) (time & 0xFFFF));
  402dcc:	687b      	ldr	r3, [r7, #4]
  402dce:	b29b      	uxth	r3, r3
  402dd0:	461a      	mov	r2, r3
  402dd2:	2101      	movs	r1, #1
  402dd4:	4805      	ldr	r0, [pc, #20]	; (402dec <program_next_period+0x3c>)
  402dd6:	4b06      	ldr	r3, [pc, #24]	; (402df0 <program_next_period+0x40>)
  402dd8:	4798      	blx	r3
}
  402dda:	bf00      	nop
  402ddc:	3708      	adds	r7, #8
  402dde:	46bd      	mov	sp, r7
  402de0:	bd80      	pop	{r7, pc}
  402de2:	bf00      	nop
  402de4:	20000382 	.word	0x20000382
  402de8:	20000160 	.word	0x20000160
  402dec:	40010000 	.word	0x40010000
  402df0:	004049dd 	.word	0x004049dd

00402df4 <chbsp_periodic_timer_irq_enable>:
 * \brief Enable periodic timer interrupt.
 *
 * This function enables the interrupt associated with the periodic timer initialized by 
 * \a chbsp_periodic_timer_init().
 */
void chbsp_periodic_timer_irq_enable(void) {
  402df4:	b580      	push	{r7, lr}
  402df6:	af00      	add	r7, sp, #0

	/* Clear any pending CPCS before enabling it */
	tc_get_status(TC0, TC_CHANNEL_US);
  402df8:	2101      	movs	r1, #1
  402dfa:	4805      	ldr	r0, [pc, #20]	; (402e10 <chbsp_periodic_timer_irq_enable+0x1c>)
  402dfc:	4b05      	ldr	r3, [pc, #20]	; (402e14 <chbsp_periodic_timer_irq_enable+0x20>)
  402dfe:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_US, TC_IER_CPCS);
  402e00:	2210      	movs	r2, #16
  402e02:	2101      	movs	r1, #1
  402e04:	4802      	ldr	r0, [pc, #8]	; (402e10 <chbsp_periodic_timer_irq_enable+0x1c>)
  402e06:	4b04      	ldr	r3, [pc, #16]	; (402e18 <chbsp_periodic_timer_irq_enable+0x24>)
  402e08:	4798      	blx	r3
}
  402e0a:	bf00      	nop
  402e0c:	bd80      	pop	{r7, pc}
  402e0e:	bf00      	nop
  402e10:	40010000 	.word	0x40010000
  402e14:	00404a4f 	.word	0x00404a4f
  402e18:	00404a03 	.word	0x00404a03

00402e1c <chbsp_periodic_timer_start>:
 *
 * \return 0 if successful, 1 if error
 *
 * This function starts the periodic timer initialized by \a chbsp_periodic_timer_init().
 */
uint8_t chbsp_periodic_timer_start(void) {
  402e1c:	b580      	push	{r7, lr}
  402e1e:	af00      	add	r7, sp, #0

	decimation_counter = 0;
  402e20:	4b07      	ldr	r3, [pc, #28]	; (402e40 <chbsp_periodic_timer_start+0x24>)
  402e22:	2200      	movs	r2, #0
  402e24:	701a      	strb	r2, [r3, #0]
	/* The timer start done at the very end is resetting the counter */
	ultrasound_prev_period_end_in_tick = 0;
  402e26:	4b07      	ldr	r3, [pc, #28]	; (402e44 <chbsp_periodic_timer_start+0x28>)
  402e28:	2200      	movs	r2, #0
  402e2a:	801a      	strh	r2, [r3, #0]
	program_next_period();
  402e2c:	4b06      	ldr	r3, [pc, #24]	; (402e48 <chbsp_periodic_timer_start+0x2c>)
  402e2e:	4798      	blx	r3

	/* Start the HW counter (this resets the counter */
	tc_start(TC0, TC_CHANNEL_US);
  402e30:	2101      	movs	r1, #1
  402e32:	4806      	ldr	r0, [pc, #24]	; (402e4c <chbsp_periodic_timer_start+0x30>)
  402e34:	4b06      	ldr	r3, [pc, #24]	; (402e50 <chbsp_periodic_timer_start+0x34>)
  402e36:	4798      	blx	r3

	return 0;
  402e38:	2300      	movs	r3, #0
}
  402e3a:	4618      	mov	r0, r3
  402e3c:	bd80      	pop	{r7, pc}
  402e3e:	bf00      	nop
  402e40:	20000384 	.word	0x20000384
  402e44:	20000382 	.word	0x20000382
  402e48:	00402db1 	.word	0x00402db1
  402e4c:	40010000 	.word	0x40010000
  402e50:	004049bb 	.word	0x004049bb

00402e54 <chbsp_periodic_timer_handler>:
 *
 * This function handles the expiration of the periodic timer, re-arms it and any associated 
 * interrupts for the next interval, and calls the callback routine that was registered using 
 * \a chbsp_periodic_timer_init().
 */
void chbsp_periodic_timer_handler(void) {
  402e54:	b580      	push	{r7, lr}
  402e56:	b082      	sub	sp, #8
  402e58:	af00      	add	r7, sp, #0
	ch_timer_callback_t func_ptr = periodic_timer_callback_ptr;
  402e5a:	4b0e      	ldr	r3, [pc, #56]	; (402e94 <chbsp_periodic_timer_handler+0x40>)
  402e5c:	681b      	ldr	r3, [r3, #0]
  402e5e:	607b      	str	r3, [r7, #4]

	decimation_counter++;
  402e60:	4b0d      	ldr	r3, [pc, #52]	; (402e98 <chbsp_periodic_timer_handler+0x44>)
  402e62:	781b      	ldrb	r3, [r3, #0]
  402e64:	3301      	adds	r3, #1
  402e66:	b2da      	uxtb	r2, r3
  402e68:	4b0b      	ldr	r3, [pc, #44]	; (402e98 <chbsp_periodic_timer_handler+0x44>)
  402e6a:	701a      	strb	r2, [r3, #0]
	program_next_period();
  402e6c:	4b0b      	ldr	r3, [pc, #44]	; (402e9c <chbsp_periodic_timer_handler+0x48>)
  402e6e:	4798      	blx	r3
	if (decimation_counter >= decimation_factor) {
  402e70:	4b09      	ldr	r3, [pc, #36]	; (402e98 <chbsp_periodic_timer_handler+0x44>)
  402e72:	781a      	ldrb	r2, [r3, #0]
  402e74:	4b0a      	ldr	r3, [pc, #40]	; (402ea0 <chbsp_periodic_timer_handler+0x4c>)
  402e76:	781b      	ldrb	r3, [r3, #0]
  402e78:	429a      	cmp	r2, r3
  402e7a:	d307      	bcc.n	402e8c <chbsp_periodic_timer_handler+0x38>
		decimation_counter = 0;
  402e7c:	4b06      	ldr	r3, [pc, #24]	; (402e98 <chbsp_periodic_timer_handler+0x44>)
  402e7e:	2200      	movs	r2, #0
  402e80:	701a      	strb	r2, [r3, #0]
		if (func_ptr != NULL) {
  402e82:	687b      	ldr	r3, [r7, #4]
  402e84:	2b00      	cmp	r3, #0
  402e86:	d001      	beq.n	402e8c <chbsp_periodic_timer_handler+0x38>
			(*func_ptr)();			// call application timer callback routine
  402e88:	687b      	ldr	r3, [r7, #4]
  402e8a:	4798      	blx	r3
		}
	}
}
  402e8c:	bf00      	nop
  402e8e:	3708      	adds	r7, #8
  402e90:	46bd      	mov	sp, r7
  402e92:	bd80      	pop	{r7, pc}
  402e94:	2000037c 	.word	0x2000037c
  402e98:	20000384 	.word	0x20000384
  402e9c:	00402db1 	.word	0x00402db1
  402ea0:	20000385 	.word	0x20000385

00402ea4 <chbsp_proc_sleep>:
 *
 * This function puts the host processor (MCU) into a low-power sleep mode, to conserve energy. 
 * The sleep state should be selected such that interrupts associated with the I2C, external 
 * GPIO pins, and the periodic timer (if used) are able to wake up the device.
 */
void chbsp_proc_sleep(void) {
  402ea4:	b580      	push	{r7, lr}
  402ea6:	af00      	add	r7, sp, #0

	pmc_sleep(PROC_SLEEP_MODE);			// use sleep mode defined in chirp_smartsonic.h
  402ea8:	2002      	movs	r0, #2
  402eaa:	4b02      	ldr	r3, [pc, #8]	; (402eb4 <chbsp_proc_sleep+0x10>)
  402eac:	4798      	blx	r3
}	
  402eae:	bf00      	nop
  402eb0:	bd80      	pop	{r7, pc}
  402eb2:	bf00      	nop
  402eb4:	00404595 	.word	0x00404595

00402eb8 <chbsp_led_on>:
 *
 * The \a dev_num parameter contains the device number of a specific sensor.  This routine
 * will turn on the LED on the Chirp sensor daughterboard that is next to the specified
 * sensor.
 */
void chbsp_led_on(uint8_t led_num) {
  402eb8:	b580      	push	{r7, lr}
  402eba:	b082      	sub	sp, #8
  402ebc:	af00      	add	r7, sp, #0
  402ebe:	4603      	mov	r3, r0
  402ec0:	71fb      	strb	r3, [r7, #7]

	sensor_led_on(chirp_led_pins[led_num]);
  402ec2:	79fb      	ldrb	r3, [r7, #7]
  402ec4:	4a04      	ldr	r2, [pc, #16]	; (402ed8 <chbsp_led_on+0x20>)
  402ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402eca:	4618      	mov	r0, r3
  402ecc:	4b03      	ldr	r3, [pc, #12]	; (402edc <chbsp_led_on+0x24>)
  402ece:	4798      	blx	r3
}
  402ed0:	bf00      	nop
  402ed2:	3708      	adds	r7, #8
  402ed4:	46bd      	mov	sp, r7
  402ed6:	bd80      	pop	{r7, pc}
  402ed8:	20000150 	.word	0x20000150
  402edc:	004013e5 	.word	0x004013e5

00402ee0 <chbsp_timestamp_ms>:
/*!
 * \brief Return the current time in ms
 *
 * This function returns the system current time in ms.
 */
uint32_t chbsp_timestamp_ms(void) {
  402ee0:	b590      	push	{r4, r7, lr}
  402ee2:	b083      	sub	sp, #12
  402ee4:	af00      	add	r7, sp, #0
	uint32_t time = time_get_in_us();
  402ee6:	4b07      	ldr	r3, [pc, #28]	; (402f04 <chbsp_timestamp_ms+0x24>)
  402ee8:	4798      	blx	r3
  402eea:	4603      	mov	r3, r0
  402eec:	460c      	mov	r4, r1
  402eee:	607b      	str	r3, [r7, #4]
	return (time / 1000);
  402ef0:	687b      	ldr	r3, [r7, #4]
  402ef2:	4a05      	ldr	r2, [pc, #20]	; (402f08 <chbsp_timestamp_ms+0x28>)
  402ef4:	fba2 2303 	umull	r2, r3, r2, r3
  402ef8:	099b      	lsrs	r3, r3, #6
}
  402efa:	4618      	mov	r0, r3
  402efc:	370c      	adds	r7, #12
  402efe:	46bd      	mov	sp, r7
  402f00:	bd90      	pop	{r4, r7, pc}
  402f02:	bf00      	nop
  402f04:	00400a0d 	.word	0x00400a0d
  402f08:	10624dd3 	.word	0x10624dd3

00402f0c <time_hal_get_in_us>:
#include "time_hal.h"
#include "tc.h"
#include "chirp_smartsonic.h"

uint64_t time_hal_get_in_us(void)
{
  402f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f10:	b085      	sub	sp, #20
  402f12:	af00      	add	r7, sp, #0
	static uint64_t lsepoch_overflow_counter_in_tick = 0;

	cpu_irq_enter_critical();
  402f14:	4b33      	ldr	r3, [pc, #204]	; (402fe4 <time_hal_get_in_us+0xd8>)
  402f16:	4798      	blx	r3
	/* Check if a counter overflow occurs since last call and ensure no ovf occurs during the read */
	if (TC0->TC_CHANNEL[TC_CHANNEL_LSEPOCH].TC_SR & TC_SR_COVFS)
  402f18:	4b33      	ldr	r3, [pc, #204]	; (402fe8 <time_hal_get_in_us+0xdc>)
  402f1a:	6a1b      	ldr	r3, [r3, #32]
  402f1c:	f003 0301 	and.w	r3, r3, #1
  402f20:	2b00      	cmp	r3, #0
  402f22:	d009      	beq.n	402f38 <time_hal_get_in_us+0x2c>
		lsepoch_overflow_counter_in_tick += 65536;
  402f24:	4b31      	ldr	r3, [pc, #196]	; (402fec <time_hal_get_in_us+0xe0>)
  402f26:	e9d3 3400 	ldrd	r3, r4, [r3]
  402f2a:	f513 3380 	adds.w	r3, r3, #65536	; 0x10000
  402f2e:	f144 0400 	adc.w	r4, r4, #0
  402f32:	4a2e      	ldr	r2, [pc, #184]	; (402fec <time_hal_get_in_us+0xe0>)
  402f34:	e9c2 3400 	strd	r3, r4, [r2]

	uint16_t timer_counter = TC0->TC_CHANNEL[TC_CHANNEL_LSEPOCH].TC_CV;
  402f38:	4b2b      	ldr	r3, [pc, #172]	; (402fe8 <time_hal_get_in_us+0xdc>)
  402f3a:	691b      	ldr	r3, [r3, #16]
  402f3c:	81fb      	strh	r3, [r7, #14]

	if (TC0->TC_CHANNEL[TC_CHANNEL_LSEPOCH].TC_SR & TC_SR_COVFS) {
  402f3e:	4b2a      	ldr	r3, [pc, #168]	; (402fe8 <time_hal_get_in_us+0xdc>)
  402f40:	6a1b      	ldr	r3, [r3, #32]
  402f42:	f003 0301 	and.w	r3, r3, #1
  402f46:	2b00      	cmp	r3, #0
  402f48:	d00b      	beq.n	402f62 <time_hal_get_in_us+0x56>
		lsepoch_overflow_counter_in_tick += 65536;
  402f4a:	4b28      	ldr	r3, [pc, #160]	; (402fec <time_hal_get_in_us+0xe0>)
  402f4c:	e9d3 3400 	ldrd	r3, r4, [r3]
  402f50:	f513 3380 	adds.w	r3, r3, #65536	; 0x10000
  402f54:	f144 0400 	adc.w	r4, r4, #0
  402f58:	4a24      	ldr	r2, [pc, #144]	; (402fec <time_hal_get_in_us+0xe0>)
  402f5a:	e9c2 3400 	strd	r3, r4, [r2]
		/* Overflow occurred during the reading */
		timer_counter = 0;
  402f5e:	2300      	movs	r3, #0
  402f60:	81fb      	strh	r3, [r7, #14]
	}

	cpu_irq_leave_critical();
  402f62:	4b23      	ldr	r3, [pc, #140]	; (402ff0 <time_hal_get_in_us+0xe4>)
  402f64:	4798      	blx	r3

	/* Convert to us */
	uint64_t curr_time = ((lsepoch_overflow_counter_in_tick + timer_counter) * 1000000)
  402f66:	89f9      	ldrh	r1, [r7, #14]
  402f68:	f04f 0200 	mov.w	r2, #0
  402f6c:	4b1f      	ldr	r3, [pc, #124]	; (402fec <time_hal_get_in_us+0xe0>)
  402f6e:	e9d3 3400 	ldrd	r3, r4, [r3]
  402f72:	18c9      	adds	r1, r1, r3
  402f74:	eb42 0204 	adc.w	r2, r2, r4
  402f78:	460b      	mov	r3, r1
  402f7a:	4614      	mov	r4, r2
  402f7c:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  402f80:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  402f84:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  402f88:	4653      	mov	r3, sl
  402f8a:	465c      	mov	r4, fp
  402f8c:	1a5b      	subs	r3, r3, r1
  402f8e:	eb64 0402 	sbc.w	r4, r4, r2
  402f92:	ea4f 2944 	mov.w	r9, r4, lsl #9
  402f96:	ea49 59d3 	orr.w	r9, r9, r3, lsr #23
  402f9a:	ea4f 2843 	mov.w	r8, r3, lsl #9
  402f9e:	4643      	mov	r3, r8
  402fa0:	464c      	mov	r4, r9
  402fa2:	185b      	adds	r3, r3, r1
  402fa4:	eb44 0402 	adc.w	r4, r4, r2
  402fa8:	01a6      	lsls	r6, r4, #6
  402faa:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
  402fae:	019d      	lsls	r5, r3, #6
  402fb0:	1aed      	subs	r5, r5, r3
  402fb2:	eb66 0604 	sbc.w	r6, r6, r4
  402fb6:	186b      	adds	r3, r5, r1
  402fb8:	eb46 0402 	adc.w	r4, r6, r2
  402fbc:	4618      	mov	r0, r3
  402fbe:	4621      	mov	r1, r4
  402fc0:	4c0c      	ldr	r4, [pc, #48]	; (402ff4 <time_hal_get_in_us+0xe8>)
  402fc2:	4a0d      	ldr	r2, [pc, #52]	; (402ff8 <time_hal_get_in_us+0xec>)
  402fc4:	f04f 0300 	mov.w	r3, #0
  402fc8:	47a0      	blx	r4
  402fca:	4603      	mov	r3, r0
  402fcc:	460c      	mov	r4, r1
  402fce:	e9c7 3400 	strd	r3, r4, [r7]
		/ ULTRASOUND_TIMER_FREQUENCY;

	return (curr_time);
  402fd2:	e9d7 3400 	ldrd	r3, r4, [r7]
  402fd6:	4618      	mov	r0, r3
  402fd8:	4621      	mov	r1, r4
  402fda:	3714      	adds	r7, #20
  402fdc:	46bd      	mov	sp, r7
  402fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fe2:	bf00      	nop
  402fe4:	00400ddd 	.word	0x00400ddd
  402fe8:	40010000 	.word	0x40010000
  402fec:	200003a8 	.word	0x200003a8
  402ff0:	00400e35 	.word	0x00400e35
  402ff4:	0040bdcd 	.word	0x0040bdcd
  402ff8:	0007a111 	.word	0x0007a111

00402ffc <sysclk_enable_peripheral_clock>:
  402ffc:	b580      	push	{r7, lr}
  402ffe:	b082      	sub	sp, #8
  403000:	af00      	add	r7, sp, #0
  403002:	6078      	str	r0, [r7, #4]
  403004:	6878      	ldr	r0, [r7, #4]
  403006:	4b03      	ldr	r3, [pc, #12]	; (403014 <sysclk_enable_peripheral_clock+0x18>)
  403008:	4798      	blx	r3
  40300a:	bf00      	nop
  40300c:	3708      	adds	r7, #8
  40300e:	46bd      	mov	sp, r7
  403010:	bd80      	pop	{r7, pc}
  403012:	bf00      	nop
  403014:	00404375 	.word	0x00404375

00403018 <ioport_init>:
  403018:	b580      	push	{r7, lr}
  40301a:	af00      	add	r7, sp, #0
  40301c:	200b      	movs	r0, #11
  40301e:	4b03      	ldr	r3, [pc, #12]	; (40302c <ioport_init+0x14>)
  403020:	4798      	blx	r3
  403022:	200c      	movs	r0, #12
  403024:	4b01      	ldr	r3, [pc, #4]	; (40302c <ioport_init+0x14>)
  403026:	4798      	blx	r3
  403028:	bf00      	nop
  40302a:	bd80      	pop	{r7, pc}
  40302c:	00402ffd 	.word	0x00402ffd

00403030 <ioport_disable_pin>:
  403030:	b480      	push	{r7}
  403032:	b089      	sub	sp, #36	; 0x24
  403034:	af00      	add	r7, sp, #0
  403036:	6078      	str	r0, [r7, #4]
  403038:	687b      	ldr	r3, [r7, #4]
  40303a:	61fb      	str	r3, [r7, #28]
  40303c:	69fb      	ldr	r3, [r7, #28]
  40303e:	61bb      	str	r3, [r7, #24]
  403040:	69bb      	ldr	r3, [r7, #24]
  403042:	095a      	lsrs	r2, r3, #5
  403044:	69fb      	ldr	r3, [r7, #28]
  403046:	617b      	str	r3, [r7, #20]
  403048:	697b      	ldr	r3, [r7, #20]
  40304a:	f003 031f 	and.w	r3, r3, #31
  40304e:	2101      	movs	r1, #1
  403050:	fa01 f303 	lsl.w	r3, r1, r3
  403054:	613a      	str	r2, [r7, #16]
  403056:	60fb      	str	r3, [r7, #12]
  403058:	693b      	ldr	r3, [r7, #16]
  40305a:	60bb      	str	r3, [r7, #8]
  40305c:	68bb      	ldr	r3, [r7, #8]
  40305e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403062:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403066:	025b      	lsls	r3, r3, #9
  403068:	461a      	mov	r2, r3
  40306a:	68fb      	ldr	r3, [r7, #12]
  40306c:	6053      	str	r3, [r2, #4]
  40306e:	bf00      	nop
  403070:	3724      	adds	r7, #36	; 0x24
  403072:	46bd      	mov	sp, r7
  403074:	f85d 7b04 	ldr.w	r7, [sp], #4
  403078:	4770      	bx	lr

0040307a <ioport_set_pin_mode>:
  40307a:	b480      	push	{r7}
  40307c:	b08d      	sub	sp, #52	; 0x34
  40307e:	af00      	add	r7, sp, #0
  403080:	6078      	str	r0, [r7, #4]
  403082:	6039      	str	r1, [r7, #0]
  403084:	687b      	ldr	r3, [r7, #4]
  403086:	62fb      	str	r3, [r7, #44]	; 0x2c
  403088:	683b      	ldr	r3, [r7, #0]
  40308a:	62bb      	str	r3, [r7, #40]	; 0x28
  40308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40308e:	627b      	str	r3, [r7, #36]	; 0x24
  403090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403092:	095a      	lsrs	r2, r3, #5
  403094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403096:	623b      	str	r3, [r7, #32]
  403098:	6a3b      	ldr	r3, [r7, #32]
  40309a:	f003 031f 	and.w	r3, r3, #31
  40309e:	2101      	movs	r1, #1
  4030a0:	fa01 f303 	lsl.w	r3, r1, r3
  4030a4:	61fa      	str	r2, [r7, #28]
  4030a6:	61bb      	str	r3, [r7, #24]
  4030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4030aa:	617b      	str	r3, [r7, #20]
  4030ac:	69fb      	ldr	r3, [r7, #28]
  4030ae:	613b      	str	r3, [r7, #16]
  4030b0:	693b      	ldr	r3, [r7, #16]
  4030b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4030b6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4030ba:	025b      	lsls	r3, r3, #9
  4030bc:	60fb      	str	r3, [r7, #12]
  4030be:	697b      	ldr	r3, [r7, #20]
  4030c0:	f003 0308 	and.w	r3, r3, #8
  4030c4:	2b00      	cmp	r3, #0
  4030c6:	d003      	beq.n	4030d0 <ioport_set_pin_mode+0x56>
  4030c8:	68fb      	ldr	r3, [r7, #12]
  4030ca:	69ba      	ldr	r2, [r7, #24]
  4030cc:	665a      	str	r2, [r3, #100]	; 0x64
  4030ce:	e002      	b.n	4030d6 <ioport_set_pin_mode+0x5c>
  4030d0:	68fb      	ldr	r3, [r7, #12]
  4030d2:	69ba      	ldr	r2, [r7, #24]
  4030d4:	661a      	str	r2, [r3, #96]	; 0x60
  4030d6:	697b      	ldr	r3, [r7, #20]
  4030d8:	f003 0310 	and.w	r3, r3, #16
  4030dc:	2b00      	cmp	r3, #0
  4030de:	d004      	beq.n	4030ea <ioport_set_pin_mode+0x70>
  4030e0:	68fb      	ldr	r3, [r7, #12]
  4030e2:	69ba      	ldr	r2, [r7, #24]
  4030e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4030e8:	e003      	b.n	4030f2 <ioport_set_pin_mode+0x78>
  4030ea:	68fb      	ldr	r3, [r7, #12]
  4030ec:	69ba      	ldr	r2, [r7, #24]
  4030ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  4030f2:	697b      	ldr	r3, [r7, #20]
  4030f4:	f003 0320 	and.w	r3, r3, #32
  4030f8:	2b00      	cmp	r3, #0
  4030fa:	d003      	beq.n	403104 <ioport_set_pin_mode+0x8a>
  4030fc:	68fb      	ldr	r3, [r7, #12]
  4030fe:	69ba      	ldr	r2, [r7, #24]
  403100:	651a      	str	r2, [r3, #80]	; 0x50
  403102:	e002      	b.n	40310a <ioport_set_pin_mode+0x90>
  403104:	68fb      	ldr	r3, [r7, #12]
  403106:	69ba      	ldr	r2, [r7, #24]
  403108:	655a      	str	r2, [r3, #84]	; 0x54
  40310a:	697b      	ldr	r3, [r7, #20]
  40310c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  403110:	2b00      	cmp	r3, #0
  403112:	d003      	beq.n	40311c <ioport_set_pin_mode+0xa2>
  403114:	68fb      	ldr	r3, [r7, #12]
  403116:	69ba      	ldr	r2, [r7, #24]
  403118:	621a      	str	r2, [r3, #32]
  40311a:	e002      	b.n	403122 <ioport_set_pin_mode+0xa8>
  40311c:	68fb      	ldr	r3, [r7, #12]
  40311e:	69ba      	ldr	r2, [r7, #24]
  403120:	625a      	str	r2, [r3, #36]	; 0x24
  403122:	697b      	ldr	r3, [r7, #20]
  403124:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403128:	2b00      	cmp	r3, #0
  40312a:	d004      	beq.n	403136 <ioport_set_pin_mode+0xbc>
  40312c:	68fb      	ldr	r3, [r7, #12]
  40312e:	69ba      	ldr	r2, [r7, #24]
  403130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  403134:	e003      	b.n	40313e <ioport_set_pin_mode+0xc4>
  403136:	68fb      	ldr	r3, [r7, #12]
  403138:	69ba      	ldr	r2, [r7, #24]
  40313a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40313e:	697b      	ldr	r3, [r7, #20]
  403140:	f003 0301 	and.w	r3, r3, #1
  403144:	2b00      	cmp	r3, #0
  403146:	d006      	beq.n	403156 <ioport_set_pin_mode+0xdc>
  403148:	68fb      	ldr	r3, [r7, #12]
  40314a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40314c:	69bb      	ldr	r3, [r7, #24]
  40314e:	431a      	orrs	r2, r3
  403150:	68fb      	ldr	r3, [r7, #12]
  403152:	671a      	str	r2, [r3, #112]	; 0x70
  403154:	e006      	b.n	403164 <ioport_set_pin_mode+0xea>
  403156:	68fb      	ldr	r3, [r7, #12]
  403158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40315a:	69bb      	ldr	r3, [r7, #24]
  40315c:	43db      	mvns	r3, r3
  40315e:	401a      	ands	r2, r3
  403160:	68fb      	ldr	r3, [r7, #12]
  403162:	671a      	str	r2, [r3, #112]	; 0x70
  403164:	697b      	ldr	r3, [r7, #20]
  403166:	f003 0302 	and.w	r3, r3, #2
  40316a:	2b00      	cmp	r3, #0
  40316c:	d006      	beq.n	40317c <ioport_set_pin_mode+0x102>
  40316e:	68fb      	ldr	r3, [r7, #12]
  403170:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403172:	69bb      	ldr	r3, [r7, #24]
  403174:	431a      	orrs	r2, r3
  403176:	68fb      	ldr	r3, [r7, #12]
  403178:	675a      	str	r2, [r3, #116]	; 0x74
  40317a:	e006      	b.n	40318a <ioport_set_pin_mode+0x110>
  40317c:	68fb      	ldr	r3, [r7, #12]
  40317e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403180:	69bb      	ldr	r3, [r7, #24]
  403182:	43db      	mvns	r3, r3
  403184:	401a      	ands	r2, r3
  403186:	68fb      	ldr	r3, [r7, #12]
  403188:	675a      	str	r2, [r3, #116]	; 0x74
  40318a:	bf00      	nop
  40318c:	3734      	adds	r7, #52	; 0x34
  40318e:	46bd      	mov	sp, r7
  403190:	f85d 7b04 	ldr.w	r7, [sp], #4
  403194:	4770      	bx	lr

00403196 <ioport_set_pin_dir>:
  403196:	b480      	push	{r7}
  403198:	b08d      	sub	sp, #52	; 0x34
  40319a:	af00      	add	r7, sp, #0
  40319c:	6078      	str	r0, [r7, #4]
  40319e:	460b      	mov	r3, r1
  4031a0:	70fb      	strb	r3, [r7, #3]
  4031a2:	687b      	ldr	r3, [r7, #4]
  4031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4031a6:	78fb      	ldrb	r3, [r7, #3]
  4031a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4031ae:	627b      	str	r3, [r7, #36]	; 0x24
  4031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4031b2:	623b      	str	r3, [r7, #32]
  4031b4:	6a3b      	ldr	r3, [r7, #32]
  4031b6:	095b      	lsrs	r3, r3, #5
  4031b8:	61fb      	str	r3, [r7, #28]
  4031ba:	69fb      	ldr	r3, [r7, #28]
  4031bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4031c0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4031c4:	025b      	lsls	r3, r3, #9
  4031c6:	61bb      	str	r3, [r7, #24]
  4031c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4031cc:	2b01      	cmp	r3, #1
  4031ce:	d109      	bne.n	4031e4 <ioport_set_pin_dir+0x4e>
  4031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4031d2:	617b      	str	r3, [r7, #20]
  4031d4:	697b      	ldr	r3, [r7, #20]
  4031d6:	f003 031f 	and.w	r3, r3, #31
  4031da:	2201      	movs	r2, #1
  4031dc:	409a      	lsls	r2, r3
  4031de:	69bb      	ldr	r3, [r7, #24]
  4031e0:	611a      	str	r2, [r3, #16]
  4031e2:	e00c      	b.n	4031fe <ioport_set_pin_dir+0x68>
  4031e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4031e8:	2b00      	cmp	r3, #0
  4031ea:	d108      	bne.n	4031fe <ioport_set_pin_dir+0x68>
  4031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4031ee:	613b      	str	r3, [r7, #16]
  4031f0:	693b      	ldr	r3, [r7, #16]
  4031f2:	f003 031f 	and.w	r3, r3, #31
  4031f6:	2201      	movs	r2, #1
  4031f8:	409a      	lsls	r2, r3
  4031fa:	69bb      	ldr	r3, [r7, #24]
  4031fc:	615a      	str	r2, [r3, #20]
  4031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403200:	60fb      	str	r3, [r7, #12]
  403202:	68fb      	ldr	r3, [r7, #12]
  403204:	f003 031f 	and.w	r3, r3, #31
  403208:	2201      	movs	r2, #1
  40320a:	409a      	lsls	r2, r3
  40320c:	69bb      	ldr	r3, [r7, #24]
  40320e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  403212:	bf00      	nop
  403214:	3734      	adds	r7, #52	; 0x34
  403216:	46bd      	mov	sp, r7
  403218:	f85d 7b04 	ldr.w	r7, [sp], #4
  40321c:	4770      	bx	lr

0040321e <ioport_set_pin_level>:
  40321e:	b480      	push	{r7}
  403220:	b08b      	sub	sp, #44	; 0x2c
  403222:	af00      	add	r7, sp, #0
  403224:	6078      	str	r0, [r7, #4]
  403226:	460b      	mov	r3, r1
  403228:	70fb      	strb	r3, [r7, #3]
  40322a:	687b      	ldr	r3, [r7, #4]
  40322c:	627b      	str	r3, [r7, #36]	; 0x24
  40322e:	78fb      	ldrb	r3, [r7, #3]
  403230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  403234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403236:	61fb      	str	r3, [r7, #28]
  403238:	69fb      	ldr	r3, [r7, #28]
  40323a:	61bb      	str	r3, [r7, #24]
  40323c:	69bb      	ldr	r3, [r7, #24]
  40323e:	095b      	lsrs	r3, r3, #5
  403240:	617b      	str	r3, [r7, #20]
  403242:	697b      	ldr	r3, [r7, #20]
  403244:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403248:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40324c:	025b      	lsls	r3, r3, #9
  40324e:	613b      	str	r3, [r7, #16]
  403250:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403254:	2b00      	cmp	r3, #0
  403256:	d009      	beq.n	40326c <ioport_set_pin_level+0x4e>
  403258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40325a:	60fb      	str	r3, [r7, #12]
  40325c:	68fb      	ldr	r3, [r7, #12]
  40325e:	f003 031f 	and.w	r3, r3, #31
  403262:	2201      	movs	r2, #1
  403264:	409a      	lsls	r2, r3
  403266:	693b      	ldr	r3, [r7, #16]
  403268:	631a      	str	r2, [r3, #48]	; 0x30
  40326a:	e008      	b.n	40327e <ioport_set_pin_level+0x60>
  40326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40326e:	60bb      	str	r3, [r7, #8]
  403270:	68bb      	ldr	r3, [r7, #8]
  403272:	f003 031f 	and.w	r3, r3, #31
  403276:	2201      	movs	r2, #1
  403278:	409a      	lsls	r2, r3
  40327a:	693b      	ldr	r3, [r7, #16]
  40327c:	635a      	str	r2, [r3, #52]	; 0x34
  40327e:	bf00      	nop
  403280:	372c      	adds	r7, #44	; 0x2c
  403282:	46bd      	mov	sp, r7
  403284:	f85d 7b04 	ldr.w	r7, [sp], #4
  403288:	4770      	bx	lr
	...

0040328c <system_board_init_I2C>:
  40328c:	b580      	push	{r7, lr}
  40328e:	af00      	add	r7, sp, #0
  403290:	4b41      	ldr	r3, [pc, #260]	; (403398 <system_board_init_I2C+0x10c>)
  403292:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403296:	605a      	str	r2, [r3, #4]
  403298:	4b40      	ldr	r3, [pc, #256]	; (40339c <system_board_init_I2C+0x110>)
  40329a:	4798      	blx	r3
  40329c:	2101      	movs	r1, #1
  40329e:	202a      	movs	r0, #42	; 0x2a
  4032a0:	4b3f      	ldr	r3, [pc, #252]	; (4033a0 <system_board_init_I2C+0x114>)
  4032a2:	4798      	blx	r3
  4032a4:	2101      	movs	r1, #1
  4032a6:	202a      	movs	r0, #42	; 0x2a
  4032a8:	4b3e      	ldr	r3, [pc, #248]	; (4033a4 <system_board_init_I2C+0x118>)
  4032aa:	4798      	blx	r3
  4032ac:	2100      	movs	r1, #0
  4032ae:	2002      	movs	r0, #2
  4032b0:	4b3b      	ldr	r3, [pc, #236]	; (4033a0 <system_board_init_I2C+0x114>)
  4032b2:	4798      	blx	r3
  4032b4:	2108      	movs	r1, #8
  4032b6:	2002      	movs	r0, #2
  4032b8:	4b3b      	ldr	r3, [pc, #236]	; (4033a8 <system_board_init_I2C+0x11c>)
  4032ba:	4798      	blx	r3
  4032bc:	2101      	movs	r1, #1
  4032be:	2001      	movs	r0, #1
  4032c0:	4b38      	ldr	r3, [pc, #224]	; (4033a4 <system_board_init_I2C+0x118>)
  4032c2:	4798      	blx	r3
  4032c4:	2101      	movs	r1, #1
  4032c6:	2001      	movs	r0, #1
  4032c8:	4b35      	ldr	r3, [pc, #212]	; (4033a0 <system_board_init_I2C+0x114>)
  4032ca:	4798      	blx	r3
  4032cc:	2101      	movs	r1, #1
  4032ce:	202d      	movs	r0, #45	; 0x2d
  4032d0:	4b34      	ldr	r3, [pc, #208]	; (4033a4 <system_board_init_I2C+0x118>)
  4032d2:	4798      	blx	r3
  4032d4:	2101      	movs	r1, #1
  4032d6:	202d      	movs	r0, #45	; 0x2d
  4032d8:	4b31      	ldr	r3, [pc, #196]	; (4033a0 <system_board_init_I2C+0x114>)
  4032da:	4798      	blx	r3
  4032dc:	2101      	movs	r1, #1
  4032de:	202f      	movs	r0, #47	; 0x2f
  4032e0:	4b30      	ldr	r3, [pc, #192]	; (4033a4 <system_board_init_I2C+0x118>)
  4032e2:	4798      	blx	r3
  4032e4:	2101      	movs	r1, #1
  4032e6:	202f      	movs	r0, #47	; 0x2f
  4032e8:	4b2d      	ldr	r3, [pc, #180]	; (4033a0 <system_board_init_I2C+0x114>)
  4032ea:	4798      	blx	r3
  4032ec:	2100      	movs	r1, #0
  4032ee:	200b      	movs	r0, #11
  4032f0:	4b2d      	ldr	r3, [pc, #180]	; (4033a8 <system_board_init_I2C+0x11c>)
  4032f2:	4798      	blx	r3
  4032f4:	200b      	movs	r0, #11
  4032f6:	4b2d      	ldr	r3, [pc, #180]	; (4033ac <system_board_init_I2C+0x120>)
  4032f8:	4798      	blx	r3
  4032fa:	2100      	movs	r1, #0
  4032fc:	2022      	movs	r0, #34	; 0x22
  4032fe:	4b2a      	ldr	r3, [pc, #168]	; (4033a8 <system_board_init_I2C+0x11c>)
  403300:	4798      	blx	r3
  403302:	2022      	movs	r0, #34	; 0x22
  403304:	4b29      	ldr	r3, [pc, #164]	; (4033ac <system_board_init_I2C+0x120>)
  403306:	4798      	blx	r3
  403308:	2100      	movs	r1, #0
  40330a:	2023      	movs	r0, #35	; 0x23
  40330c:	4b26      	ldr	r3, [pc, #152]	; (4033a8 <system_board_init_I2C+0x11c>)
  40330e:	4798      	blx	r3
  403310:	2023      	movs	r0, #35	; 0x23
  403312:	4b26      	ldr	r3, [pc, #152]	; (4033ac <system_board_init_I2C+0x120>)
  403314:	4798      	blx	r3
  403316:	2100      	movs	r1, #0
  403318:	2003      	movs	r0, #3
  40331a:	4b23      	ldr	r3, [pc, #140]	; (4033a8 <system_board_init_I2C+0x11c>)
  40331c:	4798      	blx	r3
  40331e:	2003      	movs	r0, #3
  403320:	4b22      	ldr	r3, [pc, #136]	; (4033ac <system_board_init_I2C+0x120>)
  403322:	4798      	blx	r3
  403324:	2100      	movs	r1, #0
  403326:	2004      	movs	r0, #4
  403328:	4b1f      	ldr	r3, [pc, #124]	; (4033a8 <system_board_init_I2C+0x11c>)
  40332a:	4798      	blx	r3
  40332c:	2004      	movs	r0, #4
  40332e:	4b1f      	ldr	r3, [pc, #124]	; (4033ac <system_board_init_I2C+0x120>)
  403330:	4798      	blx	r3
  403332:	2100      	movs	r1, #0
  403334:	2028      	movs	r0, #40	; 0x28
  403336:	4b1c      	ldr	r3, [pc, #112]	; (4033a8 <system_board_init_I2C+0x11c>)
  403338:	4798      	blx	r3
  40333a:	2028      	movs	r0, #40	; 0x28
  40333c:	4b1b      	ldr	r3, [pc, #108]	; (4033ac <system_board_init_I2C+0x120>)
  40333e:	4798      	blx	r3
  403340:	2100      	movs	r1, #0
  403342:	2029      	movs	r0, #41	; 0x29
  403344:	4b18      	ldr	r3, [pc, #96]	; (4033a8 <system_board_init_I2C+0x11c>)
  403346:	4798      	blx	r3
  403348:	2029      	movs	r0, #41	; 0x29
  40334a:	4b18      	ldr	r3, [pc, #96]	; (4033ac <system_board_init_I2C+0x120>)
  40334c:	4798      	blx	r3
  40334e:	2100      	movs	r1, #0
  403350:	2009      	movs	r0, #9
  403352:	4b15      	ldr	r3, [pc, #84]	; (4033a8 <system_board_init_I2C+0x11c>)
  403354:	4798      	blx	r3
  403356:	2009      	movs	r0, #9
  403358:	4b14      	ldr	r3, [pc, #80]	; (4033ac <system_board_init_I2C+0x120>)
  40335a:	4798      	blx	r3
  40335c:	2100      	movs	r1, #0
  40335e:	200a      	movs	r0, #10
  403360:	4b11      	ldr	r3, [pc, #68]	; (4033a8 <system_board_init_I2C+0x11c>)
  403362:	4798      	blx	r3
  403364:	200a      	movs	r0, #10
  403366:	4b11      	ldr	r3, [pc, #68]	; (4033ac <system_board_init_I2C+0x120>)
  403368:	4798      	blx	r3
  40336a:	2100      	movs	r1, #0
  40336c:	2020      	movs	r0, #32
  40336e:	4b0e      	ldr	r3, [pc, #56]	; (4033a8 <system_board_init_I2C+0x11c>)
  403370:	4798      	blx	r3
  403372:	2020      	movs	r0, #32
  403374:	4b0d      	ldr	r3, [pc, #52]	; (4033ac <system_board_init_I2C+0x120>)
  403376:	4798      	blx	r3
  403378:	2100      	movs	r1, #0
  40337a:	2019      	movs	r0, #25
  40337c:	4b0a      	ldr	r3, [pc, #40]	; (4033a8 <system_board_init_I2C+0x11c>)
  40337e:	4798      	blx	r3
  403380:	2019      	movs	r0, #25
  403382:	4b0a      	ldr	r3, [pc, #40]	; (4033ac <system_board_init_I2C+0x120>)
  403384:	4798      	blx	r3
  403386:	2100      	movs	r1, #0
  403388:	201a      	movs	r0, #26
  40338a:	4b07      	ldr	r3, [pc, #28]	; (4033a8 <system_board_init_I2C+0x11c>)
  40338c:	4798      	blx	r3
  40338e:	201a      	movs	r0, #26
  403390:	4b06      	ldr	r3, [pc, #24]	; (4033ac <system_board_init_I2C+0x120>)
  403392:	4798      	blx	r3
  403394:	bf00      	nop
  403396:	bd80      	pop	{r7, pc}
  403398:	400e1450 	.word	0x400e1450
  40339c:	00403019 	.word	0x00403019
  4033a0:	00403197 	.word	0x00403197
  4033a4:	0040321f 	.word	0x0040321f
  4033a8:	0040307b 	.word	0x0040307b
  4033ac:	00403031 	.word	0x00403031

004033b0 <cpu_irq_save>:
  4033b0:	b480      	push	{r7}
  4033b2:	b083      	sub	sp, #12
  4033b4:	af00      	add	r7, sp, #0
  4033b6:	f3ef 8310 	mrs	r3, PRIMASK
  4033ba:	607b      	str	r3, [r7, #4]
  4033bc:	687b      	ldr	r3, [r7, #4]
  4033be:	2b00      	cmp	r3, #0
  4033c0:	bf0c      	ite	eq
  4033c2:	2301      	moveq	r3, #1
  4033c4:	2300      	movne	r3, #0
  4033c6:	b2db      	uxtb	r3, r3
  4033c8:	603b      	str	r3, [r7, #0]
  4033ca:	b672      	cpsid	i
  4033cc:	f3bf 8f5f 	dmb	sy
  4033d0:	4b04      	ldr	r3, [pc, #16]	; (4033e4 <cpu_irq_save+0x34>)
  4033d2:	2200      	movs	r2, #0
  4033d4:	701a      	strb	r2, [r3, #0]
  4033d6:	683b      	ldr	r3, [r7, #0]
  4033d8:	4618      	mov	r0, r3
  4033da:	370c      	adds	r7, #12
  4033dc:	46bd      	mov	sp, r7
  4033de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033e2:	4770      	bx	lr
  4033e4:	20000114 	.word	0x20000114

004033e8 <cpu_irq_is_enabled_flags>:
  4033e8:	b480      	push	{r7}
  4033ea:	b083      	sub	sp, #12
  4033ec:	af00      	add	r7, sp, #0
  4033ee:	6078      	str	r0, [r7, #4]
  4033f0:	687b      	ldr	r3, [r7, #4]
  4033f2:	2b00      	cmp	r3, #0
  4033f4:	bf14      	ite	ne
  4033f6:	2301      	movne	r3, #1
  4033f8:	2300      	moveq	r3, #0
  4033fa:	b2db      	uxtb	r3, r3
  4033fc:	4618      	mov	r0, r3
  4033fe:	370c      	adds	r7, #12
  403400:	46bd      	mov	sp, r7
  403402:	f85d 7b04 	ldr.w	r7, [sp], #4
  403406:	4770      	bx	lr

00403408 <cpu_irq_restore>:
  403408:	b580      	push	{r7, lr}
  40340a:	b082      	sub	sp, #8
  40340c:	af00      	add	r7, sp, #0
  40340e:	6078      	str	r0, [r7, #4]
  403410:	6878      	ldr	r0, [r7, #4]
  403412:	4b07      	ldr	r3, [pc, #28]	; (403430 <cpu_irq_restore+0x28>)
  403414:	4798      	blx	r3
  403416:	4603      	mov	r3, r0
  403418:	2b00      	cmp	r3, #0
  40341a:	d005      	beq.n	403428 <cpu_irq_restore+0x20>
  40341c:	4b05      	ldr	r3, [pc, #20]	; (403434 <cpu_irq_restore+0x2c>)
  40341e:	2201      	movs	r2, #1
  403420:	701a      	strb	r2, [r3, #0]
  403422:	f3bf 8f5f 	dmb	sy
  403426:	b662      	cpsie	i
  403428:	bf00      	nop
  40342a:	3708      	adds	r7, #8
  40342c:	46bd      	mov	sp, r7
  40342e:	bd80      	pop	{r7, pc}
  403430:	004033e9 	.word	0x004033e9
  403434:	20000114 	.word	0x20000114

00403438 <adc_get_interrupt_status>:
  403438:	b480      	push	{r7}
  40343a:	b083      	sub	sp, #12
  40343c:	af00      	add	r7, sp, #0
  40343e:	6078      	str	r0, [r7, #4]
  403440:	687b      	ldr	r3, [r7, #4]
  403442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403444:	4618      	mov	r0, r3
  403446:	370c      	adds	r7, #12
  403448:	46bd      	mov	sp, r7
  40344a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40344e:	4770      	bx	lr

00403450 <sleepmgr_lock_mode>:
  403450:	b580      	push	{r7, lr}
  403452:	b084      	sub	sp, #16
  403454:	af00      	add	r7, sp, #0
  403456:	4603      	mov	r3, r0
  403458:	71fb      	strb	r3, [r7, #7]
  40345a:	79fb      	ldrb	r3, [r7, #7]
  40345c:	4a0a      	ldr	r2, [pc, #40]	; (403488 <sleepmgr_lock_mode+0x38>)
  40345e:	5cd3      	ldrb	r3, [r2, r3]
  403460:	2bff      	cmp	r3, #255	; 0xff
  403462:	d100      	bne.n	403466 <sleepmgr_lock_mode+0x16>
  403464:	e7fe      	b.n	403464 <sleepmgr_lock_mode+0x14>
  403466:	4b09      	ldr	r3, [pc, #36]	; (40348c <sleepmgr_lock_mode+0x3c>)
  403468:	4798      	blx	r3
  40346a:	60f8      	str	r0, [r7, #12]
  40346c:	79fb      	ldrb	r3, [r7, #7]
  40346e:	4a06      	ldr	r2, [pc, #24]	; (403488 <sleepmgr_lock_mode+0x38>)
  403470:	5cd2      	ldrb	r2, [r2, r3]
  403472:	3201      	adds	r2, #1
  403474:	b2d1      	uxtb	r1, r2
  403476:	4a04      	ldr	r2, [pc, #16]	; (403488 <sleepmgr_lock_mode+0x38>)
  403478:	54d1      	strb	r1, [r2, r3]
  40347a:	68f8      	ldr	r0, [r7, #12]
  40347c:	4b04      	ldr	r3, [pc, #16]	; (403490 <sleepmgr_lock_mode+0x40>)
  40347e:	4798      	blx	r3
  403480:	bf00      	nop
  403482:	3710      	adds	r7, #16
  403484:	46bd      	mov	sp, r7
  403486:	bd80      	pop	{r7, pc}
  403488:	20000870 	.word	0x20000870
  40348c:	004033b1 	.word	0x004033b1
  403490:	00403409 	.word	0x00403409

00403494 <osc_get_rate>:
  403494:	b480      	push	{r7}
  403496:	b083      	sub	sp, #12
  403498:	af00      	add	r7, sp, #0
  40349a:	6078      	str	r0, [r7, #4]
  40349c:	687b      	ldr	r3, [r7, #4]
  40349e:	2b07      	cmp	r3, #7
  4034a0:	d825      	bhi.n	4034ee <osc_get_rate+0x5a>
  4034a2:	a201      	add	r2, pc, #4	; (adr r2, 4034a8 <osc_get_rate+0x14>)
  4034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4034a8:	004034c9 	.word	0x004034c9
  4034ac:	004034cf 	.word	0x004034cf
  4034b0:	004034d5 	.word	0x004034d5
  4034b4:	004034db 	.word	0x004034db
  4034b8:	004034df 	.word	0x004034df
  4034bc:	004034e3 	.word	0x004034e3
  4034c0:	004034e7 	.word	0x004034e7
  4034c4:	004034eb 	.word	0x004034eb
  4034c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4034cc:	e010      	b.n	4034f0 <osc_get_rate+0x5c>
  4034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4034d2:	e00d      	b.n	4034f0 <osc_get_rate+0x5c>
  4034d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4034d8:	e00a      	b.n	4034f0 <osc_get_rate+0x5c>
  4034da:	4b08      	ldr	r3, [pc, #32]	; (4034fc <osc_get_rate+0x68>)
  4034dc:	e008      	b.n	4034f0 <osc_get_rate+0x5c>
  4034de:	4b08      	ldr	r3, [pc, #32]	; (403500 <osc_get_rate+0x6c>)
  4034e0:	e006      	b.n	4034f0 <osc_get_rate+0x5c>
  4034e2:	4b08      	ldr	r3, [pc, #32]	; (403504 <osc_get_rate+0x70>)
  4034e4:	e004      	b.n	4034f0 <osc_get_rate+0x5c>
  4034e6:	2300      	movs	r3, #0
  4034e8:	e002      	b.n	4034f0 <osc_get_rate+0x5c>
  4034ea:	2300      	movs	r3, #0
  4034ec:	e000      	b.n	4034f0 <osc_get_rate+0x5c>
  4034ee:	2300      	movs	r3, #0
  4034f0:	4618      	mov	r0, r3
  4034f2:	370c      	adds	r7, #12
  4034f4:	46bd      	mov	sp, r7
  4034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4034fa:	4770      	bx	lr
  4034fc:	007a1200 	.word	0x007a1200
  403500:	00f42400 	.word	0x00f42400
  403504:	016e3600 	.word	0x016e3600

00403508 <sysclk_get_main_hz>:
  403508:	b580      	push	{r7, lr}
  40350a:	af00      	add	r7, sp, #0
  40350c:	2001      	movs	r0, #1
  40350e:	4b04      	ldr	r3, [pc, #16]	; (403520 <sysclk_get_main_hz+0x18>)
  403510:	4798      	blx	r3
  403512:	4602      	mov	r2, r0
  403514:	f640 634e 	movw	r3, #3662	; 0xe4e
  403518:	fb03 f302 	mul.w	r3, r3, r2
  40351c:	4618      	mov	r0, r3
  40351e:	bd80      	pop	{r7, pc}
  403520:	00403495 	.word	0x00403495

00403524 <sysclk_get_cpu_hz>:
  403524:	b580      	push	{r7, lr}
  403526:	af00      	add	r7, sp, #0
  403528:	4b02      	ldr	r3, [pc, #8]	; (403534 <sysclk_get_cpu_hz+0x10>)
  40352a:	4798      	blx	r3
  40352c:	4603      	mov	r3, r0
  40352e:	4618      	mov	r0, r3
  403530:	bd80      	pop	{r7, pc}
  403532:	bf00      	nop
  403534:	00403509 	.word	0x00403509

00403538 <adc_get_config_defaults>:
  403538:	b580      	push	{r7, lr}
  40353a:	b082      	sub	sp, #8
  40353c:	af00      	add	r7, sp, #0
  40353e:	6078      	str	r0, [r7, #4]
  403540:	687b      	ldr	r3, [r7, #4]
  403542:	2200      	movs	r2, #0
  403544:	601a      	str	r2, [r3, #0]
  403546:	4b0f      	ldr	r3, [pc, #60]	; (403584 <adc_get_config_defaults+0x4c>)
  403548:	4798      	blx	r3
  40354a:	4602      	mov	r2, r0
  40354c:	687b      	ldr	r3, [r7, #4]
  40354e:	605a      	str	r2, [r3, #4]
  403550:	687b      	ldr	r3, [r7, #4]
  403552:	4a0d      	ldr	r2, [pc, #52]	; (403588 <adc_get_config_defaults+0x50>)
  403554:	609a      	str	r2, [r3, #8]
  403556:	687b      	ldr	r3, [r7, #4]
  403558:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40355c:	60da      	str	r2, [r3, #12]
  40355e:	687b      	ldr	r3, [r7, #4]
  403560:	2202      	movs	r2, #2
  403562:	741a      	strb	r2, [r3, #16]
  403564:	687b      	ldr	r3, [r7, #4]
  403566:	2202      	movs	r2, #2
  403568:	745a      	strb	r2, [r3, #17]
  40356a:	687b      	ldr	r3, [r7, #4]
  40356c:	2200      	movs	r2, #0
  40356e:	749a      	strb	r2, [r3, #18]
  403570:	687b      	ldr	r3, [r7, #4]
  403572:	2200      	movs	r2, #0
  403574:	74da      	strb	r2, [r3, #19]
  403576:	687b      	ldr	r3, [r7, #4]
  403578:	2200      	movs	r2, #0
  40357a:	751a      	strb	r2, [r3, #20]
  40357c:	bf00      	nop
  40357e:	3708      	adds	r7, #8
  403580:	46bd      	mov	sp, r7
  403582:	bd80      	pop	{r7, pc}
  403584:	00403525 	.word	0x00403525
  403588:	005b8d80 	.word	0x005b8d80

0040358c <adc_set_config>:
  40358c:	b580      	push	{r7, lr}
  40358e:	b084      	sub	sp, #16
  403590:	af00      	add	r7, sp, #0
  403592:	6078      	str	r0, [r7, #4]
  403594:	6039      	str	r1, [r7, #0]
  403596:	2300      	movs	r3, #0
  403598:	60fb      	str	r3, [r7, #12]
  40359a:	683b      	ldr	r3, [r7, #0]
  40359c:	7c9b      	ldrb	r3, [r3, #18]
  40359e:	2b00      	cmp	r3, #0
  4035a0:	d002      	beq.n	4035a8 <adc_set_config+0x1c>
  4035a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4035a6:	e000      	b.n	4035aa <adc_set_config+0x1e>
  4035a8:	2200      	movs	r2, #0
  4035aa:	683b      	ldr	r3, [r7, #0]
  4035ac:	6859      	ldr	r1, [r3, #4]
  4035ae:	683b      	ldr	r3, [r7, #0]
  4035b0:	689b      	ldr	r3, [r3, #8]
  4035b2:	005b      	lsls	r3, r3, #1
  4035b4:	fbb1 f3f3 	udiv	r3, r1, r3
  4035b8:	3b01      	subs	r3, #1
  4035ba:	021b      	lsls	r3, r3, #8
  4035bc:	b29b      	uxth	r3, r3
  4035be:	431a      	orrs	r2, r3
  4035c0:	683b      	ldr	r3, [r7, #0]
  4035c2:	7c1b      	ldrb	r3, [r3, #16]
  4035c4:	061b      	lsls	r3, r3, #24
  4035c6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  4035ca:	431a      	orrs	r2, r3
  4035cc:	683b      	ldr	r3, [r7, #0]
  4035ce:	7c5b      	ldrb	r3, [r3, #17]
  4035d0:	071b      	lsls	r3, r3, #28
  4035d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  4035d6:	431a      	orrs	r2, r3
  4035d8:	683b      	ldr	r3, [r7, #0]
  4035da:	68db      	ldr	r3, [r3, #12]
  4035dc:	4313      	orrs	r3, r2
  4035de:	60fb      	str	r3, [r7, #12]
  4035e0:	687b      	ldr	r3, [r7, #4]
  4035e2:	68fa      	ldr	r2, [r7, #12]
  4035e4:	605a      	str	r2, [r3, #4]
  4035e6:	683b      	ldr	r3, [r7, #0]
  4035e8:	7cdb      	ldrb	r3, [r3, #19]
  4035ea:	2b00      	cmp	r3, #0
  4035ec:	d002      	beq.n	4035f4 <adc_set_config+0x68>
  4035ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4035f2:	e000      	b.n	4035f6 <adc_set_config+0x6a>
  4035f4:	2200      	movs	r2, #0
  4035f6:	683b      	ldr	r3, [r7, #0]
  4035f8:	7d1b      	ldrb	r3, [r3, #20]
  4035fa:	2b00      	cmp	r3, #0
  4035fc:	d002      	beq.n	403604 <adc_set_config+0x78>
  4035fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  403602:	e000      	b.n	403606 <adc_set_config+0x7a>
  403604:	2300      	movs	r3, #0
  403606:	431a      	orrs	r2, r3
  403608:	687b      	ldr	r3, [r7, #4]
  40360a:	641a      	str	r2, [r3, #64]	; 0x40
  40360c:	683b      	ldr	r3, [r7, #0]
  40360e:	681b      	ldr	r3, [r3, #0]
  403610:	4619      	mov	r1, r3
  403612:	6878      	ldr	r0, [r7, #4]
  403614:	4b02      	ldr	r3, [pc, #8]	; (403620 <adc_set_config+0x94>)
  403616:	4798      	blx	r3
  403618:	bf00      	nop
  40361a:	3710      	adds	r7, #16
  40361c:	46bd      	mov	sp, r7
  40361e:	bd80      	pop	{r7, pc}
  403620:	00403685 	.word	0x00403685

00403624 <adc_init>:
  403624:	b580      	push	{r7, lr}
  403626:	b084      	sub	sp, #16
  403628:	af00      	add	r7, sp, #0
  40362a:	6078      	str	r0, [r7, #4]
  40362c:	6039      	str	r1, [r7, #0]
  40362e:	6878      	ldr	r0, [r7, #4]
  403630:	4b11      	ldr	r3, [pc, #68]	; (403678 <adc_init+0x54>)
  403632:	4798      	blx	r3
  403634:	4603      	mov	r3, r0
  403636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40363a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  40363e:	d101      	bne.n	403644 <adc_init+0x20>
  403640:	2319      	movs	r3, #25
  403642:	e015      	b.n	403670 <adc_init+0x4c>
  403644:	687b      	ldr	r3, [r7, #4]
  403646:	2201      	movs	r2, #1
  403648:	601a      	str	r2, [r3, #0]
  40364a:	6839      	ldr	r1, [r7, #0]
  40364c:	6878      	ldr	r0, [r7, #4]
  40364e:	4b0b      	ldr	r3, [pc, #44]	; (40367c <adc_init+0x58>)
  403650:	4798      	blx	r3
  403652:	2300      	movs	r3, #0
  403654:	60fb      	str	r3, [r7, #12]
  403656:	e007      	b.n	403668 <adc_init+0x44>
  403658:	4a09      	ldr	r2, [pc, #36]	; (403680 <adc_init+0x5c>)
  40365a:	68fb      	ldr	r3, [r7, #12]
  40365c:	2100      	movs	r1, #0
  40365e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  403662:	68fb      	ldr	r3, [r7, #12]
  403664:	3301      	adds	r3, #1
  403666:	60fb      	str	r3, [r7, #12]
  403668:	68fb      	ldr	r3, [r7, #12]
  40366a:	2b17      	cmp	r3, #23
  40366c:	d9f4      	bls.n	403658 <adc_init+0x34>
  40366e:	2300      	movs	r3, #0
  403670:	4618      	mov	r0, r3
  403672:	3710      	adds	r7, #16
  403674:	46bd      	mov	sp, r7
  403676:	bd80      	pop	{r7, pc}
  403678:	00403439 	.word	0x00403439
  40367c:	0040358d 	.word	0x0040358d
  403680:	20000898 	.word	0x20000898

00403684 <adc_set_resolution>:
  403684:	b480      	push	{r7}
  403686:	b083      	sub	sp, #12
  403688:	af00      	add	r7, sp, #0
  40368a:	6078      	str	r0, [r7, #4]
  40368c:	6039      	str	r1, [r7, #0]
  40368e:	687b      	ldr	r3, [r7, #4]
  403690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  403692:	683b      	ldr	r3, [r7, #0]
  403694:	431a      	orrs	r2, r3
  403696:	687b      	ldr	r3, [r7, #4]
  403698:	641a      	str	r2, [r3, #64]	; 0x40
  40369a:	bf00      	nop
  40369c:	370c      	adds	r7, #12
  40369e:	46bd      	mov	sp, r7
  4036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036a4:	4770      	bx	lr
	...

004036a8 <adc_interrupt>:
  4036a8:	b580      	push	{r7, lr}
  4036aa:	b082      	sub	sp, #8
  4036ac:	af00      	add	r7, sp, #0
  4036ae:	6078      	str	r0, [r7, #4]
  4036b0:	4a07      	ldr	r2, [pc, #28]	; (4036d0 <adc_interrupt+0x28>)
  4036b2:	687b      	ldr	r3, [r7, #4]
  4036b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4036b8:	2b00      	cmp	r3, #0
  4036ba:	d004      	beq.n	4036c6 <adc_interrupt+0x1e>
  4036bc:	4a04      	ldr	r2, [pc, #16]	; (4036d0 <adc_interrupt+0x28>)
  4036be:	687b      	ldr	r3, [r7, #4]
  4036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4036c4:	4798      	blx	r3
  4036c6:	bf00      	nop
  4036c8:	3708      	adds	r7, #8
  4036ca:	46bd      	mov	sp, r7
  4036cc:	bd80      	pop	{r7, pc}
  4036ce:	bf00      	nop
  4036d0:	20000898 	.word	0x20000898

004036d4 <adc_process_callback>:
  4036d4:	b580      	push	{r7, lr}
  4036d6:	b084      	sub	sp, #16
  4036d8:	af00      	add	r7, sp, #0
  4036da:	6078      	str	r0, [r7, #4]
  4036dc:	6878      	ldr	r0, [r7, #4]
  4036de:	4b0e      	ldr	r3, [pc, #56]	; (403718 <adc_process_callback+0x44>)
  4036e0:	4798      	blx	r3
  4036e2:	4603      	mov	r3, r0
  4036e4:	60bb      	str	r3, [r7, #8]
  4036e6:	2300      	movs	r3, #0
  4036e8:	60fb      	str	r3, [r7, #12]
  4036ea:	e00d      	b.n	403708 <adc_process_callback+0x34>
  4036ec:	4a0b      	ldr	r2, [pc, #44]	; (40371c <adc_process_callback+0x48>)
  4036ee:	68fb      	ldr	r3, [r7, #12]
  4036f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4036f4:	68bb      	ldr	r3, [r7, #8]
  4036f6:	4013      	ands	r3, r2
  4036f8:	2b00      	cmp	r3, #0
  4036fa:	d002      	beq.n	403702 <adc_process_callback+0x2e>
  4036fc:	68f8      	ldr	r0, [r7, #12]
  4036fe:	4b08      	ldr	r3, [pc, #32]	; (403720 <adc_process_callback+0x4c>)
  403700:	4798      	blx	r3
  403702:	68fb      	ldr	r3, [r7, #12]
  403704:	3301      	adds	r3, #1
  403706:	60fb      	str	r3, [r7, #12]
  403708:	68fb      	ldr	r3, [r7, #12]
  40370a:	2b17      	cmp	r3, #23
  40370c:	d9ee      	bls.n	4036ec <adc_process_callback+0x18>
  40370e:	bf00      	nop
  403710:	3710      	adds	r7, #16
  403712:	46bd      	mov	sp, r7
  403714:	bd80      	pop	{r7, pc}
  403716:	bf00      	nop
  403718:	00403439 	.word	0x00403439
  40371c:	0040c488 	.word	0x0040c488
  403720:	004036a9 	.word	0x004036a9

00403724 <ADC_Handler>:
  403724:	b580      	push	{r7, lr}
  403726:	af00      	add	r7, sp, #0
  403728:	4802      	ldr	r0, [pc, #8]	; (403734 <ADC_Handler+0x10>)
  40372a:	4b03      	ldr	r3, [pc, #12]	; (403738 <ADC_Handler+0x14>)
  40372c:	4798      	blx	r3
  40372e:	bf00      	nop
  403730:	bd80      	pop	{r7, pc}
  403732:	bf00      	nop
  403734:	40038000 	.word	0x40038000
  403738:	004036d5 	.word	0x004036d5

0040373c <adc_enable>:
  40373c:	b580      	push	{r7, lr}
  40373e:	af00      	add	r7, sp, #0
  403740:	201d      	movs	r0, #29
  403742:	4b03      	ldr	r3, [pc, #12]	; (403750 <adc_enable+0x14>)
  403744:	4798      	blx	r3
  403746:	2000      	movs	r0, #0
  403748:	4b02      	ldr	r3, [pc, #8]	; (403754 <adc_enable+0x18>)
  40374a:	4798      	blx	r3
  40374c:	bf00      	nop
  40374e:	bd80      	pop	{r7, pc}
  403750:	00404375 	.word	0x00404375
  403754:	00403451 	.word	0x00403451

00403758 <cpu_irq_save>:
  403758:	b480      	push	{r7}
  40375a:	b083      	sub	sp, #12
  40375c:	af00      	add	r7, sp, #0
  40375e:	f3ef 8310 	mrs	r3, PRIMASK
  403762:	607b      	str	r3, [r7, #4]
  403764:	687b      	ldr	r3, [r7, #4]
  403766:	2b00      	cmp	r3, #0
  403768:	bf0c      	ite	eq
  40376a:	2301      	moveq	r3, #1
  40376c:	2300      	movne	r3, #0
  40376e:	b2db      	uxtb	r3, r3
  403770:	603b      	str	r3, [r7, #0]
  403772:	b672      	cpsid	i
  403774:	f3bf 8f5f 	dmb	sy
  403778:	4b04      	ldr	r3, [pc, #16]	; (40378c <cpu_irq_save+0x34>)
  40377a:	2200      	movs	r2, #0
  40377c:	701a      	strb	r2, [r3, #0]
  40377e:	683b      	ldr	r3, [r7, #0]
  403780:	4618      	mov	r0, r3
  403782:	370c      	adds	r7, #12
  403784:	46bd      	mov	sp, r7
  403786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40378a:	4770      	bx	lr
  40378c:	20000114 	.word	0x20000114

00403790 <cpu_irq_is_enabled_flags>:
  403790:	b480      	push	{r7}
  403792:	b083      	sub	sp, #12
  403794:	af00      	add	r7, sp, #0
  403796:	6078      	str	r0, [r7, #4]
  403798:	687b      	ldr	r3, [r7, #4]
  40379a:	2b00      	cmp	r3, #0
  40379c:	bf14      	ite	ne
  40379e:	2301      	movne	r3, #1
  4037a0:	2300      	moveq	r3, #0
  4037a2:	b2db      	uxtb	r3, r3
  4037a4:	4618      	mov	r0, r3
  4037a6:	370c      	adds	r7, #12
  4037a8:	46bd      	mov	sp, r7
  4037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037ae:	4770      	bx	lr

004037b0 <cpu_irq_restore>:
  4037b0:	b580      	push	{r7, lr}
  4037b2:	b082      	sub	sp, #8
  4037b4:	af00      	add	r7, sp, #0
  4037b6:	6078      	str	r0, [r7, #4]
  4037b8:	6878      	ldr	r0, [r7, #4]
  4037ba:	4b07      	ldr	r3, [pc, #28]	; (4037d8 <cpu_irq_restore+0x28>)
  4037bc:	4798      	blx	r3
  4037be:	4603      	mov	r3, r0
  4037c0:	2b00      	cmp	r3, #0
  4037c2:	d005      	beq.n	4037d0 <cpu_irq_restore+0x20>
  4037c4:	4b05      	ldr	r3, [pc, #20]	; (4037dc <cpu_irq_restore+0x2c>)
  4037c6:	2201      	movs	r2, #1
  4037c8:	701a      	strb	r2, [r3, #0]
  4037ca:	f3bf 8f5f 	dmb	sy
  4037ce:	b662      	cpsie	i
  4037d0:	bf00      	nop
  4037d2:	3708      	adds	r7, #8
  4037d4:	46bd      	mov	sp, r7
  4037d6:	bd80      	pop	{r7, pc}
  4037d8:	00403791 	.word	0x00403791
  4037dc:	20000114 	.word	0x20000114

004037e0 <sysclk_enable_peripheral_clock>:
  4037e0:	b580      	push	{r7, lr}
  4037e2:	b082      	sub	sp, #8
  4037e4:	af00      	add	r7, sp, #0
  4037e6:	6078      	str	r0, [r7, #4]
  4037e8:	6878      	ldr	r0, [r7, #4]
  4037ea:	4b03      	ldr	r3, [pc, #12]	; (4037f8 <sysclk_enable_peripheral_clock+0x18>)
  4037ec:	4798      	blx	r3
  4037ee:	bf00      	nop
  4037f0:	3708      	adds	r7, #8
  4037f2:	46bd      	mov	sp, r7
  4037f4:	bd80      	pop	{r7, pc}
  4037f6:	bf00      	nop
  4037f8:	00404375 	.word	0x00404375

004037fc <sleepmgr_lock_mode>:
  4037fc:	b580      	push	{r7, lr}
  4037fe:	b084      	sub	sp, #16
  403800:	af00      	add	r7, sp, #0
  403802:	4603      	mov	r3, r0
  403804:	71fb      	strb	r3, [r7, #7]
  403806:	79fb      	ldrb	r3, [r7, #7]
  403808:	4a0a      	ldr	r2, [pc, #40]	; (403834 <sleepmgr_lock_mode+0x38>)
  40380a:	5cd3      	ldrb	r3, [r2, r3]
  40380c:	2bff      	cmp	r3, #255	; 0xff
  40380e:	d100      	bne.n	403812 <sleepmgr_lock_mode+0x16>
  403810:	e7fe      	b.n	403810 <sleepmgr_lock_mode+0x14>
  403812:	4b09      	ldr	r3, [pc, #36]	; (403838 <sleepmgr_lock_mode+0x3c>)
  403814:	4798      	blx	r3
  403816:	60f8      	str	r0, [r7, #12]
  403818:	79fb      	ldrb	r3, [r7, #7]
  40381a:	4a06      	ldr	r2, [pc, #24]	; (403834 <sleepmgr_lock_mode+0x38>)
  40381c:	5cd2      	ldrb	r2, [r2, r3]
  40381e:	3201      	adds	r2, #1
  403820:	b2d1      	uxtb	r1, r2
  403822:	4a04      	ldr	r2, [pc, #16]	; (403834 <sleepmgr_lock_mode+0x38>)
  403824:	54d1      	strb	r1, [r2, r3]
  403826:	68f8      	ldr	r0, [r7, #12]
  403828:	4b04      	ldr	r3, [pc, #16]	; (40383c <sleepmgr_lock_mode+0x40>)
  40382a:	4798      	blx	r3
  40382c:	bf00      	nop
  40382e:	3710      	adds	r7, #16
  403830:	46bd      	mov	sp, r7
  403832:	bd80      	pop	{r7, pc}
  403834:	20000870 	.word	0x20000870
  403838:	00403759 	.word	0x00403759
  40383c:	004037b1 	.word	0x004037b1

00403840 <flexcom_enable>:
  403840:	b580      	push	{r7, lr}
  403842:	b082      	sub	sp, #8
  403844:	af00      	add	r7, sp, #0
  403846:	6078      	str	r0, [r7, #4]
  403848:	2000      	movs	r0, #0
  40384a:	4b4a      	ldr	r3, [pc, #296]	; (403974 <flexcom_enable+0x134>)
  40384c:	4798      	blx	r3
  40384e:	687b      	ldr	r3, [r7, #4]
  403850:	4a49      	ldr	r2, [pc, #292]	; (403978 <flexcom_enable+0x138>)
  403852:	4293      	cmp	r3, r2
  403854:	d10d      	bne.n	403872 <flexcom_enable+0x32>
  403856:	2007      	movs	r0, #7
  403858:	4b48      	ldr	r3, [pc, #288]	; (40397c <flexcom_enable+0x13c>)
  40385a:	4798      	blx	r3
  40385c:	2007      	movs	r0, #7
  40385e:	4b48      	ldr	r3, [pc, #288]	; (403980 <flexcom_enable+0x140>)
  403860:	4798      	blx	r3
  403862:	2100      	movs	r1, #0
  403864:	2007      	movs	r0, #7
  403866:	4b47      	ldr	r3, [pc, #284]	; (403984 <flexcom_enable+0x144>)
  403868:	4798      	blx	r3
  40386a:	2007      	movs	r0, #7
  40386c:	4b46      	ldr	r3, [pc, #280]	; (403988 <flexcom_enable+0x148>)
  40386e:	4798      	blx	r3
  403870:	e07c      	b.n	40396c <flexcom_enable+0x12c>
  403872:	687b      	ldr	r3, [r7, #4]
  403874:	4a45      	ldr	r2, [pc, #276]	; (40398c <flexcom_enable+0x14c>)
  403876:	4293      	cmp	r3, r2
  403878:	d10d      	bne.n	403896 <flexcom_enable+0x56>
  40387a:	2016      	movs	r0, #22
  40387c:	4b3f      	ldr	r3, [pc, #252]	; (40397c <flexcom_enable+0x13c>)
  40387e:	4798      	blx	r3
  403880:	2007      	movs	r0, #7
  403882:	4b3f      	ldr	r3, [pc, #252]	; (403980 <flexcom_enable+0x140>)
  403884:	4798      	blx	r3
  403886:	2100      	movs	r1, #0
  403888:	2007      	movs	r0, #7
  40388a:	4b3e      	ldr	r3, [pc, #248]	; (403984 <flexcom_enable+0x144>)
  40388c:	4798      	blx	r3
  40388e:	2007      	movs	r0, #7
  403890:	4b3d      	ldr	r3, [pc, #244]	; (403988 <flexcom_enable+0x148>)
  403892:	4798      	blx	r3
  403894:	e06a      	b.n	40396c <flexcom_enable+0x12c>
  403896:	687b      	ldr	r3, [r7, #4]
  403898:	4a3d      	ldr	r2, [pc, #244]	; (403990 <flexcom_enable+0x150>)
  40389a:	4293      	cmp	r3, r2
  40389c:	d10d      	bne.n	4038ba <flexcom_enable+0x7a>
  40389e:	2015      	movs	r0, #21
  4038a0:	4b36      	ldr	r3, [pc, #216]	; (40397c <flexcom_enable+0x13c>)
  4038a2:	4798      	blx	r3
  4038a4:	2007      	movs	r0, #7
  4038a6:	4b36      	ldr	r3, [pc, #216]	; (403980 <flexcom_enable+0x140>)
  4038a8:	4798      	blx	r3
  4038aa:	2100      	movs	r1, #0
  4038ac:	2007      	movs	r0, #7
  4038ae:	4b35      	ldr	r3, [pc, #212]	; (403984 <flexcom_enable+0x144>)
  4038b0:	4798      	blx	r3
  4038b2:	2007      	movs	r0, #7
  4038b4:	4b34      	ldr	r3, [pc, #208]	; (403988 <flexcom_enable+0x148>)
  4038b6:	4798      	blx	r3
  4038b8:	e058      	b.n	40396c <flexcom_enable+0x12c>
  4038ba:	687b      	ldr	r3, [r7, #4]
  4038bc:	4a35      	ldr	r2, [pc, #212]	; (403994 <flexcom_enable+0x154>)
  4038be:	4293      	cmp	r3, r2
  4038c0:	d10d      	bne.n	4038de <flexcom_enable+0x9e>
  4038c2:	2014      	movs	r0, #20
  4038c4:	4b2d      	ldr	r3, [pc, #180]	; (40397c <flexcom_enable+0x13c>)
  4038c6:	4798      	blx	r3
  4038c8:	2007      	movs	r0, #7
  4038ca:	4b2d      	ldr	r3, [pc, #180]	; (403980 <flexcom_enable+0x140>)
  4038cc:	4798      	blx	r3
  4038ce:	2100      	movs	r1, #0
  4038d0:	2007      	movs	r0, #7
  4038d2:	4b2c      	ldr	r3, [pc, #176]	; (403984 <flexcom_enable+0x144>)
  4038d4:	4798      	blx	r3
  4038d6:	2007      	movs	r0, #7
  4038d8:	4b2b      	ldr	r3, [pc, #172]	; (403988 <flexcom_enable+0x148>)
  4038da:	4798      	blx	r3
  4038dc:	e046      	b.n	40396c <flexcom_enable+0x12c>
  4038de:	687b      	ldr	r3, [r7, #4]
  4038e0:	4a2d      	ldr	r2, [pc, #180]	; (403998 <flexcom_enable+0x158>)
  4038e2:	4293      	cmp	r3, r2
  4038e4:	d10d      	bne.n	403902 <flexcom_enable+0xc2>
  4038e6:	2013      	movs	r0, #19
  4038e8:	4b24      	ldr	r3, [pc, #144]	; (40397c <flexcom_enable+0x13c>)
  4038ea:	4798      	blx	r3
  4038ec:	2006      	movs	r0, #6
  4038ee:	4b24      	ldr	r3, [pc, #144]	; (403980 <flexcom_enable+0x140>)
  4038f0:	4798      	blx	r3
  4038f2:	2100      	movs	r1, #0
  4038f4:	2006      	movs	r0, #6
  4038f6:	4b23      	ldr	r3, [pc, #140]	; (403984 <flexcom_enable+0x144>)
  4038f8:	4798      	blx	r3
  4038fa:	2006      	movs	r0, #6
  4038fc:	4b22      	ldr	r3, [pc, #136]	; (403988 <flexcom_enable+0x148>)
  4038fe:	4798      	blx	r3
  403900:	e034      	b.n	40396c <flexcom_enable+0x12c>
  403902:	687b      	ldr	r3, [r7, #4]
  403904:	4a25      	ldr	r2, [pc, #148]	; (40399c <flexcom_enable+0x15c>)
  403906:	4293      	cmp	r3, r2
  403908:	d10d      	bne.n	403926 <flexcom_enable+0xe6>
  40390a:	200e      	movs	r0, #14
  40390c:	4b1b      	ldr	r3, [pc, #108]	; (40397c <flexcom_enable+0x13c>)
  40390e:	4798      	blx	r3
  403910:	2006      	movs	r0, #6
  403912:	4b1b      	ldr	r3, [pc, #108]	; (403980 <flexcom_enable+0x140>)
  403914:	4798      	blx	r3
  403916:	2100      	movs	r1, #0
  403918:	2006      	movs	r0, #6
  40391a:	4b1a      	ldr	r3, [pc, #104]	; (403984 <flexcom_enable+0x144>)
  40391c:	4798      	blx	r3
  40391e:	2006      	movs	r0, #6
  403920:	4b19      	ldr	r3, [pc, #100]	; (403988 <flexcom_enable+0x148>)
  403922:	4798      	blx	r3
  403924:	e022      	b.n	40396c <flexcom_enable+0x12c>
  403926:	687b      	ldr	r3, [r7, #4]
  403928:	4a1d      	ldr	r2, [pc, #116]	; (4039a0 <flexcom_enable+0x160>)
  40392a:	4293      	cmp	r3, r2
  40392c:	d10d      	bne.n	40394a <flexcom_enable+0x10a>
  40392e:	2009      	movs	r0, #9
  403930:	4b12      	ldr	r3, [pc, #72]	; (40397c <flexcom_enable+0x13c>)
  403932:	4798      	blx	r3
  403934:	2006      	movs	r0, #6
  403936:	4b12      	ldr	r3, [pc, #72]	; (403980 <flexcom_enable+0x140>)
  403938:	4798      	blx	r3
  40393a:	2100      	movs	r1, #0
  40393c:	2006      	movs	r0, #6
  40393e:	4b11      	ldr	r3, [pc, #68]	; (403984 <flexcom_enable+0x144>)
  403940:	4798      	blx	r3
  403942:	2006      	movs	r0, #6
  403944:	4b10      	ldr	r3, [pc, #64]	; (403988 <flexcom_enable+0x148>)
  403946:	4798      	blx	r3
  403948:	e010      	b.n	40396c <flexcom_enable+0x12c>
  40394a:	687b      	ldr	r3, [r7, #4]
  40394c:	4a15      	ldr	r2, [pc, #84]	; (4039a4 <flexcom_enable+0x164>)
  40394e:	4293      	cmp	r3, r2
  403950:	d10c      	bne.n	40396c <flexcom_enable+0x12c>
  403952:	2008      	movs	r0, #8
  403954:	4b09      	ldr	r3, [pc, #36]	; (40397c <flexcom_enable+0x13c>)
  403956:	4798      	blx	r3
  403958:	2006      	movs	r0, #6
  40395a:	4b09      	ldr	r3, [pc, #36]	; (403980 <flexcom_enable+0x140>)
  40395c:	4798      	blx	r3
  40395e:	2100      	movs	r1, #0
  403960:	2006      	movs	r0, #6
  403962:	4b08      	ldr	r3, [pc, #32]	; (403984 <flexcom_enable+0x144>)
  403964:	4798      	blx	r3
  403966:	2006      	movs	r0, #6
  403968:	4b07      	ldr	r3, [pc, #28]	; (403988 <flexcom_enable+0x148>)
  40396a:	4798      	blx	r3
  40396c:	bf00      	nop
  40396e:	3708      	adds	r7, #8
  403970:	46bd      	mov	sp, r7
  403972:	bd80      	pop	{r7, pc}
  403974:	004037fd 	.word	0x004037fd
  403978:	40034000 	.word	0x40034000
  40397c:	004037e1 	.word	0x004037e1
  403980:	004044d1 	.word	0x004044d1
  403984:	00404451 	.word	0x00404451
  403988:	004044a9 	.word	0x004044a9
  40398c:	40040000 	.word	0x40040000
  403990:	40008000 	.word	0x40008000
  403994:	4001c000 	.word	0x4001c000
  403998:	40018000 	.word	0x40018000
  40399c:	40024000 	.word	0x40024000
  4039a0:	40020000 	.word	0x40020000
  4039a4:	4000c000 	.word	0x4000c000

004039a8 <flexcom_set_opmode>:
  4039a8:	b480      	push	{r7}
  4039aa:	b083      	sub	sp, #12
  4039ac:	af00      	add	r7, sp, #0
  4039ae:	6078      	str	r0, [r7, #4]
  4039b0:	460b      	mov	r3, r1
  4039b2:	70fb      	strb	r3, [r7, #3]
  4039b4:	78fa      	ldrb	r2, [r7, #3]
  4039b6:	687b      	ldr	r3, [r7, #4]
  4039b8:	601a      	str	r2, [r3, #0]
  4039ba:	bf00      	nop
  4039bc:	370c      	adds	r7, #12
  4039be:	46bd      	mov	sp, r7
  4039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039c4:	4770      	bx	lr

004039c6 <pdc_rx_init>:
  4039c6:	b480      	push	{r7}
  4039c8:	b085      	sub	sp, #20
  4039ca:	af00      	add	r7, sp, #0
  4039cc:	60f8      	str	r0, [r7, #12]
  4039ce:	60b9      	str	r1, [r7, #8]
  4039d0:	607a      	str	r2, [r7, #4]
  4039d2:	68bb      	ldr	r3, [r7, #8]
  4039d4:	2b00      	cmp	r3, #0
  4039d6:	d007      	beq.n	4039e8 <pdc_rx_init+0x22>
  4039d8:	68bb      	ldr	r3, [r7, #8]
  4039da:	681a      	ldr	r2, [r3, #0]
  4039dc:	68fb      	ldr	r3, [r7, #12]
  4039de:	601a      	str	r2, [r3, #0]
  4039e0:	68bb      	ldr	r3, [r7, #8]
  4039e2:	685a      	ldr	r2, [r3, #4]
  4039e4:	68fb      	ldr	r3, [r7, #12]
  4039e6:	605a      	str	r2, [r3, #4]
  4039e8:	687b      	ldr	r3, [r7, #4]
  4039ea:	2b00      	cmp	r3, #0
  4039ec:	d007      	beq.n	4039fe <pdc_rx_init+0x38>
  4039ee:	687b      	ldr	r3, [r7, #4]
  4039f0:	681a      	ldr	r2, [r3, #0]
  4039f2:	68fb      	ldr	r3, [r7, #12]
  4039f4:	611a      	str	r2, [r3, #16]
  4039f6:	687b      	ldr	r3, [r7, #4]
  4039f8:	685a      	ldr	r2, [r3, #4]
  4039fa:	68fb      	ldr	r3, [r7, #12]
  4039fc:	615a      	str	r2, [r3, #20]
  4039fe:	bf00      	nop
  403a00:	3714      	adds	r7, #20
  403a02:	46bd      	mov	sp, r7
  403a04:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a08:	4770      	bx	lr

00403a0a <pdc_enable_transfer>:
  403a0a:	b480      	push	{r7}
  403a0c:	b083      	sub	sp, #12
  403a0e:	af00      	add	r7, sp, #0
  403a10:	6078      	str	r0, [r7, #4]
  403a12:	6039      	str	r1, [r7, #0]
  403a14:	683a      	ldr	r2, [r7, #0]
  403a16:	f240 1301 	movw	r3, #257	; 0x101
  403a1a:	4013      	ands	r3, r2
  403a1c:	687a      	ldr	r2, [r7, #4]
  403a1e:	6213      	str	r3, [r2, #32]
  403a20:	bf00      	nop
  403a22:	370c      	adds	r7, #12
  403a24:	46bd      	mov	sp, r7
  403a26:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a2a:	4770      	bx	lr

00403a2c <pdc_disable_transfer>:
  403a2c:	b480      	push	{r7}
  403a2e:	b083      	sub	sp, #12
  403a30:	af00      	add	r7, sp, #0
  403a32:	6078      	str	r0, [r7, #4]
  403a34:	6039      	str	r1, [r7, #0]
  403a36:	683a      	ldr	r2, [r7, #0]
  403a38:	f240 2302 	movw	r3, #514	; 0x202
  403a3c:	4013      	ands	r3, r2
  403a3e:	687a      	ldr	r2, [r7, #4]
  403a40:	6213      	str	r3, [r2, #32]
  403a42:	bf00      	nop
  403a44:	370c      	adds	r7, #12
  403a46:	46bd      	mov	sp, r7
  403a48:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a4c:	4770      	bx	lr

00403a4e <pio_pull_up>:
  403a4e:	b480      	push	{r7}
  403a50:	b085      	sub	sp, #20
  403a52:	af00      	add	r7, sp, #0
  403a54:	60f8      	str	r0, [r7, #12]
  403a56:	60b9      	str	r1, [r7, #8]
  403a58:	607a      	str	r2, [r7, #4]
  403a5a:	687b      	ldr	r3, [r7, #4]
  403a5c:	2b00      	cmp	r3, #0
  403a5e:	d003      	beq.n	403a68 <pio_pull_up+0x1a>
  403a60:	68fb      	ldr	r3, [r7, #12]
  403a62:	68ba      	ldr	r2, [r7, #8]
  403a64:	665a      	str	r2, [r3, #100]	; 0x64
  403a66:	e002      	b.n	403a6e <pio_pull_up+0x20>
  403a68:	68fb      	ldr	r3, [r7, #12]
  403a6a:	68ba      	ldr	r2, [r7, #8]
  403a6c:	661a      	str	r2, [r3, #96]	; 0x60
  403a6e:	bf00      	nop
  403a70:	3714      	adds	r7, #20
  403a72:	46bd      	mov	sp, r7
  403a74:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a78:	4770      	bx	lr

00403a7a <pio_set_peripheral>:
  403a7a:	b480      	push	{r7}
  403a7c:	b087      	sub	sp, #28
  403a7e:	af00      	add	r7, sp, #0
  403a80:	60f8      	str	r0, [r7, #12]
  403a82:	60b9      	str	r1, [r7, #8]
  403a84:	607a      	str	r2, [r7, #4]
  403a86:	68fb      	ldr	r3, [r7, #12]
  403a88:	687a      	ldr	r2, [r7, #4]
  403a8a:	645a      	str	r2, [r3, #68]	; 0x44
  403a8c:	68bb      	ldr	r3, [r7, #8]
  403a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403a92:	d02b      	beq.n	403aec <pio_set_peripheral+0x72>
  403a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403a98:	d805      	bhi.n	403aa6 <pio_set_peripheral+0x2c>
  403a9a:	2b00      	cmp	r3, #0
  403a9c:	d03f      	beq.n	403b1e <pio_set_peripheral+0xa4>
  403a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403aa2:	d00a      	beq.n	403aba <pio_set_peripheral+0x40>
  403aa4:	e037      	b.n	403b16 <pio_set_peripheral+0x9c>
  403aa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403aaa:	d038      	beq.n	403b1e <pio_set_peripheral+0xa4>
  403aac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403ab0:	d035      	beq.n	403b1e <pio_set_peripheral+0xa4>
  403ab2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403ab6:	d032      	beq.n	403b1e <pio_set_peripheral+0xa4>
  403ab8:	e02d      	b.n	403b16 <pio_set_peripheral+0x9c>
  403aba:	68fb      	ldr	r3, [r7, #12]
  403abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403abe:	617b      	str	r3, [r7, #20]
  403ac0:	68fb      	ldr	r3, [r7, #12]
  403ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403ac4:	687b      	ldr	r3, [r7, #4]
  403ac6:	43d9      	mvns	r1, r3
  403ac8:	697b      	ldr	r3, [r7, #20]
  403aca:	400b      	ands	r3, r1
  403acc:	401a      	ands	r2, r3
  403ace:	68fb      	ldr	r3, [r7, #12]
  403ad0:	671a      	str	r2, [r3, #112]	; 0x70
  403ad2:	68fb      	ldr	r3, [r7, #12]
  403ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403ad6:	617b      	str	r3, [r7, #20]
  403ad8:	68fb      	ldr	r3, [r7, #12]
  403ada:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403adc:	687b      	ldr	r3, [r7, #4]
  403ade:	43d9      	mvns	r1, r3
  403ae0:	697b      	ldr	r3, [r7, #20]
  403ae2:	400b      	ands	r3, r1
  403ae4:	401a      	ands	r2, r3
  403ae6:	68fb      	ldr	r3, [r7, #12]
  403ae8:	675a      	str	r2, [r3, #116]	; 0x74
  403aea:	e014      	b.n	403b16 <pio_set_peripheral+0x9c>
  403aec:	68fb      	ldr	r3, [r7, #12]
  403aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403af0:	617b      	str	r3, [r7, #20]
  403af2:	687a      	ldr	r2, [r7, #4]
  403af4:	697b      	ldr	r3, [r7, #20]
  403af6:	431a      	orrs	r2, r3
  403af8:	68fb      	ldr	r3, [r7, #12]
  403afa:	671a      	str	r2, [r3, #112]	; 0x70
  403afc:	68fb      	ldr	r3, [r7, #12]
  403afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403b00:	617b      	str	r3, [r7, #20]
  403b02:	68fb      	ldr	r3, [r7, #12]
  403b04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403b06:	687b      	ldr	r3, [r7, #4]
  403b08:	43d9      	mvns	r1, r3
  403b0a:	697b      	ldr	r3, [r7, #20]
  403b0c:	400b      	ands	r3, r1
  403b0e:	401a      	ands	r2, r3
  403b10:	68fb      	ldr	r3, [r7, #12]
  403b12:	675a      	str	r2, [r3, #116]	; 0x74
  403b14:	bf00      	nop
  403b16:	68fb      	ldr	r3, [r7, #12]
  403b18:	687a      	ldr	r2, [r7, #4]
  403b1a:	605a      	str	r2, [r3, #4]
  403b1c:	e000      	b.n	403b20 <pio_set_peripheral+0xa6>
  403b1e:	bf00      	nop
  403b20:	371c      	adds	r7, #28
  403b22:	46bd      	mov	sp, r7
  403b24:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b28:	4770      	bx	lr
	...

00403b2c <pio_set_input>:
  403b2c:	b580      	push	{r7, lr}
  403b2e:	b084      	sub	sp, #16
  403b30:	af00      	add	r7, sp, #0
  403b32:	60f8      	str	r0, [r7, #12]
  403b34:	60b9      	str	r1, [r7, #8]
  403b36:	607a      	str	r2, [r7, #4]
  403b38:	68b9      	ldr	r1, [r7, #8]
  403b3a:	68f8      	ldr	r0, [r7, #12]
  403b3c:	4b15      	ldr	r3, [pc, #84]	; (403b94 <pio_set_input+0x68>)
  403b3e:	4798      	blx	r3
  403b40:	687b      	ldr	r3, [r7, #4]
  403b42:	f003 030a 	and.w	r3, r3, #10
  403b46:	2b00      	cmp	r3, #0
  403b48:	d003      	beq.n	403b52 <pio_set_input+0x26>
  403b4a:	68fb      	ldr	r3, [r7, #12]
  403b4c:	68ba      	ldr	r2, [r7, #8]
  403b4e:	621a      	str	r2, [r3, #32]
  403b50:	e002      	b.n	403b58 <pio_set_input+0x2c>
  403b52:	68fb      	ldr	r3, [r7, #12]
  403b54:	68ba      	ldr	r2, [r7, #8]
  403b56:	625a      	str	r2, [r3, #36]	; 0x24
  403b58:	687b      	ldr	r3, [r7, #4]
  403b5a:	f003 0302 	and.w	r3, r3, #2
  403b5e:	2b00      	cmp	r3, #0
  403b60:	d004      	beq.n	403b6c <pio_set_input+0x40>
  403b62:	68fb      	ldr	r3, [r7, #12]
  403b64:	68ba      	ldr	r2, [r7, #8]
  403b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403b6a:	e008      	b.n	403b7e <pio_set_input+0x52>
  403b6c:	687b      	ldr	r3, [r7, #4]
  403b6e:	f003 0308 	and.w	r3, r3, #8
  403b72:	2b00      	cmp	r3, #0
  403b74:	d003      	beq.n	403b7e <pio_set_input+0x52>
  403b76:	68fb      	ldr	r3, [r7, #12]
  403b78:	68ba      	ldr	r2, [r7, #8]
  403b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  403b7e:	68fb      	ldr	r3, [r7, #12]
  403b80:	68ba      	ldr	r2, [r7, #8]
  403b82:	615a      	str	r2, [r3, #20]
  403b84:	68fb      	ldr	r3, [r7, #12]
  403b86:	68ba      	ldr	r2, [r7, #8]
  403b88:	601a      	str	r2, [r3, #0]
  403b8a:	bf00      	nop
  403b8c:	3710      	adds	r7, #16
  403b8e:	46bd      	mov	sp, r7
  403b90:	bd80      	pop	{r7, pc}
  403b92:	bf00      	nop
  403b94:	00403d75 	.word	0x00403d75

00403b98 <pio_set_output>:
  403b98:	b580      	push	{r7, lr}
  403b9a:	b084      	sub	sp, #16
  403b9c:	af00      	add	r7, sp, #0
  403b9e:	60f8      	str	r0, [r7, #12]
  403ba0:	60b9      	str	r1, [r7, #8]
  403ba2:	607a      	str	r2, [r7, #4]
  403ba4:	603b      	str	r3, [r7, #0]
  403ba6:	68b9      	ldr	r1, [r7, #8]
  403ba8:	68f8      	ldr	r0, [r7, #12]
  403baa:	4b12      	ldr	r3, [pc, #72]	; (403bf4 <pio_set_output+0x5c>)
  403bac:	4798      	blx	r3
  403bae:	69ba      	ldr	r2, [r7, #24]
  403bb0:	68b9      	ldr	r1, [r7, #8]
  403bb2:	68f8      	ldr	r0, [r7, #12]
  403bb4:	4b10      	ldr	r3, [pc, #64]	; (403bf8 <pio_set_output+0x60>)
  403bb6:	4798      	blx	r3
  403bb8:	683b      	ldr	r3, [r7, #0]
  403bba:	2b00      	cmp	r3, #0
  403bbc:	d003      	beq.n	403bc6 <pio_set_output+0x2e>
  403bbe:	68fb      	ldr	r3, [r7, #12]
  403bc0:	68ba      	ldr	r2, [r7, #8]
  403bc2:	651a      	str	r2, [r3, #80]	; 0x50
  403bc4:	e002      	b.n	403bcc <pio_set_output+0x34>
  403bc6:	68fb      	ldr	r3, [r7, #12]
  403bc8:	68ba      	ldr	r2, [r7, #8]
  403bca:	655a      	str	r2, [r3, #84]	; 0x54
  403bcc:	687b      	ldr	r3, [r7, #4]
  403bce:	2b00      	cmp	r3, #0
  403bd0:	d003      	beq.n	403bda <pio_set_output+0x42>
  403bd2:	68fb      	ldr	r3, [r7, #12]
  403bd4:	68ba      	ldr	r2, [r7, #8]
  403bd6:	631a      	str	r2, [r3, #48]	; 0x30
  403bd8:	e002      	b.n	403be0 <pio_set_output+0x48>
  403bda:	68fb      	ldr	r3, [r7, #12]
  403bdc:	68ba      	ldr	r2, [r7, #8]
  403bde:	635a      	str	r2, [r3, #52]	; 0x34
  403be0:	68fb      	ldr	r3, [r7, #12]
  403be2:	68ba      	ldr	r2, [r7, #8]
  403be4:	611a      	str	r2, [r3, #16]
  403be6:	68fb      	ldr	r3, [r7, #12]
  403be8:	68ba      	ldr	r2, [r7, #8]
  403bea:	601a      	str	r2, [r3, #0]
  403bec:	bf00      	nop
  403bee:	3710      	adds	r7, #16
  403bf0:	46bd      	mov	sp, r7
  403bf2:	bd80      	pop	{r7, pc}
  403bf4:	00403d75 	.word	0x00403d75
  403bf8:	00403a4f 	.word	0x00403a4f

00403bfc <pio_configure>:
  403bfc:	b590      	push	{r4, r7, lr}
  403bfe:	b087      	sub	sp, #28
  403c00:	af02      	add	r7, sp, #8
  403c02:	60f8      	str	r0, [r7, #12]
  403c04:	60b9      	str	r1, [r7, #8]
  403c06:	607a      	str	r2, [r7, #4]
  403c08:	603b      	str	r3, [r7, #0]
  403c0a:	68bb      	ldr	r3, [r7, #8]
  403c0c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403c10:	d01e      	beq.n	403c50 <pio_configure+0x54>
  403c12:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403c16:	d806      	bhi.n	403c26 <pio_configure+0x2a>
  403c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403c1c:	d00a      	beq.n	403c34 <pio_configure+0x38>
  403c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403c22:	d007      	beq.n	403c34 <pio_configure+0x38>
  403c24:	e03a      	b.n	403c9c <pio_configure+0xa0>
  403c26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403c2a:	d017      	beq.n	403c5c <pio_configure+0x60>
  403c2c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403c30:	d014      	beq.n	403c5c <pio_configure+0x60>
  403c32:	e033      	b.n	403c9c <pio_configure+0xa0>
  403c34:	687a      	ldr	r2, [r7, #4]
  403c36:	68b9      	ldr	r1, [r7, #8]
  403c38:	68f8      	ldr	r0, [r7, #12]
  403c3a:	4b1c      	ldr	r3, [pc, #112]	; (403cac <pio_configure+0xb0>)
  403c3c:	4798      	blx	r3
  403c3e:	683b      	ldr	r3, [r7, #0]
  403c40:	f003 0301 	and.w	r3, r3, #1
  403c44:	461a      	mov	r2, r3
  403c46:	6879      	ldr	r1, [r7, #4]
  403c48:	68f8      	ldr	r0, [r7, #12]
  403c4a:	4b19      	ldr	r3, [pc, #100]	; (403cb0 <pio_configure+0xb4>)
  403c4c:	4798      	blx	r3
  403c4e:	e027      	b.n	403ca0 <pio_configure+0xa4>
  403c50:	683a      	ldr	r2, [r7, #0]
  403c52:	6879      	ldr	r1, [r7, #4]
  403c54:	68f8      	ldr	r0, [r7, #12]
  403c56:	4b17      	ldr	r3, [pc, #92]	; (403cb4 <pio_configure+0xb8>)
  403c58:	4798      	blx	r3
  403c5a:	e021      	b.n	403ca0 <pio_configure+0xa4>
  403c5c:	68bb      	ldr	r3, [r7, #8]
  403c5e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403c62:	bf0c      	ite	eq
  403c64:	2301      	moveq	r3, #1
  403c66:	2300      	movne	r3, #0
  403c68:	b2db      	uxtb	r3, r3
  403c6a:	461a      	mov	r2, r3
  403c6c:	683b      	ldr	r3, [r7, #0]
  403c6e:	f003 0304 	and.w	r3, r3, #4
  403c72:	2b00      	cmp	r3, #0
  403c74:	bf14      	ite	ne
  403c76:	2301      	movne	r3, #1
  403c78:	2300      	moveq	r3, #0
  403c7a:	b2db      	uxtb	r3, r3
  403c7c:	4619      	mov	r1, r3
  403c7e:	683b      	ldr	r3, [r7, #0]
  403c80:	f003 0301 	and.w	r3, r3, #1
  403c84:	2b00      	cmp	r3, #0
  403c86:	bf14      	ite	ne
  403c88:	2301      	movne	r3, #1
  403c8a:	2300      	moveq	r3, #0
  403c8c:	b2db      	uxtb	r3, r3
  403c8e:	9300      	str	r3, [sp, #0]
  403c90:	460b      	mov	r3, r1
  403c92:	6879      	ldr	r1, [r7, #4]
  403c94:	68f8      	ldr	r0, [r7, #12]
  403c96:	4c08      	ldr	r4, [pc, #32]	; (403cb8 <pio_configure+0xbc>)
  403c98:	47a0      	blx	r4
  403c9a:	e001      	b.n	403ca0 <pio_configure+0xa4>
  403c9c:	2300      	movs	r3, #0
  403c9e:	e000      	b.n	403ca2 <pio_configure+0xa6>
  403ca0:	2301      	movs	r3, #1
  403ca2:	4618      	mov	r0, r3
  403ca4:	3714      	adds	r7, #20
  403ca6:	46bd      	mov	sp, r7
  403ca8:	bd90      	pop	{r4, r7, pc}
  403caa:	bf00      	nop
  403cac:	00403a7b 	.word	0x00403a7b
  403cb0:	00403a4f 	.word	0x00403a4f
  403cb4:	00403b2d 	.word	0x00403b2d
  403cb8:	00403b99 	.word	0x00403b99

00403cbc <pio_pull_down>:
  403cbc:	b480      	push	{r7}
  403cbe:	b085      	sub	sp, #20
  403cc0:	af00      	add	r7, sp, #0
  403cc2:	60f8      	str	r0, [r7, #12]
  403cc4:	60b9      	str	r1, [r7, #8]
  403cc6:	607a      	str	r2, [r7, #4]
  403cc8:	687b      	ldr	r3, [r7, #4]
  403cca:	2b00      	cmp	r3, #0
  403ccc:	d004      	beq.n	403cd8 <pio_pull_down+0x1c>
  403cce:	68fb      	ldr	r3, [r7, #12]
  403cd0:	68ba      	ldr	r2, [r7, #8]
  403cd2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  403cd6:	e003      	b.n	403ce0 <pio_pull_down+0x24>
  403cd8:	68fb      	ldr	r3, [r7, #12]
  403cda:	68ba      	ldr	r2, [r7, #8]
  403cdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  403ce0:	bf00      	nop
  403ce2:	3714      	adds	r7, #20
  403ce4:	46bd      	mov	sp, r7
  403ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cea:	4770      	bx	lr

00403cec <pio_configure_interrupt>:
  403cec:	b480      	push	{r7}
  403cee:	b085      	sub	sp, #20
  403cf0:	af00      	add	r7, sp, #0
  403cf2:	60f8      	str	r0, [r7, #12]
  403cf4:	60b9      	str	r1, [r7, #8]
  403cf6:	607a      	str	r2, [r7, #4]
  403cf8:	687b      	ldr	r3, [r7, #4]
  403cfa:	f003 0310 	and.w	r3, r3, #16
  403cfe:	2b00      	cmp	r3, #0
  403d00:	d020      	beq.n	403d44 <pio_configure_interrupt+0x58>
  403d02:	68fb      	ldr	r3, [r7, #12]
  403d04:	68ba      	ldr	r2, [r7, #8]
  403d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  403d0a:	687b      	ldr	r3, [r7, #4]
  403d0c:	f003 0320 	and.w	r3, r3, #32
  403d10:	2b00      	cmp	r3, #0
  403d12:	d004      	beq.n	403d1e <pio_configure_interrupt+0x32>
  403d14:	68fb      	ldr	r3, [r7, #12]
  403d16:	68ba      	ldr	r2, [r7, #8]
  403d18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  403d1c:	e003      	b.n	403d26 <pio_configure_interrupt+0x3a>
  403d1e:	68fb      	ldr	r3, [r7, #12]
  403d20:	68ba      	ldr	r2, [r7, #8]
  403d22:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  403d26:	687b      	ldr	r3, [r7, #4]
  403d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
  403d2c:	2b00      	cmp	r3, #0
  403d2e:	d004      	beq.n	403d3a <pio_configure_interrupt+0x4e>
  403d30:	68fb      	ldr	r3, [r7, #12]
  403d32:	68ba      	ldr	r2, [r7, #8]
  403d34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  403d38:	e008      	b.n	403d4c <pio_configure_interrupt+0x60>
  403d3a:	68fb      	ldr	r3, [r7, #12]
  403d3c:	68ba      	ldr	r2, [r7, #8]
  403d3e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  403d42:	e003      	b.n	403d4c <pio_configure_interrupt+0x60>
  403d44:	68fb      	ldr	r3, [r7, #12]
  403d46:	68ba      	ldr	r2, [r7, #8]
  403d48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  403d4c:	bf00      	nop
  403d4e:	3714      	adds	r7, #20
  403d50:	46bd      	mov	sp, r7
  403d52:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d56:	4770      	bx	lr

00403d58 <pio_enable_interrupt>:
  403d58:	b480      	push	{r7}
  403d5a:	b083      	sub	sp, #12
  403d5c:	af00      	add	r7, sp, #0
  403d5e:	6078      	str	r0, [r7, #4]
  403d60:	6039      	str	r1, [r7, #0]
  403d62:	687b      	ldr	r3, [r7, #4]
  403d64:	683a      	ldr	r2, [r7, #0]
  403d66:	641a      	str	r2, [r3, #64]	; 0x40
  403d68:	bf00      	nop
  403d6a:	370c      	adds	r7, #12
  403d6c:	46bd      	mov	sp, r7
  403d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d72:	4770      	bx	lr

00403d74 <pio_disable_interrupt>:
  403d74:	b480      	push	{r7}
  403d76:	b083      	sub	sp, #12
  403d78:	af00      	add	r7, sp, #0
  403d7a:	6078      	str	r0, [r7, #4]
  403d7c:	6039      	str	r1, [r7, #0]
  403d7e:	687b      	ldr	r3, [r7, #4]
  403d80:	683a      	ldr	r2, [r7, #0]
  403d82:	645a      	str	r2, [r3, #68]	; 0x44
  403d84:	bf00      	nop
  403d86:	370c      	adds	r7, #12
  403d88:	46bd      	mov	sp, r7
  403d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d8e:	4770      	bx	lr

00403d90 <pio_get_interrupt_status>:
  403d90:	b480      	push	{r7}
  403d92:	b083      	sub	sp, #12
  403d94:	af00      	add	r7, sp, #0
  403d96:	6078      	str	r0, [r7, #4]
  403d98:	687b      	ldr	r3, [r7, #4]
  403d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  403d9c:	4618      	mov	r0, r3
  403d9e:	370c      	adds	r7, #12
  403da0:	46bd      	mov	sp, r7
  403da2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403da6:	4770      	bx	lr

00403da8 <pio_get_interrupt_mask>:
  403da8:	b480      	push	{r7}
  403daa:	b083      	sub	sp, #12
  403dac:	af00      	add	r7, sp, #0
  403dae:	6078      	str	r0, [r7, #4]
  403db0:	687b      	ldr	r3, [r7, #4]
  403db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  403db4:	4618      	mov	r0, r3
  403db6:	370c      	adds	r7, #12
  403db8:	46bd      	mov	sp, r7
  403dba:	f85d 7b04 	ldr.w	r7, [sp], #4
  403dbe:	4770      	bx	lr

00403dc0 <NVIC_EnableIRQ>:
  403dc0:	b480      	push	{r7}
  403dc2:	b083      	sub	sp, #12
  403dc4:	af00      	add	r7, sp, #0
  403dc6:	4603      	mov	r3, r0
  403dc8:	71fb      	strb	r3, [r7, #7]
  403dca:	4909      	ldr	r1, [pc, #36]	; (403df0 <NVIC_EnableIRQ+0x30>)
  403dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403dd0:	095b      	lsrs	r3, r3, #5
  403dd2:	79fa      	ldrb	r2, [r7, #7]
  403dd4:	f002 021f 	and.w	r2, r2, #31
  403dd8:	2001      	movs	r0, #1
  403dda:	fa00 f202 	lsl.w	r2, r0, r2
  403dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403de2:	bf00      	nop
  403de4:	370c      	adds	r7, #12
  403de6:	46bd      	mov	sp, r7
  403de8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403dec:	4770      	bx	lr
  403dee:	bf00      	nop
  403df0:	e000e100 	.word	0xe000e100

00403df4 <NVIC_DisableIRQ>:
  403df4:	b480      	push	{r7}
  403df6:	b083      	sub	sp, #12
  403df8:	af00      	add	r7, sp, #0
  403dfa:	4603      	mov	r3, r0
  403dfc:	71fb      	strb	r3, [r7, #7]
  403dfe:	4909      	ldr	r1, [pc, #36]	; (403e24 <NVIC_DisableIRQ+0x30>)
  403e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e04:	095b      	lsrs	r3, r3, #5
  403e06:	79fa      	ldrb	r2, [r7, #7]
  403e08:	f002 021f 	and.w	r2, r2, #31
  403e0c:	2001      	movs	r0, #1
  403e0e:	fa00 f202 	lsl.w	r2, r0, r2
  403e12:	3320      	adds	r3, #32
  403e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403e18:	bf00      	nop
  403e1a:	370c      	adds	r7, #12
  403e1c:	46bd      	mov	sp, r7
  403e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e22:	4770      	bx	lr
  403e24:	e000e100 	.word	0xe000e100

00403e28 <NVIC_ClearPendingIRQ>:
  403e28:	b480      	push	{r7}
  403e2a:	b083      	sub	sp, #12
  403e2c:	af00      	add	r7, sp, #0
  403e2e:	4603      	mov	r3, r0
  403e30:	71fb      	strb	r3, [r7, #7]
  403e32:	4909      	ldr	r1, [pc, #36]	; (403e58 <NVIC_ClearPendingIRQ+0x30>)
  403e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e38:	095b      	lsrs	r3, r3, #5
  403e3a:	79fa      	ldrb	r2, [r7, #7]
  403e3c:	f002 021f 	and.w	r2, r2, #31
  403e40:	2001      	movs	r0, #1
  403e42:	fa00 f202 	lsl.w	r2, r0, r2
  403e46:	3360      	adds	r3, #96	; 0x60
  403e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403e4c:	bf00      	nop
  403e4e:	370c      	adds	r7, #12
  403e50:	46bd      	mov	sp, r7
  403e52:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e56:	4770      	bx	lr
  403e58:	e000e100 	.word	0xe000e100

00403e5c <NVIC_SetPriority>:
  403e5c:	b480      	push	{r7}
  403e5e:	b083      	sub	sp, #12
  403e60:	af00      	add	r7, sp, #0
  403e62:	4603      	mov	r3, r0
  403e64:	6039      	str	r1, [r7, #0]
  403e66:	71fb      	strb	r3, [r7, #7]
  403e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e6c:	2b00      	cmp	r3, #0
  403e6e:	da0b      	bge.n	403e88 <NVIC_SetPriority+0x2c>
  403e70:	490d      	ldr	r1, [pc, #52]	; (403ea8 <NVIC_SetPriority+0x4c>)
  403e72:	79fb      	ldrb	r3, [r7, #7]
  403e74:	f003 030f 	and.w	r3, r3, #15
  403e78:	3b04      	subs	r3, #4
  403e7a:	683a      	ldr	r2, [r7, #0]
  403e7c:	b2d2      	uxtb	r2, r2
  403e7e:	0112      	lsls	r2, r2, #4
  403e80:	b2d2      	uxtb	r2, r2
  403e82:	440b      	add	r3, r1
  403e84:	761a      	strb	r2, [r3, #24]
  403e86:	e009      	b.n	403e9c <NVIC_SetPriority+0x40>
  403e88:	4908      	ldr	r1, [pc, #32]	; (403eac <NVIC_SetPriority+0x50>)
  403e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e8e:	683a      	ldr	r2, [r7, #0]
  403e90:	b2d2      	uxtb	r2, r2
  403e92:	0112      	lsls	r2, r2, #4
  403e94:	b2d2      	uxtb	r2, r2
  403e96:	440b      	add	r3, r1
  403e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  403e9c:	bf00      	nop
  403e9e:	370c      	adds	r7, #12
  403ea0:	46bd      	mov	sp, r7
  403ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ea6:	4770      	bx	lr
  403ea8:	e000ed00 	.word	0xe000ed00
  403eac:	e000e100 	.word	0xe000e100

00403eb0 <pio_handler_process>:
  403eb0:	b580      	push	{r7, lr}
  403eb2:	b084      	sub	sp, #16
  403eb4:	af00      	add	r7, sp, #0
  403eb6:	6078      	str	r0, [r7, #4]
  403eb8:	6039      	str	r1, [r7, #0]
  403eba:	6878      	ldr	r0, [r7, #4]
  403ebc:	4b26      	ldr	r3, [pc, #152]	; (403f58 <pio_handler_process+0xa8>)
  403ebe:	4798      	blx	r3
  403ec0:	60f8      	str	r0, [r7, #12]
  403ec2:	6878      	ldr	r0, [r7, #4]
  403ec4:	4b25      	ldr	r3, [pc, #148]	; (403f5c <pio_handler_process+0xac>)
  403ec6:	4798      	blx	r3
  403ec8:	4602      	mov	r2, r0
  403eca:	68fb      	ldr	r3, [r7, #12]
  403ecc:	4013      	ands	r3, r2
  403ece:	60fb      	str	r3, [r7, #12]
  403ed0:	68fb      	ldr	r3, [r7, #12]
  403ed2:	2b00      	cmp	r3, #0
  403ed4:	d03c      	beq.n	403f50 <pio_handler_process+0xa0>
  403ed6:	2300      	movs	r3, #0
  403ed8:	60bb      	str	r3, [r7, #8]
  403eda:	e034      	b.n	403f46 <pio_handler_process+0x96>
  403edc:	4a20      	ldr	r2, [pc, #128]	; (403f60 <pio_handler_process+0xb0>)
  403ede:	68bb      	ldr	r3, [r7, #8]
  403ee0:	011b      	lsls	r3, r3, #4
  403ee2:	4413      	add	r3, r2
  403ee4:	681a      	ldr	r2, [r3, #0]
  403ee6:	683b      	ldr	r3, [r7, #0]
  403ee8:	429a      	cmp	r2, r3
  403eea:	d126      	bne.n	403f3a <pio_handler_process+0x8a>
  403eec:	4a1c      	ldr	r2, [pc, #112]	; (403f60 <pio_handler_process+0xb0>)
  403eee:	68bb      	ldr	r3, [r7, #8]
  403ef0:	011b      	lsls	r3, r3, #4
  403ef2:	4413      	add	r3, r2
  403ef4:	3304      	adds	r3, #4
  403ef6:	681a      	ldr	r2, [r3, #0]
  403ef8:	68fb      	ldr	r3, [r7, #12]
  403efa:	4013      	ands	r3, r2
  403efc:	2b00      	cmp	r3, #0
  403efe:	d01c      	beq.n	403f3a <pio_handler_process+0x8a>
  403f00:	4a17      	ldr	r2, [pc, #92]	; (403f60 <pio_handler_process+0xb0>)
  403f02:	68bb      	ldr	r3, [r7, #8]
  403f04:	011b      	lsls	r3, r3, #4
  403f06:	4413      	add	r3, r2
  403f08:	330c      	adds	r3, #12
  403f0a:	681b      	ldr	r3, [r3, #0]
  403f0c:	4914      	ldr	r1, [pc, #80]	; (403f60 <pio_handler_process+0xb0>)
  403f0e:	68ba      	ldr	r2, [r7, #8]
  403f10:	0112      	lsls	r2, r2, #4
  403f12:	440a      	add	r2, r1
  403f14:	6810      	ldr	r0, [r2, #0]
  403f16:	4912      	ldr	r1, [pc, #72]	; (403f60 <pio_handler_process+0xb0>)
  403f18:	68ba      	ldr	r2, [r7, #8]
  403f1a:	0112      	lsls	r2, r2, #4
  403f1c:	440a      	add	r2, r1
  403f1e:	3204      	adds	r2, #4
  403f20:	6812      	ldr	r2, [r2, #0]
  403f22:	4611      	mov	r1, r2
  403f24:	4798      	blx	r3
  403f26:	4a0e      	ldr	r2, [pc, #56]	; (403f60 <pio_handler_process+0xb0>)
  403f28:	68bb      	ldr	r3, [r7, #8]
  403f2a:	011b      	lsls	r3, r3, #4
  403f2c:	4413      	add	r3, r2
  403f2e:	3304      	adds	r3, #4
  403f30:	681b      	ldr	r3, [r3, #0]
  403f32:	43db      	mvns	r3, r3
  403f34:	68fa      	ldr	r2, [r7, #12]
  403f36:	4013      	ands	r3, r2
  403f38:	60fb      	str	r3, [r7, #12]
  403f3a:	68bb      	ldr	r3, [r7, #8]
  403f3c:	3301      	adds	r3, #1
  403f3e:	60bb      	str	r3, [r7, #8]
  403f40:	68bb      	ldr	r3, [r7, #8]
  403f42:	2b06      	cmp	r3, #6
  403f44:	d803      	bhi.n	403f4e <pio_handler_process+0x9e>
  403f46:	68fb      	ldr	r3, [r7, #12]
  403f48:	2b00      	cmp	r3, #0
  403f4a:	d1c7      	bne.n	403edc <pio_handler_process+0x2c>
  403f4c:	e000      	b.n	403f50 <pio_handler_process+0xa0>
  403f4e:	bf00      	nop
  403f50:	bf00      	nop
  403f52:	3710      	adds	r7, #16
  403f54:	46bd      	mov	sp, r7
  403f56:	bd80      	pop	{r7, pc}
  403f58:	00403d91 	.word	0x00403d91
  403f5c:	00403da9 	.word	0x00403da9
  403f60:	200003b0 	.word	0x200003b0

00403f64 <pio_handler_set>:
  403f64:	b580      	push	{r7, lr}
  403f66:	b086      	sub	sp, #24
  403f68:	af00      	add	r7, sp, #0
  403f6a:	60f8      	str	r0, [r7, #12]
  403f6c:	60b9      	str	r1, [r7, #8]
  403f6e:	607a      	str	r2, [r7, #4]
  403f70:	603b      	str	r3, [r7, #0]
  403f72:	4b22      	ldr	r3, [pc, #136]	; (403ffc <pio_handler_set+0x98>)
  403f74:	613b      	str	r3, [r7, #16]
  403f76:	4b22      	ldr	r3, [pc, #136]	; (404000 <pio_handler_set+0x9c>)
  403f78:	681b      	ldr	r3, [r3, #0]
  403f7a:	2b06      	cmp	r3, #6
  403f7c:	d901      	bls.n	403f82 <pio_handler_set+0x1e>
  403f7e:	2301      	movs	r3, #1
  403f80:	e038      	b.n	403ff4 <pio_handler_set+0x90>
  403f82:	2300      	movs	r3, #0
  403f84:	75fb      	strb	r3, [r7, #23]
  403f86:	e011      	b.n	403fac <pio_handler_set+0x48>
  403f88:	7dfb      	ldrb	r3, [r7, #23]
  403f8a:	011b      	lsls	r3, r3, #4
  403f8c:	4a1b      	ldr	r2, [pc, #108]	; (403ffc <pio_handler_set+0x98>)
  403f8e:	4413      	add	r3, r2
  403f90:	613b      	str	r3, [r7, #16]
  403f92:	693b      	ldr	r3, [r7, #16]
  403f94:	681a      	ldr	r2, [r3, #0]
  403f96:	68bb      	ldr	r3, [r7, #8]
  403f98:	429a      	cmp	r2, r3
  403f9a:	d104      	bne.n	403fa6 <pio_handler_set+0x42>
  403f9c:	693b      	ldr	r3, [r7, #16]
  403f9e:	685a      	ldr	r2, [r3, #4]
  403fa0:	687b      	ldr	r3, [r7, #4]
  403fa2:	429a      	cmp	r2, r3
  403fa4:	d008      	beq.n	403fb8 <pio_handler_set+0x54>
  403fa6:	7dfb      	ldrb	r3, [r7, #23]
  403fa8:	3301      	adds	r3, #1
  403faa:	75fb      	strb	r3, [r7, #23]
  403fac:	7dfa      	ldrb	r2, [r7, #23]
  403fae:	4b14      	ldr	r3, [pc, #80]	; (404000 <pio_handler_set+0x9c>)
  403fb0:	681b      	ldr	r3, [r3, #0]
  403fb2:	429a      	cmp	r2, r3
  403fb4:	d9e8      	bls.n	403f88 <pio_handler_set+0x24>
  403fb6:	e000      	b.n	403fba <pio_handler_set+0x56>
  403fb8:	bf00      	nop
  403fba:	693b      	ldr	r3, [r7, #16]
  403fbc:	68ba      	ldr	r2, [r7, #8]
  403fbe:	601a      	str	r2, [r3, #0]
  403fc0:	693b      	ldr	r3, [r7, #16]
  403fc2:	687a      	ldr	r2, [r7, #4]
  403fc4:	605a      	str	r2, [r3, #4]
  403fc6:	693b      	ldr	r3, [r7, #16]
  403fc8:	683a      	ldr	r2, [r7, #0]
  403fca:	609a      	str	r2, [r3, #8]
  403fcc:	693b      	ldr	r3, [r7, #16]
  403fce:	6a3a      	ldr	r2, [r7, #32]
  403fd0:	60da      	str	r2, [r3, #12]
  403fd2:	7dfa      	ldrb	r2, [r7, #23]
  403fd4:	4b0a      	ldr	r3, [pc, #40]	; (404000 <pio_handler_set+0x9c>)
  403fd6:	681b      	ldr	r3, [r3, #0]
  403fd8:	3301      	adds	r3, #1
  403fda:	429a      	cmp	r2, r3
  403fdc:	d104      	bne.n	403fe8 <pio_handler_set+0x84>
  403fde:	4b08      	ldr	r3, [pc, #32]	; (404000 <pio_handler_set+0x9c>)
  403fe0:	681b      	ldr	r3, [r3, #0]
  403fe2:	3301      	adds	r3, #1
  403fe4:	4a06      	ldr	r2, [pc, #24]	; (404000 <pio_handler_set+0x9c>)
  403fe6:	6013      	str	r3, [r2, #0]
  403fe8:	683a      	ldr	r2, [r7, #0]
  403fea:	6879      	ldr	r1, [r7, #4]
  403fec:	68f8      	ldr	r0, [r7, #12]
  403fee:	4b05      	ldr	r3, [pc, #20]	; (404004 <pio_handler_set+0xa0>)
  403ff0:	4798      	blx	r3
  403ff2:	2300      	movs	r3, #0
  403ff4:	4618      	mov	r0, r3
  403ff6:	3718      	adds	r7, #24
  403ff8:	46bd      	mov	sp, r7
  403ffa:	bd80      	pop	{r7, pc}
  403ffc:	200003b0 	.word	0x200003b0
  404000:	20000420 	.word	0x20000420
  404004:	00403ced 	.word	0x00403ced

00404008 <PIOB_Handler>:
  404008:	b580      	push	{r7, lr}
  40400a:	af00      	add	r7, sp, #0
  40400c:	210c      	movs	r1, #12
  40400e:	4802      	ldr	r0, [pc, #8]	; (404018 <PIOB_Handler+0x10>)
  404010:	4b02      	ldr	r3, [pc, #8]	; (40401c <PIOB_Handler+0x14>)
  404012:	4798      	blx	r3
  404014:	bf00      	nop
  404016:	bd80      	pop	{r7, pc}
  404018:	400e1000 	.word	0x400e1000
  40401c:	00403eb1 	.word	0x00403eb1

00404020 <pio_handler_set_priority>:
  404020:	b580      	push	{r7, lr}
  404022:	b086      	sub	sp, #24
  404024:	af00      	add	r7, sp, #0
  404026:	60f8      	str	r0, [r7, #12]
  404028:	460b      	mov	r3, r1
  40402a:	607a      	str	r2, [r7, #4]
  40402c:	72fb      	strb	r3, [r7, #11]
  40402e:	2300      	movs	r3, #0
  404030:	617b      	str	r3, [r7, #20]
  404032:	68f8      	ldr	r0, [r7, #12]
  404034:	4b13      	ldr	r3, [pc, #76]	; (404084 <pio_handler_set_priority+0x64>)
  404036:	4798      	blx	r3
  404038:	6178      	str	r0, [r7, #20]
  40403a:	f04f 31ff 	mov.w	r1, #4294967295
  40403e:	68f8      	ldr	r0, [r7, #12]
  404040:	4b11      	ldr	r3, [pc, #68]	; (404088 <pio_handler_set_priority+0x68>)
  404042:	4798      	blx	r3
  404044:	68f8      	ldr	r0, [r7, #12]
  404046:	4b11      	ldr	r3, [pc, #68]	; (40408c <pio_handler_set_priority+0x6c>)
  404048:	4798      	blx	r3
  40404a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40404e:	4618      	mov	r0, r3
  404050:	4b0f      	ldr	r3, [pc, #60]	; (404090 <pio_handler_set_priority+0x70>)
  404052:	4798      	blx	r3
  404054:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404058:	4618      	mov	r0, r3
  40405a:	4b0e      	ldr	r3, [pc, #56]	; (404094 <pio_handler_set_priority+0x74>)
  40405c:	4798      	blx	r3
  40405e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404062:	6879      	ldr	r1, [r7, #4]
  404064:	4618      	mov	r0, r3
  404066:	4b0c      	ldr	r3, [pc, #48]	; (404098 <pio_handler_set_priority+0x78>)
  404068:	4798      	blx	r3
  40406a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40406e:	4618      	mov	r0, r3
  404070:	4b0a      	ldr	r3, [pc, #40]	; (40409c <pio_handler_set_priority+0x7c>)
  404072:	4798      	blx	r3
  404074:	6979      	ldr	r1, [r7, #20]
  404076:	68f8      	ldr	r0, [r7, #12]
  404078:	4b09      	ldr	r3, [pc, #36]	; (4040a0 <pio_handler_set_priority+0x80>)
  40407a:	4798      	blx	r3
  40407c:	bf00      	nop
  40407e:	3718      	adds	r7, #24
  404080:	46bd      	mov	sp, r7
  404082:	bd80      	pop	{r7, pc}
  404084:	00403da9 	.word	0x00403da9
  404088:	00403d75 	.word	0x00403d75
  40408c:	00403d91 	.word	0x00403d91
  404090:	00403df5 	.word	0x00403df5
  404094:	00403e29 	.word	0x00403e29
  404098:	00403e5d 	.word	0x00403e5d
  40409c:	00403dc1 	.word	0x00403dc1
  4040a0:	00403d59 	.word	0x00403d59

004040a4 <pio_handler_clear_pending_IRQ>:
  4040a4:	b580      	push	{r7, lr}
  4040a6:	b084      	sub	sp, #16
  4040a8:	af00      	add	r7, sp, #0
  4040aa:	6078      	str	r0, [r7, #4]
  4040ac:	460b      	mov	r3, r1
  4040ae:	70fb      	strb	r3, [r7, #3]
  4040b0:	2300      	movs	r3, #0
  4040b2:	60fb      	str	r3, [r7, #12]
  4040b4:	6878      	ldr	r0, [r7, #4]
  4040b6:	4b11      	ldr	r3, [pc, #68]	; (4040fc <pio_handler_clear_pending_IRQ+0x58>)
  4040b8:	4798      	blx	r3
  4040ba:	60f8      	str	r0, [r7, #12]
  4040bc:	f04f 31ff 	mov.w	r1, #4294967295
  4040c0:	6878      	ldr	r0, [r7, #4]
  4040c2:	4b0f      	ldr	r3, [pc, #60]	; (404100 <pio_handler_clear_pending_IRQ+0x5c>)
  4040c4:	4798      	blx	r3
  4040c6:	6878      	ldr	r0, [r7, #4]
  4040c8:	4b0e      	ldr	r3, [pc, #56]	; (404104 <pio_handler_clear_pending_IRQ+0x60>)
  4040ca:	4798      	blx	r3
  4040cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
  4040d0:	4618      	mov	r0, r3
  4040d2:	4b0d      	ldr	r3, [pc, #52]	; (404108 <pio_handler_clear_pending_IRQ+0x64>)
  4040d4:	4798      	blx	r3
  4040d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
  4040da:	4618      	mov	r0, r3
  4040dc:	4b0b      	ldr	r3, [pc, #44]	; (40410c <pio_handler_clear_pending_IRQ+0x68>)
  4040de:	4798      	blx	r3
  4040e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
  4040e4:	4618      	mov	r0, r3
  4040e6:	4b0a      	ldr	r3, [pc, #40]	; (404110 <pio_handler_clear_pending_IRQ+0x6c>)
  4040e8:	4798      	blx	r3
  4040ea:	68f9      	ldr	r1, [r7, #12]
  4040ec:	6878      	ldr	r0, [r7, #4]
  4040ee:	4b09      	ldr	r3, [pc, #36]	; (404114 <pio_handler_clear_pending_IRQ+0x70>)
  4040f0:	4798      	blx	r3
  4040f2:	bf00      	nop
  4040f4:	3710      	adds	r7, #16
  4040f6:	46bd      	mov	sp, r7
  4040f8:	bd80      	pop	{r7, pc}
  4040fa:	bf00      	nop
  4040fc:	00403da9 	.word	0x00403da9
  404100:	00403d75 	.word	0x00403d75
  404104:	00403d91 	.word	0x00403d91
  404108:	00403df5 	.word	0x00403df5
  40410c:	00403e29 	.word	0x00403e29
  404110:	00403dc1 	.word	0x00403dc1
  404114:	00403d59 	.word	0x00403d59

00404118 <pmc_switch_mck_to_pllack>:
  404118:	b480      	push	{r7}
  40411a:	b085      	sub	sp, #20
  40411c:	af00      	add	r7, sp, #0
  40411e:	6078      	str	r0, [r7, #4]
  404120:	491d      	ldr	r1, [pc, #116]	; (404198 <pmc_switch_mck_to_pllack+0x80>)
  404122:	4b1d      	ldr	r3, [pc, #116]	; (404198 <pmc_switch_mck_to_pllack+0x80>)
  404124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40412a:	687b      	ldr	r3, [r7, #4]
  40412c:	4313      	orrs	r3, r2
  40412e:	630b      	str	r3, [r1, #48]	; 0x30
  404130:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404134:	60fb      	str	r3, [r7, #12]
  404136:	e007      	b.n	404148 <pmc_switch_mck_to_pllack+0x30>
  404138:	68fb      	ldr	r3, [r7, #12]
  40413a:	2b00      	cmp	r3, #0
  40413c:	d101      	bne.n	404142 <pmc_switch_mck_to_pllack+0x2a>
  40413e:	2301      	movs	r3, #1
  404140:	e023      	b.n	40418a <pmc_switch_mck_to_pllack+0x72>
  404142:	68fb      	ldr	r3, [r7, #12]
  404144:	3b01      	subs	r3, #1
  404146:	60fb      	str	r3, [r7, #12]
  404148:	4b13      	ldr	r3, [pc, #76]	; (404198 <pmc_switch_mck_to_pllack+0x80>)
  40414a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40414c:	f003 0308 	and.w	r3, r3, #8
  404150:	2b00      	cmp	r3, #0
  404152:	d0f1      	beq.n	404138 <pmc_switch_mck_to_pllack+0x20>
  404154:	4a10      	ldr	r2, [pc, #64]	; (404198 <pmc_switch_mck_to_pllack+0x80>)
  404156:	4b10      	ldr	r3, [pc, #64]	; (404198 <pmc_switch_mck_to_pllack+0x80>)
  404158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40415a:	f023 0303 	bic.w	r3, r3, #3
  40415e:	f043 0302 	orr.w	r3, r3, #2
  404162:	6313      	str	r3, [r2, #48]	; 0x30
  404164:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404168:	60fb      	str	r3, [r7, #12]
  40416a:	e007      	b.n	40417c <pmc_switch_mck_to_pllack+0x64>
  40416c:	68fb      	ldr	r3, [r7, #12]
  40416e:	2b00      	cmp	r3, #0
  404170:	d101      	bne.n	404176 <pmc_switch_mck_to_pllack+0x5e>
  404172:	2301      	movs	r3, #1
  404174:	e009      	b.n	40418a <pmc_switch_mck_to_pllack+0x72>
  404176:	68fb      	ldr	r3, [r7, #12]
  404178:	3b01      	subs	r3, #1
  40417a:	60fb      	str	r3, [r7, #12]
  40417c:	4b06      	ldr	r3, [pc, #24]	; (404198 <pmc_switch_mck_to_pllack+0x80>)
  40417e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404180:	f003 0308 	and.w	r3, r3, #8
  404184:	2b00      	cmp	r3, #0
  404186:	d0f1      	beq.n	40416c <pmc_switch_mck_to_pllack+0x54>
  404188:	2300      	movs	r3, #0
  40418a:	4618      	mov	r0, r3
  40418c:	3714      	adds	r7, #20
  40418e:	46bd      	mov	sp, r7
  404190:	f85d 7b04 	ldr.w	r7, [sp], #4
  404194:	4770      	bx	lr
  404196:	bf00      	nop
  404198:	400e0400 	.word	0x400e0400

0040419c <pmc_switch_sclk_to_32kxtal>:
  40419c:	b480      	push	{r7}
  40419e:	b083      	sub	sp, #12
  4041a0:	af00      	add	r7, sp, #0
  4041a2:	6078      	str	r0, [r7, #4]
  4041a4:	687b      	ldr	r3, [r7, #4]
  4041a6:	2b01      	cmp	r3, #1
  4041a8:	d107      	bne.n	4041ba <pmc_switch_sclk_to_32kxtal+0x1e>
  4041aa:	4a08      	ldr	r2, [pc, #32]	; (4041cc <pmc_switch_sclk_to_32kxtal+0x30>)
  4041ac:	4b07      	ldr	r3, [pc, #28]	; (4041cc <pmc_switch_sclk_to_32kxtal+0x30>)
  4041ae:	689b      	ldr	r3, [r3, #8]
  4041b0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4041b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4041b8:	6093      	str	r3, [r2, #8]
  4041ba:	4b04      	ldr	r3, [pc, #16]	; (4041cc <pmc_switch_sclk_to_32kxtal+0x30>)
  4041bc:	4a04      	ldr	r2, [pc, #16]	; (4041d0 <pmc_switch_sclk_to_32kxtal+0x34>)
  4041be:	601a      	str	r2, [r3, #0]
  4041c0:	bf00      	nop
  4041c2:	370c      	adds	r7, #12
  4041c4:	46bd      	mov	sp, r7
  4041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041ca:	4770      	bx	lr
  4041cc:	400e1410 	.word	0x400e1410
  4041d0:	a5000008 	.word	0xa5000008

004041d4 <pmc_osc_is_ready_32kxtal>:
  4041d4:	b480      	push	{r7}
  4041d6:	af00      	add	r7, sp, #0
  4041d8:	4b09      	ldr	r3, [pc, #36]	; (404200 <pmc_osc_is_ready_32kxtal+0x2c>)
  4041da:	695b      	ldr	r3, [r3, #20]
  4041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4041e0:	2b00      	cmp	r3, #0
  4041e2:	d007      	beq.n	4041f4 <pmc_osc_is_ready_32kxtal+0x20>
  4041e4:	4b07      	ldr	r3, [pc, #28]	; (404204 <pmc_osc_is_ready_32kxtal+0x30>)
  4041e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4041e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4041ec:	2b00      	cmp	r3, #0
  4041ee:	d001      	beq.n	4041f4 <pmc_osc_is_ready_32kxtal+0x20>
  4041f0:	2301      	movs	r3, #1
  4041f2:	e000      	b.n	4041f6 <pmc_osc_is_ready_32kxtal+0x22>
  4041f4:	2300      	movs	r3, #0
  4041f6:	4618      	mov	r0, r3
  4041f8:	46bd      	mov	sp, r7
  4041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041fe:	4770      	bx	lr
  404200:	400e1410 	.word	0x400e1410
  404204:	400e0400 	.word	0x400e0400

00404208 <pmc_switch_mainck_to_fastrc>:
  404208:	b480      	push	{r7}
  40420a:	b083      	sub	sp, #12
  40420c:	af00      	add	r7, sp, #0
  40420e:	6078      	str	r0, [r7, #4]
  404210:	4a18      	ldr	r2, [pc, #96]	; (404274 <pmc_switch_mainck_to_fastrc+0x6c>)
  404212:	4b18      	ldr	r3, [pc, #96]	; (404274 <pmc_switch_mainck_to_fastrc+0x6c>)
  404214:	6a1b      	ldr	r3, [r3, #32]
  404216:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40421a:	f043 0308 	orr.w	r3, r3, #8
  40421e:	6213      	str	r3, [r2, #32]
  404220:	bf00      	nop
  404222:	4b14      	ldr	r3, [pc, #80]	; (404274 <pmc_switch_mainck_to_fastrc+0x6c>)
  404224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40422a:	2b00      	cmp	r3, #0
  40422c:	d0f9      	beq.n	404222 <pmc_switch_mainck_to_fastrc+0x1a>
  40422e:	4911      	ldr	r1, [pc, #68]	; (404274 <pmc_switch_mainck_to_fastrc+0x6c>)
  404230:	4b10      	ldr	r3, [pc, #64]	; (404274 <pmc_switch_mainck_to_fastrc+0x6c>)
  404232:	6a1b      	ldr	r3, [r3, #32]
  404234:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40423c:	687a      	ldr	r2, [r7, #4]
  40423e:	4313      	orrs	r3, r2
  404240:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404244:	620b      	str	r3, [r1, #32]
  404246:	bf00      	nop
  404248:	4b0a      	ldr	r3, [pc, #40]	; (404274 <pmc_switch_mainck_to_fastrc+0x6c>)
  40424a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404250:	2b00      	cmp	r3, #0
  404252:	d0f9      	beq.n	404248 <pmc_switch_mainck_to_fastrc+0x40>
  404254:	4a07      	ldr	r2, [pc, #28]	; (404274 <pmc_switch_mainck_to_fastrc+0x6c>)
  404256:	4b07      	ldr	r3, [pc, #28]	; (404274 <pmc_switch_mainck_to_fastrc+0x6c>)
  404258:	6a1b      	ldr	r3, [r3, #32]
  40425a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  404262:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404266:	6213      	str	r3, [r2, #32]
  404268:	bf00      	nop
  40426a:	370c      	adds	r7, #12
  40426c:	46bd      	mov	sp, r7
  40426e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404272:	4770      	bx	lr
  404274:	400e0400 	.word	0x400e0400

00404278 <pmc_switch_mainck_to_xtal>:
  404278:	b480      	push	{r7}
  40427a:	b083      	sub	sp, #12
  40427c:	af00      	add	r7, sp, #0
  40427e:	6078      	str	r0, [r7, #4]
  404280:	6039      	str	r1, [r7, #0]
  404282:	687b      	ldr	r3, [r7, #4]
  404284:	2b00      	cmp	r3, #0
  404286:	d008      	beq.n	40429a <pmc_switch_mainck_to_xtal+0x22>
  404288:	4916      	ldr	r1, [pc, #88]	; (4042e4 <pmc_switch_mainck_to_xtal+0x6c>)
  40428a:	4b16      	ldr	r3, [pc, #88]	; (4042e4 <pmc_switch_mainck_to_xtal+0x6c>)
  40428c:	6a1b      	ldr	r3, [r3, #32]
  40428e:	4a16      	ldr	r2, [pc, #88]	; (4042e8 <pmc_switch_mainck_to_xtal+0x70>)
  404290:	401a      	ands	r2, r3
  404292:	4b16      	ldr	r3, [pc, #88]	; (4042ec <pmc_switch_mainck_to_xtal+0x74>)
  404294:	4313      	orrs	r3, r2
  404296:	620b      	str	r3, [r1, #32]
  404298:	e01e      	b.n	4042d8 <pmc_switch_mainck_to_xtal+0x60>
  40429a:	4912      	ldr	r1, [pc, #72]	; (4042e4 <pmc_switch_mainck_to_xtal+0x6c>)
  40429c:	4b11      	ldr	r3, [pc, #68]	; (4042e4 <pmc_switch_mainck_to_xtal+0x6c>)
  40429e:	6a1b      	ldr	r3, [r3, #32]
  4042a0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4042a4:	f023 0303 	bic.w	r3, r3, #3
  4042a8:	683a      	ldr	r2, [r7, #0]
  4042aa:	0212      	lsls	r2, r2, #8
  4042ac:	b292      	uxth	r2, r2
  4042ae:	4313      	orrs	r3, r2
  4042b0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4042b4:	f043 0301 	orr.w	r3, r3, #1
  4042b8:	620b      	str	r3, [r1, #32]
  4042ba:	bf00      	nop
  4042bc:	4b09      	ldr	r3, [pc, #36]	; (4042e4 <pmc_switch_mainck_to_xtal+0x6c>)
  4042be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4042c0:	f003 0301 	and.w	r3, r3, #1
  4042c4:	2b00      	cmp	r3, #0
  4042c6:	d0f9      	beq.n	4042bc <pmc_switch_mainck_to_xtal+0x44>
  4042c8:	4a06      	ldr	r2, [pc, #24]	; (4042e4 <pmc_switch_mainck_to_xtal+0x6c>)
  4042ca:	4b06      	ldr	r3, [pc, #24]	; (4042e4 <pmc_switch_mainck_to_xtal+0x6c>)
  4042cc:	6a1b      	ldr	r3, [r3, #32]
  4042ce:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4042d6:	6213      	str	r3, [r2, #32]
  4042d8:	bf00      	nop
  4042da:	370c      	adds	r7, #12
  4042dc:	46bd      	mov	sp, r7
  4042de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042e2:	4770      	bx	lr
  4042e4:	400e0400 	.word	0x400e0400
  4042e8:	fec8fffc 	.word	0xfec8fffc
  4042ec:	01370002 	.word	0x01370002

004042f0 <pmc_osc_is_ready_mainck>:
  4042f0:	b480      	push	{r7}
  4042f2:	af00      	add	r7, sp, #0
  4042f4:	4b04      	ldr	r3, [pc, #16]	; (404308 <pmc_osc_is_ready_mainck+0x18>)
  4042f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4042f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4042fc:	4618      	mov	r0, r3
  4042fe:	46bd      	mov	sp, r7
  404300:	f85d 7b04 	ldr.w	r7, [sp], #4
  404304:	4770      	bx	lr
  404306:	bf00      	nop
  404308:	400e0400 	.word	0x400e0400

0040430c <pmc_disable_pllack>:
  40430c:	b480      	push	{r7}
  40430e:	af00      	add	r7, sp, #0
  404310:	4b03      	ldr	r3, [pc, #12]	; (404320 <pmc_disable_pllack+0x14>)
  404312:	2200      	movs	r2, #0
  404314:	629a      	str	r2, [r3, #40]	; 0x28
  404316:	bf00      	nop
  404318:	46bd      	mov	sp, r7
  40431a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40431e:	4770      	bx	lr
  404320:	400e0400 	.word	0x400e0400

00404324 <pmc_is_locked_pllack>:
  404324:	b480      	push	{r7}
  404326:	af00      	add	r7, sp, #0
  404328:	4b04      	ldr	r3, [pc, #16]	; (40433c <pmc_is_locked_pllack+0x18>)
  40432a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40432c:	f003 0302 	and.w	r3, r3, #2
  404330:	4618      	mov	r0, r3
  404332:	46bd      	mov	sp, r7
  404334:	f85d 7b04 	ldr.w	r7, [sp], #4
  404338:	4770      	bx	lr
  40433a:	bf00      	nop
  40433c:	400e0400 	.word	0x400e0400

00404340 <pmc_disable_pllbck>:
  404340:	b480      	push	{r7}
  404342:	af00      	add	r7, sp, #0
  404344:	4b03      	ldr	r3, [pc, #12]	; (404354 <pmc_disable_pllbck+0x14>)
  404346:	2200      	movs	r2, #0
  404348:	62da      	str	r2, [r3, #44]	; 0x2c
  40434a:	bf00      	nop
  40434c:	46bd      	mov	sp, r7
  40434e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404352:	4770      	bx	lr
  404354:	400e0400 	.word	0x400e0400

00404358 <pmc_is_locked_pllbck>:
  404358:	b480      	push	{r7}
  40435a:	af00      	add	r7, sp, #0
  40435c:	4b04      	ldr	r3, [pc, #16]	; (404370 <pmc_is_locked_pllbck+0x18>)
  40435e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404360:	f003 0304 	and.w	r3, r3, #4
  404364:	4618      	mov	r0, r3
  404366:	46bd      	mov	sp, r7
  404368:	f85d 7b04 	ldr.w	r7, [sp], #4
  40436c:	4770      	bx	lr
  40436e:	bf00      	nop
  404370:	400e0400 	.word	0x400e0400

00404374 <pmc_enable_periph_clk>:
  404374:	b480      	push	{r7}
  404376:	b083      	sub	sp, #12
  404378:	af00      	add	r7, sp, #0
  40437a:	6078      	str	r0, [r7, #4]
  40437c:	687b      	ldr	r3, [r7, #4]
  40437e:	2b32      	cmp	r3, #50	; 0x32
  404380:	d901      	bls.n	404386 <pmc_enable_periph_clk+0x12>
  404382:	2301      	movs	r3, #1
  404384:	e02f      	b.n	4043e6 <pmc_enable_periph_clk+0x72>
  404386:	687b      	ldr	r3, [r7, #4]
  404388:	2b1f      	cmp	r3, #31
  40438a:	d813      	bhi.n	4043b4 <pmc_enable_periph_clk+0x40>
  40438c:	4b19      	ldr	r3, [pc, #100]	; (4043f4 <pmc_enable_periph_clk+0x80>)
  40438e:	699a      	ldr	r2, [r3, #24]
  404390:	2101      	movs	r1, #1
  404392:	687b      	ldr	r3, [r7, #4]
  404394:	fa01 f303 	lsl.w	r3, r1, r3
  404398:	401a      	ands	r2, r3
  40439a:	2101      	movs	r1, #1
  40439c:	687b      	ldr	r3, [r7, #4]
  40439e:	fa01 f303 	lsl.w	r3, r1, r3
  4043a2:	429a      	cmp	r2, r3
  4043a4:	d01e      	beq.n	4043e4 <pmc_enable_periph_clk+0x70>
  4043a6:	4a13      	ldr	r2, [pc, #76]	; (4043f4 <pmc_enable_periph_clk+0x80>)
  4043a8:	2101      	movs	r1, #1
  4043aa:	687b      	ldr	r3, [r7, #4]
  4043ac:	fa01 f303 	lsl.w	r3, r1, r3
  4043b0:	6113      	str	r3, [r2, #16]
  4043b2:	e017      	b.n	4043e4 <pmc_enable_periph_clk+0x70>
  4043b4:	687b      	ldr	r3, [r7, #4]
  4043b6:	3b20      	subs	r3, #32
  4043b8:	607b      	str	r3, [r7, #4]
  4043ba:	4b0e      	ldr	r3, [pc, #56]	; (4043f4 <pmc_enable_periph_clk+0x80>)
  4043bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4043c0:	2101      	movs	r1, #1
  4043c2:	687b      	ldr	r3, [r7, #4]
  4043c4:	fa01 f303 	lsl.w	r3, r1, r3
  4043c8:	401a      	ands	r2, r3
  4043ca:	2101      	movs	r1, #1
  4043cc:	687b      	ldr	r3, [r7, #4]
  4043ce:	fa01 f303 	lsl.w	r3, r1, r3
  4043d2:	429a      	cmp	r2, r3
  4043d4:	d006      	beq.n	4043e4 <pmc_enable_periph_clk+0x70>
  4043d6:	4a07      	ldr	r2, [pc, #28]	; (4043f4 <pmc_enable_periph_clk+0x80>)
  4043d8:	2101      	movs	r1, #1
  4043da:	687b      	ldr	r3, [r7, #4]
  4043dc:	fa01 f303 	lsl.w	r3, r1, r3
  4043e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  4043e4:	2300      	movs	r3, #0
  4043e6:	4618      	mov	r0, r3
  4043e8:	370c      	adds	r7, #12
  4043ea:	46bd      	mov	sp, r7
  4043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043f0:	4770      	bx	lr
  4043f2:	bf00      	nop
  4043f4:	400e0400 	.word	0x400e0400

004043f8 <pmc_switch_pck_to_pllack>:
  4043f8:	b480      	push	{r7}
  4043fa:	b085      	sub	sp, #20
  4043fc:	af00      	add	r7, sp, #0
  4043fe:	6078      	str	r0, [r7, #4]
  404400:	6039      	str	r1, [r7, #0]
  404402:	4912      	ldr	r1, [pc, #72]	; (40444c <pmc_switch_pck_to_pllack+0x54>)
  404404:	683b      	ldr	r3, [r7, #0]
  404406:	f043 0202 	orr.w	r2, r3, #2
  40440a:	687b      	ldr	r3, [r7, #4]
  40440c:	3310      	adds	r3, #16
  40440e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404412:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404416:	60fb      	str	r3, [r7, #12]
  404418:	e007      	b.n	40442a <pmc_switch_pck_to_pllack+0x32>
  40441a:	68fb      	ldr	r3, [r7, #12]
  40441c:	2b00      	cmp	r3, #0
  40441e:	d101      	bne.n	404424 <pmc_switch_pck_to_pllack+0x2c>
  404420:	2301      	movs	r3, #1
  404422:	e00d      	b.n	404440 <pmc_switch_pck_to_pllack+0x48>
  404424:	68fb      	ldr	r3, [r7, #12]
  404426:	3b01      	subs	r3, #1
  404428:	60fb      	str	r3, [r7, #12]
  40442a:	4b08      	ldr	r3, [pc, #32]	; (40444c <pmc_switch_pck_to_pllack+0x54>)
  40442c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40442e:	f44f 7180 	mov.w	r1, #256	; 0x100
  404432:	687b      	ldr	r3, [r7, #4]
  404434:	fa01 f303 	lsl.w	r3, r1, r3
  404438:	4013      	ands	r3, r2
  40443a:	2b00      	cmp	r3, #0
  40443c:	d0ed      	beq.n	40441a <pmc_switch_pck_to_pllack+0x22>
  40443e:	2300      	movs	r3, #0
  404440:	4618      	mov	r0, r3
  404442:	3714      	adds	r7, #20
  404444:	46bd      	mov	sp, r7
  404446:	f85d 7b04 	ldr.w	r7, [sp], #4
  40444a:	4770      	bx	lr
  40444c:	400e0400 	.word	0x400e0400

00404450 <pmc_switch_pck_to_mck>:
  404450:	b480      	push	{r7}
  404452:	b085      	sub	sp, #20
  404454:	af00      	add	r7, sp, #0
  404456:	6078      	str	r0, [r7, #4]
  404458:	6039      	str	r1, [r7, #0]
  40445a:	4912      	ldr	r1, [pc, #72]	; (4044a4 <pmc_switch_pck_to_mck+0x54>)
  40445c:	683b      	ldr	r3, [r7, #0]
  40445e:	f043 0204 	orr.w	r2, r3, #4
  404462:	687b      	ldr	r3, [r7, #4]
  404464:	3310      	adds	r3, #16
  404466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40446a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40446e:	60fb      	str	r3, [r7, #12]
  404470:	e007      	b.n	404482 <pmc_switch_pck_to_mck+0x32>
  404472:	68fb      	ldr	r3, [r7, #12]
  404474:	2b00      	cmp	r3, #0
  404476:	d101      	bne.n	40447c <pmc_switch_pck_to_mck+0x2c>
  404478:	2301      	movs	r3, #1
  40447a:	e00d      	b.n	404498 <pmc_switch_pck_to_mck+0x48>
  40447c:	68fb      	ldr	r3, [r7, #12]
  40447e:	3b01      	subs	r3, #1
  404480:	60fb      	str	r3, [r7, #12]
  404482:	4b08      	ldr	r3, [pc, #32]	; (4044a4 <pmc_switch_pck_to_mck+0x54>)
  404484:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  404486:	f44f 7180 	mov.w	r1, #256	; 0x100
  40448a:	687b      	ldr	r3, [r7, #4]
  40448c:	fa01 f303 	lsl.w	r3, r1, r3
  404490:	4013      	ands	r3, r2
  404492:	2b00      	cmp	r3, #0
  404494:	d0ed      	beq.n	404472 <pmc_switch_pck_to_mck+0x22>
  404496:	2300      	movs	r3, #0
  404498:	4618      	mov	r0, r3
  40449a:	3714      	adds	r7, #20
  40449c:	46bd      	mov	sp, r7
  40449e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4044a2:	4770      	bx	lr
  4044a4:	400e0400 	.word	0x400e0400

004044a8 <pmc_enable_pck>:
  4044a8:	b480      	push	{r7}
  4044aa:	b083      	sub	sp, #12
  4044ac:	af00      	add	r7, sp, #0
  4044ae:	6078      	str	r0, [r7, #4]
  4044b0:	4a06      	ldr	r2, [pc, #24]	; (4044cc <pmc_enable_pck+0x24>)
  4044b2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4044b6:	687b      	ldr	r3, [r7, #4]
  4044b8:	fa01 f303 	lsl.w	r3, r1, r3
  4044bc:	6013      	str	r3, [r2, #0]
  4044be:	bf00      	nop
  4044c0:	370c      	adds	r7, #12
  4044c2:	46bd      	mov	sp, r7
  4044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4044c8:	4770      	bx	lr
  4044ca:	bf00      	nop
  4044cc:	400e0400 	.word	0x400e0400

004044d0 <pmc_disable_pck>:
  4044d0:	b480      	push	{r7}
  4044d2:	b083      	sub	sp, #12
  4044d4:	af00      	add	r7, sp, #0
  4044d6:	6078      	str	r0, [r7, #4]
  4044d8:	4a06      	ldr	r2, [pc, #24]	; (4044f4 <pmc_disable_pck+0x24>)
  4044da:	f44f 7180 	mov.w	r1, #256	; 0x100
  4044de:	687b      	ldr	r3, [r7, #4]
  4044e0:	fa01 f303 	lsl.w	r3, r1, r3
  4044e4:	6053      	str	r3, [r2, #4]
  4044e6:	bf00      	nop
  4044e8:	370c      	adds	r7, #12
  4044ea:	46bd      	mov	sp, r7
  4044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4044f0:	4770      	bx	lr
  4044f2:	bf00      	nop
  4044f4:	400e0400 	.word	0x400e0400

004044f8 <pmc_set_flash_in_wait_mode>:
  4044f8:	b480      	push	{r7}
  4044fa:	b083      	sub	sp, #12
  4044fc:	af00      	add	r7, sp, #0
  4044fe:	6078      	str	r0, [r7, #4]
  404500:	4a04      	ldr	r2, [pc, #16]	; (404514 <pmc_set_flash_in_wait_mode+0x1c>)
  404502:	687b      	ldr	r3, [r7, #4]
  404504:	6013      	str	r3, [r2, #0]
  404506:	bf00      	nop
  404508:	370c      	adds	r7, #12
  40450a:	46bd      	mov	sp, r7
  40450c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404510:	4770      	bx	lr
  404512:	bf00      	nop
  404514:	2000016c 	.word	0x2000016c

00404518 <pmc_enable_waitmode>:
  404518:	b480      	push	{r7}
  40451a:	b083      	sub	sp, #12
  40451c:	af00      	add	r7, sp, #0
  40451e:	4b1b      	ldr	r3, [pc, #108]	; (40458c <pmc_enable_waitmode+0x74>)
  404520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  404522:	607b      	str	r3, [r7, #4]
  404524:	687b      	ldr	r3, [r7, #4]
  404526:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  40452a:	607b      	str	r3, [r7, #4]
  40452c:	4b18      	ldr	r3, [pc, #96]	; (404590 <pmc_enable_waitmode+0x78>)
  40452e:	681b      	ldr	r3, [r3, #0]
  404530:	687a      	ldr	r2, [r7, #4]
  404532:	4313      	orrs	r3, r2
  404534:	607b      	str	r3, [r7, #4]
  404536:	4a15      	ldr	r2, [pc, #84]	; (40458c <pmc_enable_waitmode+0x74>)
  404538:	687b      	ldr	r3, [r7, #4]
  40453a:	6713      	str	r3, [r2, #112]	; 0x70
  40453c:	4a13      	ldr	r2, [pc, #76]	; (40458c <pmc_enable_waitmode+0x74>)
  40453e:	4b13      	ldr	r3, [pc, #76]	; (40458c <pmc_enable_waitmode+0x74>)
  404540:	6a1b      	ldr	r3, [r3, #32]
  404542:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404546:	f043 0304 	orr.w	r3, r3, #4
  40454a:	6213      	str	r3, [r2, #32]
  40454c:	bf00      	nop
  40454e:	4b0f      	ldr	r3, [pc, #60]	; (40458c <pmc_enable_waitmode+0x74>)
  404550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404552:	f003 0308 	and.w	r3, r3, #8
  404556:	2b00      	cmp	r3, #0
  404558:	d0f9      	beq.n	40454e <pmc_enable_waitmode+0x36>
  40455a:	2300      	movs	r3, #0
  40455c:	607b      	str	r3, [r7, #4]
  40455e:	e003      	b.n	404568 <pmc_enable_waitmode+0x50>
  404560:	bf00      	nop
  404562:	687b      	ldr	r3, [r7, #4]
  404564:	3301      	adds	r3, #1
  404566:	607b      	str	r3, [r7, #4]
  404568:	687b      	ldr	r3, [r7, #4]
  40456a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40456e:	d3f7      	bcc.n	404560 <pmc_enable_waitmode+0x48>
  404570:	bf00      	nop
  404572:	4b06      	ldr	r3, [pc, #24]	; (40458c <pmc_enable_waitmode+0x74>)
  404574:	6a1b      	ldr	r3, [r3, #32]
  404576:	f003 0308 	and.w	r3, r3, #8
  40457a:	2b00      	cmp	r3, #0
  40457c:	d0f9      	beq.n	404572 <pmc_enable_waitmode+0x5a>
  40457e:	bf00      	nop
  404580:	370c      	adds	r7, #12
  404582:	46bd      	mov	sp, r7
  404584:	f85d 7b04 	ldr.w	r7, [sp], #4
  404588:	4770      	bx	lr
  40458a:	bf00      	nop
  40458c:	400e0400 	.word	0x400e0400
  404590:	2000016c 	.word	0x2000016c

00404594 <pmc_sleep>:
  404594:	b590      	push	{r4, r7, lr}
  404596:	b099      	sub	sp, #100	; 0x64
  404598:	af00      	add	r7, sp, #0
  40459a:	6078      	str	r0, [r7, #4]
  40459c:	687b      	ldr	r3, [r7, #4]
  40459e:	3b01      	subs	r3, #1
  4045a0:	2b04      	cmp	r3, #4
  4045a2:	f200 81af 	bhi.w	404904 <pmc_sleep+0x370>
  4045a6:	a201      	add	r2, pc, #4	; (adr r2, 4045ac <pmc_sleep+0x18>)
  4045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4045ac:	004045c1 	.word	0x004045c1
  4045b0:	004045c1 	.word	0x004045c1
  4045b4:	004045e1 	.word	0x004045e1
  4045b8:	004045e1 	.word	0x004045e1
  4045bc:	004048e3 	.word	0x004048e3
  4045c0:	4a77      	ldr	r2, [pc, #476]	; (4047a0 <pmc_sleep+0x20c>)
  4045c2:	4b77      	ldr	r3, [pc, #476]	; (4047a0 <pmc_sleep+0x20c>)
  4045c4:	691b      	ldr	r3, [r3, #16]
  4045c6:	f023 0304 	bic.w	r3, r3, #4
  4045ca:	6113      	str	r3, [r2, #16]
  4045cc:	4b75      	ldr	r3, [pc, #468]	; (4047a4 <pmc_sleep+0x210>)
  4045ce:	2201      	movs	r2, #1
  4045d0:	701a      	strb	r2, [r3, #0]
  4045d2:	f3bf 8f5f 	dmb	sy
  4045d6:	b662      	cpsie	i
  4045d8:	f3bf 8f4f 	dsb	sy
  4045dc:	bf30      	wfi
  4045de:	e191      	b.n	404904 <pmc_sleep+0x370>
  4045e0:	687b      	ldr	r3, [r7, #4]
  4045e2:	2b03      	cmp	r3, #3
  4045e4:	d103      	bne.n	4045ee <pmc_sleep+0x5a>
  4045e6:	2000      	movs	r0, #0
  4045e8:	4b6f      	ldr	r3, [pc, #444]	; (4047a8 <pmc_sleep+0x214>)
  4045ea:	4798      	blx	r3
  4045ec:	e003      	b.n	4045f6 <pmc_sleep+0x62>
  4045ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  4045f2:	4b6d      	ldr	r3, [pc, #436]	; (4047a8 <pmc_sleep+0x214>)
  4045f4:	4798      	blx	r3
  4045f6:	b672      	cpsid	i
  4045f8:	f3bf 8f5f 	dmb	sy
  4045fc:	4b69      	ldr	r3, [pc, #420]	; (4047a4 <pmc_sleep+0x210>)
  4045fe:	2200      	movs	r2, #0
  404600:	701a      	strb	r2, [r3, #0]
  404602:	4b6a      	ldr	r3, [pc, #424]	; (4047ac <pmc_sleep+0x218>)
  404604:	2201      	movs	r2, #1
  404606:	701a      	strb	r2, [r3, #0]
  404608:	687b      	ldr	r3, [r7, #4]
  40460a:	2b04      	cmp	r3, #4
  40460c:	bf0c      	ite	eq
  40460e:	2301      	moveq	r3, #1
  404610:	2300      	movne	r3, #0
  404612:	b2da      	uxtb	r2, r3
  404614:	f107 031c 	add.w	r3, r7, #28
  404618:	643b      	str	r3, [r7, #64]	; 0x40
  40461a:	f107 0318 	add.w	r3, r7, #24
  40461e:	63fb      	str	r3, [r7, #60]	; 0x3c
  404620:	f107 0314 	add.w	r3, r7, #20
  404624:	63bb      	str	r3, [r7, #56]	; 0x38
  404626:	f107 0310 	add.w	r3, r7, #16
  40462a:	637b      	str	r3, [r7, #52]	; 0x34
  40462c:	f107 030c 	add.w	r3, r7, #12
  404630:	633b      	str	r3, [r7, #48]	; 0x30
  404632:	4613      	mov	r3, r2
  404634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  404638:	4b5d      	ldr	r3, [pc, #372]	; (4047b0 <pmc_sleep+0x21c>)
  40463a:	6a1b      	ldr	r3, [r3, #32]
  40463c:	62bb      	str	r3, [r7, #40]	; 0x28
  40463e:	4b5c      	ldr	r3, [pc, #368]	; (4047b0 <pmc_sleep+0x21c>)
  404640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404642:	627b      	str	r3, [r7, #36]	; 0x24
  404644:	4b5b      	ldr	r3, [pc, #364]	; (4047b4 <pmc_sleep+0x220>)
  404646:	681b      	ldr	r3, [r3, #0]
  404648:	623b      	str	r3, [r7, #32]
  40464a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40464c:	2b00      	cmp	r3, #0
  40464e:	d002      	beq.n	404656 <pmc_sleep+0xc2>
  404650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  404652:	6aba      	ldr	r2, [r7, #40]	; 0x28
  404654:	601a      	str	r2, [r3, #0]
  404656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  404658:	2b00      	cmp	r3, #0
  40465a:	d003      	beq.n	404664 <pmc_sleep+0xd0>
  40465c:	4b54      	ldr	r3, [pc, #336]	; (4047b0 <pmc_sleep+0x21c>)
  40465e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  404662:	601a      	str	r2, [r3, #0]
  404664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  404666:	2b00      	cmp	r3, #0
  404668:	d002      	beq.n	404670 <pmc_sleep+0xdc>
  40466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40466c:	2200      	movs	r2, #0
  40466e:	601a      	str	r2, [r3, #0]
  404670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  404672:	2b00      	cmp	r3, #0
  404674:	d002      	beq.n	40467c <pmc_sleep+0xe8>
  404676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  404678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40467a:	601a      	str	r2, [r3, #0]
  40467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40467e:	2b00      	cmp	r3, #0
  404680:	d002      	beq.n	404688 <pmc_sleep+0xf4>
  404682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404684:	6a3a      	ldr	r2, [r7, #32]
  404686:	601a      	str	r2, [r3, #0]
  404688:	4a49      	ldr	r2, [pc, #292]	; (4047b0 <pmc_sleep+0x21c>)
  40468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40468c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404690:	f043 0308 	orr.w	r3, r3, #8
  404694:	6213      	str	r3, [r2, #32]
  404696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404698:	f003 0303 	and.w	r3, r3, #3
  40469c:	2b01      	cmp	r3, #1
  40469e:	d90e      	bls.n	4046be <pmc_sleep+0x12a>
  4046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046a2:	f023 0303 	bic.w	r3, r3, #3
  4046a6:	f043 0301 	orr.w	r3, r3, #1
  4046aa:	627b      	str	r3, [r7, #36]	; 0x24
  4046ac:	4a40      	ldr	r2, [pc, #256]	; (4047b0 <pmc_sleep+0x21c>)
  4046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046b0:	6313      	str	r3, [r2, #48]	; 0x30
  4046b2:	4b3f      	ldr	r3, [pc, #252]	; (4047b0 <pmc_sleep+0x21c>)
  4046b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4046b6:	f003 0308 	and.w	r3, r3, #8
  4046ba:	2b00      	cmp	r3, #0
  4046bc:	d0f9      	beq.n	4046b2 <pmc_sleep+0x11e>
  4046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4046c4:	2b00      	cmp	r3, #0
  4046c6:	d00c      	beq.n	4046e2 <pmc_sleep+0x14e>
  4046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4046ce:	627b      	str	r3, [r7, #36]	; 0x24
  4046d0:	4a37      	ldr	r2, [pc, #220]	; (4047b0 <pmc_sleep+0x21c>)
  4046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046d4:	6313      	str	r3, [r2, #48]	; 0x30
  4046d6:	4b36      	ldr	r3, [pc, #216]	; (4047b0 <pmc_sleep+0x21c>)
  4046d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4046da:	f003 0308 	and.w	r3, r3, #8
  4046de:	2b00      	cmp	r3, #0
  4046e0:	d0f9      	beq.n	4046d6 <pmc_sleep+0x142>
  4046e2:	4b35      	ldr	r3, [pc, #212]	; (4047b8 <pmc_sleep+0x224>)
  4046e4:	4798      	blx	r3
  4046e6:	4b32      	ldr	r3, [pc, #200]	; (4047b0 <pmc_sleep+0x21c>)
  4046e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4046ee:	2b00      	cmp	r3, #0
  4046f0:	d0f9      	beq.n	4046e6 <pmc_sleep+0x152>
  4046f2:	4a30      	ldr	r2, [pc, #192]	; (4047b4 <pmc_sleep+0x220>)
  4046f4:	6a3b      	ldr	r3, [r7, #32]
  4046f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  4046fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4046fe:	6013      	str	r3, [r2, #0]
  404700:	492b      	ldr	r1, [pc, #172]	; (4047b0 <pmc_sleep+0x21c>)
  404702:	4b2b      	ldr	r3, [pc, #172]	; (4047b0 <pmc_sleep+0x21c>)
  404704:	6a1a      	ldr	r2, [r3, #32]
  404706:	4b2d      	ldr	r3, [pc, #180]	; (4047bc <pmc_sleep+0x228>)
  404708:	4013      	ands	r3, r2
  40470a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40470e:	f043 0320 	orr.w	r3, r3, #32
  404712:	620b      	str	r3, [r1, #32]
  404714:	4b26      	ldr	r3, [pc, #152]	; (4047b0 <pmc_sleep+0x21c>)
  404716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40471c:	2b00      	cmp	r3, #0
  40471e:	d0f9      	beq.n	404714 <pmc_sleep+0x180>
  404720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  404724:	2b00      	cmp	r3, #0
  404726:	d009      	beq.n	40473c <pmc_sleep+0x1a8>
  404728:	4a21      	ldr	r2, [pc, #132]	; (4047b0 <pmc_sleep+0x21c>)
  40472a:	4b21      	ldr	r3, [pc, #132]	; (4047b0 <pmc_sleep+0x21c>)
  40472c:	6a1b      	ldr	r3, [r3, #32]
  40472e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404732:	f023 0301 	bic.w	r3, r3, #1
  404736:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40473a:	6213      	str	r3, [r2, #32]
  40473c:	4b19      	ldr	r3, [pc, #100]	; (4047a4 <pmc_sleep+0x210>)
  40473e:	2201      	movs	r2, #1
  404740:	701a      	strb	r2, [r3, #0]
  404742:	f3bf 8f5f 	dmb	sy
  404746:	b662      	cpsie	i
  404748:	4b1d      	ldr	r3, [pc, #116]	; (4047c0 <pmc_sleep+0x22c>)
  40474a:	4798      	blx	r3
  40474c:	b672      	cpsid	i
  40474e:	f3bf 8f5f 	dmb	sy
  404752:	4b14      	ldr	r3, [pc, #80]	; (4047a4 <pmc_sleep+0x210>)
  404754:	2200      	movs	r2, #0
  404756:	701a      	strb	r2, [r3, #0]
  404758:	69fc      	ldr	r4, [r7, #28]
  40475a:	69b8      	ldr	r0, [r7, #24]
  40475c:	6979      	ldr	r1, [r7, #20]
  40475e:	693a      	ldr	r2, [r7, #16]
  404760:	68fb      	ldr	r3, [r7, #12]
  404762:	65fc      	str	r4, [r7, #92]	; 0x5c
  404764:	65b8      	str	r0, [r7, #88]	; 0x58
  404766:	6579      	str	r1, [r7, #84]	; 0x54
  404768:	653a      	str	r2, [r7, #80]	; 0x50
  40476a:	64fb      	str	r3, [r7, #76]	; 0x4c
  40476c:	2300      	movs	r3, #0
  40476e:	64bb      	str	r3, [r7, #72]	; 0x48
  404770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  404772:	f003 0302 	and.w	r3, r3, #2
  404776:	2b00      	cmp	r3, #0
  404778:	d028      	beq.n	4047cc <pmc_sleep+0x238>
  40477a:	490d      	ldr	r1, [pc, #52]	; (4047b0 <pmc_sleep+0x21c>)
  40477c:	4b0c      	ldr	r3, [pc, #48]	; (4047b0 <pmc_sleep+0x21c>)
  40477e:	6a1b      	ldr	r3, [r3, #32]
  404780:	4a10      	ldr	r2, [pc, #64]	; (4047c4 <pmc_sleep+0x230>)
  404782:	401a      	ands	r2, r3
  404784:	4b10      	ldr	r3, [pc, #64]	; (4047c8 <pmc_sleep+0x234>)
  404786:	4313      	orrs	r3, r2
  404788:	620b      	str	r3, [r1, #32]
  40478a:	4a09      	ldr	r2, [pc, #36]	; (4047b0 <pmc_sleep+0x21c>)
  40478c:	4b08      	ldr	r3, [pc, #32]	; (4047b0 <pmc_sleep+0x21c>)
  40478e:	6a1b      	ldr	r3, [r3, #32]
  404790:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404794:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  404798:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40479c:	6213      	str	r3, [r2, #32]
  40479e:	e050      	b.n	404842 <pmc_sleep+0x2ae>
  4047a0:	e000ed00 	.word	0xe000ed00
  4047a4:	20000114 	.word	0x20000114
  4047a8:	004044f9 	.word	0x004044f9
  4047ac:	20000424 	.word	0x20000424
  4047b0:	400e0400 	.word	0x400e0400
  4047b4:	400e0a00 	.word	0x400e0a00
  4047b8:	0040430d 	.word	0x0040430d
  4047bc:	fec8ffdf 	.word	0xfec8ffdf
  4047c0:	00404519 	.word	0x00404519
  4047c4:	fec8fffc 	.word	0xfec8fffc
  4047c8:	01370002 	.word	0x01370002
  4047cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  4047ce:	f003 0301 	and.w	r3, r3, #1
  4047d2:	2b00      	cmp	r3, #0
  4047d4:	d035      	beq.n	404842 <pmc_sleep+0x2ae>
  4047d6:	4b4d      	ldr	r3, [pc, #308]	; (40490c <pmc_sleep+0x378>)
  4047d8:	6a1b      	ldr	r3, [r3, #32]
  4047da:	f003 0301 	and.w	r3, r3, #1
  4047de:	2b00      	cmp	r3, #0
  4047e0:	d111      	bne.n	404806 <pmc_sleep+0x272>
  4047e2:	4a4a      	ldr	r2, [pc, #296]	; (40490c <pmc_sleep+0x378>)
  4047e4:	4b49      	ldr	r3, [pc, #292]	; (40490c <pmc_sleep+0x378>)
  4047e6:	6a1b      	ldr	r3, [r3, #32]
  4047e8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4047ec:	f023 0303 	bic.w	r3, r3, #3
  4047f0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4047f4:	f043 0301 	orr.w	r3, r3, #1
  4047f8:	6213      	str	r3, [r2, #32]
  4047fa:	4b44      	ldr	r3, [pc, #272]	; (40490c <pmc_sleep+0x378>)
  4047fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4047fe:	f003 0301 	and.w	r3, r3, #1
  404802:	2b00      	cmp	r3, #0
  404804:	d0f9      	beq.n	4047fa <pmc_sleep+0x266>
  404806:	4b41      	ldr	r3, [pc, #260]	; (40490c <pmc_sleep+0x378>)
  404808:	6a1b      	ldr	r3, [r3, #32]
  40480a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40480e:	2b00      	cmp	r3, #0
  404810:	d10d      	bne.n	40482e <pmc_sleep+0x29a>
  404812:	4a3e      	ldr	r2, [pc, #248]	; (40490c <pmc_sleep+0x378>)
  404814:	4b3d      	ldr	r3, [pc, #244]	; (40490c <pmc_sleep+0x378>)
  404816:	6a1b      	ldr	r3, [r3, #32]
  404818:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404820:	6213      	str	r3, [r2, #32]
  404822:	4b3a      	ldr	r3, [pc, #232]	; (40490c <pmc_sleep+0x378>)
  404824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40482a:	2b00      	cmp	r3, #0
  40482c:	d0f9      	beq.n	404822 <pmc_sleep+0x28e>
  40482e:	4a37      	ldr	r2, [pc, #220]	; (40490c <pmc_sleep+0x378>)
  404830:	4b36      	ldr	r3, [pc, #216]	; (40490c <pmc_sleep+0x378>)
  404832:	6a1b      	ldr	r3, [r3, #32]
  404834:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404838:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  40483c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404840:	6213      	str	r3, [r2, #32]
  404842:	6dba      	ldr	r2, [r7, #88]	; 0x58
  404844:	4b32      	ldr	r3, [pc, #200]	; (404910 <pmc_sleep+0x37c>)
  404846:	4013      	ands	r3, r2
  404848:	2b00      	cmp	r3, #0
  40484a:	d006      	beq.n	40485a <pmc_sleep+0x2c6>
  40484c:	4a2f      	ldr	r2, [pc, #188]	; (40490c <pmc_sleep+0x378>)
  40484e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  404850:	6293      	str	r3, [r2, #40]	; 0x28
  404852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  404854:	f043 0302 	orr.w	r3, r3, #2
  404858:	64bb      	str	r3, [r7, #72]	; 0x48
  40485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40485c:	f003 0303 	and.w	r3, r3, #3
  404860:	2b02      	cmp	r3, #2
  404862:	d105      	bne.n	404870 <pmc_sleep+0x2dc>
  404864:	4b29      	ldr	r3, [pc, #164]	; (40490c <pmc_sleep+0x378>)
  404866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404868:	f003 0302 	and.w	r3, r3, #2
  40486c:	2b00      	cmp	r3, #0
  40486e:	d0f9      	beq.n	404864 <pmc_sleep+0x2d0>
  404870:	4b26      	ldr	r3, [pc, #152]	; (40490c <pmc_sleep+0x378>)
  404872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404874:	647b      	str	r3, [r7, #68]	; 0x44
  404876:	4925      	ldr	r1, [pc, #148]	; (40490c <pmc_sleep+0x378>)
  404878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40487a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40487e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  404880:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404884:	4313      	orrs	r3, r2
  404886:	630b      	str	r3, [r1, #48]	; 0x30
  404888:	4b20      	ldr	r3, [pc, #128]	; (40490c <pmc_sleep+0x378>)
  40488a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40488c:	f003 0308 	and.w	r3, r3, #8
  404890:	2b00      	cmp	r3, #0
  404892:	d0f9      	beq.n	404888 <pmc_sleep+0x2f4>
  404894:	4a1f      	ldr	r2, [pc, #124]	; (404914 <pmc_sleep+0x380>)
  404896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  404898:	6013      	str	r3, [r2, #0]
  40489a:	4a1c      	ldr	r2, [pc, #112]	; (40490c <pmc_sleep+0x378>)
  40489c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40489e:	6313      	str	r3, [r2, #48]	; 0x30
  4048a0:	4b1a      	ldr	r3, [pc, #104]	; (40490c <pmc_sleep+0x378>)
  4048a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4048a4:	f003 0308 	and.w	r3, r3, #8
  4048a8:	2b00      	cmp	r3, #0
  4048aa:	d0f9      	beq.n	4048a0 <pmc_sleep+0x30c>
  4048ac:	4b17      	ldr	r3, [pc, #92]	; (40490c <pmc_sleep+0x378>)
  4048ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4048b2:	4013      	ands	r3, r2
  4048b4:	2b00      	cmp	r3, #0
  4048b6:	d0f9      	beq.n	4048ac <pmc_sleep+0x318>
  4048b8:	4b17      	ldr	r3, [pc, #92]	; (404918 <pmc_sleep+0x384>)
  4048ba:	2200      	movs	r2, #0
  4048bc:	701a      	strb	r2, [r3, #0]
  4048be:	4b17      	ldr	r3, [pc, #92]	; (40491c <pmc_sleep+0x388>)
  4048c0:	681b      	ldr	r3, [r3, #0]
  4048c2:	2b00      	cmp	r3, #0
  4048c4:	d005      	beq.n	4048d2 <pmc_sleep+0x33e>
  4048c6:	4b15      	ldr	r3, [pc, #84]	; (40491c <pmc_sleep+0x388>)
  4048c8:	681b      	ldr	r3, [r3, #0]
  4048ca:	4798      	blx	r3
  4048cc:	4b13      	ldr	r3, [pc, #76]	; (40491c <pmc_sleep+0x388>)
  4048ce:	2200      	movs	r2, #0
  4048d0:	601a      	str	r2, [r3, #0]
  4048d2:	4b13      	ldr	r3, [pc, #76]	; (404920 <pmc_sleep+0x38c>)
  4048d4:	2201      	movs	r2, #1
  4048d6:	701a      	strb	r2, [r3, #0]
  4048d8:	f3bf 8f5f 	dmb	sy
  4048dc:	b662      	cpsie	i
  4048de:	bf00      	nop
  4048e0:	e010      	b.n	404904 <pmc_sleep+0x370>
  4048e2:	4a10      	ldr	r2, [pc, #64]	; (404924 <pmc_sleep+0x390>)
  4048e4:	4b0f      	ldr	r3, [pc, #60]	; (404924 <pmc_sleep+0x390>)
  4048e6:	691b      	ldr	r3, [r3, #16]
  4048e8:	f043 0304 	orr.w	r3, r3, #4
  4048ec:	6113      	str	r3, [r2, #16]
  4048ee:	4b0e      	ldr	r3, [pc, #56]	; (404928 <pmc_sleep+0x394>)
  4048f0:	4a0e      	ldr	r2, [pc, #56]	; (40492c <pmc_sleep+0x398>)
  4048f2:	601a      	str	r2, [r3, #0]
  4048f4:	4b0a      	ldr	r3, [pc, #40]	; (404920 <pmc_sleep+0x38c>)
  4048f6:	2201      	movs	r2, #1
  4048f8:	701a      	strb	r2, [r3, #0]
  4048fa:	f3bf 8f5f 	dmb	sy
  4048fe:	b662      	cpsie	i
  404900:	bf30      	wfi
  404902:	bf00      	nop
  404904:	bf00      	nop
  404906:	3764      	adds	r7, #100	; 0x64
  404908:	46bd      	mov	sp, r7
  40490a:	bd90      	pop	{r4, r7, pc}
  40490c:	400e0400 	.word	0x400e0400
  404910:	1fff0000 	.word	0x1fff0000
  404914:	400e0a00 	.word	0x400e0a00
  404918:	20000424 	.word	0x20000424
  40491c:	20000428 	.word	0x20000428
  404920:	20000114 	.word	0x20000114
  404924:	e000ed00 	.word	0xe000ed00
  404928:	400e1410 	.word	0x400e1410
  40492c:	a5000004 	.word	0xa5000004

00404930 <rtt_get_status>:
  404930:	b480      	push	{r7}
  404932:	b083      	sub	sp, #12
  404934:	af00      	add	r7, sp, #0
  404936:	6078      	str	r0, [r7, #4]
  404938:	687b      	ldr	r3, [r7, #4]
  40493a:	68db      	ldr	r3, [r3, #12]
  40493c:	4618      	mov	r0, r3
  40493e:	370c      	adds	r7, #12
  404940:	46bd      	mov	sp, r7
  404942:	f85d 7b04 	ldr.w	r7, [sp], #4
  404946:	4770      	bx	lr

00404948 <supc_set_regulator_trim_user>:
  404948:	b480      	push	{r7}
  40494a:	b085      	sub	sp, #20
  40494c:	af00      	add	r7, sp, #0
  40494e:	6078      	str	r0, [r7, #4]
  404950:	6039      	str	r1, [r7, #0]
  404952:	687b      	ldr	r3, [r7, #4]
  404954:	69db      	ldr	r3, [r3, #28]
  404956:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
  40495a:	60fb      	str	r3, [r7, #12]
  40495c:	683b      	ldr	r3, [r7, #0]
  40495e:	025b      	lsls	r3, r3, #9
  404960:	f403 52f0 	and.w	r2, r3, #7680	; 0x1e00
  404964:	68fb      	ldr	r3, [r7, #12]
  404966:	4313      	orrs	r3, r2
  404968:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  40496c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404970:	687a      	ldr	r2, [r7, #4]
  404972:	61d3      	str	r3, [r2, #28]
  404974:	bf00      	nop
  404976:	3714      	adds	r7, #20
  404978:	46bd      	mov	sp, r7
  40497a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40497e:	4770      	bx	lr

00404980 <tc_init>:
  404980:	b480      	push	{r7}
  404982:	b087      	sub	sp, #28
  404984:	af00      	add	r7, sp, #0
  404986:	60f8      	str	r0, [r7, #12]
  404988:	60b9      	str	r1, [r7, #8]
  40498a:	607a      	str	r2, [r7, #4]
  40498c:	68fa      	ldr	r2, [r7, #12]
  40498e:	68bb      	ldr	r3, [r7, #8]
  404990:	019b      	lsls	r3, r3, #6
  404992:	4413      	add	r3, r2
  404994:	617b      	str	r3, [r7, #20]
  404996:	697b      	ldr	r3, [r7, #20]
  404998:	2202      	movs	r2, #2
  40499a:	601a      	str	r2, [r3, #0]
  40499c:	697b      	ldr	r3, [r7, #20]
  40499e:	f04f 32ff 	mov.w	r2, #4294967295
  4049a2:	629a      	str	r2, [r3, #40]	; 0x28
  4049a4:	697b      	ldr	r3, [r7, #20]
  4049a6:	6a1b      	ldr	r3, [r3, #32]
  4049a8:	697b      	ldr	r3, [r7, #20]
  4049aa:	687a      	ldr	r2, [r7, #4]
  4049ac:	605a      	str	r2, [r3, #4]
  4049ae:	bf00      	nop
  4049b0:	371c      	adds	r7, #28
  4049b2:	46bd      	mov	sp, r7
  4049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049b8:	4770      	bx	lr

004049ba <tc_start>:
  4049ba:	b480      	push	{r7}
  4049bc:	b083      	sub	sp, #12
  4049be:	af00      	add	r7, sp, #0
  4049c0:	6078      	str	r0, [r7, #4]
  4049c2:	6039      	str	r1, [r7, #0]
  4049c4:	687a      	ldr	r2, [r7, #4]
  4049c6:	683b      	ldr	r3, [r7, #0]
  4049c8:	019b      	lsls	r3, r3, #6
  4049ca:	4413      	add	r3, r2
  4049cc:	2205      	movs	r2, #5
  4049ce:	601a      	str	r2, [r3, #0]
  4049d0:	bf00      	nop
  4049d2:	370c      	adds	r7, #12
  4049d4:	46bd      	mov	sp, r7
  4049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049da:	4770      	bx	lr

004049dc <tc_write_rc>:
  4049dc:	b480      	push	{r7}
  4049de:	b085      	sub	sp, #20
  4049e0:	af00      	add	r7, sp, #0
  4049e2:	60f8      	str	r0, [r7, #12]
  4049e4:	60b9      	str	r1, [r7, #8]
  4049e6:	607a      	str	r2, [r7, #4]
  4049e8:	68fa      	ldr	r2, [r7, #12]
  4049ea:	68bb      	ldr	r3, [r7, #8]
  4049ec:	019b      	lsls	r3, r3, #6
  4049ee:	4413      	add	r3, r2
  4049f0:	331c      	adds	r3, #28
  4049f2:	687a      	ldr	r2, [r7, #4]
  4049f4:	601a      	str	r2, [r3, #0]
  4049f6:	bf00      	nop
  4049f8:	3714      	adds	r7, #20
  4049fa:	46bd      	mov	sp, r7
  4049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a00:	4770      	bx	lr

00404a02 <tc_enable_interrupt>:
  404a02:	b480      	push	{r7}
  404a04:	b087      	sub	sp, #28
  404a06:	af00      	add	r7, sp, #0
  404a08:	60f8      	str	r0, [r7, #12]
  404a0a:	60b9      	str	r1, [r7, #8]
  404a0c:	607a      	str	r2, [r7, #4]
  404a0e:	68fa      	ldr	r2, [r7, #12]
  404a10:	68bb      	ldr	r3, [r7, #8]
  404a12:	019b      	lsls	r3, r3, #6
  404a14:	4413      	add	r3, r2
  404a16:	617b      	str	r3, [r7, #20]
  404a18:	697b      	ldr	r3, [r7, #20]
  404a1a:	687a      	ldr	r2, [r7, #4]
  404a1c:	625a      	str	r2, [r3, #36]	; 0x24
  404a1e:	bf00      	nop
  404a20:	371c      	adds	r7, #28
  404a22:	46bd      	mov	sp, r7
  404a24:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a28:	4770      	bx	lr

00404a2a <tc_get_interrupt_mask>:
  404a2a:	b480      	push	{r7}
  404a2c:	b085      	sub	sp, #20
  404a2e:	af00      	add	r7, sp, #0
  404a30:	6078      	str	r0, [r7, #4]
  404a32:	6039      	str	r1, [r7, #0]
  404a34:	687a      	ldr	r2, [r7, #4]
  404a36:	683b      	ldr	r3, [r7, #0]
  404a38:	019b      	lsls	r3, r3, #6
  404a3a:	4413      	add	r3, r2
  404a3c:	60fb      	str	r3, [r7, #12]
  404a3e:	68fb      	ldr	r3, [r7, #12]
  404a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404a42:	4618      	mov	r0, r3
  404a44:	3714      	adds	r7, #20
  404a46:	46bd      	mov	sp, r7
  404a48:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a4c:	4770      	bx	lr

00404a4e <tc_get_status>:
  404a4e:	b480      	push	{r7}
  404a50:	b085      	sub	sp, #20
  404a52:	af00      	add	r7, sp, #0
  404a54:	6078      	str	r0, [r7, #4]
  404a56:	6039      	str	r1, [r7, #0]
  404a58:	687a      	ldr	r2, [r7, #4]
  404a5a:	683b      	ldr	r3, [r7, #0]
  404a5c:	019b      	lsls	r3, r3, #6
  404a5e:	4413      	add	r3, r2
  404a60:	60fb      	str	r3, [r7, #12]
  404a62:	68fb      	ldr	r3, [r7, #12]
  404a64:	6a1b      	ldr	r3, [r3, #32]
  404a66:	4618      	mov	r0, r3
  404a68:	3714      	adds	r7, #20
  404a6a:	46bd      	mov	sp, r7
  404a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a70:	4770      	bx	lr

00404a72 <twi_enable_master_mode>:
  404a72:	b480      	push	{r7}
  404a74:	b083      	sub	sp, #12
  404a76:	af00      	add	r7, sp, #0
  404a78:	6078      	str	r0, [r7, #4]
  404a7a:	687b      	ldr	r3, [r7, #4]
  404a7c:	2208      	movs	r2, #8
  404a7e:	601a      	str	r2, [r3, #0]
  404a80:	687b      	ldr	r3, [r7, #4]
  404a82:	2220      	movs	r2, #32
  404a84:	601a      	str	r2, [r3, #0]
  404a86:	687b      	ldr	r3, [r7, #4]
  404a88:	2204      	movs	r2, #4
  404a8a:	601a      	str	r2, [r3, #0]
  404a8c:	bf00      	nop
  404a8e:	370c      	adds	r7, #12
  404a90:	46bd      	mov	sp, r7
  404a92:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a96:	4770      	bx	lr

00404a98 <twi_master_init>:
  404a98:	b580      	push	{r7, lr}
  404a9a:	b084      	sub	sp, #16
  404a9c:	af00      	add	r7, sp, #0
  404a9e:	6078      	str	r0, [r7, #4]
  404aa0:	6039      	str	r1, [r7, #0]
  404aa2:	2300      	movs	r3, #0
  404aa4:	60fb      	str	r3, [r7, #12]
  404aa6:	687b      	ldr	r3, [r7, #4]
  404aa8:	f04f 32ff 	mov.w	r2, #4294967295
  404aac:	629a      	str	r2, [r3, #40]	; 0x28
  404aae:	687b      	ldr	r3, [r7, #4]
  404ab0:	6a1b      	ldr	r3, [r3, #32]
  404ab2:	6878      	ldr	r0, [r7, #4]
  404ab4:	4b0e      	ldr	r3, [pc, #56]	; (404af0 <twi_master_init+0x58>)
  404ab6:	4798      	blx	r3
  404ab8:	6878      	ldr	r0, [r7, #4]
  404aba:	4b0e      	ldr	r3, [pc, #56]	; (404af4 <twi_master_init+0x5c>)
  404abc:	4798      	blx	r3
  404abe:	683b      	ldr	r3, [r7, #0]
  404ac0:	6859      	ldr	r1, [r3, #4]
  404ac2:	683b      	ldr	r3, [r7, #0]
  404ac4:	681b      	ldr	r3, [r3, #0]
  404ac6:	461a      	mov	r2, r3
  404ac8:	6878      	ldr	r0, [r7, #4]
  404aca:	4b0b      	ldr	r3, [pc, #44]	; (404af8 <twi_master_init+0x60>)
  404acc:	4798      	blx	r3
  404ace:	4603      	mov	r3, r0
  404ad0:	2b01      	cmp	r3, #1
  404ad2:	d101      	bne.n	404ad8 <twi_master_init+0x40>
  404ad4:	2301      	movs	r3, #1
  404ad6:	60fb      	str	r3, [r7, #12]
  404ad8:	683b      	ldr	r3, [r7, #0]
  404ada:	7a5b      	ldrb	r3, [r3, #9]
  404adc:	2b01      	cmp	r3, #1
  404ade:	d102      	bne.n	404ae6 <twi_master_init+0x4e>
  404ae0:	687b      	ldr	r3, [r7, #4]
  404ae2:	2240      	movs	r2, #64	; 0x40
  404ae4:	601a      	str	r2, [r3, #0]
  404ae6:	68fb      	ldr	r3, [r7, #12]
  404ae8:	4618      	mov	r0, r3
  404aea:	3710      	adds	r7, #16
  404aec:	46bd      	mov	sp, r7
  404aee:	bd80      	pop	{r7, pc}
  404af0:	00404ea1 	.word	0x00404ea1
  404af4:	00404a73 	.word	0x00404a73
  404af8:	00404afd 	.word	0x00404afd

00404afc <twi_set_speed>:
  404afc:	b480      	push	{r7}
  404afe:	b089      	sub	sp, #36	; 0x24
  404b00:	af00      	add	r7, sp, #0
  404b02:	60f8      	str	r0, [r7, #12]
  404b04:	60b9      	str	r1, [r7, #8]
  404b06:	607a      	str	r2, [r7, #4]
  404b08:	2300      	movs	r3, #0
  404b0a:	61fb      	str	r3, [r7, #28]
  404b0c:	68bb      	ldr	r3, [r7, #8]
  404b0e:	4a34      	ldr	r2, [pc, #208]	; (404be0 <twi_set_speed+0xe4>)
  404b10:	4293      	cmp	r3, r2
  404b12:	d901      	bls.n	404b18 <twi_set_speed+0x1c>
  404b14:	2301      	movs	r3, #1
  404b16:	e05d      	b.n	404bd4 <twi_set_speed+0xd8>
  404b18:	68bb      	ldr	r3, [r7, #8]
  404b1a:	4a32      	ldr	r2, [pc, #200]	; (404be4 <twi_set_speed+0xe8>)
  404b1c:	4293      	cmp	r3, r2
  404b1e:	d937      	bls.n	404b90 <twi_set_speed+0x94>
  404b20:	687b      	ldr	r3, [r7, #4]
  404b22:	4a31      	ldr	r2, [pc, #196]	; (404be8 <twi_set_speed+0xec>)
  404b24:	fba2 2303 	umull	r2, r3, r2, r3
  404b28:	0b9b      	lsrs	r3, r3, #14
  404b2a:	3b03      	subs	r3, #3
  404b2c:	617b      	str	r3, [r7, #20]
  404b2e:	68ba      	ldr	r2, [r7, #8]
  404b30:	4b2e      	ldr	r3, [pc, #184]	; (404bec <twi_set_speed+0xf0>)
  404b32:	4413      	add	r3, r2
  404b34:	009b      	lsls	r3, r3, #2
  404b36:	687a      	ldr	r2, [r7, #4]
  404b38:	fbb2 f3f3 	udiv	r3, r2, r3
  404b3c:	3b03      	subs	r3, #3
  404b3e:	613b      	str	r3, [r7, #16]
  404b40:	e005      	b.n	404b4e <twi_set_speed+0x52>
  404b42:	69fb      	ldr	r3, [r7, #28]
  404b44:	3301      	adds	r3, #1
  404b46:	61fb      	str	r3, [r7, #28]
  404b48:	697b      	ldr	r3, [r7, #20]
  404b4a:	085b      	lsrs	r3, r3, #1
  404b4c:	617b      	str	r3, [r7, #20]
  404b4e:	697b      	ldr	r3, [r7, #20]
  404b50:	2bff      	cmp	r3, #255	; 0xff
  404b52:	d909      	bls.n	404b68 <twi_set_speed+0x6c>
  404b54:	69fb      	ldr	r3, [r7, #28]
  404b56:	2b06      	cmp	r3, #6
  404b58:	d9f3      	bls.n	404b42 <twi_set_speed+0x46>
  404b5a:	e005      	b.n	404b68 <twi_set_speed+0x6c>
  404b5c:	69fb      	ldr	r3, [r7, #28]
  404b5e:	3301      	adds	r3, #1
  404b60:	61fb      	str	r3, [r7, #28]
  404b62:	693b      	ldr	r3, [r7, #16]
  404b64:	085b      	lsrs	r3, r3, #1
  404b66:	613b      	str	r3, [r7, #16]
  404b68:	693b      	ldr	r3, [r7, #16]
  404b6a:	2bff      	cmp	r3, #255	; 0xff
  404b6c:	d902      	bls.n	404b74 <twi_set_speed+0x78>
  404b6e:	69fb      	ldr	r3, [r7, #28]
  404b70:	2b06      	cmp	r3, #6
  404b72:	d9f3      	bls.n	404b5c <twi_set_speed+0x60>
  404b74:	697b      	ldr	r3, [r7, #20]
  404b76:	b2da      	uxtb	r2, r3
  404b78:	693b      	ldr	r3, [r7, #16]
  404b7a:	021b      	lsls	r3, r3, #8
  404b7c:	b29b      	uxth	r3, r3
  404b7e:	431a      	orrs	r2, r3
  404b80:	69fb      	ldr	r3, [r7, #28]
  404b82:	041b      	lsls	r3, r3, #16
  404b84:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  404b88:	431a      	orrs	r2, r3
  404b8a:	68fb      	ldr	r3, [r7, #12]
  404b8c:	611a      	str	r2, [r3, #16]
  404b8e:	e020      	b.n	404bd2 <twi_set_speed+0xd6>
  404b90:	68bb      	ldr	r3, [r7, #8]
  404b92:	005b      	lsls	r3, r3, #1
  404b94:	687a      	ldr	r2, [r7, #4]
  404b96:	fbb2 f3f3 	udiv	r3, r2, r3
  404b9a:	3b03      	subs	r3, #3
  404b9c:	61bb      	str	r3, [r7, #24]
  404b9e:	e005      	b.n	404bac <twi_set_speed+0xb0>
  404ba0:	69fb      	ldr	r3, [r7, #28]
  404ba2:	3301      	adds	r3, #1
  404ba4:	61fb      	str	r3, [r7, #28]
  404ba6:	69bb      	ldr	r3, [r7, #24]
  404ba8:	085b      	lsrs	r3, r3, #1
  404baa:	61bb      	str	r3, [r7, #24]
  404bac:	69bb      	ldr	r3, [r7, #24]
  404bae:	2bff      	cmp	r3, #255	; 0xff
  404bb0:	d902      	bls.n	404bb8 <twi_set_speed+0xbc>
  404bb2:	69fb      	ldr	r3, [r7, #28]
  404bb4:	2b06      	cmp	r3, #6
  404bb6:	d9f3      	bls.n	404ba0 <twi_set_speed+0xa4>
  404bb8:	69bb      	ldr	r3, [r7, #24]
  404bba:	b2da      	uxtb	r2, r3
  404bbc:	69bb      	ldr	r3, [r7, #24]
  404bbe:	021b      	lsls	r3, r3, #8
  404bc0:	b29b      	uxth	r3, r3
  404bc2:	431a      	orrs	r2, r3
  404bc4:	69fb      	ldr	r3, [r7, #28]
  404bc6:	041b      	lsls	r3, r3, #16
  404bc8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  404bcc:	431a      	orrs	r2, r3
  404bce:	68fb      	ldr	r3, [r7, #12]
  404bd0:	611a      	str	r2, [r3, #16]
  404bd2:	2300      	movs	r3, #0
  404bd4:	4618      	mov	r0, r3
  404bd6:	3724      	adds	r7, #36	; 0x24
  404bd8:	46bd      	mov	sp, r7
  404bda:	f85d 7b04 	ldr.w	r7, [sp], #4
  404bde:	4770      	bx	lr
  404be0:	00061a80 	.word	0x00061a80
  404be4:	0005dc00 	.word	0x0005dc00
  404be8:	057619f1 	.word	0x057619f1
  404bec:	3ffd1200 	.word	0x3ffd1200

00404bf0 <twi_mk_addr>:
  404bf0:	b480      	push	{r7}
  404bf2:	b085      	sub	sp, #20
  404bf4:	af00      	add	r7, sp, #0
  404bf6:	6078      	str	r0, [r7, #4]
  404bf8:	6039      	str	r1, [r7, #0]
  404bfa:	683b      	ldr	r3, [r7, #0]
  404bfc:	2b00      	cmp	r3, #0
  404bfe:	d101      	bne.n	404c04 <twi_mk_addr+0x14>
  404c00:	2300      	movs	r3, #0
  404c02:	e01d      	b.n	404c40 <twi_mk_addr+0x50>
  404c04:	687b      	ldr	r3, [r7, #4]
  404c06:	781b      	ldrb	r3, [r3, #0]
  404c08:	60fb      	str	r3, [r7, #12]
  404c0a:	683b      	ldr	r3, [r7, #0]
  404c0c:	2b01      	cmp	r3, #1
  404c0e:	dd09      	ble.n	404c24 <twi_mk_addr+0x34>
  404c10:	68fb      	ldr	r3, [r7, #12]
  404c12:	021b      	lsls	r3, r3, #8
  404c14:	60fb      	str	r3, [r7, #12]
  404c16:	687b      	ldr	r3, [r7, #4]
  404c18:	3301      	adds	r3, #1
  404c1a:	781b      	ldrb	r3, [r3, #0]
  404c1c:	461a      	mov	r2, r3
  404c1e:	68fb      	ldr	r3, [r7, #12]
  404c20:	4313      	orrs	r3, r2
  404c22:	60fb      	str	r3, [r7, #12]
  404c24:	683b      	ldr	r3, [r7, #0]
  404c26:	2b02      	cmp	r3, #2
  404c28:	dd09      	ble.n	404c3e <twi_mk_addr+0x4e>
  404c2a:	68fb      	ldr	r3, [r7, #12]
  404c2c:	021b      	lsls	r3, r3, #8
  404c2e:	60fb      	str	r3, [r7, #12]
  404c30:	687b      	ldr	r3, [r7, #4]
  404c32:	3302      	adds	r3, #2
  404c34:	781b      	ldrb	r3, [r3, #0]
  404c36:	461a      	mov	r2, r3
  404c38:	68fb      	ldr	r3, [r7, #12]
  404c3a:	4313      	orrs	r3, r2
  404c3c:	60fb      	str	r3, [r7, #12]
  404c3e:	68fb      	ldr	r3, [r7, #12]
  404c40:	4618      	mov	r0, r3
  404c42:	3714      	adds	r7, #20
  404c44:	46bd      	mov	sp, r7
  404c46:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c4a:	4770      	bx	lr

00404c4c <twi_master_read>:
  404c4c:	b580      	push	{r7, lr}
  404c4e:	b088      	sub	sp, #32
  404c50:	af00      	add	r7, sp, #0
  404c52:	6078      	str	r0, [r7, #4]
  404c54:	6039      	str	r1, [r7, #0]
  404c56:	683b      	ldr	r3, [r7, #0]
  404c58:	68db      	ldr	r3, [r3, #12]
  404c5a:	61fb      	str	r3, [r7, #28]
  404c5c:	683b      	ldr	r3, [r7, #0]
  404c5e:	689b      	ldr	r3, [r3, #8]
  404c60:	61bb      	str	r3, [r7, #24]
  404c62:	2300      	movs	r3, #0
  404c64:	75fb      	strb	r3, [r7, #23]
  404c66:	f247 5330 	movw	r3, #30000	; 0x7530
  404c6a:	613b      	str	r3, [r7, #16]
  404c6c:	69fb      	ldr	r3, [r7, #28]
  404c6e:	2b00      	cmp	r3, #0
  404c70:	d101      	bne.n	404c76 <twi_master_read+0x2a>
  404c72:	2301      	movs	r3, #1
  404c74:	e069      	b.n	404d4a <twi_master_read+0xfe>
  404c76:	687b      	ldr	r3, [r7, #4]
  404c78:	2200      	movs	r2, #0
  404c7a:	605a      	str	r2, [r3, #4]
  404c7c:	683b      	ldr	r3, [r7, #0]
  404c7e:	7c1b      	ldrb	r3, [r3, #16]
  404c80:	041b      	lsls	r3, r3, #16
  404c82:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
  404c86:	683b      	ldr	r3, [r7, #0]
  404c88:	685b      	ldr	r3, [r3, #4]
  404c8a:	021b      	lsls	r3, r3, #8
  404c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404c90:	4313      	orrs	r3, r2
  404c92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  404c96:	687b      	ldr	r3, [r7, #4]
  404c98:	605a      	str	r2, [r3, #4]
  404c9a:	687b      	ldr	r3, [r7, #4]
  404c9c:	2200      	movs	r2, #0
  404c9e:	60da      	str	r2, [r3, #12]
  404ca0:	683a      	ldr	r2, [r7, #0]
  404ca2:	683b      	ldr	r3, [r7, #0]
  404ca4:	685b      	ldr	r3, [r3, #4]
  404ca6:	4619      	mov	r1, r3
  404ca8:	4610      	mov	r0, r2
  404caa:	4b2a      	ldr	r3, [pc, #168]	; (404d54 <twi_master_read+0x108>)
  404cac:	4798      	blx	r3
  404cae:	4602      	mov	r2, r0
  404cb0:	687b      	ldr	r3, [r7, #4]
  404cb2:	60da      	str	r2, [r3, #12]
  404cb4:	69fb      	ldr	r3, [r7, #28]
  404cb6:	2b01      	cmp	r3, #1
  404cb8:	d105      	bne.n	404cc6 <twi_master_read+0x7a>
  404cba:	687b      	ldr	r3, [r7, #4]
  404cbc:	2203      	movs	r2, #3
  404cbe:	601a      	str	r2, [r3, #0]
  404cc0:	2301      	movs	r3, #1
  404cc2:	75fb      	strb	r3, [r7, #23]
  404cc4:	e034      	b.n	404d30 <twi_master_read+0xe4>
  404cc6:	687b      	ldr	r3, [r7, #4]
  404cc8:	2201      	movs	r2, #1
  404cca:	601a      	str	r2, [r3, #0]
  404ccc:	2300      	movs	r3, #0
  404cce:	75fb      	strb	r3, [r7, #23]
  404cd0:	e02e      	b.n	404d30 <twi_master_read+0xe4>
  404cd2:	687b      	ldr	r3, [r7, #4]
  404cd4:	6a1b      	ldr	r3, [r3, #32]
  404cd6:	60fb      	str	r3, [r7, #12]
  404cd8:	68fb      	ldr	r3, [r7, #12]
  404cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404cde:	2b00      	cmp	r3, #0
  404ce0:	d001      	beq.n	404ce6 <twi_master_read+0x9a>
  404ce2:	2305      	movs	r3, #5
  404ce4:	e031      	b.n	404d4a <twi_master_read+0xfe>
  404ce6:	693b      	ldr	r3, [r7, #16]
  404ce8:	1e5a      	subs	r2, r3, #1
  404cea:	613a      	str	r2, [r7, #16]
  404cec:	2b00      	cmp	r3, #0
  404cee:	d101      	bne.n	404cf4 <twi_master_read+0xa8>
  404cf0:	2309      	movs	r3, #9
  404cf2:	e02a      	b.n	404d4a <twi_master_read+0xfe>
  404cf4:	69fb      	ldr	r3, [r7, #28]
  404cf6:	2b01      	cmp	r3, #1
  404cf8:	d107      	bne.n	404d0a <twi_master_read+0xbe>
  404cfa:	7dfb      	ldrb	r3, [r7, #23]
  404cfc:	2b00      	cmp	r3, #0
  404cfe:	d104      	bne.n	404d0a <twi_master_read+0xbe>
  404d00:	687b      	ldr	r3, [r7, #4]
  404d02:	2202      	movs	r2, #2
  404d04:	601a      	str	r2, [r3, #0]
  404d06:	2301      	movs	r3, #1
  404d08:	75fb      	strb	r3, [r7, #23]
  404d0a:	68fb      	ldr	r3, [r7, #12]
  404d0c:	f003 0302 	and.w	r3, r3, #2
  404d10:	2b00      	cmp	r3, #0
  404d12:	d100      	bne.n	404d16 <twi_master_read+0xca>
  404d14:	e00c      	b.n	404d30 <twi_master_read+0xe4>
  404d16:	69bb      	ldr	r3, [r7, #24]
  404d18:	1c5a      	adds	r2, r3, #1
  404d1a:	61ba      	str	r2, [r7, #24]
  404d1c:	687a      	ldr	r2, [r7, #4]
  404d1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
  404d20:	b2d2      	uxtb	r2, r2
  404d22:	701a      	strb	r2, [r3, #0]
  404d24:	69fb      	ldr	r3, [r7, #28]
  404d26:	3b01      	subs	r3, #1
  404d28:	61fb      	str	r3, [r7, #28]
  404d2a:	f247 5330 	movw	r3, #30000	; 0x7530
  404d2e:	613b      	str	r3, [r7, #16]
  404d30:	69fb      	ldr	r3, [r7, #28]
  404d32:	2b00      	cmp	r3, #0
  404d34:	d1cd      	bne.n	404cd2 <twi_master_read+0x86>
  404d36:	bf00      	nop
  404d38:	687b      	ldr	r3, [r7, #4]
  404d3a:	6a1b      	ldr	r3, [r3, #32]
  404d3c:	f003 0301 	and.w	r3, r3, #1
  404d40:	2b00      	cmp	r3, #0
  404d42:	d0f9      	beq.n	404d38 <twi_master_read+0xec>
  404d44:	687b      	ldr	r3, [r7, #4]
  404d46:	6a1b      	ldr	r3, [r3, #32]
  404d48:	2300      	movs	r3, #0
  404d4a:	4618      	mov	r0, r3
  404d4c:	3720      	adds	r7, #32
  404d4e:	46bd      	mov	sp, r7
  404d50:	bd80      	pop	{r7, pc}
  404d52:	bf00      	nop
  404d54:	00404bf1 	.word	0x00404bf1

00404d58 <twi_master_write>:
  404d58:	b580      	push	{r7, lr}
  404d5a:	b086      	sub	sp, #24
  404d5c:	af00      	add	r7, sp, #0
  404d5e:	6078      	str	r0, [r7, #4]
  404d60:	6039      	str	r1, [r7, #0]
  404d62:	683b      	ldr	r3, [r7, #0]
  404d64:	68db      	ldr	r3, [r3, #12]
  404d66:	617b      	str	r3, [r7, #20]
  404d68:	683b      	ldr	r3, [r7, #0]
  404d6a:	689b      	ldr	r3, [r3, #8]
  404d6c:	613b      	str	r3, [r7, #16]
  404d6e:	697b      	ldr	r3, [r7, #20]
  404d70:	2b00      	cmp	r3, #0
  404d72:	d101      	bne.n	404d78 <twi_master_write+0x20>
  404d74:	2301      	movs	r3, #1
  404d76:	e056      	b.n	404e26 <twi_master_write+0xce>
  404d78:	687b      	ldr	r3, [r7, #4]
  404d7a:	2200      	movs	r2, #0
  404d7c:	605a      	str	r2, [r3, #4]
  404d7e:	683b      	ldr	r3, [r7, #0]
  404d80:	7c1b      	ldrb	r3, [r3, #16]
  404d82:	041b      	lsls	r3, r3, #16
  404d84:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
  404d88:	683b      	ldr	r3, [r7, #0]
  404d8a:	685b      	ldr	r3, [r3, #4]
  404d8c:	021b      	lsls	r3, r3, #8
  404d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404d92:	431a      	orrs	r2, r3
  404d94:	687b      	ldr	r3, [r7, #4]
  404d96:	605a      	str	r2, [r3, #4]
  404d98:	687b      	ldr	r3, [r7, #4]
  404d9a:	2200      	movs	r2, #0
  404d9c:	60da      	str	r2, [r3, #12]
  404d9e:	683a      	ldr	r2, [r7, #0]
  404da0:	683b      	ldr	r3, [r7, #0]
  404da2:	685b      	ldr	r3, [r3, #4]
  404da4:	4619      	mov	r1, r3
  404da6:	4610      	mov	r0, r2
  404da8:	4b21      	ldr	r3, [pc, #132]	; (404e30 <twi_master_write+0xd8>)
  404daa:	4798      	blx	r3
  404dac:	4602      	mov	r2, r0
  404dae:	687b      	ldr	r3, [r7, #4]
  404db0:	60da      	str	r2, [r3, #12]
  404db2:	e019      	b.n	404de8 <twi_master_write+0x90>
  404db4:	687b      	ldr	r3, [r7, #4]
  404db6:	6a1b      	ldr	r3, [r3, #32]
  404db8:	60fb      	str	r3, [r7, #12]
  404dba:	68fb      	ldr	r3, [r7, #12]
  404dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404dc0:	2b00      	cmp	r3, #0
  404dc2:	d001      	beq.n	404dc8 <twi_master_write+0x70>
  404dc4:	2305      	movs	r3, #5
  404dc6:	e02e      	b.n	404e26 <twi_master_write+0xce>
  404dc8:	68fb      	ldr	r3, [r7, #12]
  404dca:	f003 0304 	and.w	r3, r3, #4
  404dce:	2b00      	cmp	r3, #0
  404dd0:	d100      	bne.n	404dd4 <twi_master_write+0x7c>
  404dd2:	e009      	b.n	404de8 <twi_master_write+0x90>
  404dd4:	693b      	ldr	r3, [r7, #16]
  404dd6:	1c5a      	adds	r2, r3, #1
  404dd8:	613a      	str	r2, [r7, #16]
  404dda:	781b      	ldrb	r3, [r3, #0]
  404ddc:	461a      	mov	r2, r3
  404dde:	687b      	ldr	r3, [r7, #4]
  404de0:	635a      	str	r2, [r3, #52]	; 0x34
  404de2:	697b      	ldr	r3, [r7, #20]
  404de4:	3b01      	subs	r3, #1
  404de6:	617b      	str	r3, [r7, #20]
  404de8:	697b      	ldr	r3, [r7, #20]
  404dea:	2b00      	cmp	r3, #0
  404dec:	d1e2      	bne.n	404db4 <twi_master_write+0x5c>
  404dee:	687b      	ldr	r3, [r7, #4]
  404df0:	6a1b      	ldr	r3, [r3, #32]
  404df2:	60fb      	str	r3, [r7, #12]
  404df4:	68fb      	ldr	r3, [r7, #12]
  404df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404dfa:	2b00      	cmp	r3, #0
  404dfc:	d001      	beq.n	404e02 <twi_master_write+0xaa>
  404dfe:	2305      	movs	r3, #5
  404e00:	e011      	b.n	404e26 <twi_master_write+0xce>
  404e02:	68fb      	ldr	r3, [r7, #12]
  404e04:	f003 0304 	and.w	r3, r3, #4
  404e08:	2b00      	cmp	r3, #0
  404e0a:	d100      	bne.n	404e0e <twi_master_write+0xb6>
  404e0c:	e7ef      	b.n	404dee <twi_master_write+0x96>
  404e0e:	bf00      	nop
  404e10:	687b      	ldr	r3, [r7, #4]
  404e12:	2202      	movs	r2, #2
  404e14:	601a      	str	r2, [r3, #0]
  404e16:	bf00      	nop
  404e18:	687b      	ldr	r3, [r7, #4]
  404e1a:	6a1b      	ldr	r3, [r3, #32]
  404e1c:	f003 0301 	and.w	r3, r3, #1
  404e20:	2b00      	cmp	r3, #0
  404e22:	d0f9      	beq.n	404e18 <twi_master_write+0xc0>
  404e24:	2300      	movs	r3, #0
  404e26:	4618      	mov	r0, r3
  404e28:	3718      	adds	r7, #24
  404e2a:	46bd      	mov	sp, r7
  404e2c:	bd80      	pop	{r7, pc}
  404e2e:	bf00      	nop
  404e30:	00404bf1 	.word	0x00404bf1

00404e34 <twi_enable_interrupt>:
  404e34:	b480      	push	{r7}
  404e36:	b083      	sub	sp, #12
  404e38:	af00      	add	r7, sp, #0
  404e3a:	6078      	str	r0, [r7, #4]
  404e3c:	6039      	str	r1, [r7, #0]
  404e3e:	687b      	ldr	r3, [r7, #4]
  404e40:	683a      	ldr	r2, [r7, #0]
  404e42:	625a      	str	r2, [r3, #36]	; 0x24
  404e44:	bf00      	nop
  404e46:	370c      	adds	r7, #12
  404e48:	46bd      	mov	sp, r7
  404e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e4e:	4770      	bx	lr

00404e50 <twi_disable_interrupt>:
  404e50:	b480      	push	{r7}
  404e52:	b083      	sub	sp, #12
  404e54:	af00      	add	r7, sp, #0
  404e56:	6078      	str	r0, [r7, #4]
  404e58:	6039      	str	r1, [r7, #0]
  404e5a:	687b      	ldr	r3, [r7, #4]
  404e5c:	683a      	ldr	r2, [r7, #0]
  404e5e:	629a      	str	r2, [r3, #40]	; 0x28
  404e60:	687b      	ldr	r3, [r7, #4]
  404e62:	6a1b      	ldr	r3, [r3, #32]
  404e64:	bf00      	nop
  404e66:	370c      	adds	r7, #12
  404e68:	46bd      	mov	sp, r7
  404e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e6e:	4770      	bx	lr

00404e70 <twi_get_interrupt_status>:
  404e70:	b480      	push	{r7}
  404e72:	b083      	sub	sp, #12
  404e74:	af00      	add	r7, sp, #0
  404e76:	6078      	str	r0, [r7, #4]
  404e78:	687b      	ldr	r3, [r7, #4]
  404e7a:	6a1b      	ldr	r3, [r3, #32]
  404e7c:	4618      	mov	r0, r3
  404e7e:	370c      	adds	r7, #12
  404e80:	46bd      	mov	sp, r7
  404e82:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e86:	4770      	bx	lr

00404e88 <twi_get_interrupt_mask>:
  404e88:	b480      	push	{r7}
  404e8a:	b083      	sub	sp, #12
  404e8c:	af00      	add	r7, sp, #0
  404e8e:	6078      	str	r0, [r7, #4]
  404e90:	687b      	ldr	r3, [r7, #4]
  404e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404e94:	4618      	mov	r0, r3
  404e96:	370c      	adds	r7, #12
  404e98:	46bd      	mov	sp, r7
  404e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e9e:	4770      	bx	lr

00404ea0 <twi_reset>:
  404ea0:	b480      	push	{r7}
  404ea2:	b083      	sub	sp, #12
  404ea4:	af00      	add	r7, sp, #0
  404ea6:	6078      	str	r0, [r7, #4]
  404ea8:	687b      	ldr	r3, [r7, #4]
  404eaa:	2280      	movs	r2, #128	; 0x80
  404eac:	601a      	str	r2, [r3, #0]
  404eae:	687b      	ldr	r3, [r7, #4]
  404eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404eb2:	bf00      	nop
  404eb4:	370c      	adds	r7, #12
  404eb6:	46bd      	mov	sp, r7
  404eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ebc:	4770      	bx	lr
	...

00404ec0 <twi_get_pdc_base>:
  404ec0:	b480      	push	{r7}
  404ec2:	b085      	sub	sp, #20
  404ec4:	af00      	add	r7, sp, #0
  404ec6:	6078      	str	r0, [r7, #4]
  404ec8:	2300      	movs	r3, #0
  404eca:	60fb      	str	r3, [r7, #12]
  404ecc:	687b      	ldr	r3, [r7, #4]
  404ece:	4a0d      	ldr	r2, [pc, #52]	; (404f04 <twi_get_pdc_base+0x44>)
  404ed0:	4293      	cmp	r3, r2
  404ed2:	d102      	bne.n	404eda <twi_get_pdc_base+0x1a>
  404ed4:	4b0c      	ldr	r3, [pc, #48]	; (404f08 <twi_get_pdc_base+0x48>)
  404ed6:	60fb      	str	r3, [r7, #12]
  404ed8:	e00c      	b.n	404ef4 <twi_get_pdc_base+0x34>
  404eda:	687b      	ldr	r3, [r7, #4]
  404edc:	4a0b      	ldr	r2, [pc, #44]	; (404f0c <twi_get_pdc_base+0x4c>)
  404ede:	4293      	cmp	r3, r2
  404ee0:	d102      	bne.n	404ee8 <twi_get_pdc_base+0x28>
  404ee2:	4b0b      	ldr	r3, [pc, #44]	; (404f10 <twi_get_pdc_base+0x50>)
  404ee4:	60fb      	str	r3, [r7, #12]
  404ee6:	e005      	b.n	404ef4 <twi_get_pdc_base+0x34>
  404ee8:	687b      	ldr	r3, [r7, #4]
  404eea:	4a0a      	ldr	r2, [pc, #40]	; (404f14 <twi_get_pdc_base+0x54>)
  404eec:	4293      	cmp	r3, r2
  404eee:	d101      	bne.n	404ef4 <twi_get_pdc_base+0x34>
  404ef0:	4b09      	ldr	r3, [pc, #36]	; (404f18 <twi_get_pdc_base+0x58>)
  404ef2:	60fb      	str	r3, [r7, #12]
  404ef4:	68fb      	ldr	r3, [r7, #12]
  404ef6:	4618      	mov	r0, r3
  404ef8:	3714      	adds	r7, #20
  404efa:	46bd      	mov	sp, r7
  404efc:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f00:	4770      	bx	lr
  404f02:	bf00      	nop
  404f04:	40020600 	.word	0x40020600
  404f08:	40020700 	.word	0x40020700
  404f0c:	40024600 	.word	0x40024600
  404f10:	40024700 	.word	0x40024700
  404f14:	40018600 	.word	0x40018600
  404f18:	40018700 	.word	0x40018700

00404f1c <usart_set_async_baudrate>:
  404f1c:	b480      	push	{r7}
  404f1e:	b089      	sub	sp, #36	; 0x24
  404f20:	af00      	add	r7, sp, #0
  404f22:	60f8      	str	r0, [r7, #12]
  404f24:	60b9      	str	r1, [r7, #8]
  404f26:	607a      	str	r2, [r7, #4]
  404f28:	68bb      	ldr	r3, [r7, #8]
  404f2a:	011a      	lsls	r2, r3, #4
  404f2c:	687b      	ldr	r3, [r7, #4]
  404f2e:	429a      	cmp	r2, r3
  404f30:	d802      	bhi.n	404f38 <usart_set_async_baudrate+0x1c>
  404f32:	2310      	movs	r3, #16
  404f34:	61fb      	str	r3, [r7, #28]
  404f36:	e001      	b.n	404f3c <usart_set_async_baudrate+0x20>
  404f38:	2308      	movs	r3, #8
  404f3a:	61fb      	str	r3, [r7, #28]
  404f3c:	687b      	ldr	r3, [r7, #4]
  404f3e:	00da      	lsls	r2, r3, #3
  404f40:	69fb      	ldr	r3, [r7, #28]
  404f42:	68b9      	ldr	r1, [r7, #8]
  404f44:	fb01 f303 	mul.w	r3, r1, r3
  404f48:	085b      	lsrs	r3, r3, #1
  404f4a:	441a      	add	r2, r3
  404f4c:	69fb      	ldr	r3, [r7, #28]
  404f4e:	68b9      	ldr	r1, [r7, #8]
  404f50:	fb01 f303 	mul.w	r3, r1, r3
  404f54:	fbb2 f3f3 	udiv	r3, r2, r3
  404f58:	61bb      	str	r3, [r7, #24]
  404f5a:	69bb      	ldr	r3, [r7, #24]
  404f5c:	08db      	lsrs	r3, r3, #3
  404f5e:	617b      	str	r3, [r7, #20]
  404f60:	69bb      	ldr	r3, [r7, #24]
  404f62:	f003 0307 	and.w	r3, r3, #7
  404f66:	613b      	str	r3, [r7, #16]
  404f68:	697b      	ldr	r3, [r7, #20]
  404f6a:	2b00      	cmp	r3, #0
  404f6c:	d003      	beq.n	404f76 <usart_set_async_baudrate+0x5a>
  404f6e:	697b      	ldr	r3, [r7, #20]
  404f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404f74:	d301      	bcc.n	404f7a <usart_set_async_baudrate+0x5e>
  404f76:	2301      	movs	r3, #1
  404f78:	e00f      	b.n	404f9a <usart_set_async_baudrate+0x7e>
  404f7a:	69fb      	ldr	r3, [r7, #28]
  404f7c:	2b08      	cmp	r3, #8
  404f7e:	d105      	bne.n	404f8c <usart_set_async_baudrate+0x70>
  404f80:	68fb      	ldr	r3, [r7, #12]
  404f82:	685b      	ldr	r3, [r3, #4]
  404f84:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  404f88:	68fb      	ldr	r3, [r7, #12]
  404f8a:	605a      	str	r2, [r3, #4]
  404f8c:	693b      	ldr	r3, [r7, #16]
  404f8e:	041a      	lsls	r2, r3, #16
  404f90:	697b      	ldr	r3, [r7, #20]
  404f92:	431a      	orrs	r2, r3
  404f94:	68fb      	ldr	r3, [r7, #12]
  404f96:	621a      	str	r2, [r3, #32]
  404f98:	2300      	movs	r3, #0
  404f9a:	4618      	mov	r0, r3
  404f9c:	3724      	adds	r7, #36	; 0x24
  404f9e:	46bd      	mov	sp, r7
  404fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fa4:	4770      	bx	lr
	...

00404fa8 <usart_reset>:
  404fa8:	b580      	push	{r7, lr}
  404faa:	b082      	sub	sp, #8
  404fac:	af00      	add	r7, sp, #0
  404fae:	6078      	str	r0, [r7, #4]
  404fb0:	6878      	ldr	r0, [r7, #4]
  404fb2:	4b0d      	ldr	r3, [pc, #52]	; (404fe8 <usart_reset+0x40>)
  404fb4:	4798      	blx	r3
  404fb6:	687b      	ldr	r3, [r7, #4]
  404fb8:	2200      	movs	r2, #0
  404fba:	605a      	str	r2, [r3, #4]
  404fbc:	687b      	ldr	r3, [r7, #4]
  404fbe:	2200      	movs	r2, #0
  404fc0:	625a      	str	r2, [r3, #36]	; 0x24
  404fc2:	687b      	ldr	r3, [r7, #4]
  404fc4:	2200      	movs	r2, #0
  404fc6:	629a      	str	r2, [r3, #40]	; 0x28
  404fc8:	6878      	ldr	r0, [r7, #4]
  404fca:	4b08      	ldr	r3, [pc, #32]	; (404fec <usart_reset+0x44>)
  404fcc:	4798      	blx	r3
  404fce:	6878      	ldr	r0, [r7, #4]
  404fd0:	4b07      	ldr	r3, [pc, #28]	; (404ff0 <usart_reset+0x48>)
  404fd2:	4798      	blx	r3
  404fd4:	6878      	ldr	r0, [r7, #4]
  404fd6:	4b07      	ldr	r3, [pc, #28]	; (404ff4 <usart_reset+0x4c>)
  404fd8:	4798      	blx	r3
  404fda:	6878      	ldr	r0, [r7, #4]
  404fdc:	4b06      	ldr	r3, [pc, #24]	; (404ff8 <usart_reset+0x50>)
  404fde:	4798      	blx	r3
  404fe0:	bf00      	nop
  404fe2:	3708      	adds	r7, #8
  404fe4:	46bd      	mov	sp, r7
  404fe6:	bd80      	pop	{r7, pc}
  404fe8:	00405189 	.word	0x00405189
  404fec:	0040509b 	.word	0x0040509b
  404ff0:	004050cf 	.word	0x004050cf
  404ff4:	004050e9 	.word	0x004050e9
  404ff8:	00405105 	.word	0x00405105

00404ffc <usart_init_rs232>:
  404ffc:	b580      	push	{r7, lr}
  404ffe:	b084      	sub	sp, #16
  405000:	af00      	add	r7, sp, #0
  405002:	60f8      	str	r0, [r7, #12]
  405004:	60b9      	str	r1, [r7, #8]
  405006:	607a      	str	r2, [r7, #4]
  405008:	68f8      	ldr	r0, [r7, #12]
  40500a:	4b1a      	ldr	r3, [pc, #104]	; (405074 <usart_init_rs232+0x78>)
  40500c:	4798      	blx	r3
  40500e:	4b1a      	ldr	r3, [pc, #104]	; (405078 <usart_init_rs232+0x7c>)
  405010:	2200      	movs	r2, #0
  405012:	601a      	str	r2, [r3, #0]
  405014:	68bb      	ldr	r3, [r7, #8]
  405016:	2b00      	cmp	r3, #0
  405018:	d009      	beq.n	40502e <usart_init_rs232+0x32>
  40501a:	68bb      	ldr	r3, [r7, #8]
  40501c:	681b      	ldr	r3, [r3, #0]
  40501e:	687a      	ldr	r2, [r7, #4]
  405020:	4619      	mov	r1, r3
  405022:	68f8      	ldr	r0, [r7, #12]
  405024:	4b15      	ldr	r3, [pc, #84]	; (40507c <usart_init_rs232+0x80>)
  405026:	4798      	blx	r3
  405028:	4603      	mov	r3, r0
  40502a:	2b00      	cmp	r3, #0
  40502c:	d001      	beq.n	405032 <usart_init_rs232+0x36>
  40502e:	2301      	movs	r3, #1
  405030:	e01b      	b.n	40506a <usart_init_rs232+0x6e>
  405032:	68bb      	ldr	r3, [r7, #8]
  405034:	685a      	ldr	r2, [r3, #4]
  405036:	68bb      	ldr	r3, [r7, #8]
  405038:	689b      	ldr	r3, [r3, #8]
  40503a:	431a      	orrs	r2, r3
  40503c:	68bb      	ldr	r3, [r7, #8]
  40503e:	691b      	ldr	r3, [r3, #16]
  405040:	431a      	orrs	r2, r3
  405042:	68bb      	ldr	r3, [r7, #8]
  405044:	68db      	ldr	r3, [r3, #12]
  405046:	431a      	orrs	r2, r3
  405048:	4b0b      	ldr	r3, [pc, #44]	; (405078 <usart_init_rs232+0x7c>)
  40504a:	681b      	ldr	r3, [r3, #0]
  40504c:	4313      	orrs	r3, r2
  40504e:	4a0a      	ldr	r2, [pc, #40]	; (405078 <usart_init_rs232+0x7c>)
  405050:	6013      	str	r3, [r2, #0]
  405052:	4b09      	ldr	r3, [pc, #36]	; (405078 <usart_init_rs232+0x7c>)
  405054:	681b      	ldr	r3, [r3, #0]
  405056:	4a08      	ldr	r2, [pc, #32]	; (405078 <usart_init_rs232+0x7c>)
  405058:	6013      	str	r3, [r2, #0]
  40505a:	68fb      	ldr	r3, [r7, #12]
  40505c:	685a      	ldr	r2, [r3, #4]
  40505e:	4b06      	ldr	r3, [pc, #24]	; (405078 <usart_init_rs232+0x7c>)
  405060:	681b      	ldr	r3, [r3, #0]
  405062:	431a      	orrs	r2, r3
  405064:	68fb      	ldr	r3, [r7, #12]
  405066:	605a      	str	r2, [r3, #4]
  405068:	2300      	movs	r3, #0
  40506a:	4618      	mov	r0, r3
  40506c:	3710      	adds	r7, #16
  40506e:	46bd      	mov	sp, r7
  405070:	bd80      	pop	{r7, pc}
  405072:	bf00      	nop
  405074:	00404fa9 	.word	0x00404fa9
  405078:	2000042c 	.word	0x2000042c
  40507c:	00404f1d 	.word	0x00404f1d

00405080 <usart_enable_tx>:
  405080:	b480      	push	{r7}
  405082:	b083      	sub	sp, #12
  405084:	af00      	add	r7, sp, #0
  405086:	6078      	str	r0, [r7, #4]
  405088:	687b      	ldr	r3, [r7, #4]
  40508a:	2240      	movs	r2, #64	; 0x40
  40508c:	601a      	str	r2, [r3, #0]
  40508e:	bf00      	nop
  405090:	370c      	adds	r7, #12
  405092:	46bd      	mov	sp, r7
  405094:	f85d 7b04 	ldr.w	r7, [sp], #4
  405098:	4770      	bx	lr

0040509a <usart_reset_tx>:
  40509a:	b480      	push	{r7}
  40509c:	b083      	sub	sp, #12
  40509e:	af00      	add	r7, sp, #0
  4050a0:	6078      	str	r0, [r7, #4]
  4050a2:	687b      	ldr	r3, [r7, #4]
  4050a4:	2288      	movs	r2, #136	; 0x88
  4050a6:	601a      	str	r2, [r3, #0]
  4050a8:	bf00      	nop
  4050aa:	370c      	adds	r7, #12
  4050ac:	46bd      	mov	sp, r7
  4050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050b2:	4770      	bx	lr

004050b4 <usart_enable_rx>:
  4050b4:	b480      	push	{r7}
  4050b6:	b083      	sub	sp, #12
  4050b8:	af00      	add	r7, sp, #0
  4050ba:	6078      	str	r0, [r7, #4]
  4050bc:	687b      	ldr	r3, [r7, #4]
  4050be:	2210      	movs	r2, #16
  4050c0:	601a      	str	r2, [r3, #0]
  4050c2:	bf00      	nop
  4050c4:	370c      	adds	r7, #12
  4050c6:	46bd      	mov	sp, r7
  4050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050cc:	4770      	bx	lr

004050ce <usart_reset_rx>:
  4050ce:	b480      	push	{r7}
  4050d0:	b083      	sub	sp, #12
  4050d2:	af00      	add	r7, sp, #0
  4050d4:	6078      	str	r0, [r7, #4]
  4050d6:	687b      	ldr	r3, [r7, #4]
  4050d8:	2224      	movs	r2, #36	; 0x24
  4050da:	601a      	str	r2, [r3, #0]
  4050dc:	bf00      	nop
  4050de:	370c      	adds	r7, #12
  4050e0:	46bd      	mov	sp, r7
  4050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050e6:	4770      	bx	lr

004050e8 <usart_reset_status>:
  4050e8:	b480      	push	{r7}
  4050ea:	b083      	sub	sp, #12
  4050ec:	af00      	add	r7, sp, #0
  4050ee:	6078      	str	r0, [r7, #4]
  4050f0:	687b      	ldr	r3, [r7, #4]
  4050f2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4050f6:	601a      	str	r2, [r3, #0]
  4050f8:	bf00      	nop
  4050fa:	370c      	adds	r7, #12
  4050fc:	46bd      	mov	sp, r7
  4050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405102:	4770      	bx	lr

00405104 <usart_drive_RTS_pin_high>:
  405104:	b480      	push	{r7}
  405106:	b083      	sub	sp, #12
  405108:	af00      	add	r7, sp, #0
  40510a:	6078      	str	r0, [r7, #4]
  40510c:	687b      	ldr	r3, [r7, #4]
  40510e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405112:	601a      	str	r2, [r3, #0]
  405114:	bf00      	nop
  405116:	370c      	adds	r7, #12
  405118:	46bd      	mov	sp, r7
  40511a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40511e:	4770      	bx	lr

00405120 <usart_write>:
  405120:	b480      	push	{r7}
  405122:	b083      	sub	sp, #12
  405124:	af00      	add	r7, sp, #0
  405126:	6078      	str	r0, [r7, #4]
  405128:	6039      	str	r1, [r7, #0]
  40512a:	687b      	ldr	r3, [r7, #4]
  40512c:	695b      	ldr	r3, [r3, #20]
  40512e:	f003 0302 	and.w	r3, r3, #2
  405132:	2b00      	cmp	r3, #0
  405134:	d101      	bne.n	40513a <usart_write+0x1a>
  405136:	2301      	movs	r3, #1
  405138:	e005      	b.n	405146 <usart_write+0x26>
  40513a:	683b      	ldr	r3, [r7, #0]
  40513c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  405140:	687b      	ldr	r3, [r7, #4]
  405142:	61da      	str	r2, [r3, #28]
  405144:	2300      	movs	r3, #0
  405146:	4618      	mov	r0, r3
  405148:	370c      	adds	r7, #12
  40514a:	46bd      	mov	sp, r7
  40514c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405150:	4770      	bx	lr

00405152 <usart_read>:
  405152:	b480      	push	{r7}
  405154:	b083      	sub	sp, #12
  405156:	af00      	add	r7, sp, #0
  405158:	6078      	str	r0, [r7, #4]
  40515a:	6039      	str	r1, [r7, #0]
  40515c:	687b      	ldr	r3, [r7, #4]
  40515e:	695b      	ldr	r3, [r3, #20]
  405160:	f003 0301 	and.w	r3, r3, #1
  405164:	2b00      	cmp	r3, #0
  405166:	d101      	bne.n	40516c <usart_read+0x1a>
  405168:	2301      	movs	r3, #1
  40516a:	e006      	b.n	40517a <usart_read+0x28>
  40516c:	687b      	ldr	r3, [r7, #4]
  40516e:	699b      	ldr	r3, [r3, #24]
  405170:	f3c3 0208 	ubfx	r2, r3, #0, #9
  405174:	683b      	ldr	r3, [r7, #0]
  405176:	601a      	str	r2, [r3, #0]
  405178:	2300      	movs	r3, #0
  40517a:	4618      	mov	r0, r3
  40517c:	370c      	adds	r7, #12
  40517e:	46bd      	mov	sp, r7
  405180:	f85d 7b04 	ldr.w	r7, [sp], #4
  405184:	4770      	bx	lr
	...

00405188 <usart_disable_writeprotect>:
  405188:	b480      	push	{r7}
  40518a:	b083      	sub	sp, #12
  40518c:	af00      	add	r7, sp, #0
  40518e:	6078      	str	r0, [r7, #4]
  405190:	687b      	ldr	r3, [r7, #4]
  405192:	4a04      	ldr	r2, [pc, #16]	; (4051a4 <usart_disable_writeprotect+0x1c>)
  405194:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  405198:	bf00      	nop
  40519a:	370c      	adds	r7, #12
  40519c:	46bd      	mov	sp, r7
  40519e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051a2:	4770      	bx	lr
  4051a4:	55534100 	.word	0x55534100

004051a8 <cpu_irq_save>:
  4051a8:	b480      	push	{r7}
  4051aa:	b083      	sub	sp, #12
  4051ac:	af00      	add	r7, sp, #0
  4051ae:	f3ef 8310 	mrs	r3, PRIMASK
  4051b2:	607b      	str	r3, [r7, #4]
  4051b4:	687b      	ldr	r3, [r7, #4]
  4051b6:	2b00      	cmp	r3, #0
  4051b8:	bf0c      	ite	eq
  4051ba:	2301      	moveq	r3, #1
  4051bc:	2300      	movne	r3, #0
  4051be:	b2db      	uxtb	r3, r3
  4051c0:	603b      	str	r3, [r7, #0]
  4051c2:	b672      	cpsid	i
  4051c4:	f3bf 8f5f 	dmb	sy
  4051c8:	4b04      	ldr	r3, [pc, #16]	; (4051dc <cpu_irq_save+0x34>)
  4051ca:	2200      	movs	r2, #0
  4051cc:	701a      	strb	r2, [r3, #0]
  4051ce:	683b      	ldr	r3, [r7, #0]
  4051d0:	4618      	mov	r0, r3
  4051d2:	370c      	adds	r7, #12
  4051d4:	46bd      	mov	sp, r7
  4051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051da:	4770      	bx	lr
  4051dc:	20000114 	.word	0x20000114

004051e0 <cpu_irq_is_enabled_flags>:
  4051e0:	b480      	push	{r7}
  4051e2:	b083      	sub	sp, #12
  4051e4:	af00      	add	r7, sp, #0
  4051e6:	6078      	str	r0, [r7, #4]
  4051e8:	687b      	ldr	r3, [r7, #4]
  4051ea:	2b00      	cmp	r3, #0
  4051ec:	bf14      	ite	ne
  4051ee:	2301      	movne	r3, #1
  4051f0:	2300      	moveq	r3, #0
  4051f2:	b2db      	uxtb	r3, r3
  4051f4:	4618      	mov	r0, r3
  4051f6:	370c      	adds	r7, #12
  4051f8:	46bd      	mov	sp, r7
  4051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051fe:	4770      	bx	lr

00405200 <cpu_irq_restore>:
  405200:	b580      	push	{r7, lr}
  405202:	b082      	sub	sp, #8
  405204:	af00      	add	r7, sp, #0
  405206:	6078      	str	r0, [r7, #4]
  405208:	6878      	ldr	r0, [r7, #4]
  40520a:	4b07      	ldr	r3, [pc, #28]	; (405228 <cpu_irq_restore+0x28>)
  40520c:	4798      	blx	r3
  40520e:	4603      	mov	r3, r0
  405210:	2b00      	cmp	r3, #0
  405212:	d005      	beq.n	405220 <cpu_irq_restore+0x20>
  405214:	4b05      	ldr	r3, [pc, #20]	; (40522c <cpu_irq_restore+0x2c>)
  405216:	2201      	movs	r2, #1
  405218:	701a      	strb	r2, [r3, #0]
  40521a:	f3bf 8f5f 	dmb	sy
  40521e:	b662      	cpsie	i
  405220:	bf00      	nop
  405222:	3708      	adds	r7, #8
  405224:	46bd      	mov	sp, r7
  405226:	bd80      	pop	{r7, pc}
  405228:	004051e1 	.word	0x004051e1
  40522c:	20000114 	.word	0x20000114

00405230 <Reset_Handler>:
  405230:	b580      	push	{r7, lr}
  405232:	b084      	sub	sp, #16
  405234:	af00      	add	r7, sp, #0
  405236:	4b25      	ldr	r3, [pc, #148]	; (4052cc <Reset_Handler+0x9c>)
  405238:	60fb      	str	r3, [r7, #12]
  40523a:	4b25      	ldr	r3, [pc, #148]	; (4052d0 <Reset_Handler+0xa0>)
  40523c:	60bb      	str	r3, [r7, #8]
  40523e:	68fa      	ldr	r2, [r7, #12]
  405240:	68bb      	ldr	r3, [r7, #8]
  405242:	429a      	cmp	r2, r3
  405244:	d00c      	beq.n	405260 <Reset_Handler+0x30>
  405246:	e007      	b.n	405258 <Reset_Handler+0x28>
  405248:	68bb      	ldr	r3, [r7, #8]
  40524a:	1d1a      	adds	r2, r3, #4
  40524c:	60ba      	str	r2, [r7, #8]
  40524e:	68fa      	ldr	r2, [r7, #12]
  405250:	1d11      	adds	r1, r2, #4
  405252:	60f9      	str	r1, [r7, #12]
  405254:	6812      	ldr	r2, [r2, #0]
  405256:	601a      	str	r2, [r3, #0]
  405258:	68bb      	ldr	r3, [r7, #8]
  40525a:	4a1e      	ldr	r2, [pc, #120]	; (4052d4 <Reset_Handler+0xa4>)
  40525c:	4293      	cmp	r3, r2
  40525e:	d3f3      	bcc.n	405248 <Reset_Handler+0x18>
  405260:	4b1d      	ldr	r3, [pc, #116]	; (4052d8 <Reset_Handler+0xa8>)
  405262:	60bb      	str	r3, [r7, #8]
  405264:	e004      	b.n	405270 <Reset_Handler+0x40>
  405266:	68bb      	ldr	r3, [r7, #8]
  405268:	1d1a      	adds	r2, r3, #4
  40526a:	60ba      	str	r2, [r7, #8]
  40526c:	2200      	movs	r2, #0
  40526e:	601a      	str	r2, [r3, #0]
  405270:	68bb      	ldr	r3, [r7, #8]
  405272:	4a1a      	ldr	r2, [pc, #104]	; (4052dc <Reset_Handler+0xac>)
  405274:	4293      	cmp	r3, r2
  405276:	d3f6      	bcc.n	405266 <Reset_Handler+0x36>
  405278:	4b19      	ldr	r3, [pc, #100]	; (4052e0 <Reset_Handler+0xb0>)
  40527a:	60fb      	str	r3, [r7, #12]
  40527c:	4a19      	ldr	r2, [pc, #100]	; (4052e4 <Reset_Handler+0xb4>)
  40527e:	68fb      	ldr	r3, [r7, #12]
  405280:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405284:	6093      	str	r3, [r2, #8]
  405286:	4b18      	ldr	r3, [pc, #96]	; (4052e8 <Reset_Handler+0xb8>)
  405288:	4798      	blx	r3
  40528a:	6078      	str	r0, [r7, #4]
  40528c:	4a17      	ldr	r2, [pc, #92]	; (4052ec <Reset_Handler+0xbc>)
  40528e:	4b17      	ldr	r3, [pc, #92]	; (4052ec <Reset_Handler+0xbc>)
  405290:	681b      	ldr	r3, [r3, #0]
  405292:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405296:	6013      	str	r3, [r2, #0]
  405298:	f3bf 8f4f 	dsb	sy
  40529c:	f3bf 8f6f 	isb	sy
  4052a0:	6878      	ldr	r0, [r7, #4]
  4052a2:	4b13      	ldr	r3, [pc, #76]	; (4052f0 <Reset_Handler+0xc0>)
  4052a4:	4798      	blx	r3
  4052a6:	68fb      	ldr	r3, [r7, #12]
  4052a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4052ac:	d309      	bcc.n	4052c2 <Reset_Handler+0x92>
  4052ae:	68fb      	ldr	r3, [r7, #12]
  4052b0:	4a10      	ldr	r2, [pc, #64]	; (4052f4 <Reset_Handler+0xc4>)
  4052b2:	4293      	cmp	r3, r2
  4052b4:	d805      	bhi.n	4052c2 <Reset_Handler+0x92>
  4052b6:	4a0b      	ldr	r2, [pc, #44]	; (4052e4 <Reset_Handler+0xb4>)
  4052b8:	4b0a      	ldr	r3, [pc, #40]	; (4052e4 <Reset_Handler+0xb4>)
  4052ba:	689b      	ldr	r3, [r3, #8]
  4052bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4052c0:	6093      	str	r3, [r2, #8]
  4052c2:	4b0d      	ldr	r3, [pc, #52]	; (4052f8 <Reset_Handler+0xc8>)
  4052c4:	4798      	blx	r3
  4052c6:	4b0d      	ldr	r3, [pc, #52]	; (4052fc <Reset_Handler+0xcc>)
  4052c8:	4798      	blx	r3
  4052ca:	e7fe      	b.n	4052ca <Reset_Handler+0x9a>
  4052cc:	0040d020 	.word	0x0040d020
  4052d0:	20000000 	.word	0x20000000
  4052d4:	20000348 	.word	0x20000348
  4052d8:	20000348 	.word	0x20000348
  4052dc:	20000930 	.word	0x20000930
  4052e0:	00400000 	.word	0x00400000
  4052e4:	e000ed00 	.word	0xe000ed00
  4052e8:	004051a9 	.word	0x004051a9
  4052ec:	e000ed88 	.word	0xe000ed88
  4052f0:	00405201 	.word	0x00405201
  4052f4:	20027fff 	.word	0x20027fff
  4052f8:	00408b75 	.word	0x00408b75
  4052fc:	004001b9 	.word	0x004001b9

00405300 <Dummy_Handler>:
  405300:	b480      	push	{r7}
  405302:	af00      	add	r7, sp, #0
  405304:	e7fe      	b.n	405304 <Dummy_Handler+0x4>
	...

00405308 <SystemCoreClockUpdate>:
  405308:	b480      	push	{r7}
  40530a:	af00      	add	r7, sp, #0
  40530c:	4b41      	ldr	r3, [pc, #260]	; (405414 <SystemCoreClockUpdate+0x10c>)
  40530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405310:	f003 0303 	and.w	r3, r3, #3
  405314:	2b01      	cmp	r3, #1
  405316:	d014      	beq.n	405342 <SystemCoreClockUpdate+0x3a>
  405318:	2b01      	cmp	r3, #1
  40531a:	d302      	bcc.n	405322 <SystemCoreClockUpdate+0x1a>
  40531c:	2b02      	cmp	r3, #2
  40531e:	d038      	beq.n	405392 <SystemCoreClockUpdate+0x8a>
  405320:	e059      	b.n	4053d6 <SystemCoreClockUpdate+0xce>
  405322:	4b3d      	ldr	r3, [pc, #244]	; (405418 <SystemCoreClockUpdate+0x110>)
  405324:	695b      	ldr	r3, [r3, #20]
  405326:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40532a:	2b00      	cmp	r3, #0
  40532c:	d004      	beq.n	405338 <SystemCoreClockUpdate+0x30>
  40532e:	4b3b      	ldr	r3, [pc, #236]	; (40541c <SystemCoreClockUpdate+0x114>)
  405330:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405334:	601a      	str	r2, [r3, #0]
  405336:	e04e      	b.n	4053d6 <SystemCoreClockUpdate+0xce>
  405338:	4b38      	ldr	r3, [pc, #224]	; (40541c <SystemCoreClockUpdate+0x114>)
  40533a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40533e:	601a      	str	r2, [r3, #0]
  405340:	e049      	b.n	4053d6 <SystemCoreClockUpdate+0xce>
  405342:	4b34      	ldr	r3, [pc, #208]	; (405414 <SystemCoreClockUpdate+0x10c>)
  405344:	6a1b      	ldr	r3, [r3, #32]
  405346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40534a:	2b00      	cmp	r3, #0
  40534c:	d003      	beq.n	405356 <SystemCoreClockUpdate+0x4e>
  40534e:	4b33      	ldr	r3, [pc, #204]	; (40541c <SystemCoreClockUpdate+0x114>)
  405350:	4a33      	ldr	r2, [pc, #204]	; (405420 <SystemCoreClockUpdate+0x118>)
  405352:	601a      	str	r2, [r3, #0]
  405354:	e03f      	b.n	4053d6 <SystemCoreClockUpdate+0xce>
  405356:	4b31      	ldr	r3, [pc, #196]	; (40541c <SystemCoreClockUpdate+0x114>)
  405358:	4a32      	ldr	r2, [pc, #200]	; (405424 <SystemCoreClockUpdate+0x11c>)
  40535a:	601a      	str	r2, [r3, #0]
  40535c:	4b2d      	ldr	r3, [pc, #180]	; (405414 <SystemCoreClockUpdate+0x10c>)
  40535e:	6a1b      	ldr	r3, [r3, #32]
  405360:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405364:	2b10      	cmp	r3, #16
  405366:	d004      	beq.n	405372 <SystemCoreClockUpdate+0x6a>
  405368:	2b20      	cmp	r3, #32
  40536a:	d008      	beq.n	40537e <SystemCoreClockUpdate+0x76>
  40536c:	2b00      	cmp	r3, #0
  40536e:	d00e      	beq.n	40538e <SystemCoreClockUpdate+0x86>
  405370:	e00e      	b.n	405390 <SystemCoreClockUpdate+0x88>
  405372:	4b2a      	ldr	r3, [pc, #168]	; (40541c <SystemCoreClockUpdate+0x114>)
  405374:	681b      	ldr	r3, [r3, #0]
  405376:	005b      	lsls	r3, r3, #1
  405378:	4a28      	ldr	r2, [pc, #160]	; (40541c <SystemCoreClockUpdate+0x114>)
  40537a:	6013      	str	r3, [r2, #0]
  40537c:	e008      	b.n	405390 <SystemCoreClockUpdate+0x88>
  40537e:	4b27      	ldr	r3, [pc, #156]	; (40541c <SystemCoreClockUpdate+0x114>)
  405380:	681a      	ldr	r2, [r3, #0]
  405382:	4613      	mov	r3, r2
  405384:	005b      	lsls	r3, r3, #1
  405386:	4413      	add	r3, r2
  405388:	4a24      	ldr	r2, [pc, #144]	; (40541c <SystemCoreClockUpdate+0x114>)
  40538a:	6013      	str	r3, [r2, #0]
  40538c:	e000      	b.n	405390 <SystemCoreClockUpdate+0x88>
  40538e:	bf00      	nop
  405390:	e021      	b.n	4053d6 <SystemCoreClockUpdate+0xce>
  405392:	4b21      	ldr	r3, [pc, #132]	; (405418 <SystemCoreClockUpdate+0x110>)
  405394:	695b      	ldr	r3, [r3, #20]
  405396:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40539a:	2b00      	cmp	r3, #0
  40539c:	d004      	beq.n	4053a8 <SystemCoreClockUpdate+0xa0>
  40539e:	4b1f      	ldr	r3, [pc, #124]	; (40541c <SystemCoreClockUpdate+0x114>)
  4053a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4053a4:	601a      	str	r2, [r3, #0]
  4053a6:	e003      	b.n	4053b0 <SystemCoreClockUpdate+0xa8>
  4053a8:	4b1c      	ldr	r3, [pc, #112]	; (40541c <SystemCoreClockUpdate+0x114>)
  4053aa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4053ae:	601a      	str	r2, [r3, #0]
  4053b0:	4b18      	ldr	r3, [pc, #96]	; (405414 <SystemCoreClockUpdate+0x10c>)
  4053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4053b4:	f003 0303 	and.w	r3, r3, #3
  4053b8:	2b02      	cmp	r3, #2
  4053ba:	d10b      	bne.n	4053d4 <SystemCoreClockUpdate+0xcc>
  4053bc:	4b15      	ldr	r3, [pc, #84]	; (405414 <SystemCoreClockUpdate+0x10c>)
  4053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4053c0:	0c1b      	lsrs	r3, r3, #16
  4053c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
  4053c6:	3301      	adds	r3, #1
  4053c8:	4a14      	ldr	r2, [pc, #80]	; (40541c <SystemCoreClockUpdate+0x114>)
  4053ca:	6812      	ldr	r2, [r2, #0]
  4053cc:	fb02 f303 	mul.w	r3, r2, r3
  4053d0:	4a12      	ldr	r2, [pc, #72]	; (40541c <SystemCoreClockUpdate+0x114>)
  4053d2:	6013      	str	r3, [r2, #0]
  4053d4:	bf00      	nop
  4053d6:	4b0f      	ldr	r3, [pc, #60]	; (405414 <SystemCoreClockUpdate+0x10c>)
  4053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4053da:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4053de:	2b70      	cmp	r3, #112	; 0x70
  4053e0:	d108      	bne.n	4053f4 <SystemCoreClockUpdate+0xec>
  4053e2:	4b0e      	ldr	r3, [pc, #56]	; (40541c <SystemCoreClockUpdate+0x114>)
  4053e4:	681b      	ldr	r3, [r3, #0]
  4053e6:	4a10      	ldr	r2, [pc, #64]	; (405428 <SystemCoreClockUpdate+0x120>)
  4053e8:	fba2 2303 	umull	r2, r3, r2, r3
  4053ec:	085b      	lsrs	r3, r3, #1
  4053ee:	4a0b      	ldr	r2, [pc, #44]	; (40541c <SystemCoreClockUpdate+0x114>)
  4053f0:	6013      	str	r3, [r2, #0]
  4053f2:	e00a      	b.n	40540a <SystemCoreClockUpdate+0x102>
  4053f4:	4b07      	ldr	r3, [pc, #28]	; (405414 <SystemCoreClockUpdate+0x10c>)
  4053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4053f8:	091b      	lsrs	r3, r3, #4
  4053fa:	f003 0307 	and.w	r3, r3, #7
  4053fe:	4a07      	ldr	r2, [pc, #28]	; (40541c <SystemCoreClockUpdate+0x114>)
  405400:	6812      	ldr	r2, [r2, #0]
  405402:	fa22 f303 	lsr.w	r3, r2, r3
  405406:	4a05      	ldr	r2, [pc, #20]	; (40541c <SystemCoreClockUpdate+0x114>)
  405408:	6013      	str	r3, [r2, #0]
  40540a:	bf00      	nop
  40540c:	46bd      	mov	sp, r7
  40540e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405412:	4770      	bx	lr
  405414:	400e0400 	.word	0x400e0400
  405418:	400e1410 	.word	0x400e1410
  40541c:	20000170 	.word	0x20000170
  405420:	00b71b00 	.word	0x00b71b00
  405424:	007a1200 	.word	0x007a1200
  405428:	aaaaaaab 	.word	0xaaaaaaab

0040542c <system_init_flash>:
  40542c:	b480      	push	{r7}
  40542e:	b083      	sub	sp, #12
  405430:	af00      	add	r7, sp, #0
  405432:	6078      	str	r0, [r7, #4]
  405434:	687b      	ldr	r3, [r7, #4]
  405436:	4a19      	ldr	r2, [pc, #100]	; (40549c <system_init_flash+0x70>)
  405438:	4293      	cmp	r3, r2
  40543a:	d804      	bhi.n	405446 <system_init_flash+0x1a>
  40543c:	4b18      	ldr	r3, [pc, #96]	; (4054a0 <system_init_flash+0x74>)
  40543e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  405442:	601a      	str	r2, [r3, #0]
  405444:	e023      	b.n	40548e <system_init_flash+0x62>
  405446:	687b      	ldr	r3, [r7, #4]
  405448:	4a16      	ldr	r2, [pc, #88]	; (4054a4 <system_init_flash+0x78>)
  40544a:	4293      	cmp	r3, r2
  40544c:	d803      	bhi.n	405456 <system_init_flash+0x2a>
  40544e:	4b14      	ldr	r3, [pc, #80]	; (4054a0 <system_init_flash+0x74>)
  405450:	4a15      	ldr	r2, [pc, #84]	; (4054a8 <system_init_flash+0x7c>)
  405452:	601a      	str	r2, [r3, #0]
  405454:	e01b      	b.n	40548e <system_init_flash+0x62>
  405456:	687b      	ldr	r3, [r7, #4]
  405458:	4a14      	ldr	r2, [pc, #80]	; (4054ac <system_init_flash+0x80>)
  40545a:	4293      	cmp	r3, r2
  40545c:	d803      	bhi.n	405466 <system_init_flash+0x3a>
  40545e:	4b10      	ldr	r3, [pc, #64]	; (4054a0 <system_init_flash+0x74>)
  405460:	4a13      	ldr	r2, [pc, #76]	; (4054b0 <system_init_flash+0x84>)
  405462:	601a      	str	r2, [r3, #0]
  405464:	e013      	b.n	40548e <system_init_flash+0x62>
  405466:	687b      	ldr	r3, [r7, #4]
  405468:	4a12      	ldr	r2, [pc, #72]	; (4054b4 <system_init_flash+0x88>)
  40546a:	4293      	cmp	r3, r2
  40546c:	d803      	bhi.n	405476 <system_init_flash+0x4a>
  40546e:	4b0c      	ldr	r3, [pc, #48]	; (4054a0 <system_init_flash+0x74>)
  405470:	4a11      	ldr	r2, [pc, #68]	; (4054b8 <system_init_flash+0x8c>)
  405472:	601a      	str	r2, [r3, #0]
  405474:	e00b      	b.n	40548e <system_init_flash+0x62>
  405476:	687b      	ldr	r3, [r7, #4]
  405478:	4a10      	ldr	r2, [pc, #64]	; (4054bc <system_init_flash+0x90>)
  40547a:	4293      	cmp	r3, r2
  40547c:	d804      	bhi.n	405488 <system_init_flash+0x5c>
  40547e:	4b08      	ldr	r3, [pc, #32]	; (4054a0 <system_init_flash+0x74>)
  405480:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  405484:	601a      	str	r2, [r3, #0]
  405486:	e002      	b.n	40548e <system_init_flash+0x62>
  405488:	4b05      	ldr	r3, [pc, #20]	; (4054a0 <system_init_flash+0x74>)
  40548a:	4a0d      	ldr	r2, [pc, #52]	; (4054c0 <system_init_flash+0x94>)
  40548c:	601a      	str	r2, [r3, #0]
  40548e:	bf00      	nop
  405490:	370c      	adds	r7, #12
  405492:	46bd      	mov	sp, r7
  405494:	f85d 7b04 	ldr.w	r7, [sp], #4
  405498:	4770      	bx	lr
  40549a:	bf00      	nop
  40549c:	01312cff 	.word	0x01312cff
  4054a0:	400e0a00 	.word	0x400e0a00
  4054a4:	026259ff 	.word	0x026259ff
  4054a8:	04000100 	.word	0x04000100
  4054ac:	039386ff 	.word	0x039386ff
  4054b0:	04000200 	.word	0x04000200
  4054b4:	04c4b3ff 	.word	0x04c4b3ff
  4054b8:	04000300 	.word	0x04000300
  4054bc:	05f5e0ff 	.word	0x05f5e0ff
  4054c0:	04000500 	.word	0x04000500

004054c4 <_sbrk>:
  4054c4:	b480      	push	{r7}
  4054c6:	b085      	sub	sp, #20
  4054c8:	af00      	add	r7, sp, #0
  4054ca:	6078      	str	r0, [r7, #4]
  4054cc:	4b10      	ldr	r3, [pc, #64]	; (405510 <_sbrk+0x4c>)
  4054ce:	60fb      	str	r3, [r7, #12]
  4054d0:	4b10      	ldr	r3, [pc, #64]	; (405514 <_sbrk+0x50>)
  4054d2:	681b      	ldr	r3, [r3, #0]
  4054d4:	2b00      	cmp	r3, #0
  4054d6:	d102      	bne.n	4054de <_sbrk+0x1a>
  4054d8:	4b0e      	ldr	r3, [pc, #56]	; (405514 <_sbrk+0x50>)
  4054da:	4a0f      	ldr	r2, [pc, #60]	; (405518 <_sbrk+0x54>)
  4054dc:	601a      	str	r2, [r3, #0]
  4054de:	4b0d      	ldr	r3, [pc, #52]	; (405514 <_sbrk+0x50>)
  4054e0:	681b      	ldr	r3, [r3, #0]
  4054e2:	60bb      	str	r3, [r7, #8]
  4054e4:	68ba      	ldr	r2, [r7, #8]
  4054e6:	687b      	ldr	r3, [r7, #4]
  4054e8:	441a      	add	r2, r3
  4054ea:	68fb      	ldr	r3, [r7, #12]
  4054ec:	429a      	cmp	r2, r3
  4054ee:	dd02      	ble.n	4054f6 <_sbrk+0x32>
  4054f0:	f04f 33ff 	mov.w	r3, #4294967295
  4054f4:	e006      	b.n	405504 <_sbrk+0x40>
  4054f6:	4b07      	ldr	r3, [pc, #28]	; (405514 <_sbrk+0x50>)
  4054f8:	681a      	ldr	r2, [r3, #0]
  4054fa:	687b      	ldr	r3, [r7, #4]
  4054fc:	4413      	add	r3, r2
  4054fe:	4a05      	ldr	r2, [pc, #20]	; (405514 <_sbrk+0x50>)
  405500:	6013      	str	r3, [r2, #0]
  405502:	68bb      	ldr	r3, [r7, #8]
  405504:	4618      	mov	r0, r3
  405506:	3714      	adds	r7, #20
  405508:	46bd      	mov	sp, r7
  40550a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40550e:	4770      	bx	lr
  405510:	20027ffc 	.word	0x20027ffc
  405514:	20000430 	.word	0x20000430
  405518:	20003930 	.word	0x20003930

0040551c <_close>:
  40551c:	b480      	push	{r7}
  40551e:	b083      	sub	sp, #12
  405520:	af00      	add	r7, sp, #0
  405522:	6078      	str	r0, [r7, #4]
  405524:	f04f 33ff 	mov.w	r3, #4294967295
  405528:	4618      	mov	r0, r3
  40552a:	370c      	adds	r7, #12
  40552c:	46bd      	mov	sp, r7
  40552e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405532:	4770      	bx	lr

00405534 <_fstat>:
  405534:	b480      	push	{r7}
  405536:	b083      	sub	sp, #12
  405538:	af00      	add	r7, sp, #0
  40553a:	6078      	str	r0, [r7, #4]
  40553c:	6039      	str	r1, [r7, #0]
  40553e:	683b      	ldr	r3, [r7, #0]
  405540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  405544:	605a      	str	r2, [r3, #4]
  405546:	2300      	movs	r3, #0
  405548:	4618      	mov	r0, r3
  40554a:	370c      	adds	r7, #12
  40554c:	46bd      	mov	sp, r7
  40554e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405552:	4770      	bx	lr

00405554 <_isatty>:
  405554:	b480      	push	{r7}
  405556:	b083      	sub	sp, #12
  405558:	af00      	add	r7, sp, #0
  40555a:	6078      	str	r0, [r7, #4]
  40555c:	2301      	movs	r3, #1
  40555e:	4618      	mov	r0, r3
  405560:	370c      	adds	r7, #12
  405562:	46bd      	mov	sp, r7
  405564:	f85d 7b04 	ldr.w	r7, [sp], #4
  405568:	4770      	bx	lr

0040556a <_lseek>:
  40556a:	b480      	push	{r7}
  40556c:	b085      	sub	sp, #20
  40556e:	af00      	add	r7, sp, #0
  405570:	60f8      	str	r0, [r7, #12]
  405572:	60b9      	str	r1, [r7, #8]
  405574:	607a      	str	r2, [r7, #4]
  405576:	2300      	movs	r3, #0
  405578:	4618      	mov	r0, r3
  40557a:	3714      	adds	r7, #20
  40557c:	46bd      	mov	sp, r7
  40557e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405582:	4770      	bx	lr

00405584 <ch201_gprmt_init>:

#include "soniclib.h"
#include "ch201_gprmt.h"
#include "ch_common.h"

uint8_t ch201_gprmt_init(ch_dev_t *dev_ptr, ch_group_t *grp_ptr, uint8_t i2c_addr, uint8_t io_index, uint8_t i2c_bus_index) {
  405584:	b580      	push	{r7, lr}
  405586:	b084      	sub	sp, #16
  405588:	af00      	add	r7, sp, #0
  40558a:	60f8      	str	r0, [r7, #12]
  40558c:	60b9      	str	r1, [r7, #8]
  40558e:	4611      	mov	r1, r2
  405590:	461a      	mov	r2, r3
  405592:	460b      	mov	r3, r1
  405594:	71fb      	strb	r3, [r7, #7]
  405596:	4613      	mov	r3, r2
  405598:	71bb      	strb	r3, [r7, #6]
	
	dev_ptr->part_number = CH201_PART_NUMBER;
  40559a:	68fb      	ldr	r3, [r7, #12]
  40559c:	22c9      	movs	r2, #201	; 0xc9
  40559e:	839a      	strh	r2, [r3, #28]
	dev_ptr->app_i2c_address = i2c_addr;
  4055a0:	68fb      	ldr	r3, [r7, #12]
  4055a2:	79fa      	ldrb	r2, [r7, #7]
  4055a4:	765a      	strb	r2, [r3, #25]
	dev_ptr->io_index = io_index;
  4055a6:	68fb      	ldr	r3, [r7, #12]
  4055a8:	79ba      	ldrb	r2, [r7, #6]
  4055aa:	f883 2020 	strb.w	r2, [r3, #32]
	dev_ptr->i2c_bus_index = i2c_bus_index;
  4055ae:	68fb      	ldr	r3, [r7, #12]
  4055b0:	7e3a      	ldrb	r2, [r7, #24]
  4055b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	dev_ptr->freqCounterCycles = CH201_COMMON_FREQCOUNTERCYCLES;
  4055b6:	68fb      	ldr	r3, [r7, #12]
  4055b8:	2280      	movs	r2, #128	; 0x80
  4055ba:	80da      	strh	r2, [r3, #6]
	dev_ptr->freqLockValue     = CH201_COMMON_READY_FREQ_LOCKED;
  4055bc:	68fb      	ldr	r3, [r7, #12]
  4055be:	2202      	movs	r2, #2
  4055c0:	715a      	strb	r2, [r3, #5]

	/* Init firmware-specific function pointers */
	dev_ptr->firmware 					= ch201_gprmt_fw;
  4055c2:	68fb      	ldr	r3, [r7, #12]
  4055c4:	4a3b      	ldr	r2, [pc, #236]	; (4056b4 <ch201_gprmt_init+0x130>)
  4055c6:	631a      	str	r2, [r3, #48]	; 0x30
	dev_ptr->fw_version_string			= ch201_gprmt_version;
  4055c8:	4b3b      	ldr	r3, [pc, #236]	; (4056b8 <ch201_gprmt_init+0x134>)
  4055ca:	681a      	ldr	r2, [r3, #0]
  4055cc:	68fb      	ldr	r3, [r7, #12]
  4055ce:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_ptr->ram_init 					= get_ram_ch201_gprmt_init_ptr();
  4055d0:	4b3a      	ldr	r3, [pc, #232]	; (4056bc <ch201_gprmt_init+0x138>)
  4055d2:	4798      	blx	r3
  4055d4:	4602      	mov	r2, r0
  4055d6:	68fb      	ldr	r3, [r7, #12]
  4055d8:	635a      	str	r2, [r3, #52]	; 0x34
	dev_ptr->get_fw_ram_init_size 		= get_ch201_gprmt_fw_ram_init_size;
  4055da:	68fb      	ldr	r3, [r7, #12]
  4055dc:	4a38      	ldr	r2, [pc, #224]	; (4056c0 <ch201_gprmt_init+0x13c>)
  4055de:	651a      	str	r2, [r3, #80]	; 0x50
	dev_ptr->get_fw_ram_init_addr 		= get_ch201_gprmt_fw_ram_init_addr;
  4055e0:	68fb      	ldr	r3, [r7, #12]
  4055e2:	4a38      	ldr	r2, [pc, #224]	; (4056c4 <ch201_gprmt_init+0x140>)
  4055e4:	655a      	str	r2, [r3, #84]	; 0x54

	dev_ptr->prepare_pulse_timer 		= ch_common_prepare_pulse_timer;
  4055e6:	68fb      	ldr	r3, [r7, #12]
  4055e8:	4a37      	ldr	r2, [pc, #220]	; (4056c8 <ch201_gprmt_init+0x144>)
  4055ea:	639a      	str	r2, [r3, #56]	; 0x38
	dev_ptr->store_pt_result 			= ch_common_store_pt_result;
  4055ec:	68fb      	ldr	r3, [r7, #12]
  4055ee:	4a37      	ldr	r2, [pc, #220]	; (4056cc <ch201_gprmt_init+0x148>)
  4055f0:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_ptr->store_op_freq 				= ch_common_store_op_freq;
  4055f2:	68fb      	ldr	r3, [r7, #12]
  4055f4:	4a36      	ldr	r2, [pc, #216]	; (4056d0 <ch201_gprmt_init+0x14c>)
  4055f6:	641a      	str	r2, [r3, #64]	; 0x40
	dev_ptr->store_bandwidth 			= ch_common_store_bandwidth;
  4055f8:	68fb      	ldr	r3, [r7, #12]
  4055fa:	4a36      	ldr	r2, [pc, #216]	; (4056d4 <ch201_gprmt_init+0x150>)
  4055fc:	645a      	str	r2, [r3, #68]	; 0x44
	dev_ptr->store_scalefactor 			= ch_common_store_scale_factor;
  4055fe:	68fb      	ldr	r3, [r7, #12]
  405600:	4a35      	ldr	r2, [pc, #212]	; (4056d8 <ch201_gprmt_init+0x154>)
  405602:	649a      	str	r2, [r3, #72]	; 0x48
	dev_ptr->get_locked_state 			= ch_common_get_locked_state;
  405604:	68fb      	ldr	r3, [r7, #12]
  405606:	4a35      	ldr	r2, [pc, #212]	; (4056dc <ch201_gprmt_init+0x158>)
  405608:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Init API function pointers */
	dev_ptr->api_funcs.fw_load          	= ch_common_fw_load;
  40560a:	68fb      	ldr	r3, [r7, #12]
  40560c:	4a34      	ldr	r2, [pc, #208]	; (4056e0 <ch201_gprmt_init+0x15c>)
  40560e:	659a      	str	r2, [r3, #88]	; 0x58
	dev_ptr->api_funcs.set_mode         	= ch_common_set_mode;
  405610:	68fb      	ldr	r3, [r7, #12]
  405612:	4a34      	ldr	r2, [pc, #208]	; (4056e4 <ch201_gprmt_init+0x160>)
  405614:	65da      	str	r2, [r3, #92]	; 0x5c
	dev_ptr->api_funcs.set_sample_interval  = ch_common_set_sample_interval;
  405616:	68fb      	ldr	r3, [r7, #12]
  405618:	4a33      	ldr	r2, [pc, #204]	; (4056e8 <ch201_gprmt_init+0x164>)
  40561a:	661a      	str	r2, [r3, #96]	; 0x60
	dev_ptr->api_funcs.set_num_samples  	= ch_common_set_num_samples;
  40561c:	68fb      	ldr	r3, [r7, #12]
  40561e:	4a33      	ldr	r2, [pc, #204]	; (4056ec <ch201_gprmt_init+0x168>)
  405620:	665a      	str	r2, [r3, #100]	; 0x64
	dev_ptr->api_funcs.set_max_range    	= ch_common_set_max_range;
  405622:	68fb      	ldr	r3, [r7, #12]
  405624:	4a32      	ldr	r2, [pc, #200]	; (4056f0 <ch201_gprmt_init+0x16c>)
  405626:	669a      	str	r2, [r3, #104]	; 0x68
	dev_ptr->api_funcs.set_static_range 	= NULL;								// not supported
  405628:	68fb      	ldr	r3, [r7, #12]
  40562a:	2200      	movs	r2, #0
  40562c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	dev_ptr->api_funcs.set_rx_holdoff   	= ch_common_set_rx_holdoff;
  405630:	68fb      	ldr	r3, [r7, #12]
  405632:	4a30      	ldr	r2, [pc, #192]	; (4056f4 <ch201_gprmt_init+0x170>)
  405634:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	dev_ptr->api_funcs.get_rx_holdoff   	= ch_common_get_rx_holdoff;
  405638:	68fb      	ldr	r3, [r7, #12]
  40563a:	4a2f      	ldr	r2, [pc, #188]	; (4056f8 <ch201_gprmt_init+0x174>)
  40563c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_ptr->api_funcs.get_range        	= ch_common_get_range;
  405640:	68fb      	ldr	r3, [r7, #12]
  405642:	4a2e      	ldr	r2, [pc, #184]	; (4056fc <ch201_gprmt_init+0x178>)
  405644:	671a      	str	r2, [r3, #112]	; 0x70
	dev_ptr->api_funcs.get_amplitude    	= ch_common_get_amplitude;
  405646:	68fb      	ldr	r3, [r7, #12]
  405648:	4a2d      	ldr	r2, [pc, #180]	; (405700 <ch201_gprmt_init+0x17c>)
  40564a:	679a      	str	r2, [r3, #120]	; 0x78
	dev_ptr->api_funcs.get_iq_data      	= ch_common_get_iq_data;
  40564c:	68fb      	ldr	r3, [r7, #12]
  40564e:	4a2d      	ldr	r2, [pc, #180]	; (405704 <ch201_gprmt_init+0x180>)
  405650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	dev_ptr->api_funcs.get_amplitude_data  	= ch_common_get_amplitude_data;
  405654:	68fb      	ldr	r3, [r7, #12]
  405656:	4a2c      	ldr	r2, [pc, #176]	; (405708 <ch201_gprmt_init+0x184>)
  405658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	dev_ptr->api_funcs.samples_to_mm    	= ch_common_samples_to_mm;
  40565c:	68fb      	ldr	r3, [r7, #12]
  40565e:	4a2b      	ldr	r2, [pc, #172]	; (40570c <ch201_gprmt_init+0x188>)
  405660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	dev_ptr->api_funcs.mm_to_samples    	= ch_common_mm_to_samples;
  405664:	68fb      	ldr	r3, [r7, #12]
  405666:	4a2a      	ldr	r2, [pc, #168]	; (405710 <ch201_gprmt_init+0x18c>)
  405668:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	dev_ptr->api_funcs.set_thresholds   	= ch_common_set_thresholds;
  40566c:	68fb      	ldr	r3, [r7, #12]
  40566e:	4a29      	ldr	r2, [pc, #164]	; (405714 <ch201_gprmt_init+0x190>)
  405670:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	dev_ptr->api_funcs.get_thresholds   	= ch_common_get_thresholds;
  405674:	68fb      	ldr	r3, [r7, #12]
  405676:	4a28      	ldr	r2, [pc, #160]	; (405718 <ch201_gprmt_init+0x194>)
  405678:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	dev_ptr->api_funcs.set_sample_window 	= ch_common_set_sample_window;
  40567c:	68fb      	ldr	r3, [r7, #12]
  40567e:	4a27      	ldr	r2, [pc, #156]	; (40571c <ch201_gprmt_init+0x198>)
  405680:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_ptr->api_funcs.get_amplitude_avg 	= ch_common_get_amplitude_avg;
  405682:	68fb      	ldr	r3, [r7, #12]
  405684:	4a26      	ldr	r2, [pc, #152]	; (405720 <ch201_gprmt_init+0x19c>)
  405686:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Init max sample count */
	dev_ptr->max_samples = CH201_GPRMT_MAX_SAMPLES;
  405688:	68fb      	ldr	r3, [r7, #12]
  40568a:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
  40568e:	845a      	strh	r2, [r3, #34]	; 0x22

	/* This firmware does not use oversampling */
	dev_ptr->oversample = 0;
  405690:	68fb      	ldr	r3, [r7, #12]
  405692:	2200      	movs	r2, #0
  405694:	779a      	strb	r2, [r3, #30]

	/* Init device and group descriptor linkage */
	dev_ptr->group						= grp_ptr;			// set parent group pointer
  405696:	68fb      	ldr	r3, [r7, #12]
  405698:	68ba      	ldr	r2, [r7, #8]
  40569a:	601a      	str	r2, [r3, #0]
	grp_ptr->device[io_index] 	   		= dev_ptr;			// add to parent group
  40569c:	79ba      	ldrb	r2, [r7, #6]
  40569e:	68bb      	ldr	r3, [r7, #8]
  4056a0:	3206      	adds	r2, #6
  4056a2:	68f9      	ldr	r1, [r7, #12]
  4056a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return 0;
  4056a8:	2300      	movs	r3, #0
}
  4056aa:	4618      	mov	r0, r3
  4056ac:	3710      	adds	r7, #16
  4056ae:	46bd      	mov	sp, r7
  4056b0:	bd80      	pop	{r7, pc}
  4056b2:	bf00      	nop
  4056b4:	0040c514 	.word	0x0040c514
  4056b8:	20000174 	.word	0x20000174
  4056bc:	00405749 	.word	0x00405749
  4056c0:	00405737 	.word	0x00405737
  4056c4:	00405725 	.word	0x00405725
  4056c8:	004064cd 	.word	0x004064cd
  4056cc:	00406501 	.word	0x00406501
  4056d0:	0040653d 	.word	0x0040653d
  4056d4:	004065b1 	.word	0x004065b1
  4056d8:	004065c5 	.word	0x004065c5
  4056dc:	0040646d 	.word	0x0040646d
  4056e0:	00405fc1 	.word	0x00405fc1
  4056e4:	00405e7d 	.word	0x00405e7d
  4056e8:	00406011 	.word	0x00406011
  4056ec:	004060c9 	.word	0x004060c9
  4056f0:	00406149 	.word	0x00406149
  4056f4:	00406cb5 	.word	0x00406cb5
  4056f8:	00406d15 	.word	0x00406d15
  4056fc:	00406311 	.word	0x00406311
  405700:	00406429 	.word	0x00406429
  405704:	00406b39 	.word	0x00406b39
  405708:	00406b75 	.word	0x00406b75
  40570c:	004062c1 	.word	0x004062c1
  405710:	004061d5 	.word	0x004061d5
  405714:	00406615 	.word	0x00406615
  405718:	00406729 	.word	0x00406729
  40571c:	00406a15 	.word	0x00406a15
  405720:	00406a69 	.word	0x00406a69

00405724 <get_ch201_gprmt_fw_ram_init_addr>:
const char * ch201_gprmt_gitsha1 = "dev";

#define RAM_INIT_ADDRESS 2410
#define RAM_INIT_WRITE_SIZE   28

uint16_t get_ch201_gprmt_fw_ram_init_addr(void) { return (uint16_t)RAM_INIT_ADDRESS;}
  405724:	b480      	push	{r7}
  405726:	af00      	add	r7, sp, #0
  405728:	f640 136a 	movw	r3, #2410	; 0x96a
  40572c:	4618      	mov	r0, r3
  40572e:	46bd      	mov	sp, r7
  405730:	f85d 7b04 	ldr.w	r7, [sp], #4
  405734:	4770      	bx	lr

00405736 <get_ch201_gprmt_fw_ram_init_size>:
uint16_t get_ch201_gprmt_fw_ram_init_size(void) { return (uint16_t)RAM_INIT_WRITE_SIZE;}
  405736:	b480      	push	{r7}
  405738:	af00      	add	r7, sp, #0
  40573a:	231c      	movs	r3, #28
  40573c:	4618      	mov	r0, r3
  40573e:	46bd      	mov	sp, r7
  405740:	f85d 7b04 	ldr.w	r7, [sp], #4
  405744:	4770      	bx	lr
	...

00405748 <get_ram_ch201_gprmt_init_ptr>:

const unsigned char ram_ch201_gprmt_init[RAM_INIT_WRITE_SIZE] = {
0x88, 0x13, 0xD0, 0x07, 0x20, 0x03, 0x90, 0x01, 0xFA, 0x00, 0xAF, 0x00, 0x06, 0x00, 0x00, 0x00, 
0x00, 0xFA, 0x00, 0x00, 0x64, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00, };

const unsigned char * get_ram_ch201_gprmt_init_ptr(void) { return &ram_ch201_gprmt_init[0];}
  405748:	b480      	push	{r7}
  40574a:	af00      	add	r7, sp, #0
  40574c:	4b02      	ldr	r3, [pc, #8]	; (405758 <get_ram_ch201_gprmt_init_ptr+0x10>)
  40574e:	4618      	mov	r0, r3
  405750:	46bd      	mov	sp, r7
  405752:	f85d 7b04 	ldr.w	r7, [sp], #4
  405756:	4770      	bx	lr
  405758:	0040c4f8 	.word	0x0040c4f8

0040575c <chbsp_debug_toggle>:



/* Functions supporting debugging */

__attribute__((weak)) void chbsp_debug_toggle(uint8_t __attribute__((unused)) dbg_pin_num) {}
  40575c:	b480      	push	{r7}
  40575e:	b083      	sub	sp, #12
  405760:	af00      	add	r7, sp, #0
  405762:	4603      	mov	r3, r0
  405764:	71fb      	strb	r3, [r7, #7]
  405766:	bf00      	nop
  405768:	370c      	adds	r7, #12
  40576a:	46bd      	mov	sp, r7
  40576c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405770:	4770      	bx	lr

00405772 <chbsp_external_i2c_irq_handler>:

__attribute__((weak)) void chbsp_io_set(ch_dev_t *dev_ptr) {
	(void)(dev_ptr);
}

__attribute__((weak)) void chbsp_external_i2c_irq_handler(chdrv_i2c_transaction_t *trans){
  405772:	b480      	push	{r7}
  405774:	b083      	sub	sp, #12
  405776:	af00      	add	r7, sp, #0
  405778:	6078      	str	r0, [r7, #4]
	(void)(trans);
}
  40577a:	bf00      	nop
  40577c:	370c      	adds	r7, #12
  40577e:	46bd      	mov	sp, r7
  405780:	f85d 7b04 	ldr.w	r7, [sp], #4
  405784:	4770      	bx	lr
	...

00405788 <ch_init>:
 *
 * \return 0 (RET_OK) if successful, non-zero otherwise
 *
 */

uint8_t	ch_init(ch_dev_t *dev_ptr, ch_group_t *grp_ptr, uint8_t dev_num, ch_fw_init_func_t fw_init_func) {
  405788:	b590      	push	{r4, r7, lr}
  40578a:	b089      	sub	sp, #36	; 0x24
  40578c:	af02      	add	r7, sp, #8
  40578e:	60f8      	str	r0, [r7, #12]
  405790:	60b9      	str	r1, [r7, #8]
  405792:	603b      	str	r3, [r7, #0]
  405794:	4613      	mov	r3, r2
  405796:	71fb      	strb	r3, [r7, #7]
	
	uint8_t	ret_val = RET_ERR;
  405798:	2301      	movs	r3, #1
  40579a:	75fb      	strb	r3, [r7, #23]

	ch_i2c_info_t	i2c_info;

	if (fw_init_func != NULL) {
  40579c:	683b      	ldr	r3, [r7, #0]
  40579e:	2b00      	cmp	r3, #0
  4057a0:	d019      	beq.n	4057d6 <ch_init+0x4e>
		/* Get I2C parameters from BSP */
		ret_val = chbsp_i2c_get_info(grp_ptr, dev_num, &i2c_info);
  4057a2:	f107 0210 	add.w	r2, r7, #16
  4057a6:	79fb      	ldrb	r3, [r7, #7]
  4057a8:	4619      	mov	r1, r3
  4057aa:	68b8      	ldr	r0, [r7, #8]
  4057ac:	4b0c      	ldr	r3, [pc, #48]	; (4057e0 <ch_init+0x58>)
  4057ae:	4798      	blx	r3
  4057b0:	4603      	mov	r3, r0
  4057b2:	75fb      	strb	r3, [r7, #23]
	
		if (ret_val == RET_OK) {
  4057b4:	7dfb      	ldrb	r3, [r7, #23]
  4057b6:	2b00      	cmp	r3, #0
  4057b8:	d10d      	bne.n	4057d6 <ch_init+0x4e>
			/* Save special handling flags for Chirp driver */
			grp_ptr->i2c_drv_flags = i2c_info.drv_flags;
  4057ba:	8a7a      	ldrh	r2, [r7, #18]
  4057bc:	68bb      	ldr	r3, [r7, #8]
  4057be:	809a      	strh	r2, [r3, #4]

			/* Call asic f/w init function passed in as parameter */
			ret_val = (*fw_init_func)(dev_ptr, grp_ptr, i2c_info.address, dev_num, i2c_info.bus_num);
  4057c0:	7c3a      	ldrb	r2, [r7, #16]
  4057c2:	7c7b      	ldrb	r3, [r7, #17]
  4057c4:	79f9      	ldrb	r1, [r7, #7]
  4057c6:	9300      	str	r3, [sp, #0]
  4057c8:	683c      	ldr	r4, [r7, #0]
  4057ca:	460b      	mov	r3, r1
  4057cc:	68b9      	ldr	r1, [r7, #8]
  4057ce:	68f8      	ldr	r0, [r7, #12]
  4057d0:	47a0      	blx	r4
  4057d2:	4603      	mov	r3, r0
  4057d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret_val;
  4057d6:	7dfb      	ldrb	r3, [r7, #23]
}
  4057d8:	4618      	mov	r0, r3
  4057da:	371c      	adds	r7, #28
  4057dc:	46bd      	mov	sp, r7
  4057de:	bd90      	pop	{r4, r7, pc}
  4057e0:	004026bd 	.word	0x004026bd

004057e4 <ch_get_config>:


uint8_t	ch_get_config(ch_dev_t *dev_ptr, ch_config_t *config_ptr) {
  4057e4:	b480      	push	{r7}
  4057e6:	b085      	sub	sp, #20
  4057e8:	af00      	add	r7, sp, #0
  4057ea:	6078      	str	r0, [r7, #4]
  4057ec:	6039      	str	r1, [r7, #0]
	uint8_t ret_val = 0;
  4057ee:	2300      	movs	r3, #0
  4057f0:	73fb      	strb	r3, [r7, #15]

	config_ptr->mode         	= dev_ptr->mode;
  4057f2:	687b      	ldr	r3, [r7, #4]
  4057f4:	791a      	ldrb	r2, [r3, #4]
  4057f6:	683b      	ldr	r3, [r7, #0]
  4057f8:	701a      	strb	r2, [r3, #0]
	config_ptr->max_range    	= dev_ptr->max_range;
  4057fa:	687b      	ldr	r3, [r7, #4]
  4057fc:	891a      	ldrh	r2, [r3, #8]
  4057fe:	683b      	ldr	r3, [r7, #0]
  405800:	805a      	strh	r2, [r3, #2]
	config_ptr->static_range 	= dev_ptr->static_range;
  405802:	687b      	ldr	r3, [r7, #4]
  405804:	895a      	ldrh	r2, [r3, #10]
  405806:	683b      	ldr	r3, [r7, #0]
  405808:	809a      	strh	r2, [r3, #4]
	config_ptr->sample_interval	= dev_ptr->sample_interval;
  40580a:	687b      	ldr	r3, [r7, #4]
  40580c:	899a      	ldrh	r2, [r3, #12]
  40580e:	683b      	ldr	r3, [r7, #0]
  405810:	80da      	strh	r2, [r3, #6]
	config_ptr->thresh_ptr   	= NULL;				// thresholds not returned here - use ch_get_thresholds()
  405812:	683b      	ldr	r3, [r7, #0]
  405814:	2200      	movs	r2, #0
  405816:	609a      	str	r2, [r3, #8]

	return ret_val;
  405818:	7bfb      	ldrb	r3, [r7, #15]
}
  40581a:	4618      	mov	r0, r3
  40581c:	3714      	adds	r7, #20
  40581e:	46bd      	mov	sp, r7
  405820:	f85d 7b04 	ldr.w	r7, [sp], #4
  405824:	4770      	bx	lr
	...

00405828 <ch_set_config>:


uint8_t	ch_set_config(ch_dev_t *dev_ptr, ch_config_t *config_ptr) {
  405828:	b580      	push	{r7, lr}
  40582a:	b084      	sub	sp, #16
  40582c:	af00      	add	r7, sp, #0
  40582e:	6078      	str	r0, [r7, #4]
  405830:	6039      	str	r1, [r7, #0]
	uint8_t ret_val = 0;
  405832:	2300      	movs	r3, #0
  405834:	73fb      	strb	r3, [r7, #15]

	ret_val = ch_set_mode(dev_ptr, config_ptr->mode);						// set operating mode
  405836:	683b      	ldr	r3, [r7, #0]
  405838:	781b      	ldrb	r3, [r3, #0]
  40583a:	4619      	mov	r1, r3
  40583c:	6878      	ldr	r0, [r7, #4]
  40583e:	4b31      	ldr	r3, [pc, #196]	; (405904 <ch_set_config+0xdc>)
  405840:	4798      	blx	r3
  405842:	4603      	mov	r3, r0
  405844:	73fb      	strb	r3, [r7, #15]

	if (!ret_val) {
  405846:	7bfb      	ldrb	r3, [r7, #15]
  405848:	2b00      	cmp	r3, #0
  40584a:	d10b      	bne.n	405864 <ch_set_config+0x3c>
		dev_ptr->mode = config_ptr->mode;
  40584c:	683b      	ldr	r3, [r7, #0]
  40584e:	781a      	ldrb	r2, [r3, #0]
  405850:	687b      	ldr	r3, [r7, #4]
  405852:	711a      	strb	r2, [r3, #4]

		ret_val = ch_set_max_range(dev_ptr, config_ptr->max_range);			// set max range
  405854:	683b      	ldr	r3, [r7, #0]
  405856:	885b      	ldrh	r3, [r3, #2]
  405858:	4619      	mov	r1, r3
  40585a:	6878      	ldr	r0, [r7, #4]
  40585c:	4b2a      	ldr	r3, [pc, #168]	; (405908 <ch_set_config+0xe0>)
  40585e:	4798      	blx	r3
  405860:	4603      	mov	r3, r0
  405862:	73fb      	strb	r3, [r7, #15]
	}

	if (!ret_val) {
  405864:	7bfb      	ldrb	r3, [r7, #15]
  405866:	2b00      	cmp	r3, #0
  405868:	d112      	bne.n	405890 <ch_set_config+0x68>

		if (dev_ptr->part_number == CH101_PART_NUMBER) {					// static rejection only on CH101
  40586a:	687b      	ldr	r3, [r7, #4]
  40586c:	8b9b      	ldrh	r3, [r3, #28]
  40586e:	2b65      	cmp	r3, #101	; 0x65
  405870:	d10e      	bne.n	405890 <ch_set_config+0x68>
			ret_val = ch_set_static_range(dev_ptr, config_ptr->static_range);	// set static target rejection range
  405872:	683b      	ldr	r3, [r7, #0]
  405874:	889b      	ldrh	r3, [r3, #4]
  405876:	4619      	mov	r1, r3
  405878:	6878      	ldr	r0, [r7, #4]
  40587a:	4b24      	ldr	r3, [pc, #144]	; (40590c <ch_set_config+0xe4>)
  40587c:	4798      	blx	r3
  40587e:	4603      	mov	r3, r0
  405880:	73fb      	strb	r3, [r7, #15]

			if (!ret_val) {
  405882:	7bfb      	ldrb	r3, [r7, #15]
  405884:	2b00      	cmp	r3, #0
  405886:	d103      	bne.n	405890 <ch_set_config+0x68>
				dev_ptr->static_range = config_ptr->static_range;
  405888:	683b      	ldr	r3, [r7, #0]
  40588a:	889a      	ldrh	r2, [r3, #4]
  40588c:	687b      	ldr	r3, [r7, #4]
  40588e:	815a      	strh	r2, [r3, #10]
			}
		}
	}

	if (!ret_val) {
  405890:	7bfb      	ldrb	r3, [r7, #15]
  405892:	2b00      	cmp	r3, #0
  405894:	d107      	bne.n	4058a6 <ch_set_config+0x7e>
		ret_val = ch_set_sample_interval(dev_ptr, config_ptr->sample_interval);		// set sample interval (free-run mode only)
  405896:	683b      	ldr	r3, [r7, #0]
  405898:	88db      	ldrh	r3, [r3, #6]
  40589a:	4619      	mov	r1, r3
  40589c:	6878      	ldr	r0, [r7, #4]
  40589e:	4b1c      	ldr	r3, [pc, #112]	; (405910 <ch_set_config+0xe8>)
  4058a0:	4798      	blx	r3
  4058a2:	4603      	mov	r3, r0
  4058a4:	73fb      	strb	r3, [r7, #15]
	}

	if (!ret_val) {
  4058a6:	7bfb      	ldrb	r3, [r7, #15]
  4058a8:	2b00      	cmp	r3, #0
  4058aa:	d10f      	bne.n	4058cc <ch_set_config+0xa4>
		dev_ptr->sample_interval = config_ptr->sample_interval;
  4058ac:	683b      	ldr	r3, [r7, #0]
  4058ae:	88da      	ldrh	r2, [r3, #6]
  4058b0:	687b      	ldr	r3, [r7, #4]
  4058b2:	819a      	strh	r2, [r3, #12]

		if (dev_ptr->part_number == CH201_PART_NUMBER) {					// multi threshold only on CH201
  4058b4:	687b      	ldr	r3, [r7, #4]
  4058b6:	8b9b      	ldrh	r3, [r3, #28]
  4058b8:	2bc9      	cmp	r3, #201	; 0xc9
  4058ba:	d107      	bne.n	4058cc <ch_set_config+0xa4>
			ret_val = ch_set_thresholds(dev_ptr, config_ptr->thresh_ptr);		// set multiple thresholds
  4058bc:	683b      	ldr	r3, [r7, #0]
  4058be:	689b      	ldr	r3, [r3, #8]
  4058c0:	4619      	mov	r1, r3
  4058c2:	6878      	ldr	r0, [r7, #4]
  4058c4:	4b13      	ldr	r3, [pc, #76]	; (405914 <ch_set_config+0xec>)
  4058c6:	4798      	blx	r3
  4058c8:	4603      	mov	r3, r0
  4058ca:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (!ret_val) {
  4058cc:	7bfb      	ldrb	r3, [r7, #15]
  4058ce:	2b00      	cmp	r3, #0
  4058d0:	d107      	bne.n	4058e2 <ch_set_config+0xba>
		ret_val = ch_set_target_interrupt(dev_ptr, config_ptr->enable_target_int);		// enable/disable target detection interrupt 
  4058d2:	683b      	ldr	r3, [r7, #0]
  4058d4:	7b5b      	ldrb	r3, [r3, #13]
  4058d6:	4619      	mov	r1, r3
  4058d8:	6878      	ldr	r0, [r7, #4]
  4058da:	4b0f      	ldr	r3, [pc, #60]	; (405918 <ch_set_config+0xf0>)
  4058dc:	4798      	blx	r3
  4058de:	4603      	mov	r3, r0
  4058e0:	73fb      	strb	r3, [r7, #15]
	}
	if (!ret_val) {
  4058e2:	7bfb      	ldrb	r3, [r7, #15]
  4058e4:	2b00      	cmp	r3, #0
  4058e6:	d107      	bne.n	4058f8 <ch_set_config+0xd0>
		ret_val = ch_set_time_plan(dev_ptr,config_ptr->time_plan);		// set time plan (sonicsync only)
  4058e8:	683b      	ldr	r3, [r7, #0]
  4058ea:	7b1b      	ldrb	r3, [r3, #12]
  4058ec:	4619      	mov	r1, r3
  4058ee:	6878      	ldr	r0, [r7, #4]
  4058f0:	4b0a      	ldr	r3, [pc, #40]	; (40591c <ch_set_config+0xf4>)
  4058f2:	4798      	blx	r3
  4058f4:	4603      	mov	r3, r0
  4058f6:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
  4058f8:	7bfb      	ldrb	r3, [r7, #15]
}
  4058fa:	4618      	mov	r0, r3
  4058fc:	3710      	adds	r7, #16
  4058fe:	46bd      	mov	sp, r7
  405900:	bd80      	pop	{r7, pc}
  405902:	bf00      	nop
  405904:	00405a43 	.word	0x00405a43
  405908:	00405b21 	.word	0x00405b21
  40590c:	00405b55 	.word	0x00405b55
  405910:	00405a85 	.word	0x00405a85
  405914:	00405d09 	.word	0x00405d09
  405918:	00405e11 	.word	0x00405e11
  40591c:	00405d7d 	.word	0x00405d7d

00405920 <ch_group_start>:




uint8_t	ch_group_start(ch_group_t *grp_ptr) {
  405920:	b580      	push	{r7, lr}
  405922:	b084      	sub	sp, #16
  405924:	af00      	add	r7, sp, #0
  405926:	6078      	str	r0, [r7, #4]
	uint8_t ret_val;

	ret_val = chdrv_group_start(grp_ptr);
  405928:	6878      	ldr	r0, [r7, #4]
  40592a:	4b04      	ldr	r3, [pc, #16]	; (40593c <ch_group_start+0x1c>)
  40592c:	4798      	blx	r3
  40592e:	4603      	mov	r3, r0
  405930:	73fb      	strb	r3, [r7, #15]

	return ret_val;
  405932:	7bfb      	ldrb	r3, [r7, #15]
}
  405934:	4618      	mov	r0, r3
  405936:	3710      	adds	r7, #16
  405938:	46bd      	mov	sp, r7
  40593a:	bd80      	pop	{r7, pc}
  40593c:	00407b19 	.word	0x00407b19

00405940 <ch_group_trigger>:

void ch_trigger(ch_dev_t *dev_ptr) {
	chdrv_hw_trigger(dev_ptr);
}

void ch_group_trigger(ch_group_t *grp_ptr) {
  405940:	b580      	push	{r7, lr}
  405942:	b082      	sub	sp, #8
  405944:	af00      	add	r7, sp, #0
  405946:	6078      	str	r0, [r7, #4]
	chdrv_group_hw_trigger(grp_ptr);
  405948:	6878      	ldr	r0, [r7, #4]
  40594a:	4b03      	ldr	r3, [pc, #12]	; (405958 <ch_group_trigger+0x18>)
  40594c:	4798      	blx	r3
}
  40594e:	bf00      	nop
  405950:	3708      	adds	r7, #8
  405952:	46bd      	mov	sp, r7
  405954:	bd80      	pop	{r7, pc}
  405956:	bf00      	nop
  405958:	0040741d 	.word	0x0040741d

0040595c <ch_sensor_is_connected>:
	} else {
		chdrv_group_soft_reset(grp_ptr);
	}
}

uint8_t ch_sensor_is_connected(ch_dev_t *dev_ptr) {
  40595c:	b480      	push	{r7}
  40595e:	b083      	sub	sp, #12
  405960:	af00      	add	r7, sp, #0
  405962:	6078      	str	r0, [r7, #4]

	return dev_ptr->sensor_connected;
  405964:	687b      	ldr	r3, [r7, #4]
  405966:	7fdb      	ldrb	r3, [r3, #31]
}
  405968:	4618      	mov	r0, r3
  40596a:	370c      	adds	r7, #12
  40596c:	46bd      	mov	sp, r7
  40596e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405972:	4770      	bx	lr

00405974 <ch_get_part_number>:


uint16_t ch_get_part_number(ch_dev_t *dev_ptr) {
  405974:	b480      	push	{r7}
  405976:	b083      	sub	sp, #12
  405978:	af00      	add	r7, sp, #0
  40597a:	6078      	str	r0, [r7, #4]

	return dev_ptr->part_number;
  40597c:	687b      	ldr	r3, [r7, #4]
  40597e:	8b9b      	ldrh	r3, [r3, #28]
}
  405980:	4618      	mov	r0, r3
  405982:	370c      	adds	r7, #12
  405984:	46bd      	mov	sp, r7
  405986:	f85d 7b04 	ldr.w	r7, [sp], #4
  40598a:	4770      	bx	lr

0040598c <ch_get_dev_num>:


uint8_t  ch_get_dev_num(ch_dev_t *dev_ptr) {
  40598c:	b480      	push	{r7}
  40598e:	b083      	sub	sp, #12
  405990:	af00      	add	r7, sp, #0
  405992:	6078      	str	r0, [r7, #4]

	return dev_ptr->io_index;
  405994:	687b      	ldr	r3, [r7, #4]
  405996:	f893 3020 	ldrb.w	r3, [r3, #32]
}
  40599a:	4618      	mov	r0, r3
  40599c:	370c      	adds	r7, #12
  40599e:	46bd      	mov	sp, r7
  4059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059a4:	4770      	bx	lr

004059a6 <ch_get_dev_ptr>:


ch_dev_t *ch_get_dev_ptr(ch_group_t *grp_ptr, uint8_t dev_num) {
  4059a6:	b480      	push	{r7}
  4059a8:	b083      	sub	sp, #12
  4059aa:	af00      	add	r7, sp, #0
  4059ac:	6078      	str	r0, [r7, #4]
  4059ae:	460b      	mov	r3, r1
  4059b0:	70fb      	strb	r3, [r7, #3]

	return grp_ptr->device[dev_num];
  4059b2:	78fa      	ldrb	r2, [r7, #3]
  4059b4:	687b      	ldr	r3, [r7, #4]
  4059b6:	3206      	adds	r2, #6
  4059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  4059bc:	4618      	mov	r0, r3
  4059be:	370c      	adds	r7, #12
  4059c0:	46bd      	mov	sp, r7
  4059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059c6:	4770      	bx	lr

004059c8 <ch_get_i2c_address>:

uint8_t  ch_get_i2c_address(ch_dev_t *dev_ptr) {
  4059c8:	b480      	push	{r7}
  4059ca:	b083      	sub	sp, #12
  4059cc:	af00      	add	r7, sp, #0
  4059ce:	6078      	str	r0, [r7, #4]

	return dev_ptr->i2c_address;
  4059d0:	687b      	ldr	r3, [r7, #4]
  4059d2:	7e1b      	ldrb	r3, [r3, #24]
}
  4059d4:	4618      	mov	r0, r3
  4059d6:	370c      	adds	r7, #12
  4059d8:	46bd      	mov	sp, r7
  4059da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059de:	4770      	bx	lr

004059e0 <ch_get_i2c_bus>:


uint8_t  ch_get_i2c_bus(ch_dev_t *dev_ptr) {
  4059e0:	b480      	push	{r7}
  4059e2:	b083      	sub	sp, #12
  4059e4:	af00      	add	r7, sp, #0
  4059e6:	6078      	str	r0, [r7, #4]

	return dev_ptr->i2c_bus_index;
  4059e8:	687b      	ldr	r3, [r7, #4]
  4059ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
  4059ee:	4618      	mov	r0, r3
  4059f0:	370c      	adds	r7, #12
  4059f2:	46bd      	mov	sp, r7
  4059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059f8:	4770      	bx	lr

004059fa <ch_get_num_ports>:


uint8_t ch_get_num_ports(ch_group_t *grp_ptr) {
  4059fa:	b480      	push	{r7}
  4059fc:	b083      	sub	sp, #12
  4059fe:	af00      	add	r7, sp, #0
  405a00:	6078      	str	r0, [r7, #4]

	return grp_ptr->num_ports;
  405a02:	687b      	ldr	r3, [r7, #4]
  405a04:	781b      	ldrb	r3, [r3, #0]
}
  405a06:	4618      	mov	r0, r3
  405a08:	370c      	adds	r7, #12
  405a0a:	46bd      	mov	sp, r7
  405a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a10:	4770      	bx	lr

00405a12 <ch_get_fw_version_string>:

const char *ch_get_fw_version_string(ch_dev_t *dev_ptr) {
  405a12:	b480      	push	{r7}
  405a14:	b083      	sub	sp, #12
  405a16:	af00      	add	r7, sp, #0
  405a18:	6078      	str	r0, [r7, #4]

	return dev_ptr->fw_version_string;
  405a1a:	687b      	ldr	r3, [r7, #4]
  405a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  405a1e:	4618      	mov	r0, r3
  405a20:	370c      	adds	r7, #12
  405a22:	46bd      	mov	sp, r7
  405a24:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a28:	4770      	bx	lr

00405a2a <ch_get_mode>:

ch_mode_t ch_get_mode(ch_dev_t *dev_ptr) {
  405a2a:	b480      	push	{r7}
  405a2c:	b083      	sub	sp, #12
  405a2e:	af00      	add	r7, sp, #0
  405a30:	6078      	str	r0, [r7, #4]

	return dev_ptr->mode;
  405a32:	687b      	ldr	r3, [r7, #4]
  405a34:	791b      	ldrb	r3, [r3, #4]
}
  405a36:	4618      	mov	r0, r3
  405a38:	370c      	adds	r7, #12
  405a3a:	46bd      	mov	sp, r7
  405a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a40:	4770      	bx	lr

00405a42 <ch_set_mode>:


uint8_t ch_set_mode(ch_dev_t *dev_ptr, ch_mode_t mode) {
  405a42:	b580      	push	{r7, lr}
  405a44:	b084      	sub	sp, #16
  405a46:	af00      	add	r7, sp, #0
  405a48:	6078      	str	r0, [r7, #4]
  405a4a:	460b      	mov	r3, r1
  405a4c:	70fb      	strb	r3, [r7, #3]
	int	ret_val = RET_ERR;
  405a4e:	2301      	movs	r3, #1
  405a50:	60fb      	str	r3, [r7, #12]
	ch_set_mode_func_t func_ptr = dev_ptr->api_funcs.set_mode;
  405a52:	687b      	ldr	r3, [r7, #4]
  405a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  405a56:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405a58:	68bb      	ldr	r3, [r7, #8]
  405a5a:	2b00      	cmp	r3, #0
  405a5c:	d006      	beq.n	405a6c <ch_set_mode+0x2a>
		ret_val = (*func_ptr)(dev_ptr, mode);
  405a5e:	78fa      	ldrb	r2, [r7, #3]
  405a60:	68bb      	ldr	r3, [r7, #8]
  405a62:	4611      	mov	r1, r2
  405a64:	6878      	ldr	r0, [r7, #4]
  405a66:	4798      	blx	r3
  405a68:	4603      	mov	r3, r0
  405a6a:	60fb      	str	r3, [r7, #12]
	}

	if (ret_val == 0) {
  405a6c:	68fb      	ldr	r3, [r7, #12]
  405a6e:	2b00      	cmp	r3, #0
  405a70:	d102      	bne.n	405a78 <ch_set_mode+0x36>
		dev_ptr->mode = mode;
  405a72:	687b      	ldr	r3, [r7, #4]
  405a74:	78fa      	ldrb	r2, [r7, #3]
  405a76:	711a      	strb	r2, [r3, #4]
	}

	return ret_val;
  405a78:	68fb      	ldr	r3, [r7, #12]
  405a7a:	b2db      	uxtb	r3, r3
}
  405a7c:	4618      	mov	r0, r3
  405a7e:	3710      	adds	r7, #16
  405a80:	46bd      	mov	sp, r7
  405a82:	bd80      	pop	{r7, pc}

00405a84 <ch_set_sample_interval>:
	}

	return sample_interval;
}

uint8_t ch_set_sample_interval(ch_dev_t *dev_ptr, uint16_t sample_interval) {
  405a84:	b580      	push	{r7, lr}
  405a86:	b084      	sub	sp, #16
  405a88:	af00      	add	r7, sp, #0
  405a8a:	6078      	str	r0, [r7, #4]
  405a8c:	460b      	mov	r3, r1
  405a8e:	807b      	strh	r3, [r7, #2]
	int	ret_val = RET_ERR;
  405a90:	2301      	movs	r3, #1
  405a92:	60fb      	str	r3, [r7, #12]
	ch_set_sample_interval_func_t func_ptr = dev_ptr->api_funcs.set_sample_interval;
  405a94:	687b      	ldr	r3, [r7, #4]
  405a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  405a98:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405a9a:	68bb      	ldr	r3, [r7, #8]
  405a9c:	2b00      	cmp	r3, #0
  405a9e:	d006      	beq.n	405aae <ch_set_sample_interval+0x2a>
		ret_val = (*func_ptr)(dev_ptr, sample_interval);
  405aa0:	887a      	ldrh	r2, [r7, #2]
  405aa2:	68bb      	ldr	r3, [r7, #8]
  405aa4:	4611      	mov	r1, r2
  405aa6:	6878      	ldr	r0, [r7, #4]
  405aa8:	4798      	blx	r3
  405aaa:	4603      	mov	r3, r0
  405aac:	60fb      	str	r3, [r7, #12]
	}

	return ret_val;
  405aae:	68fb      	ldr	r3, [r7, #12]
  405ab0:	b2db      	uxtb	r3, r3
}
  405ab2:	4618      	mov	r0, r3
  405ab4:	3710      	adds	r7, #16
  405ab6:	46bd      	mov	sp, r7
  405ab8:	bd80      	pop	{r7, pc}

00405aba <ch_get_num_samples>:

uint16_t ch_get_num_samples(ch_dev_t *dev_ptr) {
  405aba:	b480      	push	{r7}
  405abc:	b083      	sub	sp, #12
  405abe:	af00      	add	r7, sp, #0
  405ac0:	6078      	str	r0, [r7, #4]

	return dev_ptr->num_rx_samples;
  405ac2:	687b      	ldr	r3, [r7, #4]
  405ac4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
  405ac6:	4618      	mov	r0, r3
  405ac8:	370c      	adds	r7, #12
  405aca:	46bd      	mov	sp, r7
  405acc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ad0:	4770      	bx	lr
	...

00405ad4 <ch_set_num_samples>:

uint8_t ch_set_num_samples(ch_dev_t *dev_ptr, uint16_t num_samples) {
  405ad4:	b580      	push	{r7, lr}
  405ad6:	b084      	sub	sp, #16
  405ad8:	af00      	add	r7, sp, #0
  405ada:	6078      	str	r0, [r7, #4]
  405adc:	460b      	mov	r3, r1
  405ade:	807b      	strh	r3, [r7, #2]
	uint8_t	ret_val = RET_ERR;
  405ae0:	2301      	movs	r3, #1
  405ae2:	73fb      	strb	r3, [r7, #15]
	ch_set_num_samples_func_t func_ptr = dev_ptr->api_funcs.set_num_samples;
  405ae4:	687b      	ldr	r3, [r7, #4]
  405ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  405ae8:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405aea:	68bb      	ldr	r3, [r7, #8]
  405aec:	2b00      	cmp	r3, #0
  405aee:	d006      	beq.n	405afe <ch_set_num_samples+0x2a>
		ret_val = (*func_ptr)(dev_ptr, num_samples);
  405af0:	887a      	ldrh	r2, [r7, #2]
  405af2:	68bb      	ldr	r3, [r7, #8]
  405af4:	4611      	mov	r1, r2
  405af6:	6878      	ldr	r0, [r7, #4]
  405af8:	4798      	blx	r3
  405afa:	4603      	mov	r3, r0
  405afc:	73fb      	strb	r3, [r7, #15]
	}

	dev_ptr->max_range = ch_samples_to_mm(dev_ptr, num_samples);	// store corresponding range in mm
  405afe:	887b      	ldrh	r3, [r7, #2]
  405b00:	4619      	mov	r1, r3
  405b02:	6878      	ldr	r0, [r7, #4]
  405b04:	4b05      	ldr	r3, [pc, #20]	; (405b1c <ch_set_num_samples+0x48>)
  405b06:	4798      	blx	r3
  405b08:	4603      	mov	r3, r0
  405b0a:	461a      	mov	r2, r3
  405b0c:	687b      	ldr	r3, [r7, #4]
  405b0e:	811a      	strh	r2, [r3, #8]

	return ret_val;
  405b10:	7bfb      	ldrb	r3, [r7, #15]
}
  405b12:	4618      	mov	r0, r3
  405b14:	3710      	adds	r7, #16
  405b16:	46bd      	mov	sp, r7
  405b18:	bd80      	pop	{r7, pc}
  405b1a:	bf00      	nop
  405b1c:	00405c81 	.word	0x00405c81

00405b20 <ch_set_max_range>:

	return dev_ptr->max_range;
}


uint8_t ch_set_max_range(ch_dev_t *dev_ptr, uint16_t max_range) {
  405b20:	b580      	push	{r7, lr}
  405b22:	b084      	sub	sp, #16
  405b24:	af00      	add	r7, sp, #0
  405b26:	6078      	str	r0, [r7, #4]
  405b28:	460b      	mov	r3, r1
  405b2a:	807b      	strh	r3, [r7, #2]
	uint8_t	ret_val = RET_ERR;
  405b2c:	2301      	movs	r3, #1
  405b2e:	73fb      	strb	r3, [r7, #15]
	ch_set_max_range_func_t func_ptr = dev_ptr->api_funcs.set_max_range;
  405b30:	687b      	ldr	r3, [r7, #4]
  405b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405b34:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405b36:	68bb      	ldr	r3, [r7, #8]
  405b38:	2b00      	cmp	r3, #0
  405b3a:	d006      	beq.n	405b4a <ch_set_max_range+0x2a>
		ret_val = (*func_ptr)(dev_ptr, max_range);
  405b3c:	887a      	ldrh	r2, [r7, #2]
  405b3e:	68bb      	ldr	r3, [r7, #8]
  405b40:	4611      	mov	r1, r2
  405b42:	6878      	ldr	r0, [r7, #4]
  405b44:	4798      	blx	r3
  405b46:	4603      	mov	r3, r0
  405b48:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
  405b4a:	7bfb      	ldrb	r3, [r7, #15]
}
  405b4c:	4618      	mov	r0, r3
  405b4e:	3710      	adds	r7, #16
  405b50:	46bd      	mov	sp, r7
  405b52:	bd80      	pop	{r7, pc}

00405b54 <ch_set_static_range>:
uint16_t ch_get_static_range(ch_dev_t *dev_ptr) {

	return dev_ptr->static_range;
}

uint8_t ch_set_static_range(ch_dev_t *dev_ptr, uint16_t num_samples) {
  405b54:	b580      	push	{r7, lr}
  405b56:	b084      	sub	sp, #16
  405b58:	af00      	add	r7, sp, #0
  405b5a:	6078      	str	r0, [r7, #4]
  405b5c:	460b      	mov	r3, r1
  405b5e:	807b      	strh	r3, [r7, #2]
	uint8_t	ret_val = RET_OK;
  405b60:	2300      	movs	r3, #0
  405b62:	73fb      	strb	r3, [r7, #15]
	ch_set_static_range_func_t func_ptr = dev_ptr->api_funcs.set_static_range;
  405b64:	687b      	ldr	r3, [r7, #4]
  405b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  405b6a:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405b6c:	68bb      	ldr	r3, [r7, #8]
  405b6e:	2b00      	cmp	r3, #0
  405b70:	d006      	beq.n	405b80 <ch_set_static_range+0x2c>
		ret_val = (*func_ptr)(dev_ptr, num_samples);
  405b72:	887a      	ldrh	r2, [r7, #2]
  405b74:	68bb      	ldr	r3, [r7, #8]
  405b76:	4611      	mov	r1, r2
  405b78:	6878      	ldr	r0, [r7, #4]
  405b7a:	4798      	blx	r3
  405b7c:	4603      	mov	r3, r0
  405b7e:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
  405b80:	7bfb      	ldrb	r3, [r7, #15]
}
  405b82:	4618      	mov	r0, r3
  405b84:	3710      	adds	r7, #16
  405b86:	46bd      	mov	sp, r7
  405b88:	bd80      	pop	{r7, pc}

00405b8a <ch_get_range>:

uint32_t ch_get_range(ch_dev_t *dev_ptr, ch_range_t range_type) {
  405b8a:	b580      	push	{r7, lr}
  405b8c:	b084      	sub	sp, #16
  405b8e:	af00      	add	r7, sp, #0
  405b90:	6078      	str	r0, [r7, #4]
  405b92:	460b      	mov	r3, r1
  405b94:	70fb      	strb	r3, [r7, #3]
	uint32_t	range = 0;
  405b96:	2300      	movs	r3, #0
  405b98:	60fb      	str	r3, [r7, #12]
	ch_get_range_func_t func_ptr = dev_ptr->api_funcs.get_range;
  405b9a:	687b      	ldr	r3, [r7, #4]
  405b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405b9e:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405ba0:	68bb      	ldr	r3, [r7, #8]
  405ba2:	2b00      	cmp	r3, #0
  405ba4:	d005      	beq.n	405bb2 <ch_get_range+0x28>
		range = (*func_ptr)(dev_ptr, range_type);
  405ba6:	78fa      	ldrb	r2, [r7, #3]
  405ba8:	68bb      	ldr	r3, [r7, #8]
  405baa:	4611      	mov	r1, r2
  405bac:	6878      	ldr	r0, [r7, #4]
  405bae:	4798      	blx	r3
  405bb0:	60f8      	str	r0, [r7, #12]
	}

	return range;
  405bb2:	68fb      	ldr	r3, [r7, #12]
}
  405bb4:	4618      	mov	r0, r3
  405bb6:	3710      	adds	r7, #16
  405bb8:	46bd      	mov	sp, r7
  405bba:	bd80      	pop	{r7, pc}

00405bbc <ch_get_amplitude>:
	}

	return tof_us;
}

uint16_t ch_get_amplitude(ch_dev_t *dev_ptr) {
  405bbc:	b580      	push	{r7, lr}
  405bbe:	b084      	sub	sp, #16
  405bc0:	af00      	add	r7, sp, #0
  405bc2:	6078      	str	r0, [r7, #4]
	int	amplitude = 0;
  405bc4:	2300      	movs	r3, #0
  405bc6:	60fb      	str	r3, [r7, #12]
	ch_get_amplitude_func_t func_ptr = dev_ptr->api_funcs.get_amplitude;
  405bc8:	687b      	ldr	r3, [r7, #4]
  405bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  405bcc:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405bce:	68bb      	ldr	r3, [r7, #8]
  405bd0:	2b00      	cmp	r3, #0
  405bd2:	d004      	beq.n	405bde <ch_get_amplitude+0x22>
		amplitude = (*func_ptr)(dev_ptr);
  405bd4:	68bb      	ldr	r3, [r7, #8]
  405bd6:	6878      	ldr	r0, [r7, #4]
  405bd8:	4798      	blx	r3
  405bda:	4603      	mov	r3, r0
  405bdc:	60fb      	str	r3, [r7, #12]
	}

	return amplitude;
  405bde:	68fb      	ldr	r3, [r7, #12]
  405be0:	b29b      	uxth	r3, r3
}
  405be2:	4618      	mov	r0, r3
  405be4:	3710      	adds	r7, #16
  405be6:	46bd      	mov	sp, r7
  405be8:	bd80      	pop	{r7, pc}

00405bea <ch_get_frequency>:
	}

	return ret_val;	
}

uint32_t ch_get_frequency(ch_dev_t *dev_ptr) {
  405bea:	b480      	push	{r7}
  405bec:	b083      	sub	sp, #12
  405bee:	af00      	add	r7, sp, #0
  405bf0:	6078      	str	r0, [r7, #4]

	return dev_ptr->op_frequency;
  405bf2:	687b      	ldr	r3, [r7, #4]
  405bf4:	691b      	ldr	r3, [r3, #16]
}
  405bf6:	4618      	mov	r0, r3
  405bf8:	370c      	adds	r7, #12
  405bfa:	46bd      	mov	sp, r7
  405bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c00:	4770      	bx	lr

00405c02 <ch_get_rtc_cal_pulselength>:

uint16_t ch_get_rtc_cal_pulselength(ch_dev_t *dev_ptr) {
  405c02:	b480      	push	{r7}
  405c04:	b083      	sub	sp, #12
  405c06:	af00      	add	r7, sp, #0
  405c08:	6078      	str	r0, [r7, #4]

	return dev_ptr->group->rtc_cal_pulse_ms;
  405c0a:	687b      	ldr	r3, [r7, #4]
  405c0c:	681b      	ldr	r3, [r3, #0]
  405c0e:	88db      	ldrh	r3, [r3, #6]
}
  405c10:	4618      	mov	r0, r3
  405c12:	370c      	adds	r7, #12
  405c14:	46bd      	mov	sp, r7
  405c16:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c1a:	4770      	bx	lr

00405c1c <ch_get_rtc_cal_result>:


uint16_t ch_get_rtc_cal_result(ch_dev_t *dev_ptr) {
  405c1c:	b480      	push	{r7}
  405c1e:	b083      	sub	sp, #12
  405c20:	af00      	add	r7, sp, #0
  405c22:	6078      	str	r0, [r7, #4]

	return dev_ptr->rtc_cal_result;
  405c24:	687b      	ldr	r3, [r7, #4]
  405c26:	89db      	ldrh	r3, [r3, #14]
}
  405c28:	4618      	mov	r0, r3
  405c2a:	370c      	adds	r7, #12
  405c2c:	46bd      	mov	sp, r7
  405c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c32:	4770      	bx	lr

00405c34 <ch_get_iq_data>:

	return dev_ptr->scale_factor;
}


uint8_t ch_get_iq_data(ch_dev_t *dev_ptr, ch_iq_sample_t *buf_ptr, uint16_t start_sample, uint16_t num_samples, ch_io_mode_t mode) {
  405c34:	b590      	push	{r4, r7, lr}
  405c36:	b089      	sub	sp, #36	; 0x24
  405c38:	af02      	add	r7, sp, #8
  405c3a:	60f8      	str	r0, [r7, #12]
  405c3c:	60b9      	str	r1, [r7, #8]
  405c3e:	4611      	mov	r1, r2
  405c40:	461a      	mov	r2, r3
  405c42:	460b      	mov	r3, r1
  405c44:	80fb      	strh	r3, [r7, #6]
  405c46:	4613      	mov	r3, r2
  405c48:	80bb      	strh	r3, [r7, #4]
	int	ret_val = 0;
  405c4a:	2300      	movs	r3, #0
  405c4c:	617b      	str	r3, [r7, #20]
	ch_get_iq_data_func_t func_ptr = dev_ptr->api_funcs.get_iq_data;
  405c4e:	68fb      	ldr	r3, [r7, #12]
  405c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  405c54:	613b      	str	r3, [r7, #16]

	if (func_ptr != NULL) {
  405c56:	693b      	ldr	r3, [r7, #16]
  405c58:	2b00      	cmp	r3, #0
  405c5a:	d00b      	beq.n	405c74 <ch_get_iq_data+0x40>
		ret_val = (*func_ptr)(dev_ptr, buf_ptr, start_sample, num_samples, mode);
  405c5c:	88b9      	ldrh	r1, [r7, #4]
  405c5e:	88fa      	ldrh	r2, [r7, #6]
  405c60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  405c64:	9300      	str	r3, [sp, #0]
  405c66:	693c      	ldr	r4, [r7, #16]
  405c68:	460b      	mov	r3, r1
  405c6a:	68b9      	ldr	r1, [r7, #8]
  405c6c:	68f8      	ldr	r0, [r7, #12]
  405c6e:	47a0      	blx	r4
  405c70:	4603      	mov	r3, r0
  405c72:	617b      	str	r3, [r7, #20]
	}

	return ret_val;
  405c74:	697b      	ldr	r3, [r7, #20]
  405c76:	b2db      	uxtb	r3, r3
}
  405c78:	4618      	mov	r0, r3
  405c7a:	371c      	adds	r7, #28
  405c7c:	46bd      	mov	sp, r7
  405c7e:	bd90      	pop	{r4, r7, pc}

00405c80 <ch_samples_to_mm>:


uint16_t ch_samples_to_mm(ch_dev_t *dev_ptr, uint16_t num_samples) {
  405c80:	b580      	push	{r7, lr}
  405c82:	b084      	sub	sp, #16
  405c84:	af00      	add	r7, sp, #0
  405c86:	6078      	str	r0, [r7, #4]
  405c88:	460b      	mov	r3, r1
  405c8a:	807b      	strh	r3, [r7, #2]
	int	num_mm = 0;
  405c8c:	2300      	movs	r3, #0
  405c8e:	60fb      	str	r3, [r7, #12]
	ch_samples_to_mm_func_t func_ptr = dev_ptr->api_funcs.samples_to_mm;
  405c90:	687b      	ldr	r3, [r7, #4]
  405c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  405c96:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405c98:	68bb      	ldr	r3, [r7, #8]
  405c9a:	2b00      	cmp	r3, #0
  405c9c:	d006      	beq.n	405cac <ch_samples_to_mm+0x2c>
		num_mm = (*func_ptr)(dev_ptr, num_samples);
  405c9e:	887a      	ldrh	r2, [r7, #2]
  405ca0:	68bb      	ldr	r3, [r7, #8]
  405ca2:	4611      	mov	r1, r2
  405ca4:	6878      	ldr	r0, [r7, #4]
  405ca6:	4798      	blx	r3
  405ca8:	4603      	mov	r3, r0
  405caa:	60fb      	str	r3, [r7, #12]
	}

	return num_mm;
  405cac:	68fb      	ldr	r3, [r7, #12]
  405cae:	b29b      	uxth	r3, r3
}
  405cb0:	4618      	mov	r0, r3
  405cb2:	3710      	adds	r7, #16
  405cb4:	46bd      	mov	sp, r7
  405cb6:	bd80      	pop	{r7, pc}

00405cb8 <ch_iq_to_amplitude>:
	}

	return amplitude;	
}

uint16_t ch_iq_to_amplitude(ch_iq_sample_t *iq_sample) {
  405cb8:	b580      	push	{r7, lr}
  405cba:	b086      	sub	sp, #24
  405cbc:	af00      	add	r7, sp, #0
  405cbe:	6078      	str	r0, [r7, #4]
	uint32_t amplitude;
	uint32_t i_sq = ((uint32_t) iq_sample->i * (uint32_t) iq_sample->i);
  405cc0:	687b      	ldr	r3, [r7, #4]
  405cc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  405cc6:	461a      	mov	r2, r3
  405cc8:	687b      	ldr	r3, [r7, #4]
  405cca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  405cce:	fb03 f302 	mul.w	r3, r3, r2
  405cd2:	617b      	str	r3, [r7, #20]
	uint32_t q_sq = ((uint32_t) iq_sample->q * (uint32_t) iq_sample->q);
  405cd4:	687b      	ldr	r3, [r7, #4]
  405cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
  405cda:	461a      	mov	r2, r3
  405cdc:	687b      	ldr	r3, [r7, #4]
  405cde:	f9b3 3000 	ldrsh.w	r3, [r3]
  405ce2:	fb03 f302 	mul.w	r3, r3, r2
  405ce6:	613b      	str	r3, [r7, #16]

	amplitude = sqrt_int32(i_sq + q_sq);
  405ce8:	697a      	ldr	r2, [r7, #20]
  405cea:	693b      	ldr	r3, [r7, #16]
  405cec:	4413      	add	r3, r2
  405cee:	4618      	mov	r0, r3
  405cf0:	4b04      	ldr	r3, [pc, #16]	; (405d04 <ch_iq_to_amplitude+0x4c>)
  405cf2:	4798      	blx	r3
  405cf4:	4603      	mov	r3, r0
  405cf6:	60fb      	str	r3, [r7, #12]

	return (uint16_t) amplitude;
  405cf8:	68fb      	ldr	r3, [r7, #12]
  405cfa:	b29b      	uxth	r3, r3
}
  405cfc:	4618      	mov	r0, r3
  405cfe:	3718      	adds	r7, #24
  405d00:	46bd      	mov	sp, r7
  405d02:	bd80      	pop	{r7, pc}
  405d04:	00407cf7 	.word	0x00407cf7

00405d08 <ch_set_thresholds>:


uint8_t ch_set_thresholds(ch_dev_t *dev_ptr, ch_thresholds_t *thresh_ptr) {
  405d08:	b580      	push	{r7, lr}
  405d0a:	b084      	sub	sp, #16
  405d0c:	af00      	add	r7, sp, #0
  405d0e:	6078      	str	r0, [r7, #4]
  405d10:	6039      	str	r1, [r7, #0]
	int	ret_val = RET_OK;
  405d12:	2300      	movs	r3, #0
  405d14:	60fb      	str	r3, [r7, #12]
	ch_set_thresholds_func_t func_ptr = dev_ptr->api_funcs.set_thresholds;
  405d16:	687b      	ldr	r3, [r7, #4]
  405d18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  405d1c:	60bb      	str	r3, [r7, #8]

	if ((func_ptr != NULL) && (thresh_ptr != NULL)) {
  405d1e:	68bb      	ldr	r3, [r7, #8]
  405d20:	2b00      	cmp	r3, #0
  405d22:	d008      	beq.n	405d36 <ch_set_thresholds+0x2e>
  405d24:	683b      	ldr	r3, [r7, #0]
  405d26:	2b00      	cmp	r3, #0
  405d28:	d005      	beq.n	405d36 <ch_set_thresholds+0x2e>
		ret_val = (*func_ptr)(dev_ptr, thresh_ptr);
  405d2a:	68bb      	ldr	r3, [r7, #8]
  405d2c:	6839      	ldr	r1, [r7, #0]
  405d2e:	6878      	ldr	r0, [r7, #4]
  405d30:	4798      	blx	r3
  405d32:	4603      	mov	r3, r0
  405d34:	60fb      	str	r3, [r7, #12]
		}

	return ret_val;
  405d36:	68fb      	ldr	r3, [r7, #12]
  405d38:	b2db      	uxtb	r3, r3
}
  405d3a:	4618      	mov	r0, r3
  405d3c:	3710      	adds	r7, #16
  405d3e:	46bd      	mov	sp, r7
  405d40:	bd80      	pop	{r7, pc}

00405d42 <ch_get_thresholds>:

uint8_t ch_get_thresholds(ch_dev_t *dev_ptr, ch_thresholds_t *thresh_ptr) {
  405d42:	b580      	push	{r7, lr}
  405d44:	b084      	sub	sp, #16
  405d46:	af00      	add	r7, sp, #0
  405d48:	6078      	str	r0, [r7, #4]
  405d4a:	6039      	str	r1, [r7, #0]
	int	ret_val = RET_ERR;
  405d4c:	2301      	movs	r3, #1
  405d4e:	60fb      	str	r3, [r7, #12]
	ch_get_thresholds_func_t func_ptr = dev_ptr->api_funcs.get_thresholds;
  405d50:	687b      	ldr	r3, [r7, #4]
  405d52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
  405d56:	60bb      	str	r3, [r7, #8]

	if ((func_ptr != NULL) && (thresh_ptr != NULL)) {
  405d58:	68bb      	ldr	r3, [r7, #8]
  405d5a:	2b00      	cmp	r3, #0
  405d5c:	d008      	beq.n	405d70 <ch_get_thresholds+0x2e>
  405d5e:	683b      	ldr	r3, [r7, #0]
  405d60:	2b00      	cmp	r3, #0
  405d62:	d005      	beq.n	405d70 <ch_get_thresholds+0x2e>
		ret_val = (*func_ptr)(dev_ptr, thresh_ptr);
  405d64:	68bb      	ldr	r3, [r7, #8]
  405d66:	6839      	ldr	r1, [r7, #0]
  405d68:	6878      	ldr	r0, [r7, #4]
  405d6a:	4798      	blx	r3
  405d6c:	4603      	mov	r3, r0
  405d6e:	60fb      	str	r3, [r7, #12]
	}

	return ret_val;
  405d70:	68fb      	ldr	r3, [r7, #12]
  405d72:	b2db      	uxtb	r3, r3
}
  405d74:	4618      	mov	r0, r3
  405d76:	3710      	adds	r7, #16
  405d78:	46bd      	mov	sp, r7
  405d7a:	bd80      	pop	{r7, pc}

00405d7c <ch_set_time_plan>:

uint8_t ch_set_time_plan(ch_dev_t *dev_ptr, ch_time_plan_t time_plan) {
  405d7c:	b580      	push	{r7, lr}
  405d7e:	b084      	sub	sp, #16
  405d80:	af00      	add	r7, sp, #0
  405d82:	6078      	str	r0, [r7, #4]
  405d84:	460b      	mov	r3, r1
  405d86:	70fb      	strb	r3, [r7, #3]
	uint8_t ret_val = RET_OK;
  405d88:	2300      	movs	r3, #0
  405d8a:	73fb      	strb	r3, [r7, #15]
	ch_set_time_plan_func_t func_ptr = dev_ptr->api_funcs.set_time_plan;
  405d8c:	687b      	ldr	r3, [r7, #4]
  405d8e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
  405d92:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405d94:	68bb      	ldr	r3, [r7, #8]
  405d96:	2b00      	cmp	r3, #0
  405d98:	d006      	beq.n	405da8 <ch_set_time_plan+0x2c>
		ret_val = (*func_ptr)(dev_ptr, time_plan);
  405d9a:	78fa      	ldrb	r2, [r7, #3]
  405d9c:	68bb      	ldr	r3, [r7, #8]
  405d9e:	4611      	mov	r1, r2
  405da0:	6878      	ldr	r0, [r7, #4]
  405da2:	4798      	blx	r3
  405da4:	4603      	mov	r3, r0
  405da6:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
  405da8:	7bfb      	ldrb	r3, [r7, #15]
}
  405daa:	4618      	mov	r0, r3
  405dac:	3710      	adds	r7, #16
  405dae:	46bd      	mov	sp, r7
  405db0:	bd80      	pop	{r7, pc}

00405db2 <ch_io_int_callback_set>:
/*!
 * \brief Set callback function for Chirp sensor I/O interrupt
 *
 * \note
 */
void ch_io_int_callback_set(ch_group_t *grp_ptr, ch_io_int_callback_t callback_func_ptr) {
  405db2:	b480      	push	{r7}
  405db4:	b083      	sub	sp, #12
  405db6:	af00      	add	r7, sp, #0
  405db8:	6078      	str	r0, [r7, #4]
  405dba:	6039      	str	r1, [r7, #0]

	grp_ptr->io_int_callback = callback_func_ptr;
  405dbc:	687b      	ldr	r3, [r7, #4]
  405dbe:	683a      	ldr	r2, [r7, #0]
  405dc0:	611a      	str	r2, [r3, #16]
}
  405dc2:	bf00      	nop
  405dc4:	370c      	adds	r7, #12
  405dc6:	46bd      	mov	sp, r7
  405dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405dcc:	4770      	bx	lr

00405dce <ch_io_complete_callback_set>:
/*!
 * \brief Set callback function for Chirp sensor I/O operation complete
 *
 * \note
 */
void ch_io_complete_callback_set(ch_group_t *grp_ptr, ch_io_complete_callback_t callback_func_ptr) {
  405dce:	b480      	push	{r7}
  405dd0:	b083      	sub	sp, #12
  405dd2:	af00      	add	r7, sp, #0
  405dd4:	6078      	str	r0, [r7, #4]
  405dd6:	6039      	str	r1, [r7, #0]

	grp_ptr->io_complete_callback = callback_func_ptr;
  405dd8:	687b      	ldr	r3, [r7, #4]
  405dda:	683a      	ldr	r2, [r7, #0]
  405ddc:	615a      	str	r2, [r3, #20]
}
  405dde:	bf00      	nop
  405de0:	370c      	adds	r7, #12
  405de2:	46bd      	mov	sp, r7
  405de4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405de8:	4770      	bx	lr
	...

00405dec <ch_io_notify>:
 *
 * Call this function once from your I2C interrupt handler each time it completes an I/O operation.
 * It will call the function previously specified during \a ch_io_complete_callback_set() when all group
 * transactions are complete.
 */
void ch_io_notify(ch_group_t *grp_ptr, uint8_t i2c_bus_index) {
  405dec:	b580      	push	{r7, lr}
  405dee:	b082      	sub	sp, #8
  405df0:	af00      	add	r7, sp, #0
  405df2:	6078      	str	r0, [r7, #4]
  405df4:	460b      	mov	r3, r1
  405df6:	70fb      	strb	r3, [r7, #3]
	
	chdrv_group_i2c_irq_handler(grp_ptr, i2c_bus_index);
  405df8:	78fb      	ldrb	r3, [r7, #3]
  405dfa:	4619      	mov	r1, r3
  405dfc:	6878      	ldr	r0, [r7, #4]
  405dfe:	4b03      	ldr	r3, [pc, #12]	; (405e0c <ch_io_notify+0x20>)
  405e00:	4798      	blx	r3
}
  405e02:	bf00      	nop
  405e04:	3708      	adds	r7, #8
  405e06:	46bd      	mov	sp, r7
  405e08:	bd80      	pop	{r7, pc}
  405e0a:	bf00      	nop
  405e0c:	004070c5 	.word	0x004070c5

00405e10 <ch_set_target_interrupt>:

uint8_t ch_set_target_interrupt(ch_dev_t *dev_ptr, uint8_t enable) {
  405e10:	b580      	push	{r7, lr}
  405e12:	b084      	sub	sp, #16
  405e14:	af00      	add	r7, sp, #0
  405e16:	6078      	str	r0, [r7, #4]
  405e18:	460b      	mov	r3, r1
  405e1a:	70fb      	strb	r3, [r7, #3]
	int	ret_val = RET_OK;
  405e1c:	2300      	movs	r3, #0
  405e1e:	60fb      	str	r3, [r7, #12]
	ch_set_target_interrupt_func_t func_ptr = dev_ptr->api_funcs.set_target_interrupt;
  405e20:	687b      	ldr	r3, [r7, #4]
  405e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
  405e26:	60bb      	str	r3, [r7, #8]

	if (func_ptr != NULL) {
  405e28:	68bb      	ldr	r3, [r7, #8]
  405e2a:	2b00      	cmp	r3, #0
  405e2c:	d006      	beq.n	405e3c <ch_set_target_interrupt+0x2c>
		ret_val = (*func_ptr)(dev_ptr, enable);
  405e2e:	78fa      	ldrb	r2, [r7, #3]
  405e30:	68bb      	ldr	r3, [r7, #8]
  405e32:	4611      	mov	r1, r2
  405e34:	6878      	ldr	r0, [r7, #4]
  405e36:	4798      	blx	r3
  405e38:	4603      	mov	r3, r0
  405e3a:	60fb      	str	r3, [r7, #12]
	}

	return ret_val;
  405e3c:	68fb      	ldr	r3, [r7, #12]
  405e3e:	b2db      	uxtb	r3, r3
}
  405e40:	4618      	mov	r0, r3
  405e42:	3710      	adds	r7, #16
  405e44:	46bd      	mov	sp, r7
  405e46:	bd80      	pop	{r7, pc}

00405e48 <ch_set_rx_pretrigger>:
	}

	return rx_pulse_length;		
}

void ch_set_rx_pretrigger(ch_group_t *grp_ptr, uint8_t enable) {
  405e48:	b580      	push	{r7, lr}
  405e4a:	b082      	sub	sp, #8
  405e4c:	af00      	add	r7, sp, #0
  405e4e:	6078      	str	r0, [r7, #4]
  405e50:	460b      	mov	r3, r1
  405e52:	70fb      	strb	r3, [r7, #3]

	if (enable) {
  405e54:	78fb      	ldrb	r3, [r7, #3]
  405e56:	2b00      	cmp	r3, #0
  405e58:	d005      	beq.n	405e66 <ch_set_rx_pretrigger+0x1e>
		chdrv_pretrigger_delay_set(grp_ptr, CHDRV_PRETRIGGER_DELAY_US);
  405e5a:	f44f 7116 	mov.w	r1, #600	; 0x258
  405e5e:	6878      	ldr	r0, [r7, #4]
  405e60:	4b05      	ldr	r3, [pc, #20]	; (405e78 <ch_set_rx_pretrigger+0x30>)
  405e62:	4798      	blx	r3
	} else {
		chdrv_pretrigger_delay_set(grp_ptr, 0);
	}
}
  405e64:	e003      	b.n	405e6e <ch_set_rx_pretrigger+0x26>
		chdrv_pretrigger_delay_set(grp_ptr, 0);
  405e66:	2100      	movs	r1, #0
  405e68:	6878      	ldr	r0, [r7, #4]
  405e6a:	4b03      	ldr	r3, [pc, #12]	; (405e78 <ch_set_rx_pretrigger+0x30>)
  405e6c:	4798      	blx	r3
}
  405e6e:	bf00      	nop
  405e70:	3708      	adds	r7, #8
  405e72:	46bd      	mov	sp, r7
  405e74:	bd80      	pop	{r7, pc}
  405e76:	bf00      	nop
  405e78:	00407cd9 	.word	0x00407cd9

00405e7c <ch_common_set_mode>:
static uint8_t get_sample_data(ch_dev_t *dev_ptr, ch_iq_sample_t *buf_ptr, uint16_t start_sample, uint16_t num_samples,
							   ch_io_mode_t mode, uint8_t sample_size_in_byte);

/* Functions */

uint8_t ch_common_set_mode(ch_dev_t *dev_ptr, ch_mode_t mode) {
  405e7c:	b580      	push	{r7, lr}
  405e7e:	b084      	sub	sp, #16
  405e80:	af00      	add	r7, sp, #0
  405e82:	6078      	str	r0, [r7, #4]
  405e84:	460b      	mov	r3, r1
  405e86:	70fb      	strb	r3, [r7, #3]
	uint8_t ret_val = 0;
  405e88:	2300      	movs	r3, #0
  405e8a:	73fb      	strb	r3, [r7, #15]
	uint8_t	opmode_reg;
	uint8_t	period_reg;
	uint8_t	tick_interval_reg;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  405e8c:	687b      	ldr	r3, [r7, #4]
  405e8e:	8b9b      	ldrh	r3, [r3, #28]
  405e90:	2b65      	cmp	r3, #101	; 0x65
  405e92:	d106      	bne.n	405ea2 <ch_common_set_mode+0x26>
		opmode_reg = CH101_COMMON_REG_OPMODE;
  405e94:	2301      	movs	r3, #1
  405e96:	73bb      	strb	r3, [r7, #14]
		period_reg = CH101_COMMON_REG_PERIOD;
  405e98:	2305      	movs	r3, #5
  405e9a:	737b      	strb	r3, [r7, #13]
		tick_interval_reg = CH101_COMMON_REG_TICK_INTERVAL;
  405e9c:	2302      	movs	r3, #2
  405e9e:	733b      	strb	r3, [r7, #12]
  405ea0:	e005      	b.n	405eae <ch_common_set_mode+0x32>
	} else {
		opmode_reg = CH201_COMMON_REG_OPMODE;
  405ea2:	2301      	movs	r3, #1
  405ea4:	73bb      	strb	r3, [r7, #14]
		period_reg = CH201_COMMON_REG_PERIOD;
  405ea6:	2305      	movs	r3, #5
  405ea8:	737b      	strb	r3, [r7, #13]
		tick_interval_reg = CH201_COMMON_REG_TICK_INTERVAL;
  405eaa:	2302      	movs	r3, #2
  405eac:	733b      	strb	r3, [r7, #12]
	}

	if (dev_ptr->sensor_connected) {
  405eae:	687b      	ldr	r3, [r7, #4]
  405eb0:	7fdb      	ldrb	r3, [r3, #31]
  405eb2:	2b00      	cmp	r3, #0
  405eb4:	d07a      	beq.n	405fac <ch_common_set_mode+0x130>
		switch (mode) {
  405eb6:	78fb      	ldrb	r3, [r7, #3]
  405eb8:	2b20      	cmp	r3, #32
  405eba:	d874      	bhi.n	405fa6 <ch_common_set_mode+0x12a>
  405ebc:	a201      	add	r2, pc, #4	; (adr r2, 405ec4 <ch_common_set_mode+0x48>)
  405ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405ec2:	bf00      	nop
  405ec4:	00405f49 	.word	0x00405f49
  405ec8:	00405fa7 	.word	0x00405fa7
  405ecc:	00405f77 	.word	0x00405f77
  405ed0:	00405fa7 	.word	0x00405fa7
  405ed4:	00405fa7 	.word	0x00405fa7
  405ed8:	00405fa7 	.word	0x00405fa7
  405edc:	00405fa7 	.word	0x00405fa7
  405ee0:	00405fa7 	.word	0x00405fa7
  405ee4:	00405fa7 	.word	0x00405fa7
  405ee8:	00405fa7 	.word	0x00405fa7
  405eec:	00405fa7 	.word	0x00405fa7
  405ef0:	00405fa7 	.word	0x00405fa7
  405ef4:	00405fa7 	.word	0x00405fa7
  405ef8:	00405fa7 	.word	0x00405fa7
  405efc:	00405fa7 	.word	0x00405fa7
  405f00:	00405fa7 	.word	0x00405fa7
  405f04:	00405f87 	.word	0x00405f87
  405f08:	00405fa7 	.word	0x00405fa7
  405f0c:	00405fa7 	.word	0x00405fa7
  405f10:	00405fa7 	.word	0x00405fa7
  405f14:	00405fa7 	.word	0x00405fa7
  405f18:	00405fa7 	.word	0x00405fa7
  405f1c:	00405fa7 	.word	0x00405fa7
  405f20:	00405fa7 	.word	0x00405fa7
  405f24:	00405fa7 	.word	0x00405fa7
  405f28:	00405fa7 	.word	0x00405fa7
  405f2c:	00405fa7 	.word	0x00405fa7
  405f30:	00405fa7 	.word	0x00405fa7
  405f34:	00405fa7 	.word	0x00405fa7
  405f38:	00405fa7 	.word	0x00405fa7
  405f3c:	00405fa7 	.word	0x00405fa7
  405f40:	00405fa7 	.word	0x00405fa7
  405f44:	00405f97 	.word	0x00405f97
			case CH_MODE_IDLE:
				chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_IDLE);
  405f48:	7bbb      	ldrb	r3, [r7, #14]
  405f4a:	b29b      	uxth	r3, r3
  405f4c:	2200      	movs	r2, #0
  405f4e:	4619      	mov	r1, r3
  405f50:	6878      	ldr	r0, [r7, #4]
  405f52:	4b19      	ldr	r3, [pc, #100]	; (405fb8 <ch_common_set_mode+0x13c>)
  405f54:	4798      	blx	r3
				chdrv_write_byte(dev_ptr, period_reg, 0);
  405f56:	7b7b      	ldrb	r3, [r7, #13]
  405f58:	b29b      	uxth	r3, r3
  405f5a:	2200      	movs	r2, #0
  405f5c:	4619      	mov	r1, r3
  405f5e:	6878      	ldr	r0, [r7, #4]
  405f60:	4b15      	ldr	r3, [pc, #84]	; (405fb8 <ch_common_set_mode+0x13c>)
  405f62:	4798      	blx	r3
				chdrv_write_word(dev_ptr, tick_interval_reg, 2048);		// XXX need define
  405f64:	7b3b      	ldrb	r3, [r7, #12]
  405f66:	b29b      	uxth	r3, r3
  405f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405f6c:	4619      	mov	r1, r3
  405f6e:	6878      	ldr	r0, [r7, #4]
  405f70:	4b12      	ldr	r3, [pc, #72]	; (405fbc <ch_common_set_mode+0x140>)
  405f72:	4798      	blx	r3
				break;
  405f74:	e01a      	b.n	405fac <ch_common_set_mode+0x130>

			case CH_MODE_FREERUN:
				chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_FREERUN);
  405f76:	7bbb      	ldrb	r3, [r7, #14]
  405f78:	b29b      	uxth	r3, r3
  405f7a:	2202      	movs	r2, #2
  405f7c:	4619      	mov	r1, r3
  405f7e:	6878      	ldr	r0, [r7, #4]
  405f80:	4b0d      	ldr	r3, [pc, #52]	; (405fb8 <ch_common_set_mode+0x13c>)
  405f82:	4798      	blx	r3
					// XXX need to set period / tick interval (?)
				break;
  405f84:	e012      	b.n	405fac <ch_common_set_mode+0x130>

			case CH_MODE_TRIGGERED_TX_RX:
				chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_TRIGGERED_TX_RX);
  405f86:	7bbb      	ldrb	r3, [r7, #14]
  405f88:	b29b      	uxth	r3, r3
  405f8a:	2210      	movs	r2, #16
  405f8c:	4619      	mov	r1, r3
  405f8e:	6878      	ldr	r0, [r7, #4]
  405f90:	4b09      	ldr	r3, [pc, #36]	; (405fb8 <ch_common_set_mode+0x13c>)
  405f92:	4798      	blx	r3
				break;
  405f94:	e00a      	b.n	405fac <ch_common_set_mode+0x130>

			case CH_MODE_TRIGGERED_RX_ONLY:
				chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_TRIGGERED_RX_ONLY);
  405f96:	7bbb      	ldrb	r3, [r7, #14]
  405f98:	b29b      	uxth	r3, r3
  405f9a:	2220      	movs	r2, #32
  405f9c:	4619      	mov	r1, r3
  405f9e:	6878      	ldr	r0, [r7, #4]
  405fa0:	4b05      	ldr	r3, [pc, #20]	; (405fb8 <ch_common_set_mode+0x13c>)
  405fa2:	4798      	blx	r3
				break;
  405fa4:	e002      	b.n	405fac <ch_common_set_mode+0x130>

			default:
				ret_val = RET_ERR;				// return non-zero to indicate error
  405fa6:	2301      	movs	r3, #1
  405fa8:	73fb      	strb	r3, [r7, #15]
				break;
  405faa:	bf00      	nop
		}
	}

	return ret_val;
  405fac:	7bfb      	ldrb	r3, [r7, #15]
}
  405fae:	4618      	mov	r0, r3
  405fb0:	3710      	adds	r7, #16
  405fb2:	46bd      	mov	sp, r7
  405fb4:	bd80      	pop	{r7, pc}
  405fb6:	bf00      	nop
  405fb8:	00406e15 	.word	0x00406e15
  405fbc:	00406e4d 	.word	0x00406e4d

00405fc0 <ch_common_fw_load>:

uint8_t ch_common_fw_load(ch_dev_t *dev_ptr) {
  405fc0:	b590      	push	{r4, r7, lr}
  405fc2:	b085      	sub	sp, #20
  405fc4:	af00      	add	r7, sp, #0
  405fc6:	6078      	str	r0, [r7, #4]
	uint8_t	ch_err = 0;
  405fc8:	2300      	movs	r3, #0
  405fca:	72fb      	strb	r3, [r7, #11]
	uint16_t prog_mem_addr;
	uint16_t fw_size;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  405fcc:	687b      	ldr	r3, [r7, #4]
  405fce:	8b9b      	ldrh	r3, [r3, #28]
  405fd0:	2b65      	cmp	r3, #101	; 0x65
  405fd2:	d106      	bne.n	405fe2 <ch_common_fw_load+0x22>
		prog_mem_addr = CH101_PROG_MEM_ADDR;
  405fd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  405fd8:	81fb      	strh	r3, [r7, #14]
		fw_size 	  = CH101_FW_SIZE;
  405fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405fde:	81bb      	strh	r3, [r7, #12]
  405fe0:	e005      	b.n	405fee <ch_common_fw_load+0x2e>
	} else {
		prog_mem_addr = CH201_PROG_MEM_ADDR;
  405fe2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  405fe6:	81fb      	strh	r3, [r7, #14]
		fw_size 	  = CH201_FW_SIZE;
  405fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405fec:	81bb      	strh	r3, [r7, #12]
	}

	ch_err = chdrv_prog_mem_write(dev_ptr, prog_mem_addr, (uint8_t *) dev_ptr->firmware, fw_size);
  405fee:	687b      	ldr	r3, [r7, #4]
  405ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405ff2:	89bb      	ldrh	r3, [r7, #12]
  405ff4:	89f9      	ldrh	r1, [r7, #14]
  405ff6:	6878      	ldr	r0, [r7, #4]
  405ff8:	4c04      	ldr	r4, [pc, #16]	; (40600c <ch_common_fw_load+0x4c>)
  405ffa:	47a0      	blx	r4
  405ffc:	4603      	mov	r3, r0
  405ffe:	72fb      	strb	r3, [r7, #11]
	return ch_err;
  406000:	7afb      	ldrb	r3, [r7, #11]
}
  406002:	4618      	mov	r0, r3
  406004:	3714      	adds	r7, #20
  406006:	46bd      	mov	sp, r7
  406008:	bd90      	pop	{r4, r7, pc}
  40600a:	bf00      	nop
  40600c:	00407579 	.word	0x00407579

00406010 <ch_common_set_sample_interval>:


uint8_t ch_common_set_sample_interval(ch_dev_t *dev_ptr, uint16_t interval_ms) {
  406010:	b580      	push	{r7, lr}
  406012:	b086      	sub	sp, #24
  406014:	af00      	add	r7, sp, #0
  406016:	6078      	str	r0, [r7, #4]
  406018:	460b      	mov	r3, r1
  40601a:	807b      	strh	r3, [r7, #2]
	uint8_t	period_reg;
	uint8_t	tick_interval_reg;
	uint8_t ret_val = 0;
  40601c:	2300      	movs	r3, #0
  40601e:	757b      	strb	r3, [r7, #21]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406020:	687b      	ldr	r3, [r7, #4]
  406022:	8b9b      	ldrh	r3, [r3, #28]
  406024:	2b65      	cmp	r3, #101	; 0x65
  406026:	d104      	bne.n	406032 <ch_common_set_sample_interval+0x22>
		period_reg 		  = CH101_COMMON_REG_PERIOD;
  406028:	2305      	movs	r3, #5
  40602a:	75fb      	strb	r3, [r7, #23]
		tick_interval_reg = CH101_COMMON_REG_TICK_INTERVAL;
  40602c:	2302      	movs	r3, #2
  40602e:	75bb      	strb	r3, [r7, #22]
  406030:	e003      	b.n	40603a <ch_common_set_sample_interval+0x2a>
	} else {
		period_reg 		  = CH201_COMMON_REG_PERIOD;
  406032:	2305      	movs	r3, #5
  406034:	75fb      	strb	r3, [r7, #23]
		tick_interval_reg = CH201_COMMON_REG_TICK_INTERVAL;
  406036:	2302      	movs	r3, #2
  406038:	75bb      	strb	r3, [r7, #22]
	}

	if (dev_ptr->sensor_connected) {
  40603a:	687b      	ldr	r3, [r7, #4]
  40603c:	7fdb      	ldrb	r3, [r3, #31]
  40603e:	2b00      	cmp	r3, #0
  406040:	d038      	beq.n	4060b4 <ch_common_set_sample_interval+0xa4>
		uint32_t sample_interval = dev_ptr->rtc_cal_result * interval_ms / dev_ptr->group->rtc_cal_pulse_ms;
  406042:	687b      	ldr	r3, [r7, #4]
  406044:	89db      	ldrh	r3, [r3, #14]
  406046:	461a      	mov	r2, r3
  406048:	887b      	ldrh	r3, [r7, #2]
  40604a:	fb03 f302 	mul.w	r3, r3, r2
  40604e:	687a      	ldr	r2, [r7, #4]
  406050:	6812      	ldr	r2, [r2, #0]
  406052:	88d2      	ldrh	r2, [r2, #6]
  406054:	fb93 f3f2 	sdiv	r3, r3, r2
  406058:	60bb      	str	r3, [r7, #8]
		uint32_t period;

		if (interval_ms != 0) {
  40605a:	887b      	ldrh	r3, [r7, #2]
  40605c:	2b00      	cmp	r3, #0
  40605e:	d009      	beq.n	406074 <ch_common_set_sample_interval+0x64>
			period = (sample_interval / 2048) + 1;				// XXX need define
  406060:	68bb      	ldr	r3, [r7, #8]
  406062:	0adb      	lsrs	r3, r3, #11
  406064:	3301      	adds	r3, #1
  406066:	613b      	str	r3, [r7, #16]
			if (period > UINT8_MAX) {					/* check if result fits in register */
  406068:	693b      	ldr	r3, [r7, #16]
  40606a:	2bff      	cmp	r3, #255	; 0xff
  40606c:	d904      	bls.n	406078 <ch_common_set_sample_interval+0x68>
				ret_val = 1;
  40606e:	2301      	movs	r3, #1
  406070:	757b      	strb	r3, [r7, #21]
  406072:	e001      	b.n	406078 <ch_common_set_sample_interval+0x68>
			}
		} else {
			period = 0;
  406074:	2300      	movs	r3, #0
  406076:	613b      	str	r3, [r7, #16]
		}

		if (ret_val == 0) {
  406078:	7d7b      	ldrb	r3, [r7, #21]
  40607a:	2b00      	cmp	r3, #0
  40607c:	d11a      	bne.n	4060b4 <ch_common_set_sample_interval+0xa4>
			uint32_t tick_interval;

			if (period != 0) {
  40607e:	693b      	ldr	r3, [r7, #16]
  406080:	2b00      	cmp	r3, #0
  406082:	d005      	beq.n	406090 <ch_common_set_sample_interval+0x80>
				tick_interval = sample_interval / period;
  406084:	68ba      	ldr	r2, [r7, #8]
  406086:	693b      	ldr	r3, [r7, #16]
  406088:	fbb2 f3f3 	udiv	r3, r2, r3
  40608c:	60fb      	str	r3, [r7, #12]
  40608e:	e001      	b.n	406094 <ch_common_set_sample_interval+0x84>
			} else {
				tick_interval = 0;
  406090:	2300      	movs	r3, #0
  406092:	60fb      	str	r3, [r7, #12]
#ifdef CHDRV_DEBUG
			char cbuf[80];
			snprintf(cbuf, sizeof(cbuf), "Set period=%lu, tick_interval=%lu\n", period, tick_interval);
			chbsp_print_str(cbuf);
#endif
			chdrv_write_byte(dev_ptr, period_reg, (uint8_t) period);
  406094:	7dfb      	ldrb	r3, [r7, #23]
  406096:	b29b      	uxth	r3, r3
  406098:	693a      	ldr	r2, [r7, #16]
  40609a:	b2d2      	uxtb	r2, r2
  40609c:	4619      	mov	r1, r3
  40609e:	6878      	ldr	r0, [r7, #4]
  4060a0:	4b07      	ldr	r3, [pc, #28]	; (4060c0 <ch_common_set_sample_interval+0xb0>)
  4060a2:	4798      	blx	r3
			chdrv_write_word(dev_ptr, tick_interval_reg, (uint16_t) tick_interval);
  4060a4:	7dbb      	ldrb	r3, [r7, #22]
  4060a6:	b29b      	uxth	r3, r3
  4060a8:	68fa      	ldr	r2, [r7, #12]
  4060aa:	b292      	uxth	r2, r2
  4060ac:	4619      	mov	r1, r3
  4060ae:	6878      	ldr	r0, [r7, #4]
  4060b0:	4b04      	ldr	r3, [pc, #16]	; (4060c4 <ch_common_set_sample_interval+0xb4>)
  4060b2:	4798      	blx	r3
		}
	}

	return ret_val;
  4060b4:	7d7b      	ldrb	r3, [r7, #21]
}
  4060b6:	4618      	mov	r0, r3
  4060b8:	3718      	adds	r7, #24
  4060ba:	46bd      	mov	sp, r7
  4060bc:	bd80      	pop	{r7, pc}
  4060be:	bf00      	nop
  4060c0:	00406e15 	.word	0x00406e15
  4060c4:	00406e4d 	.word	0x00406e4d

004060c8 <ch_common_set_num_samples>:

// Note: uses actual num_samples, even for CH201
uint8_t ch_common_set_num_samples(ch_dev_t *dev_ptr, uint16_t num_samples ) {
  4060c8:	b580      	push	{r7, lr}
  4060ca:	b084      	sub	sp, #16
  4060cc:	af00      	add	r7, sp, #0
  4060ce:	6078      	str	r0, [r7, #4]
  4060d0:	460b      	mov	r3, r1
  4060d2:	807b      	strh	r3, [r7, #2]
	uint8_t max_range_reg;
	uint8_t ret_val = 1;		// default is error (not connected or num_samples too big)
  4060d4:	2301      	movs	r3, #1
  4060d6:	73bb      	strb	r3, [r7, #14]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4060d8:	687b      	ldr	r3, [r7, #4]
  4060da:	8b9b      	ldrh	r3, [r3, #28]
  4060dc:	2b65      	cmp	r3, #101	; 0x65
  4060de:	d102      	bne.n	4060e6 <ch_common_set_num_samples+0x1e>
		max_range_reg = CH101_COMMON_REG_MAX_RANGE;
  4060e0:	2307      	movs	r3, #7
  4060e2:	73fb      	strb	r3, [r7, #15]
  4060e4:	e004      	b.n	4060f0 <ch_common_set_num_samples+0x28>
	} else {
		max_range_reg = CH201_COMMON_REG_MAX_RANGE;
  4060e6:	2307      	movs	r3, #7
  4060e8:	73fb      	strb	r3, [r7, #15]
		num_samples /= 2;					// each internal count for CH201 represents 2 physical samples
  4060ea:	887b      	ldrh	r3, [r7, #2]
  4060ec:	085b      	lsrs	r3, r3, #1
  4060ee:	807b      	strh	r3, [r7, #2]
	}

	if (dev_ptr->sensor_connected && (num_samples <= UINT8_MAX)) {
  4060f0:	687b      	ldr	r3, [r7, #4]
  4060f2:	7fdb      	ldrb	r3, [r3, #31]
  4060f4:	2b00      	cmp	r3, #0
  4060f6:	d00c      	beq.n	406112 <ch_common_set_num_samples+0x4a>
  4060f8:	887b      	ldrh	r3, [r7, #2]
  4060fa:	2bff      	cmp	r3, #255	; 0xff
  4060fc:	d809      	bhi.n	406112 <ch_common_set_num_samples+0x4a>
		ret_val = chdrv_write_byte(dev_ptr, max_range_reg, num_samples);
  4060fe:	7bfb      	ldrb	r3, [r7, #15]
  406100:	b29b      	uxth	r3, r3
  406102:	887a      	ldrh	r2, [r7, #2]
  406104:	b2d2      	uxtb	r2, r2
  406106:	4619      	mov	r1, r3
  406108:	6878      	ldr	r0, [r7, #4]
  40610a:	4b0e      	ldr	r3, [pc, #56]	; (406144 <ch_common_set_num_samples+0x7c>)
  40610c:	4798      	blx	r3
  40610e:	4603      	mov	r3, r0
  406110:	73bb      	strb	r3, [r7, #14]
	}

	if (!ret_val) {
  406112:	7bbb      	ldrb	r3, [r7, #14]
  406114:	2b00      	cmp	r3, #0
  406116:	d10d      	bne.n	406134 <ch_common_set_num_samples+0x6c>
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406118:	687b      	ldr	r3, [r7, #4]
  40611a:	8b9b      	ldrh	r3, [r3, #28]
  40611c:	2b65      	cmp	r3, #101	; 0x65
  40611e:	d103      	bne.n	406128 <ch_common_set_num_samples+0x60>
			dev_ptr->num_rx_samples = num_samples;
  406120:	687b      	ldr	r3, [r7, #4]
  406122:	887a      	ldrh	r2, [r7, #2]
  406124:	849a      	strh	r2, [r3, #36]	; 0x24
  406126:	e008      	b.n	40613a <ch_common_set_num_samples+0x72>
		} else {
			dev_ptr->num_rx_samples = (num_samples * 2);	// store actual physical sample count
  406128:	887b      	ldrh	r3, [r7, #2]
  40612a:	005b      	lsls	r3, r3, #1
  40612c:	b29a      	uxth	r2, r3
  40612e:	687b      	ldr	r3, [r7, #4]
  406130:	849a      	strh	r2, [r3, #36]	; 0x24
  406132:	e002      	b.n	40613a <ch_common_set_num_samples+0x72>
		}
	} else {
		dev_ptr->num_rx_samples = 0;
  406134:	687b      	ldr	r3, [r7, #4]
  406136:	2200      	movs	r2, #0
  406138:	849a      	strh	r2, [r3, #36]	; 0x24
	}
	
	return ret_val;
  40613a:	7bbb      	ldrb	r3, [r7, #14]
}
  40613c:	4618      	mov	r0, r3
  40613e:	3710      	adds	r7, #16
  406140:	46bd      	mov	sp, r7
  406142:	bd80      	pop	{r7, pc}
  406144:	00406e15 	.word	0x00406e15

00406148 <ch_common_set_max_range>:


uint8_t ch_common_set_max_range(ch_dev_t *dev_ptr, uint16_t max_range_mm) {
  406148:	b580      	push	{r7, lr}
  40614a:	b084      	sub	sp, #16
  40614c:	af00      	add	r7, sp, #0
  40614e:	6078      	str	r0, [r7, #4]
  406150:	460b      	mov	r3, r1
  406152:	807b      	strh	r3, [r7, #2]
	uint8_t ret_val;
	uint32_t num_samples;

	ret_val = (!dev_ptr->sensor_connected);
  406154:	687b      	ldr	r3, [r7, #4]
  406156:	7fdb      	ldrb	r3, [r3, #31]
  406158:	2b00      	cmp	r3, #0
  40615a:	bf0c      	ite	eq
  40615c:	2301      	moveq	r3, #1
  40615e:	2300      	movne	r3, #0
  406160:	b2db      	uxtb	r3, r3
  406162:	73fb      	strb	r3, [r7, #15]

	if (!ret_val) {
  406164:	7bfb      	ldrb	r3, [r7, #15]
  406166:	2b00      	cmp	r3, #0
  406168:	d11f      	bne.n	4061aa <ch_common_set_max_range+0x62>
		num_samples = dev_ptr->api_funcs.mm_to_samples(dev_ptr, max_range_mm);
  40616a:	687b      	ldr	r3, [r7, #4]
  40616c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
  406170:	887a      	ldrh	r2, [r7, #2]
  406172:	4611      	mov	r1, r2
  406174:	6878      	ldr	r0, [r7, #4]
  406176:	4798      	blx	r3
  406178:	4603      	mov	r3, r0
  40617a:	60bb      	str	r3, [r7, #8]

		if (num_samples > dev_ptr->max_samples) {
  40617c:	687b      	ldr	r3, [r7, #4]
  40617e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  406180:	461a      	mov	r2, r3
  406182:	68bb      	ldr	r3, [r7, #8]
  406184:	429a      	cmp	r2, r3
  406186:	d20d      	bcs.n	4061a4 <ch_common_set_max_range+0x5c>
			num_samples = dev_ptr->max_samples;
  406188:	687b      	ldr	r3, [r7, #4]
  40618a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  40618c:	60bb      	str	r3, [r7, #8]
			dev_ptr->max_range = ch_samples_to_mm(dev_ptr, num_samples);	// store reduced max range
  40618e:	68bb      	ldr	r3, [r7, #8]
  406190:	b29b      	uxth	r3, r3
  406192:	4619      	mov	r1, r3
  406194:	6878      	ldr	r0, [r7, #4]
  406196:	4b0d      	ldr	r3, [pc, #52]	; (4061cc <ch_common_set_max_range+0x84>)
  406198:	4798      	blx	r3
  40619a:	4603      	mov	r3, r0
  40619c:	461a      	mov	r2, r3
  40619e:	687b      	ldr	r3, [r7, #4]
  4061a0:	811a      	strh	r2, [r3, #8]
  4061a2:	e002      	b.n	4061aa <ch_common_set_max_range+0x62>
		} else {
			dev_ptr->max_range = max_range_mm;							// store user-specified max range
  4061a4:	687b      	ldr	r3, [r7, #4]
  4061a6:	887a      	ldrh	r2, [r7, #2]
  4061a8:	811a      	strh	r2, [r3, #8]
		snprintf(cbuf, sizeof(cbuf), "num_samples=%lu\n", num_samples);
		chbsp_print_str(cbuf);
#endif
	}

	if (!ret_val) {
  4061aa:	7bfb      	ldrb	r3, [r7, #15]
  4061ac:	2b00      	cmp	r3, #0
  4061ae:	d107      	bne.n	4061c0 <ch_common_set_max_range+0x78>
		ret_val = ch_set_num_samples(dev_ptr, num_samples);
  4061b0:	68bb      	ldr	r3, [r7, #8]
  4061b2:	b29b      	uxth	r3, r3
  4061b4:	4619      	mov	r1, r3
  4061b6:	6878      	ldr	r0, [r7, #4]
  4061b8:	4b05      	ldr	r3, [pc, #20]	; (4061d0 <ch_common_set_max_range+0x88>)
  4061ba:	4798      	blx	r3
  4061bc:	4603      	mov	r3, r0
  4061be:	73fb      	strb	r3, [r7, #15]
	}

#ifdef CHDRV_DEBUG
	printf("Set samples: ret_val: %u  dev_ptr->num_rx_samples: %u\n", ret_val, dev_ptr->num_rx_samples);
#endif
	return ret_val;
  4061c0:	7bfb      	ldrb	r3, [r7, #15]
}
  4061c2:	4618      	mov	r0, r3
  4061c4:	3710      	adds	r7, #16
  4061c6:	46bd      	mov	sp, r7
  4061c8:	bd80      	pop	{r7, pc}
  4061ca:	bf00      	nop
  4061cc:	00405c81 	.word	0x00405c81
  4061d0:	00405ad5 	.word	0x00405ad5

004061d4 <ch_common_mm_to_samples>:


uint16_t ch_common_mm_to_samples(ch_dev_t *dev_ptr, uint16_t num_mm) {
  4061d4:	b580      	push	{r7, lr}
  4061d6:	b086      	sub	sp, #24
  4061d8:	af00      	add	r7, sp, #0
  4061da:	6078      	str	r0, [r7, #4]
  4061dc:	460b      	mov	r3, r1
  4061de:	807b      	strh	r3, [r7, #2]
	uint8_t err;
	uint16_t scale_factor;
	uint32_t num_samples = 0;
  4061e0:	2300      	movs	r3, #0
  4061e2:	613b      	str	r3, [r7, #16]
	uint32_t divisor1;
	uint32_t divisor2 = (dev_ptr->group->rtc_cal_pulse_ms * CH_SPEEDOFSOUND_MPS);
  4061e4:	687b      	ldr	r3, [r7, #4]
  4061e6:	681b      	ldr	r3, [r3, #0]
  4061e8:	88db      	ldrh	r3, [r3, #6]
  4061ea:	461a      	mov	r2, r3
  4061ec:	f240 1357 	movw	r3, #343	; 0x157
  4061f0:	fb03 f302 	mul.w	r3, r3, r2
  4061f4:	60bb      	str	r3, [r7, #8]

	err = (!dev_ptr) || (!dev_ptr->sensor_connected);
  4061f6:	687b      	ldr	r3, [r7, #4]
  4061f8:	2b00      	cmp	r3, #0
  4061fa:	d003      	beq.n	406204 <ch_common_mm_to_samples+0x30>
  4061fc:	687b      	ldr	r3, [r7, #4]
  4061fe:	7fdb      	ldrb	r3, [r3, #31]
  406200:	2b00      	cmp	r3, #0
  406202:	d101      	bne.n	406208 <ch_common_mm_to_samples+0x34>
  406204:	2301      	movs	r3, #1
  406206:	e000      	b.n	40620a <ch_common_mm_to_samples+0x36>
  406208:	2300      	movs	r3, #0
  40620a:	75fb      	strb	r3, [r7, #23]

	if (!err) {
  40620c:	7dfb      	ldrb	r3, [r7, #23]
  40620e:	2b00      	cmp	r3, #0
  406210:	d114      	bne.n	40623c <ch_common_mm_to_samples+0x68>
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406212:	687b      	ldr	r3, [r7, #4]
  406214:	8b9b      	ldrh	r3, [r3, #28]
  406216:	2b65      	cmp	r3, #101	; 0x65
  406218:	d103      	bne.n	406222 <ch_common_mm_to_samples+0x4e>
			divisor1 = 0x2000;			// (4*16*128)  XXX need define(s)
  40621a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40621e:	60fb      	str	r3, [r7, #12]
  406220:	e002      	b.n	406228 <ch_common_mm_to_samples+0x54>
		} else {
			divisor1 = 0x4000;			// (4*16*128*2)  XXX need define(s)
  406222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  406226:	60fb      	str	r3, [r7, #12]
		}

		if (dev_ptr->scale_factor == 0) {
  406228:	687b      	ldr	r3, [r7, #4]
  40622a:	8adb      	ldrh	r3, [r3, #22]
  40622c:	2b00      	cmp	r3, #0
  40622e:	d102      	bne.n	406236 <ch_common_mm_to_samples+0x62>
			ch_common_store_scale_factor(dev_ptr);
  406230:	6878      	ldr	r0, [r7, #4]
  406232:	4b22      	ldr	r3, [pc, #136]	; (4062bc <ch_common_mm_to_samples+0xe8>)
  406234:	4798      	blx	r3
		}

		scale_factor = dev_ptr->scale_factor;
  406236:	687b      	ldr	r3, [r7, #4]
  406238:	8adb      	ldrh	r3, [r3, #22]
  40623a:	82bb      	strh	r3, [r7, #20]
	}

	if (!err) {
  40623c:	7dfb      	ldrb	r3, [r7, #23]
  40623e:	2b00      	cmp	r3, #0
  406240:	d126      	bne.n	406290 <ch_common_mm_to_samples+0xbc>
		// Two steps of division to avoid needing a type larger than 32 bits
		// Ceiling division to ensure result is at least enough samples to meet specified range
		// Oversample value is signed power of two for this firmware relative to standard f/8 sampling.

		num_samples = ((dev_ptr->rtc_cal_result * scale_factor) + (divisor1 - 1)) / divisor1;
  406242:	687b      	ldr	r3, [r7, #4]
  406244:	89db      	ldrh	r3, [r3, #14]
  406246:	461a      	mov	r2, r3
  406248:	8abb      	ldrh	r3, [r7, #20]
  40624a:	fb03 f302 	mul.w	r3, r3, r2
  40624e:	461a      	mov	r2, r3
  406250:	68fb      	ldr	r3, [r7, #12]
  406252:	4413      	add	r3, r2
  406254:	1e5a      	subs	r2, r3, #1
  406256:	68fb      	ldr	r3, [r7, #12]
  406258:	fbb2 f3f3 	udiv	r3, r2, r3
  40625c:	613b      	str	r3, [r7, #16]

		num_samples = (((num_samples * num_mm) << dev_ptr->oversample) + (divisor2 - 1)) / divisor2;
  40625e:	887b      	ldrh	r3, [r7, #2]
  406260:	693a      	ldr	r2, [r7, #16]
  406262:	fb02 f303 	mul.w	r3, r2, r3
  406266:	687a      	ldr	r2, [r7, #4]
  406268:	f992 201e 	ldrsb.w	r2, [r2, #30]
  40626c:	fa03 f202 	lsl.w	r2, r3, r2
  406270:	68bb      	ldr	r3, [r7, #8]
  406272:	4413      	add	r3, r2
  406274:	1e5a      	subs	r2, r3, #1
  406276:	68bb      	ldr	r3, [r7, #8]
  406278:	fbb2 f3f3 	udiv	r3, r2, r3
  40627c:	613b      	str	r3, [r7, #16]

		err = (num_samples > UINT16_MAX);
  40627e:	693b      	ldr	r3, [r7, #16]
  406280:	f64f 72ff 	movw	r2, #65535	; 0xffff
  406284:	4293      	cmp	r3, r2
  406286:	bf8c      	ite	hi
  406288:	2301      	movhi	r3, #1
  40628a:	2300      	movls	r3, #0
  40628c:	b2db      	uxtb	r3, r3
  40628e:	75fb      	strb	r3, [r7, #23]
	}

	if (!err) {
  406290:	7dfb      	ldrb	r3, [r7, #23]
  406292:	2b00      	cmp	r3, #0
  406294:	d106      	bne.n	4062a4 <ch_common_mm_to_samples+0xd0>
		if (dev_ptr->part_number == CH201_PART_NUMBER) {
  406296:	687b      	ldr	r3, [r7, #4]
  406298:	8b9b      	ldrh	r3, [r3, #28]
  40629a:	2bc9      	cmp	r3, #201	; 0xc9
  40629c:	d102      	bne.n	4062a4 <ch_common_mm_to_samples+0xd0>
			num_samples *= 2;			// each internal count for CH201 represents 2 physical samples
  40629e:	693b      	ldr	r3, [r7, #16]
  4062a0:	005b      	lsls	r3, r3, #1
  4062a2:	613b      	str	r3, [r7, #16]
		}
	}

	if (err) {
  4062a4:	7dfb      	ldrb	r3, [r7, #23]
  4062a6:	2b00      	cmp	r3, #0
  4062a8:	d001      	beq.n	4062ae <ch_common_mm_to_samples+0xda>
		num_samples = 0;		// return zero if error
  4062aa:	2300      	movs	r3, #0
  4062ac:	613b      	str	r3, [r7, #16]
	}

	return (uint16_t) num_samples;
  4062ae:	693b      	ldr	r3, [r7, #16]
  4062b0:	b29b      	uxth	r3, r3
}
  4062b2:	4618      	mov	r0, r3
  4062b4:	3718      	adds	r7, #24
  4062b6:	46bd      	mov	sp, r7
  4062b8:	bd80      	pop	{r7, pc}
  4062ba:	bf00      	nop
  4062bc:	004065c5 	.word	0x004065c5

004062c0 <ch_common_samples_to_mm>:


uint16_t ch_common_samples_to_mm(ch_dev_t *dev_ptr, uint16_t num_samples) {
  4062c0:	b480      	push	{r7}
  4062c2:	b085      	sub	sp, #20
  4062c4:	af00      	add	r7, sp, #0
  4062c6:	6078      	str	r0, [r7, #4]
  4062c8:	460b      	mov	r3, r1
  4062ca:	807b      	strh	r3, [r7, #2]
	uint32_t	num_mm = 0;
  4062cc:	2300      	movs	r3, #0
  4062ce:	60fb      	str	r3, [r7, #12]
	uint32_t	op_freq = dev_ptr->op_frequency;
  4062d0:	687b      	ldr	r3, [r7, #4]
  4062d2:	691b      	ldr	r3, [r3, #16]
  4062d4:	60bb      	str	r3, [r7, #8]

	if (op_freq != 0) {
  4062d6:	68bb      	ldr	r3, [r7, #8]
  4062d8:	2b00      	cmp	r3, #0
  4062da:	d008      	beq.n	4062ee <ch_common_samples_to_mm+0x2e>
		num_mm = ((uint32_t) num_samples * CH_SPEEDOFSOUND_MPS * 8 * 1000) / (op_freq * 2);
  4062dc:	887b      	ldrh	r3, [r7, #2]
  4062de:	4a0b      	ldr	r2, [pc, #44]	; (40630c <ch_common_samples_to_mm+0x4c>)
  4062e0:	fb02 f203 	mul.w	r2, r2, r3
  4062e4:	68bb      	ldr	r3, [r7, #8]
  4062e6:	005b      	lsls	r3, r3, #1
  4062e8:	fbb2 f3f3 	udiv	r3, r2, r3
  4062ec:	60fb      	str	r3, [r7, #12]
	}

	/* Adjust for oversampling, if used */
	num_mm >>= dev_ptr->oversample;
  4062ee:	687b      	ldr	r3, [r7, #4]
  4062f0:	f993 301e 	ldrsb.w	r3, [r3, #30]
  4062f4:	461a      	mov	r2, r3
  4062f6:	68fb      	ldr	r3, [r7, #12]
  4062f8:	40d3      	lsrs	r3, r2
  4062fa:	60fb      	str	r3, [r7, #12]

	return (uint16_t) num_mm;
  4062fc:	68fb      	ldr	r3, [r7, #12]
  4062fe:	b29b      	uxth	r3, r3
}
  406300:	4618      	mov	r0, r3
  406302:	3714      	adds	r7, #20
  406304:	46bd      	mov	sp, r7
  406306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40630a:	4770      	bx	lr
  40630c:	0029dec0 	.word	0x0029dec0

00406310 <ch_common_get_range>:
		}
	}
	return ret_val;
}

uint32_t ch_common_get_range(ch_dev_t *dev_ptr, ch_range_t range_type) {
  406310:	b580      	push	{r7, lr}
  406312:	b08a      	sub	sp, #40	; 0x28
  406314:	af00      	add	r7, sp, #0
  406316:	6078      	str	r0, [r7, #4]
  406318:	460b      	mov	r3, r1
  40631a:	70fb      	strb	r3, [r7, #3]
	uint8_t		tof_reg;
	uint32_t	range = CH_NO_TARGET;
  40631c:	f04f 33ff 	mov.w	r3, #4294967295
  406320:	623b      	str	r3, [r7, #32]
	uint16_t 	time_of_flight;
	uint16_t 	scale_factor;
	int 		err;

	if (dev_ptr->sensor_connected) {
  406322:	687b      	ldr	r3, [r7, #4]
  406324:	7fdb      	ldrb	r3, [r3, #31]
  406326:	2b00      	cmp	r3, #0
  406328:	d073      	beq.n	406412 <ch_common_get_range+0x102>

		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  40632a:	687b      	ldr	r3, [r7, #4]
  40632c:	8b9b      	ldrh	r3, [r3, #28]
  40632e:	2b65      	cmp	r3, #101	; 0x65
  406330:	d103      	bne.n	40633a <ch_common_get_range+0x2a>
			tof_reg = CH101_COMMON_REG_TOF;
  406332:	2318      	movs	r3, #24
  406334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  406338:	e002      	b.n	406340 <ch_common_get_range+0x30>
		} else {
			tof_reg = CH201_COMMON_REG_TOF;
  40633a:	2324      	movs	r3, #36	; 0x24
  40633c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		err = chdrv_read_word(dev_ptr, tof_reg, &time_of_flight);
  406340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  406344:	b29b      	uxth	r3, r3
  406346:	f107 020a 	add.w	r2, r7, #10
  40634a:	4619      	mov	r1, r3
  40634c:	6878      	ldr	r0, [r7, #4]
  40634e:	4b33      	ldr	r3, [pc, #204]	; (40641c <ch_common_get_range+0x10c>)
  406350:	4798      	blx	r3
  406352:	61f8      	str	r0, [r7, #28]

		if (!err && (time_of_flight != UINT16_MAX)) { // If object detected
  406354:	69fb      	ldr	r3, [r7, #28]
  406356:	2b00      	cmp	r3, #0
  406358:	d15b      	bne.n	406412 <ch_common_get_range+0x102>
  40635a:	897b      	ldrh	r3, [r7, #10]
  40635c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  406360:	4293      	cmp	r3, r2
  406362:	d056      	beq.n	406412 <ch_common_get_range+0x102>

			if (dev_ptr->scale_factor == 0) {
  406364:	687b      	ldr	r3, [r7, #4]
  406366:	8adb      	ldrh	r3, [r3, #22]
  406368:	2b00      	cmp	r3, #0
  40636a:	d102      	bne.n	406372 <ch_common_get_range+0x62>
				ch_common_store_scale_factor(dev_ptr);
  40636c:	6878      	ldr	r0, [r7, #4]
  40636e:	4b2c      	ldr	r3, [pc, #176]	; (406420 <ch_common_get_range+0x110>)
  406370:	4798      	blx	r3
			}
			scale_factor = dev_ptr->scale_factor;
  406372:	687b      	ldr	r3, [r7, #4]
  406374:	8adb      	ldrh	r3, [r3, #22]
  406376:	837b      	strh	r3, [r7, #26]

			if (scale_factor != 0) {
  406378:	8b7b      	ldrh	r3, [r7, #26]
  40637a:	2b00      	cmp	r3, #0
  40637c:	d049      	beq.n	406412 <ch_common_get_range+0x102>
				uint32_t num = (CH_SPEEDOFSOUND_MPS * dev_ptr->group->rtc_cal_pulse_ms * (uint32_t) time_of_flight);
  40637e:	687b      	ldr	r3, [r7, #4]
  406380:	681b      	ldr	r3, [r3, #0]
  406382:	88db      	ldrh	r3, [r3, #6]
  406384:	897a      	ldrh	r2, [r7, #10]
  406386:	fb02 f303 	mul.w	r3, r2, r3
  40638a:	f240 1257 	movw	r2, #343	; 0x157
  40638e:	fb02 f303 	mul.w	r3, r2, r3
  406392:	617b      	str	r3, [r7, #20]
				uint32_t den = ((uint32_t) dev_ptr->rtc_cal_result * (uint32_t) scale_factor) >> 11;		// XXX need define
  406394:	687b      	ldr	r3, [r7, #4]
  406396:	89db      	ldrh	r3, [r3, #14]
  406398:	461a      	mov	r2, r3
  40639a:	8b7b      	ldrh	r3, [r7, #26]
  40639c:	fb03 f302 	mul.w	r3, r3, r2
  4063a0:	0adb      	lsrs	r3, r3, #11
  4063a2:	613b      	str	r3, [r7, #16]

				range = (num / den);
  4063a4:	697a      	ldr	r2, [r7, #20]
  4063a6:	693b      	ldr	r3, [r7, #16]
  4063a8:	fbb2 f3f3 	udiv	r3, r2, r3
  4063ac:	623b      	str	r3, [r7, #32]

				if (dev_ptr->part_number == CH201_PART_NUMBER) {
  4063ae:	687b      	ldr	r3, [r7, #4]
  4063b0:	8b9b      	ldrh	r3, [r3, #28]
  4063b2:	2bc9      	cmp	r3, #201	; 0xc9
  4063b4:	d102      	bne.n	4063bc <ch_common_get_range+0xac>
					range *= 2;
  4063b6:	6a3b      	ldr	r3, [r7, #32]
  4063b8:	005b      	lsls	r3, r3, #1
  4063ba:	623b      	str	r3, [r7, #32]
				}

				if (range_type == CH_RANGE_ECHO_ONE_WAY) {
  4063bc:	78fb      	ldrb	r3, [r7, #3]
  4063be:	2b00      	cmp	r3, #0
  4063c0:	d102      	bne.n	4063c8 <ch_common_get_range+0xb8>
					range /= 2;
  4063c2:	6a3b      	ldr	r3, [r7, #32]
  4063c4:	085b      	lsrs	r3, r3, #1
  4063c6:	623b      	str	r3, [r7, #32]
				}

				/* Adjust for oversampling, if used */
				range >>= dev_ptr->oversample;
  4063c8:	687b      	ldr	r3, [r7, #4]
  4063ca:	f993 301e 	ldrsb.w	r3, [r3, #30]
  4063ce:	461a      	mov	r2, r3
  4063d0:	6a3b      	ldr	r3, [r7, #32]
  4063d2:	40d3      	lsrs	r3, r2
  4063d4:	623b      	str	r3, [r7, #32]

				/* If rx-only node, adjust for pre-trigger time included in ToF */
				if (dev_ptr->mode == CH_MODE_TRIGGERED_RX_ONLY) {
  4063d6:	687b      	ldr	r3, [r7, #4]
  4063d8:	791b      	ldrb	r3, [r3, #4]
  4063da:	2b20      	cmp	r3, #32
  4063dc:	d119      	bne.n	406412 <ch_common_get_range+0x102>
					uint32_t pretrig_adj = (CH_SPEEDOFSOUND_MPS * dev_ptr->group->pretrig_delay_us * 32) / 1000;
  4063de:	687b      	ldr	r3, [r7, #4]
  4063e0:	681b      	ldr	r3, [r3, #0]
  4063e2:	891b      	ldrh	r3, [r3, #8]
  4063e4:	461a      	mov	r2, r3
  4063e6:	f642 23e0 	movw	r3, #10976	; 0x2ae0
  4063ea:	fb03 f302 	mul.w	r3, r3, r2
  4063ee:	4a0d      	ldr	r2, [pc, #52]	; (406424 <ch_common_get_range+0x114>)
  4063f0:	fb82 1203 	smull	r1, r2, r2, r3
  4063f4:	1192      	asrs	r2, r2, #6
  4063f6:	17db      	asrs	r3, r3, #31
  4063f8:	1ad3      	subs	r3, r2, r3
  4063fa:	60fb      	str	r3, [r7, #12]

					if (range > pretrig_adj) {
  4063fc:	6a3a      	ldr	r2, [r7, #32]
  4063fe:	68fb      	ldr	r3, [r7, #12]
  406400:	429a      	cmp	r2, r3
  406402:	d904      	bls.n	40640e <ch_common_get_range+0xfe>
						range -= pretrig_adj;			// subtract adjustment from calculated range
  406404:	6a3a      	ldr	r2, [r7, #32]
  406406:	68fb      	ldr	r3, [r7, #12]
  406408:	1ad3      	subs	r3, r2, r3
  40640a:	623b      	str	r3, [r7, #32]
  40640c:	e001      	b.n	406412 <ch_common_get_range+0x102>
					} else {
						range = CH_MIN_RANGE_VAL;		// underflow - range is very close to zero, use minimum value
  40640e:	2301      	movs	r3, #1
  406410:	623b      	str	r3, [r7, #32]
					}
				}
			}
		}
	}
	return range;
  406412:	6a3b      	ldr	r3, [r7, #32]
}
  406414:	4618      	mov	r0, r3
  406416:	3728      	adds	r7, #40	; 0x28
  406418:	46bd      	mov	sp, r7
  40641a:	bd80      	pop	{r7, pc}
  40641c:	00406ee9 	.word	0x00406ee9
  406420:	004065c5 	.word	0x004065c5
  406424:	10624dd3 	.word	0x10624dd3

00406428 <ch_common_get_amplitude>:


uint16_t ch_common_get_amplitude(ch_dev_t *dev_ptr) {
  406428:	b580      	push	{r7, lr}
  40642a:	b084      	sub	sp, #16
  40642c:	af00      	add	r7, sp, #0
  40642e:	6078      	str	r0, [r7, #4]
	uint8_t  amplitude_reg;
	uint16_t amplitude = 0;
  406430:	2300      	movs	r3, #0
  406432:	81bb      	strh	r3, [r7, #12]

	if (dev_ptr->sensor_connected) {
  406434:	687b      	ldr	r3, [r7, #4]
  406436:	7fdb      	ldrb	r3, [r3, #31]
  406438:	2b00      	cmp	r3, #0
  40643a:	d010      	beq.n	40645e <ch_common_get_amplitude+0x36>
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  40643c:	687b      	ldr	r3, [r7, #4]
  40643e:	8b9b      	ldrh	r3, [r3, #28]
  406440:	2b65      	cmp	r3, #101	; 0x65
  406442:	d102      	bne.n	40644a <ch_common_get_amplitude+0x22>
			amplitude_reg = CH101_COMMON_REG_AMPLITUDE;
  406444:	231a      	movs	r3, #26
  406446:	73fb      	strb	r3, [r7, #15]
  406448:	e001      	b.n	40644e <ch_common_get_amplitude+0x26>
		} else {
			amplitude_reg = CH201_COMMON_REG_AMPLITUDE;
  40644a:	2326      	movs	r3, #38	; 0x26
  40644c:	73fb      	strb	r3, [r7, #15]
		}

		chdrv_read_word(dev_ptr, amplitude_reg, &amplitude);
  40644e:	7bfb      	ldrb	r3, [r7, #15]
  406450:	b29b      	uxth	r3, r3
  406452:	f107 020c 	add.w	r2, r7, #12
  406456:	4619      	mov	r1, r3
  406458:	6878      	ldr	r0, [r7, #4]
  40645a:	4b03      	ldr	r3, [pc, #12]	; (406468 <ch_common_get_amplitude+0x40>)
  40645c:	4798      	blx	r3
	}

	return amplitude;
  40645e:	89bb      	ldrh	r3, [r7, #12]
}
  406460:	4618      	mov	r0, r3
  406462:	3710      	adds	r7, #16
  406464:	46bd      	mov	sp, r7
  406466:	bd80      	pop	{r7, pc}
  406468:	00406ee9 	.word	0x00406ee9

0040646c <ch_common_get_locked_state>:


uint8_t ch_common_get_locked_state(ch_dev_t *dev_ptr) {
  40646c:	b580      	push	{r7, lr}
  40646e:	b084      	sub	sp, #16
  406470:	af00      	add	r7, sp, #0
  406472:	6078      	str	r0, [r7, #4]
	uint8_t ready_reg;
	uint8_t lock_mask = dev_ptr->freqLockValue;
  406474:	687b      	ldr	r3, [r7, #4]
  406476:	795b      	ldrb	r3, [r3, #5]
  406478:	737b      	strb	r3, [r7, #13]
	uint8_t ret_val = 0;
  40647a:	2300      	movs	r3, #0
  40647c:	73bb      	strb	r3, [r7, #14]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  40647e:	687b      	ldr	r3, [r7, #4]
  406480:	8b9b      	ldrh	r3, [r3, #28]
  406482:	2b65      	cmp	r3, #101	; 0x65
  406484:	d102      	bne.n	40648c <ch_common_get_locked_state+0x20>
		ready_reg = CH101_COMMON_REG_READY;
  406486:	2314      	movs	r3, #20
  406488:	73fb      	strb	r3, [r7, #15]
  40648a:	e001      	b.n	406490 <ch_common_get_locked_state+0x24>
	} else {
		ready_reg = CH201_COMMON_REG_READY;
  40648c:	2314      	movs	r3, #20
  40648e:	73fb      	strb	r3, [r7, #15]
	}

	if (dev_ptr->sensor_connected) {
  406490:	687b      	ldr	r3, [r7, #4]
  406492:	7fdb      	ldrb	r3, [r3, #31]
  406494:	2b00      	cmp	r3, #0
  406496:	d011      	beq.n	4064bc <ch_common_get_locked_state+0x50>
		uint8_t ready_value = 0;
  406498:	2300      	movs	r3, #0
  40649a:	733b      	strb	r3, [r7, #12]
		chdrv_read_byte(dev_ptr, ready_reg, &ready_value);
  40649c:	7bfb      	ldrb	r3, [r7, #15]
  40649e:	b29b      	uxth	r3, r3
  4064a0:	f107 020c 	add.w	r2, r7, #12
  4064a4:	4619      	mov	r1, r3
  4064a6:	6878      	ldr	r0, [r7, #4]
  4064a8:	4b07      	ldr	r3, [pc, #28]	; (4064c8 <ch_common_get_locked_state+0x5c>)
  4064aa:	4798      	blx	r3
		if (ready_value & lock_mask) {
  4064ac:	7b3a      	ldrb	r2, [r7, #12]
  4064ae:	7b7b      	ldrb	r3, [r7, #13]
  4064b0:	4013      	ands	r3, r2
  4064b2:	b2db      	uxtb	r3, r3
  4064b4:	2b00      	cmp	r3, #0
  4064b6:	d001      	beq.n	4064bc <ch_common_get_locked_state+0x50>
			ret_val = 1;
  4064b8:	2301      	movs	r3, #1
  4064ba:	73bb      	strb	r3, [r7, #14]
		}
	}
	return ret_val;
  4064bc:	7bbb      	ldrb	r3, [r7, #14]
}
  4064be:	4618      	mov	r0, r3
  4064c0:	3710      	adds	r7, #16
  4064c2:	46bd      	mov	sp, r7
  4064c4:	bd80      	pop	{r7, pc}
  4064c6:	bf00      	nop
  4064c8:	00406e91 	.word	0x00406e91

004064cc <ch_common_prepare_pulse_timer>:

void ch_common_prepare_pulse_timer(ch_dev_t *dev_ptr) {
  4064cc:	b580      	push	{r7, lr}
  4064ce:	b084      	sub	sp, #16
  4064d0:	af00      	add	r7, sp, #0
  4064d2:	6078      	str	r0, [r7, #4]
	uint8_t cal_trig_reg;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4064d4:	687b      	ldr	r3, [r7, #4]
  4064d6:	8b9b      	ldrh	r3, [r3, #28]
  4064d8:	2b65      	cmp	r3, #101	; 0x65
  4064da:	d102      	bne.n	4064e2 <ch_common_prepare_pulse_timer+0x16>
		cal_trig_reg = CH101_COMMON_REG_CAL_TRIG;
  4064dc:	2306      	movs	r3, #6
  4064de:	73fb      	strb	r3, [r7, #15]
  4064e0:	e001      	b.n	4064e6 <ch_common_prepare_pulse_timer+0x1a>
	} else {
		cal_trig_reg = CH201_COMMON_REG_CAL_TRIG;
  4064e2:	2306      	movs	r3, #6
  4064e4:	73fb      	strb	r3, [r7, #15]
	}

	chdrv_write_byte(dev_ptr, cal_trig_reg, 0);
  4064e6:	7bfb      	ldrb	r3, [r7, #15]
  4064e8:	b29b      	uxth	r3, r3
  4064ea:	2200      	movs	r2, #0
  4064ec:	4619      	mov	r1, r3
  4064ee:	6878      	ldr	r0, [r7, #4]
  4064f0:	4b02      	ldr	r3, [pc, #8]	; (4064fc <ch_common_prepare_pulse_timer+0x30>)
  4064f2:	4798      	blx	r3
}
  4064f4:	bf00      	nop
  4064f6:	3710      	adds	r7, #16
  4064f8:	46bd      	mov	sp, r7
  4064fa:	bd80      	pop	{r7, pc}
  4064fc:	00406e15 	.word	0x00406e15

00406500 <ch_common_store_pt_result>:

void ch_common_store_pt_result(ch_dev_t *dev_ptr) {
  406500:	b580      	push	{r7, lr}
  406502:	b084      	sub	sp, #16
  406504:	af00      	add	r7, sp, #0
  406506:	6078      	str	r0, [r7, #4]
	uint8_t pt_result_reg;
	uint16_t rtc_cal_result;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406508:	687b      	ldr	r3, [r7, #4]
  40650a:	8b9b      	ldrh	r3, [r3, #28]
  40650c:	2b65      	cmp	r3, #101	; 0x65
  40650e:	d102      	bne.n	406516 <ch_common_store_pt_result+0x16>
		pt_result_reg = CH101_COMMON_REG_CAL_RESULT;
  406510:	230a      	movs	r3, #10
  406512:	73fb      	strb	r3, [r7, #15]
  406514:	e001      	b.n	40651a <ch_common_store_pt_result+0x1a>
	} else {
		pt_result_reg = CH201_COMMON_REG_CAL_RESULT;
  406516:	230a      	movs	r3, #10
  406518:	73fb      	strb	r3, [r7, #15]
	}

	chdrv_read_word(dev_ptr, pt_result_reg, &rtc_cal_result);
  40651a:	7bfb      	ldrb	r3, [r7, #15]
  40651c:	b29b      	uxth	r3, r3
  40651e:	f107 020c 	add.w	r2, r7, #12
  406522:	4619      	mov	r1, r3
  406524:	6878      	ldr	r0, [r7, #4]
  406526:	4b04      	ldr	r3, [pc, #16]	; (406538 <ch_common_store_pt_result+0x38>)
  406528:	4798      	blx	r3
	dev_ptr->rtc_cal_result = rtc_cal_result;
  40652a:	89ba      	ldrh	r2, [r7, #12]
  40652c:	687b      	ldr	r3, [r7, #4]
  40652e:	81da      	strh	r2, [r3, #14]
}
  406530:	bf00      	nop
  406532:	3710      	adds	r7, #16
  406534:	46bd      	mov	sp, r7
  406536:	bd80      	pop	{r7, pc}
  406538:	00406ee9 	.word	0x00406ee9

0040653c <ch_common_store_op_freq>:

void ch_common_store_op_freq(ch_dev_t *dev_ptr){
  40653c:	b580      	push	{r7, lr}
  40653e:	b088      	sub	sp, #32
  406540:	af00      	add	r7, sp, #0
  406542:	6078      	str	r0, [r7, #4]
	uint32_t freq_counter_cycles;
	uint32_t num;
	uint32_t den;
	uint32_t op_freq;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406544:	687b      	ldr	r3, [r7, #4]
  406546:	8b9b      	ldrh	r3, [r3, #28]
  406548:	2b65      	cmp	r3, #101	; 0x65
  40654a:	d102      	bne.n	406552 <ch_common_store_op_freq+0x16>
		tof_sf_reg = CH101_COMMON_REG_TOF_SF;
  40654c:	2316      	movs	r3, #22
  40654e:	77fb      	strb	r3, [r7, #31]
  406550:	e001      	b.n	406556 <ch_common_store_op_freq+0x1a>
	} else {
		tof_sf_reg = CH201_COMMON_REG_TOF_SF;
  406552:	2322      	movs	r3, #34	; 0x22
  406554:	77fb      	strb	r3, [r7, #31]
	}

	freq_counter_cycles = dev_ptr->freqCounterCycles;
  406556:	687b      	ldr	r3, [r7, #4]
  406558:	88db      	ldrh	r3, [r3, #6]
  40655a:	61bb      	str	r3, [r7, #24]

	chdrv_read_word(dev_ptr, tof_sf_reg, &raw_freq);
  40655c:	7ffb      	ldrb	r3, [r7, #31]
  40655e:	b29b      	uxth	r3, r3
  406560:	f107 020a 	add.w	r2, r7, #10
  406564:	4619      	mov	r1, r3
  406566:	6878      	ldr	r0, [r7, #4]
  406568:	4b10      	ldr	r3, [pc, #64]	; (4065ac <ch_common_store_op_freq+0x70>)
  40656a:	4798      	blx	r3

	num = (uint32_t)(((dev_ptr->rtc_cal_result)*1000U) / (16U * freq_counter_cycles)) * (uint32_t)(raw_freq);
  40656c:	687b      	ldr	r3, [r7, #4]
  40656e:	89db      	ldrh	r3, [r3, #14]
  406570:	461a      	mov	r2, r3
  406572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  406576:	fb03 f202 	mul.w	r2, r3, r2
  40657a:	69bb      	ldr	r3, [r7, #24]
  40657c:	011b      	lsls	r3, r3, #4
  40657e:	fbb2 f3f3 	udiv	r3, r2, r3
  406582:	897a      	ldrh	r2, [r7, #10]
  406584:	fb02 f303 	mul.w	r3, r2, r3
  406588:	617b      	str	r3, [r7, #20]
	den = (uint32_t)(dev_ptr->group->rtc_cal_pulse_ms);
  40658a:	687b      	ldr	r3, [r7, #4]
  40658c:	681b      	ldr	r3, [r3, #0]
  40658e:	88db      	ldrh	r3, [r3, #6]
  406590:	613b      	str	r3, [r7, #16]
	op_freq = (num/den);
  406592:	697a      	ldr	r2, [r7, #20]
  406594:	693b      	ldr	r3, [r7, #16]
  406596:	fbb2 f3f3 	udiv	r3, r2, r3
  40659a:	60fb      	str	r3, [r7, #12]

	dev_ptr->op_frequency = op_freq;
  40659c:	687b      	ldr	r3, [r7, #4]
  40659e:	68fa      	ldr	r2, [r7, #12]
  4065a0:	611a      	str	r2, [r3, #16]
}
  4065a2:	bf00      	nop
  4065a4:	3720      	adds	r7, #32
  4065a6:	46bd      	mov	sp, r7
  4065a8:	bd80      	pop	{r7, pc}
  4065aa:	bf00      	nop
  4065ac:	00406ee9 	.word	0x00406ee9

004065b0 <ch_common_store_bandwidth>:

void ch_common_store_bandwidth(ch_dev_t __attribute__((unused)) *dev_ptr) {
  4065b0:	b480      	push	{r7}
  4065b2:	b083      	sub	sp, #12
  4065b4:	af00      	add	r7, sp, #0
  4065b6:	6078      	str	r0, [r7, #4]
/*
 * Not supported in current GPR firmware
 */
}
  4065b8:	bf00      	nop
  4065ba:	370c      	adds	r7, #12
  4065bc:	46bd      	mov	sp, r7
  4065be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4065c2:	4770      	bx	lr

004065c4 <ch_common_store_scale_factor>:

void ch_common_store_scale_factor(ch_dev_t *dev_ptr) {
  4065c4:	b580      	push	{r7, lr}
  4065c6:	b084      	sub	sp, #16
  4065c8:	af00      	add	r7, sp, #0
  4065ca:	6078      	str	r0, [r7, #4]
	uint8_t	err;
	uint8_t	tof_sf_reg;
	uint16_t scale_factor;

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4065cc:	687b      	ldr	r3, [r7, #4]
  4065ce:	8b9b      	ldrh	r3, [r3, #28]
  4065d0:	2b65      	cmp	r3, #101	; 0x65
  4065d2:	d102      	bne.n	4065da <ch_common_store_scale_factor+0x16>
		tof_sf_reg = CH101_COMMON_REG_TOF_SF;
  4065d4:	2316      	movs	r3, #22
  4065d6:	73fb      	strb	r3, [r7, #15]
  4065d8:	e001      	b.n	4065de <ch_common_store_scale_factor+0x1a>
	} else {
		tof_sf_reg = CH201_COMMON_REG_TOF_SF;
  4065da:	2322      	movs	r3, #34	; 0x22
  4065dc:	73fb      	strb	r3, [r7, #15]
	}

	err = chdrv_read_word(dev_ptr, tof_sf_reg, &scale_factor);
  4065de:	7bfb      	ldrb	r3, [r7, #15]
  4065e0:	b29b      	uxth	r3, r3
  4065e2:	f107 020c 	add.w	r2, r7, #12
  4065e6:	4619      	mov	r1, r3
  4065e8:	6878      	ldr	r0, [r7, #4]
  4065ea:	4b09      	ldr	r3, [pc, #36]	; (406610 <ch_common_store_scale_factor+0x4c>)
  4065ec:	4798      	blx	r3
  4065ee:	4603      	mov	r3, r0
  4065f0:	73bb      	strb	r3, [r7, #14]
	if (!err) {
  4065f2:	7bbb      	ldrb	r3, [r7, #14]
  4065f4:	2b00      	cmp	r3, #0
  4065f6:	d103      	bne.n	406600 <ch_common_store_scale_factor+0x3c>
		dev_ptr->scale_factor = scale_factor;
  4065f8:	89ba      	ldrh	r2, [r7, #12]
  4065fa:	687b      	ldr	r3, [r7, #4]
  4065fc:	82da      	strh	r2, [r3, #22]
	} else {
		dev_ptr->scale_factor = 0;
	}
}
  4065fe:	e002      	b.n	406606 <ch_common_store_scale_factor+0x42>
		dev_ptr->scale_factor = 0;
  406600:	687b      	ldr	r3, [r7, #4]
  406602:	2200      	movs	r2, #0
  406604:	82da      	strh	r2, [r3, #22]
}
  406606:	bf00      	nop
  406608:	3710      	adds	r7, #16
  40660a:	46bd      	mov	sp, r7
  40660c:	bd80      	pop	{r7, pc}
  40660e:	bf00      	nop
  406610:	00406ee9 	.word	0x00406ee9

00406614 <ch_common_set_thresholds>:


uint8_t ch_common_set_thresholds(ch_dev_t *dev_ptr, ch_thresholds_t *thresholds_ptr) {
  406614:	b580      	push	{r7, lr}
  406616:	b088      	sub	sp, #32
  406618:	af00      	add	r7, sp, #0
  40661a:	6078      	str	r0, [r7, #4]
  40661c:	6039      	str	r1, [r7, #0]

	uint8_t	thresh_len_reg = 0;		// offset of register for this threshold's length
  40661e:	2300      	movs	r3, #0
  406620:	77fb      	strb	r3, [r7, #31]
	uint8_t thresh_level_reg;	// threshold level reg (first in array)
	uint8_t max_num_thresholds;
	int ret_val = 1;		// default return = error
  406622:	2301      	movs	r3, #1
  406624:	61bb      	str	r3, [r7, #24]
	uint8_t	thresh_num;
	uint8_t thresh_len;
	uint16_t thresh_level;
	uint16_t start_sample = 0;
  406626:	2300      	movs	r3, #0
  406628:	82bb      	strh	r3, [r7, #20]

	if (dev_ptr->sensor_connected) {
  40662a:	687b      	ldr	r3, [r7, #4]
  40662c:	7fdb      	ldrb	r3, [r3, #31]
  40662e:	2b00      	cmp	r3, #0
  406630:	d070      	beq.n	406714 <ch_common_set_thresholds+0x100>
		
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406632:	687b      	ldr	r3, [r7, #4]
  406634:	8b9b      	ldrh	r3, [r3, #28]
  406636:	2b65      	cmp	r3, #101	; 0x65
  406638:	d102      	bne.n	406640 <ch_common_set_thresholds+0x2c>
			return ret_val;		// NOT SUPPORTED in CH101
  40663a:	69bb      	ldr	r3, [r7, #24]
  40663c:	b2db      	uxtb	r3, r3
  40663e:	e06b      	b.n	406718 <ch_common_set_thresholds+0x104>

		} else {
			thresh_level_reg = CH201_COMMON_REG_THRESHOLDS;
  406640:	2316      	movs	r3, #22
  406642:	74fb      	strb	r3, [r7, #19]
			max_num_thresholds = CH201_COMMON_NUM_THRESHOLDS;
  406644:	2306      	movs	r3, #6
  406646:	74bb      	strb	r3, [r7, #18]
		}

		for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
  406648:	2300      	movs	r3, #0
  40664a:	75fb      	strb	r3, [r7, #23]
  40664c:	e05c      	b.n	406708 <ch_common_set_thresholds+0xf4>

			if (thresh_num < (max_num_thresholds - 1)) {
  40664e:	7dfa      	ldrb	r2, [r7, #23]
  406650:	7cbb      	ldrb	r3, [r7, #18]
  406652:	3b01      	subs	r3, #1
  406654:	429a      	cmp	r2, r3
  406656:	da0e      	bge.n	406676 <ch_common_set_thresholds+0x62>
				uint16_t next_start_sample = thresholds_ptr->threshold[thresh_num + 1].start_sample;
  406658:	7dfb      	ldrb	r3, [r7, #23]
  40665a:	1c5a      	adds	r2, r3, #1
  40665c:	683b      	ldr	r3, [r7, #0]
  40665e:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
  406662:	823b      	strh	r3, [r7, #16]

				thresh_len = (next_start_sample - start_sample);
  406664:	8a3b      	ldrh	r3, [r7, #16]
  406666:	b2da      	uxtb	r2, r3
  406668:	8abb      	ldrh	r3, [r7, #20]
  40666a:	b2db      	uxtb	r3, r3
  40666c:	1ad3      	subs	r3, r2, r3
  40666e:	75bb      	strb	r3, [r7, #22]
				start_sample  = next_start_sample;
  406670:	8a3b      	ldrh	r3, [r7, #16]
  406672:	82bb      	strh	r3, [r7, #20]
  406674:	e001      	b.n	40667a <ch_common_set_thresholds+0x66>
			} else {
				thresh_len = 0;
  406676:	2300      	movs	r3, #0
  406678:	75bb      	strb	r3, [r7, #22]
			}

			if (dev_ptr->part_number == CH201_PART_NUMBER) {
  40667a:	687b      	ldr	r3, [r7, #4]
  40667c:	8b9b      	ldrh	r3, [r3, #28]
  40667e:	2bc9      	cmp	r3, #201	; 0xc9
  406680:	d122      	bne.n	4066c8 <ch_common_set_thresholds+0xb4>
				if (thresh_num == 0) {
  406682:	7dfb      	ldrb	r3, [r7, #23]
  406684:	2b00      	cmp	r3, #0
  406686:	d102      	bne.n	40668e <ch_common_set_thresholds+0x7a>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_0;
  406688:	2308      	movs	r3, #8
  40668a:	77fb      	strb	r3, [r7, #31]
  40668c:	e01c      	b.n	4066c8 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 1) {
  40668e:	7dfb      	ldrb	r3, [r7, #23]
  406690:	2b01      	cmp	r3, #1
  406692:	d102      	bne.n	40669a <ch_common_set_thresholds+0x86>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_1;
  406694:	2309      	movs	r3, #9
  406696:	77fb      	strb	r3, [r7, #31]
  406698:	e016      	b.n	4066c8 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 2) {
  40669a:	7dfb      	ldrb	r3, [r7, #23]
  40669c:	2b02      	cmp	r3, #2
  40669e:	d102      	bne.n	4066a6 <ch_common_set_thresholds+0x92>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_2;
  4066a0:	230c      	movs	r3, #12
  4066a2:	77fb      	strb	r3, [r7, #31]
  4066a4:	e010      	b.n	4066c8 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 3) {
  4066a6:	7dfb      	ldrb	r3, [r7, #23]
  4066a8:	2b03      	cmp	r3, #3
  4066aa:	d102      	bne.n	4066b2 <ch_common_set_thresholds+0x9e>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_3;
  4066ac:	230d      	movs	r3, #13
  4066ae:	77fb      	strb	r3, [r7, #31]
  4066b0:	e00a      	b.n	4066c8 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 4) {
  4066b2:	7dfb      	ldrb	r3, [r7, #23]
  4066b4:	2b04      	cmp	r3, #4
  4066b6:	d102      	bne.n	4066be <ch_common_set_thresholds+0xaa>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_4;
  4066b8:	2315      	movs	r3, #21
  4066ba:	77fb      	strb	r3, [r7, #31]
  4066bc:	e004      	b.n	4066c8 <ch_common_set_thresholds+0xb4>
				} else if (thresh_num == 5) {
  4066be:	7dfb      	ldrb	r3, [r7, #23]
  4066c0:	2b05      	cmp	r3, #5
  4066c2:	d101      	bne.n	4066c8 <ch_common_set_thresholds+0xb4>
					thresh_len_reg = 0;			// last threshold does not have length field - assumed to extend to end of data
  4066c4:	2300      	movs	r3, #0
  4066c6:	77fb      	strb	r3, [r7, #31]
				}
			}

			if (thresh_len_reg != 0) {
  4066c8:	7ffb      	ldrb	r3, [r7, #31]
  4066ca:	2b00      	cmp	r3, #0
  4066cc:	d006      	beq.n	4066dc <ch_common_set_thresholds+0xc8>
				chdrv_write_byte(dev_ptr, thresh_len_reg, thresh_len); 	// set the length field (if any) for this threshold
  4066ce:	7ffb      	ldrb	r3, [r7, #31]
  4066d0:	b29b      	uxth	r3, r3
  4066d2:	7dba      	ldrb	r2, [r7, #22]
  4066d4:	4619      	mov	r1, r3
  4066d6:	6878      	ldr	r0, [r7, #4]
  4066d8:	4b11      	ldr	r3, [pc, #68]	; (406720 <ch_common_set_thresholds+0x10c>)
  4066da:	4798      	blx	r3
			}
			// write level to this threshold's entry in register array
			thresh_level = thresholds_ptr->threshold[thresh_num].level;
  4066dc:	7dfb      	ldrb	r3, [r7, #23]
  4066de:	683a      	ldr	r2, [r7, #0]
  4066e0:	009b      	lsls	r3, r3, #2
  4066e2:	4413      	add	r3, r2
  4066e4:	885b      	ldrh	r3, [r3, #2]
  4066e6:	81fb      	strh	r3, [r7, #14]
			chdrv_write_word(dev_ptr, (thresh_level_reg + (thresh_num * sizeof(uint16_t))), thresh_level);
  4066e8:	7cfb      	ldrb	r3, [r7, #19]
  4066ea:	b29a      	uxth	r2, r3
  4066ec:	7dfb      	ldrb	r3, [r7, #23]
  4066ee:	b29b      	uxth	r3, r3
  4066f0:	005b      	lsls	r3, r3, #1
  4066f2:	b29b      	uxth	r3, r3
  4066f4:	4413      	add	r3, r2
  4066f6:	b29b      	uxth	r3, r3
  4066f8:	89fa      	ldrh	r2, [r7, #14]
  4066fa:	4619      	mov	r1, r3
  4066fc:	6878      	ldr	r0, [r7, #4]
  4066fe:	4b09      	ldr	r3, [pc, #36]	; (406724 <ch_common_set_thresholds+0x110>)
  406700:	4798      	blx	r3
		for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
  406702:	7dfb      	ldrb	r3, [r7, #23]
  406704:	3301      	adds	r3, #1
  406706:	75fb      	strb	r3, [r7, #23]
  406708:	7dfa      	ldrb	r2, [r7, #23]
  40670a:	7cbb      	ldrb	r3, [r7, #18]
  40670c:	429a      	cmp	r2, r3
  40670e:	d39e      	bcc.n	40664e <ch_common_set_thresholds+0x3a>
		}

		ret_val = 0;	// return OK
  406710:	2300      	movs	r3, #0
  406712:	61bb      	str	r3, [r7, #24]
	}
	return ret_val;
  406714:	69bb      	ldr	r3, [r7, #24]
  406716:	b2db      	uxtb	r3, r3
}
  406718:	4618      	mov	r0, r3
  40671a:	3720      	adds	r7, #32
  40671c:	46bd      	mov	sp, r7
  40671e:	bd80      	pop	{r7, pc}
  406720:	00406e15 	.word	0x00406e15
  406724:	00406e4d 	.word	0x00406e4d

00406728 <ch_common_get_thresholds>:


uint8_t ch_common_get_thresholds(ch_dev_t *dev_ptr, ch_thresholds_t *thresholds_ptr) {
  406728:	b580      	push	{r7, lr}
  40672a:	b086      	sub	sp, #24
  40672c:	af00      	add	r7, sp, #0
  40672e:	6078      	str	r0, [r7, #4]
  406730:	6039      	str	r1, [r7, #0]
	uint8_t	thresh_len_reg = 0;		// offset of register for this threshold's length
  406732:	2300      	movs	r3, #0
  406734:	75fb      	strb	r3, [r7, #23]
	uint8_t thresh_level_reg;	// threshold level reg (first in array)
	uint8_t max_num_thresholds;
	uint8_t ret_val = 1;		// default = error return
  406736:	2301      	movs	r3, #1
  406738:	75bb      	strb	r3, [r7, #22]
	uint8_t thresh_num;
	uint8_t	thresh_len = 0;		// number of samples described by each threshold
  40673a:	2300      	movs	r3, #0
  40673c:	73fb      	strb	r3, [r7, #15]
	uint16_t	start_sample = 0;	// calculated start sample for each threshold
  40673e:	2300      	movs	r3, #0
  406740:	827b      	strh	r3, [r7, #18]

	if (dev_ptr->sensor_connected && (thresholds_ptr != NULL)) {
  406742:	687b      	ldr	r3, [r7, #4]
  406744:	7fdb      	ldrb	r3, [r3, #31]
  406746:	2b00      	cmp	r3, #0
  406748:	d068      	beq.n	40681c <ch_common_get_thresholds+0xf4>
  40674a:	683b      	ldr	r3, [r7, #0]
  40674c:	2b00      	cmp	r3, #0
  40674e:	d065      	beq.n	40681c <ch_common_get_thresholds+0xf4>
		
		if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406750:	687b      	ldr	r3, [r7, #4]
  406752:	8b9b      	ldrh	r3, [r3, #28]
  406754:	2b65      	cmp	r3, #101	; 0x65
  406756:	d101      	bne.n	40675c <ch_common_get_thresholds+0x34>
			return ret_val;		// NOT SUPPORTED in CH101
  406758:	7dbb      	ldrb	r3, [r7, #22]
  40675a:	e060      	b.n	40681e <ch_common_get_thresholds+0xf6>
			
		} else {
			thresh_level_reg = CH201_COMMON_REG_THRESHOLDS;
  40675c:	2316      	movs	r3, #22
  40675e:	747b      	strb	r3, [r7, #17]
			max_num_thresholds = CH201_COMMON_NUM_THRESHOLDS;
  406760:	2306      	movs	r3, #6
  406762:	743b      	strb	r3, [r7, #16]
		}

		for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
  406764:	2300      	movs	r3, #0
  406766:	757b      	strb	r3, [r7, #21]
  406768:	e052      	b.n	406810 <ch_common_get_thresholds+0xe8>

			if (dev_ptr->part_number == CH201_PART_NUMBER) {
  40676a:	687b      	ldr	r3, [r7, #4]
  40676c:	8b9b      	ldrh	r3, [r3, #28]
  40676e:	2bc9      	cmp	r3, #201	; 0xc9
  406770:	d122      	bne.n	4067b8 <ch_common_get_thresholds+0x90>
				if (thresh_num == 0) {
  406772:	7d7b      	ldrb	r3, [r7, #21]
  406774:	2b00      	cmp	r3, #0
  406776:	d102      	bne.n	40677e <ch_common_get_thresholds+0x56>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_0;
  406778:	2308      	movs	r3, #8
  40677a:	75fb      	strb	r3, [r7, #23]
  40677c:	e01c      	b.n	4067b8 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 1) {
  40677e:	7d7b      	ldrb	r3, [r7, #21]
  406780:	2b01      	cmp	r3, #1
  406782:	d102      	bne.n	40678a <ch_common_get_thresholds+0x62>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_1;
  406784:	2309      	movs	r3, #9
  406786:	75fb      	strb	r3, [r7, #23]
  406788:	e016      	b.n	4067b8 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 2) {
  40678a:	7d7b      	ldrb	r3, [r7, #21]
  40678c:	2b02      	cmp	r3, #2
  40678e:	d102      	bne.n	406796 <ch_common_get_thresholds+0x6e>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_2;
  406790:	230c      	movs	r3, #12
  406792:	75fb      	strb	r3, [r7, #23]
  406794:	e010      	b.n	4067b8 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 3) {
  406796:	7d7b      	ldrb	r3, [r7, #21]
  406798:	2b03      	cmp	r3, #3
  40679a:	d102      	bne.n	4067a2 <ch_common_get_thresholds+0x7a>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_3;
  40679c:	230d      	movs	r3, #13
  40679e:	75fb      	strb	r3, [r7, #23]
  4067a0:	e00a      	b.n	4067b8 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 4) {
  4067a2:	7d7b      	ldrb	r3, [r7, #21]
  4067a4:	2b04      	cmp	r3, #4
  4067a6:	d102      	bne.n	4067ae <ch_common_get_thresholds+0x86>
					thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_4;
  4067a8:	2315      	movs	r3, #21
  4067aa:	75fb      	strb	r3, [r7, #23]
  4067ac:	e004      	b.n	4067b8 <ch_common_get_thresholds+0x90>
				} else if (thresh_num == 5) {
  4067ae:	7d7b      	ldrb	r3, [r7, #21]
  4067b0:	2b05      	cmp	r3, #5
  4067b2:	d101      	bne.n	4067b8 <ch_common_get_thresholds+0x90>
					thresh_len_reg = 0;			// last threshold does not have length field - assumed to extend to end of data
  4067b4:	2300      	movs	r3, #0
  4067b6:	75fb      	strb	r3, [r7, #23]
				}
			}

			if (thresh_len_reg != 0) {
  4067b8:	7dfb      	ldrb	r3, [r7, #23]
  4067ba:	2b00      	cmp	r3, #0
  4067bc:	d008      	beq.n	4067d0 <ch_common_get_thresholds+0xa8>
				// read the length field register for this threshold
				chdrv_read_byte(dev_ptr, thresh_len_reg, &thresh_len);
  4067be:	7dfb      	ldrb	r3, [r7, #23]
  4067c0:	b29b      	uxth	r3, r3
  4067c2:	f107 020f 	add.w	r2, r7, #15
  4067c6:	4619      	mov	r1, r3
  4067c8:	6878      	ldr	r0, [r7, #4]
  4067ca:	4b17      	ldr	r3, [pc, #92]	; (406828 <ch_common_get_thresholds+0x100>)
  4067cc:	4798      	blx	r3
  4067ce:	e001      	b.n	4067d4 <ch_common_get_thresholds+0xac>
			} else {
				thresh_len = 0;
  4067d0:	2300      	movs	r3, #0
  4067d2:	73fb      	strb	r3, [r7, #15]
			}

			thresholds_ptr->threshold[thresh_num].start_sample = start_sample;
  4067d4:	7d7a      	ldrb	r2, [r7, #21]
  4067d6:	683b      	ldr	r3, [r7, #0]
  4067d8:	8a79      	ldrh	r1, [r7, #18]
  4067da:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
			start_sample += thresh_len;				// increment start sample for next threshold
  4067de:	7bfb      	ldrb	r3, [r7, #15]
  4067e0:	b29a      	uxth	r2, r3
  4067e2:	8a7b      	ldrh	r3, [r7, #18]
  4067e4:	4413      	add	r3, r2
  4067e6:	827b      	strh	r3, [r7, #18]

			// get level from this threshold's entry in register array
			chdrv_read_word(dev_ptr, (thresh_level_reg + (thresh_num * sizeof(uint16_t))), 
  4067e8:	7c7b      	ldrb	r3, [r7, #17]
  4067ea:	b29a      	uxth	r2, r3
  4067ec:	7d7b      	ldrb	r3, [r7, #21]
  4067ee:	b29b      	uxth	r3, r3
  4067f0:	005b      	lsls	r3, r3, #1
  4067f2:	b29b      	uxth	r3, r3
  4067f4:	4413      	add	r3, r2
  4067f6:	b299      	uxth	r1, r3
						    &(thresholds_ptr->threshold[thresh_num].level));
  4067f8:	7d7b      	ldrb	r3, [r7, #21]
			chdrv_read_word(dev_ptr, (thresh_level_reg + (thresh_num * sizeof(uint16_t))), 
  4067fa:	009b      	lsls	r3, r3, #2
  4067fc:	683a      	ldr	r2, [r7, #0]
  4067fe:	4413      	add	r3, r2
  406800:	3302      	adds	r3, #2
  406802:	461a      	mov	r2, r3
  406804:	6878      	ldr	r0, [r7, #4]
  406806:	4b09      	ldr	r3, [pc, #36]	; (40682c <ch_common_get_thresholds+0x104>)
  406808:	4798      	blx	r3
		for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
  40680a:	7d7b      	ldrb	r3, [r7, #21]
  40680c:	3301      	adds	r3, #1
  40680e:	757b      	strb	r3, [r7, #21]
  406810:	7d7a      	ldrb	r2, [r7, #21]
  406812:	7c3b      	ldrb	r3, [r7, #16]
  406814:	429a      	cmp	r2, r3
  406816:	d3a8      	bcc.n	40676a <ch_common_get_thresholds+0x42>

		}
		ret_val = 0;	// return OK
  406818:	2300      	movs	r3, #0
  40681a:	75bb      	strb	r3, [r7, #22]
	}
	return ret_val;
  40681c:	7dbb      	ldrb	r3, [r7, #22]
}
  40681e:	4618      	mov	r0, r3
  406820:	3718      	adds	r7, #24
  406822:	46bd      	mov	sp, r7
  406824:	bd80      	pop	{r7, pc}
  406826:	bf00      	nop
  406828:	00406e91 	.word	0x00406e91
  40682c:	00406ee9 	.word	0x00406ee9

00406830 <get_sample_data>:


static uint8_t get_sample_data(ch_dev_t *dev_ptr, ch_iq_sample_t *buf_ptr, uint16_t start_sample, uint16_t num_samples,
							   ch_io_mode_t mode, uint8_t sample_size_in_bytes) {
  406830:	b590      	push	{r4, r7, lr}
  406832:	b093      	sub	sp, #76	; 0x4c
  406834:	af04      	add	r7, sp, #16
  406836:	60f8      	str	r0, [r7, #12]
  406838:	60b9      	str	r1, [r7, #8]
  40683a:	4611      	mov	r1, r2
  40683c:	461a      	mov	r2, r3
  40683e:	460b      	mov	r3, r1
  406840:	80fb      	strh	r3, [r7, #6]
  406842:	4613      	mov	r3, r2
  406844:	80bb      	strh	r3, [r7, #4]

	uint16_t   iq_data_addr;
	ch_group_t *grp_ptr = dev_ptr->group;
  406846:	68fb      	ldr	r3, [r7, #12]
  406848:	681b      	ldr	r3, [r3, #0]
  40684a:	623b      	str	r3, [r7, #32]
	int        error = 1;
  40684c:	2301      	movs	r3, #1
  40684e:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t	   use_prog_read = 0;		// default = do not use low-level programming interface
  406850:	2300      	movs	r3, #0
  406852:	77fb      	strb	r3, [r7, #31]
	if (grp_ptr->num_connected[dev_ptr->i2c_bus_index] == 1) {		// if only one device on this bus
		use_prog_read = 1;											//   use low-level interface
	}
#endif

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406854:	68fb      	ldr	r3, [r7, #12]
  406856:	8b9b      	ldrh	r3, [r3, #28]
  406858:	2b65      	cmp	r3, #101	; 0x65
  40685a:	d102      	bne.n	406862 <get_sample_data+0x32>
		iq_data_addr = CH101_COMMON_REG_DATA;
  40685c:	231c      	movs	r3, #28
  40685e:	86fb      	strh	r3, [r7, #54]	; 0x36
  406860:	e001      	b.n	406866 <get_sample_data+0x36>
	} else {
		iq_data_addr = CH201_COMMON_REG_DATA;
  406862:	2328      	movs	r3, #40	; 0x28
  406864:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	iq_data_addr += (start_sample * sample_size_in_bytes);
  406866:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
  40686a:	b29b      	uxth	r3, r3
  40686c:	88fa      	ldrh	r2, [r7, #6]
  40686e:	fb12 f303 	smulbb	r3, r2, r3
  406872:	b29a      	uxth	r2, r3
  406874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  406876:	4413      	add	r3, r2
  406878:	86fb      	strh	r3, [r7, #54]	; 0x36

	if ((num_samples != 0) && ((start_sample + num_samples) <= dev_ptr->max_samples)) {
  40687a:	88bb      	ldrh	r3, [r7, #4]
  40687c:	2b00      	cmp	r3, #0
  40687e:	f000 80b3 	beq.w	4069e8 <get_sample_data+0x1b8>
  406882:	88fa      	ldrh	r2, [r7, #6]
  406884:	88bb      	ldrh	r3, [r7, #4]
  406886:	4413      	add	r3, r2
  406888:	68fa      	ldr	r2, [r7, #12]
  40688a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
  40688c:	4293      	cmp	r3, r2
  40688e:	f300 80ab 	bgt.w	4069e8 <get_sample_data+0x1b8>
		uint16_t num_bytes = (num_samples * sample_size_in_bytes);
  406892:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
  406896:	b29b      	uxth	r3, r3
  406898:	88ba      	ldrh	r2, [r7, #4]
  40689a:	fb12 f303 	smulbb	r3, r2, r3
  40689e:	83bb      	strh	r3, [r7, #28]

		if (mode == CH_IO_MODE_BLOCK) {
  4068a0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
  4068a4:	2b00      	cmp	r3, #0
  4068a6:	d16e      	bne.n	406986 <get_sample_data+0x156>
			/* blocking transfer */

			if (use_prog_read) {
  4068a8:	7ffb      	ldrb	r3, [r7, #31]
  4068aa:	2b00      	cmp	r3, #0
  4068ac:	d063      	beq.n	406976 <get_sample_data+0x146>
				/* use low-level programming interface for speed */

				int num_transfers = (num_bytes + (CH_PROG_XFER_SIZE - 1)) / CH_PROG_XFER_SIZE;
  4068ae:	8bbb      	ldrh	r3, [r7, #28]
  4068b0:	33ff      	adds	r3, #255	; 0xff
  4068b2:	2b00      	cmp	r3, #0
  4068b4:	da00      	bge.n	4068b8 <get_sample_data+0x88>
  4068b6:	33ff      	adds	r3, #255	; 0xff
  4068b8:	121b      	asrs	r3, r3, #8
  4068ba:	61bb      	str	r3, [r7, #24]
    			int bytes_left = num_bytes;       // remaining bytes to read
  4068bc:	8bbb      	ldrh	r3, [r7, #28]
  4068be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Convert register offsets to full memory addresses */
				if (dev_ptr->part_number == CH101_PART_NUMBER) {
  4068c0:	68fb      	ldr	r3, [r7, #12]
  4068c2:	8b9b      	ldrh	r3, [r3, #28]
  4068c4:	2b65      	cmp	r3, #101	; 0x65
  4068c6:	d104      	bne.n	4068d2 <get_sample_data+0xa2>
					iq_data_addr += CH101_DATA_MEM_ADDR + CH101_COMMON_I2CREGS_OFFSET;
  4068c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4068ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4068ce:	86fb      	strh	r3, [r7, #54]	; 0x36
  4068d0:	e003      	b.n	4068da <get_sample_data+0xaa>
				} else {
					iq_data_addr += CH201_DATA_MEM_ADDR + CH201_COMMON_I2CREGS_OFFSET;
  4068d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4068d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4068d8:	86fb      	strh	r3, [r7, #54]	; 0x36
				}

				chbsp_program_enable(dev_ptr);					// assert PROG pin
  4068da:	68f8      	ldr	r0, [r7, #12]
  4068dc:	4b45      	ldr	r3, [pc, #276]	; (4069f4 <get_sample_data+0x1c4>)
  4068de:	4798      	blx	r3

    			for (int xfer = 0; xfer < num_transfers; xfer++) {
  4068e0:	2300      	movs	r3, #0
  4068e2:	62bb      	str	r3, [r7, #40]	; 0x28
  4068e4:	e03f      	b.n	406966 <get_sample_data+0x136>
        			int bytes_to_read;
        			uint8_t message[] = { (0x80 | CH_PROG_REG_CTL), 0x09 };      // read burst command
  4068e6:	4b44      	ldr	r3, [pc, #272]	; (4069f8 <get_sample_data+0x1c8>)
  4068e8:	881b      	ldrh	r3, [r3, #0]
  4068ea:	82bb      	strh	r3, [r7, #20]

        			if (bytes_left > CH_PROG_XFER_SIZE) {
  4068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4068ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4068f2:	dd03      	ble.n	4068fc <get_sample_data+0xcc>
                		bytes_to_read = CH_PROG_XFER_SIZE;
  4068f4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4068f8:	627b      	str	r3, [r7, #36]	; 0x24
  4068fa:	e001      	b.n	406900 <get_sample_data+0xd0>
        			} else {
                		bytes_to_read = bytes_left;
  4068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4068fe:	627b      	str	r3, [r7, #36]	; 0x24
        			}
        			chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR, (iq_data_addr + (xfer * CH_PROG_XFER_SIZE)));
  406900:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406902:	b29b      	uxth	r3, r3
  406904:	021b      	lsls	r3, r3, #8
  406906:	b29a      	uxth	r2, r3
  406908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40690a:	4413      	add	r3, r2
  40690c:	b29b      	uxth	r3, r3
  40690e:	461a      	mov	r2, r3
  406910:	2105      	movs	r1, #5
  406912:	68f8      	ldr	r0, [r7, #12]
  406914:	4b39      	ldr	r3, [pc, #228]	; (4069fc <get_sample_data+0x1cc>)
  406916:	4798      	blx	r3
        			chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (bytes_to_read - 1));
  406918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40691a:	b29b      	uxth	r3, r3
  40691c:	3b01      	subs	r3, #1
  40691e:	b29b      	uxth	r3, r3
  406920:	461a      	mov	r2, r3
  406922:	2107      	movs	r1, #7
  406924:	68f8      	ldr	r0, [r7, #12]
  406926:	4b35      	ldr	r3, [pc, #212]	; (4069fc <get_sample_data+0x1cc>)
  406928:	4798      	blx	r3
        			error = chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
  40692a:	f107 0314 	add.w	r3, r7, #20
  40692e:	2202      	movs	r2, #2
  406930:	4619      	mov	r1, r3
  406932:	68f8      	ldr	r0, [r7, #12]
  406934:	4b32      	ldr	r3, [pc, #200]	; (406a00 <get_sample_data+0x1d0>)
  406936:	4798      	blx	r3
  406938:	6338      	str	r0, [r7, #48]	; 0x30
        			error |= chdrv_prog_i2c_read(dev_ptr, ((uint8_t *)buf_ptr + (xfer * CH_PROG_XFER_SIZE)), bytes_to_read);
  40693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40693c:	021b      	lsls	r3, r3, #8
  40693e:	461a      	mov	r2, r3
  406940:	68bb      	ldr	r3, [r7, #8]
  406942:	4413      	add	r3, r2
  406944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  406946:	b292      	uxth	r2, r2
  406948:	4619      	mov	r1, r3
  40694a:	68f8      	ldr	r0, [r7, #12]
  40694c:	4b2d      	ldr	r3, [pc, #180]	; (406a04 <get_sample_data+0x1d4>)
  40694e:	4798      	blx	r3
  406950:	4602      	mov	r2, r0
  406952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406954:	4313      	orrs	r3, r2
  406956:	633b      	str	r3, [r7, #48]	; 0x30

        			bytes_left -= bytes_to_read;
  406958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40695c:	1ad3      	subs	r3, r2, r3
  40695e:	62fb      	str	r3, [r7, #44]	; 0x2c
    			for (int xfer = 0; xfer < num_transfers; xfer++) {
  406960:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406962:	3301      	adds	r3, #1
  406964:	62bb      	str	r3, [r7, #40]	; 0x28
  406966:	6aba      	ldr	r2, [r7, #40]	; 0x28
  406968:	69bb      	ldr	r3, [r7, #24]
  40696a:	429a      	cmp	r2, r3
  40696c:	dbbb      	blt.n	4068e6 <get_sample_data+0xb6>
    			}
    			chbsp_program_disable(dev_ptr);					// de-assert PROG pin
  40696e:	68f8      	ldr	r0, [r7, #12]
  406970:	4b25      	ldr	r3, [pc, #148]	; (406a08 <get_sample_data+0x1d8>)
  406972:	4798      	blx	r3
  406974:	e038      	b.n	4069e8 <get_sample_data+0x1b8>

			} else {	/* if (use_prog_read) */
				/* use standard I2C interface */

				error = chdrv_burst_read(dev_ptr, iq_data_addr, (uint8_t *) buf_ptr, num_bytes);
  406976:	8bbb      	ldrh	r3, [r7, #28]
  406978:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
  40697a:	68ba      	ldr	r2, [r7, #8]
  40697c:	68f8      	ldr	r0, [r7, #12]
  40697e:	4c23      	ldr	r4, [pc, #140]	; (406a0c <get_sample_data+0x1dc>)
  406980:	47a0      	blx	r4
  406982:	6338      	str	r0, [r7, #48]	; 0x30
  406984:	e030      	b.n	4069e8 <get_sample_data+0x1b8>
			}

		} else {
			/* non-blocking transfer - queue a read transaction (must be started using ch_io_start_nb() ) */

			if (use_prog_read && (grp_ptr->i2c_drv_flags & I2C_DRV_FLAG_USE_PROG_NB)) {
  406986:	7ffb      	ldrb	r3, [r7, #31]
  406988:	2b00      	cmp	r3, #0
  40698a:	d020      	beq.n	4069ce <get_sample_data+0x19e>
  40698c:	6a3b      	ldr	r3, [r7, #32]
  40698e:	889b      	ldrh	r3, [r3, #4]
  406990:	f003 0302 	and.w	r3, r3, #2
  406994:	2b00      	cmp	r3, #0
  406996:	d01a      	beq.n	4069ce <get_sample_data+0x19e>
				/* Use low-level programming interface to read data */

				/* Convert register offsets to full memory addresses */
				if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406998:	68fb      	ldr	r3, [r7, #12]
  40699a:	8b9b      	ldrh	r3, [r3, #28]
  40699c:	2b65      	cmp	r3, #101	; 0x65
  40699e:	d104      	bne.n	4069aa <get_sample_data+0x17a>
					iq_data_addr += (CH101_DATA_MEM_ADDR + CH101_COMMON_I2CREGS_OFFSET);
  4069a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4069a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4069a6:	86fb      	strh	r3, [r7, #54]	; 0x36
  4069a8:	e003      	b.n	4069b2 <get_sample_data+0x182>
				} else {
					iq_data_addr += (CH201_DATA_MEM_ADDR + CH201_COMMON_I2CREGS_OFFSET);
  4069aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4069ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4069b0:	86fb      	strh	r3, [r7, #54]	; 0x36
				}

				error = chdrv_group_i2c_queue(grp_ptr, dev_ptr, 1, CHDRV_NB_TRANS_TYPE_PROG, iq_data_addr, num_bytes, 
  4069b2:	68bb      	ldr	r3, [r7, #8]
  4069b4:	9302      	str	r3, [sp, #8]
  4069b6:	8bbb      	ldrh	r3, [r7, #28]
  4069b8:	9301      	str	r3, [sp, #4]
  4069ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4069bc:	9300      	str	r3, [sp, #0]
  4069be:	2301      	movs	r3, #1
  4069c0:	2201      	movs	r2, #1
  4069c2:	68f9      	ldr	r1, [r7, #12]
  4069c4:	6a38      	ldr	r0, [r7, #32]
  4069c6:	4c12      	ldr	r4, [pc, #72]	; (406a10 <get_sample_data+0x1e0>)
  4069c8:	47a0      	blx	r4
  4069ca:	6338      	str	r0, [r7, #48]	; 0x30
  4069cc:	e00c      	b.n	4069e8 <get_sample_data+0x1b8>
					                      	(uint8_t *) buf_ptr);
			} else {
				/* Use regular I2C register interface to read data */
				error = chdrv_group_i2c_queue(grp_ptr, dev_ptr, 1, CHDRV_NB_TRANS_TYPE_STD, iq_data_addr, num_bytes, 
  4069ce:	68bb      	ldr	r3, [r7, #8]
  4069d0:	9302      	str	r3, [sp, #8]
  4069d2:	8bbb      	ldrh	r3, [r7, #28]
  4069d4:	9301      	str	r3, [sp, #4]
  4069d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4069d8:	9300      	str	r3, [sp, #0]
  4069da:	2300      	movs	r3, #0
  4069dc:	2201      	movs	r2, #1
  4069de:	68f9      	ldr	r1, [r7, #12]
  4069e0:	6a38      	ldr	r0, [r7, #32]
  4069e2:	4c0b      	ldr	r4, [pc, #44]	; (406a10 <get_sample_data+0x1e0>)
  4069e4:	47a0      	blx	r4
  4069e6:	6338      	str	r0, [r7, #48]	; 0x30
											  (uint8_t*) buf_ptr);
			}
		}
	}

	return error;
  4069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4069ea:	b2db      	uxtb	r3, r3
}
  4069ec:	4618      	mov	r0, r3
  4069ee:	373c      	adds	r7, #60	; 0x3c
  4069f0:	46bd      	mov	sp, r7
  4069f2:	bd90      	pop	{r4, r7, pc}
  4069f4:	0040200d 	.word	0x0040200d
  4069f8:	0040cd14 	.word	0x0040cd14
  4069fc:	00407521 	.word	0x00407521
  406a00:	00406d6d 	.word	0x00406d6d
  406a04:	00406da5 	.word	0x00406da5
  406a08:	00402045 	.word	0x00402045
  406a0c:	00406eb9 	.word	0x00406eb9
  406a10:	0040702d 	.word	0x0040702d

00406a14 <ch_common_set_sample_window>:

uint8_t	 ch_common_set_sample_window(ch_dev_t *dev_ptr, uint16_t start_sample, uint16_t num_samples) {
  406a14:	b480      	push	{r7}
  406a16:	b085      	sub	sp, #20
  406a18:	af00      	add	r7, sp, #0
  406a1a:	6078      	str	r0, [r7, #4]
  406a1c:	460b      	mov	r3, r1
  406a1e:	807b      	strh	r3, [r7, #2]
  406a20:	4613      	mov	r3, r2
  406a22:	803b      	strh	r3, [r7, #0]
	uint8_t err = 1;
  406a24:	2301      	movs	r3, #1
  406a26:	73fb      	strb	r3, [r7, #15]
	uint16_t max_num_samples;


	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406a28:	687b      	ldr	r3, [r7, #4]
  406a2a:	8b9b      	ldrh	r3, [r3, #28]
  406a2c:	2b65      	cmp	r3, #101	; 0x65
  406a2e:	d102      	bne.n	406a36 <ch_common_set_sample_window+0x22>
		max_num_samples = CH101_MAX_NUM_SAMPLES;
  406a30:	2396      	movs	r3, #150	; 0x96
  406a32:	81bb      	strh	r3, [r7, #12]
  406a34:	e002      	b.n	406a3c <ch_common_set_sample_window+0x28>
	} else {
		max_num_samples = CH201_MAX_NUM_SAMPLES;
  406a36:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
  406a3a:	81bb      	strh	r3, [r7, #12]
	}

	if ((start_sample + num_samples) <= max_num_samples) {
  406a3c:	887a      	ldrh	r2, [r7, #2]
  406a3e:	883b      	ldrh	r3, [r7, #0]
  406a40:	441a      	add	r2, r3
  406a42:	89bb      	ldrh	r3, [r7, #12]
  406a44:	429a      	cmp	r2, r3
  406a46:	dc07      	bgt.n	406a58 <ch_common_set_sample_window+0x44>
		dev_ptr->win_start_sample = start_sample;
  406a48:	687b      	ldr	r3, [r7, #4]
  406a4a:	887a      	ldrh	r2, [r7, #2]
  406a4c:	84da      	strh	r2, [r3, #38]	; 0x26
		dev_ptr->num_win_samples = num_samples;
  406a4e:	687b      	ldr	r3, [r7, #4]
  406a50:	883a      	ldrh	r2, [r7, #0]
  406a52:	851a      	strh	r2, [r3, #40]	; 0x28

		err = 0;
  406a54:	2300      	movs	r3, #0
  406a56:	73fb      	strb	r3, [r7, #15]
	}

	return err;
  406a58:	7bfb      	ldrb	r3, [r7, #15]
}
  406a5a:	4618      	mov	r0, r3
  406a5c:	3714      	adds	r7, #20
  406a5e:	46bd      	mov	sp, r7
  406a60:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a64:	4770      	bx	lr
	...

00406a68 <ch_common_get_amplitude_avg>:


uint16_t ch_common_get_amplitude_avg(ch_dev_t *dev_ptr) {
  406a68:	b590      	push	{r4, r7, lr}
  406a6a:	b0c9      	sub	sp, #292	; 0x124
  406a6c:	af02      	add	r7, sp, #8
  406a6e:	1d3b      	adds	r3, r7, #4
  406a70:	6018      	str	r0, [r3, #0]
	ch_iq_sample_t window_buf[CH_IQ_SAMPLES_PER_READ];
	uint16_t start_sample = dev_ptr->win_start_sample;
  406a72:	1d3b      	adds	r3, r7, #4
  406a74:	681b      	ldr	r3, [r3, #0]
  406a76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  406a78:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	uint16_t num_samples = dev_ptr->num_win_samples;
  406a7c:	1d3b      	adds	r3, r7, #4
  406a7e:	681b      	ldr	r3, [r3, #0]
  406a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  406a82:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint32_t total_amp = 0;
  406a86:	2300      	movs	r3, #0
  406a88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t avg_amp = 0;
  406a8c:	2300      	movs	r3, #0
  406a8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t err = 0;
  406a92:	2300      	movs	r3, #0
  406a94:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109

	if ((start_sample != 0) && (num_samples != 0)) {
  406a98:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
  406a9c:	2b00      	cmp	r3, #0
  406a9e:	d03e      	beq.n	406b1e <ch_common_get_amplitude_avg+0xb6>
  406aa0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
  406aa4:	2b00      	cmp	r3, #0
  406aa6:	d03a      	beq.n	406b1e <ch_common_get_amplitude_avg+0xb6>

		err = ch_get_iq_data(dev_ptr, window_buf, start_sample, num_samples, CH_IO_MODE_BLOCK);
  406aa8:	f8b7 410a 	ldrh.w	r4, [r7, #266]	; 0x10a
  406aac:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
  406ab0:	f107 0108 	add.w	r1, r7, #8
  406ab4:	1d38      	adds	r0, r7, #4
  406ab6:	2300      	movs	r3, #0
  406ab8:	9300      	str	r3, [sp, #0]
  406aba:	4623      	mov	r3, r4
  406abc:	6800      	ldr	r0, [r0, #0]
  406abe:	4c1c      	ldr	r4, [pc, #112]	; (406b30 <ch_common_get_amplitude_avg+0xc8>)
  406ac0:	47a0      	blx	r4
  406ac2:	4603      	mov	r3, r0
  406ac4:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109

		if (!err) {
  406ac8:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
  406acc:	2b00      	cmp	r3, #0
  406ace:	d126      	bne.n	406b1e <ch_common_get_amplitude_avg+0xb6>
			for (uint16_t idx = 0; idx < num_samples; idx++) {
  406ad0:	2300      	movs	r3, #0
  406ad2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  406ad6:	e014      	b.n	406b02 <ch_common_get_amplitude_avg+0x9a>
				total_amp += ch_iq_to_amplitude(&(window_buf[idx]));		// add amplitude for this sample
  406ad8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
  406adc:	f107 0208 	add.w	r2, r7, #8
  406ae0:	009b      	lsls	r3, r3, #2
  406ae2:	4413      	add	r3, r2
  406ae4:	4618      	mov	r0, r3
  406ae6:	4b13      	ldr	r3, [pc, #76]	; (406b34 <ch_common_get_amplitude_avg+0xcc>)
  406ae8:	4798      	blx	r3
  406aea:	4603      	mov	r3, r0
  406aec:	461a      	mov	r2, r3
  406aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
  406af2:	4413      	add	r3, r2
  406af4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			for (uint16_t idx = 0; idx < num_samples; idx++) {
  406af8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
  406afc:	3301      	adds	r3, #1
  406afe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  406b02:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
  406b06:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
  406b0a:	429a      	cmp	r2, r3
  406b0c:	d3e4      	bcc.n	406ad8 <ch_common_get_amplitude_avg+0x70>
			}

		avg_amp = (total_amp / num_samples);
  406b0e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
  406b12:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
  406b16:	fbb2 f3f3 	udiv	r3, r2, r3
  406b1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		}
	}

	return (uint16_t) avg_amp;
  406b1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
  406b22:	b29b      	uxth	r3, r3
}
  406b24:	4618      	mov	r0, r3
  406b26:	f507 778e 	add.w	r7, r7, #284	; 0x11c
  406b2a:	46bd      	mov	sp, r7
  406b2c:	bd90      	pop	{r4, r7, pc}
  406b2e:	bf00      	nop
  406b30:	00405c35 	.word	0x00405c35
  406b34:	00405cb9 	.word	0x00405cb9

00406b38 <ch_common_get_iq_data>:

uint8_t  ch_common_get_iq_data(ch_dev_t *dev_ptr, ch_iq_sample_t *buf_ptr, uint16_t start_sample, uint16_t num_samples,
							   ch_io_mode_t mode) {
  406b38:	b590      	push	{r4, r7, lr}
  406b3a:	b087      	sub	sp, #28
  406b3c:	af02      	add	r7, sp, #8
  406b3e:	60f8      	str	r0, [r7, #12]
  406b40:	60b9      	str	r1, [r7, #8]
  406b42:	4611      	mov	r1, r2
  406b44:	461a      	mov	r2, r3
  406b46:	460b      	mov	r3, r1
  406b48:	80fb      	strh	r3, [r7, #6]
  406b4a:	4613      	mov	r3, r2
  406b4c:	80bb      	strh	r3, [r7, #4]

	return get_sample_data(dev_ptr, buf_ptr, start_sample, num_samples, mode, sizeof(ch_iq_sample_t));
  406b4e:	88b9      	ldrh	r1, [r7, #4]
  406b50:	88fa      	ldrh	r2, [r7, #6]
  406b52:	2304      	movs	r3, #4
  406b54:	9301      	str	r3, [sp, #4]
  406b56:	f897 3020 	ldrb.w	r3, [r7, #32]
  406b5a:	9300      	str	r3, [sp, #0]
  406b5c:	460b      	mov	r3, r1
  406b5e:	68b9      	ldr	r1, [r7, #8]
  406b60:	68f8      	ldr	r0, [r7, #12]
  406b62:	4c03      	ldr	r4, [pc, #12]	; (406b70 <ch_common_get_iq_data+0x38>)
  406b64:	47a0      	blx	r4
  406b66:	4603      	mov	r3, r0
}
  406b68:	4618      	mov	r0, r3
  406b6a:	3714      	adds	r7, #20
  406b6c:	46bd      	mov	sp, r7
  406b6e:	bd90      	pop	{r4, r7, pc}
  406b70:	00406831 	.word	0x00406831

00406b74 <ch_common_get_amplitude_data>:


uint8_t ch_common_get_amplitude_data(ch_dev_t *dev_ptr, uint16_t *buf_ptr, uint16_t start_sample, uint16_t num_samples,
									 ch_io_mode_t mode) {
  406b74:	b590      	push	{r4, r7, lr}
  406b76:	b0cb      	sub	sp, #300	; 0x12c
  406b78:	af02      	add	r7, sp, #8
  406b7a:	f107 040c 	add.w	r4, r7, #12
  406b7e:	6020      	str	r0, [r4, #0]
  406b80:	f107 0008 	add.w	r0, r7, #8
  406b84:	6001      	str	r1, [r0, #0]
  406b86:	4619      	mov	r1, r3
  406b88:	1dbb      	adds	r3, r7, #6
  406b8a:	801a      	strh	r2, [r3, #0]
  406b8c:	1d3b      	adds	r3, r7, #4
  406b8e:	460a      	mov	r2, r1
  406b90:	801a      	strh	r2, [r3, #0]

	ch_iq_sample_t	iq_buf[CH_IQ_SAMPLES_PER_READ];
	uint16_t		samples_in_chunk = 0;
  406b92:	2300      	movs	r3, #0
  406b94:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
	uint8_t			error = 0;
  406b98:	2300      	movs	r3, #0
  406b9a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint16_t		sample_num   = start_sample;
  406b9e:	1dbb      	adds	r3, r7, #6
  406ba0:	881b      	ldrh	r3, [r3, #0]
  406ba2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
	uint16_t		samples_left = num_samples;
  406ba6:	1d3b      	adds	r3, r7, #4
  406ba8:	881b      	ldrh	r3, [r3, #0]
  406baa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint8_t 		chunks_left  = (num_samples + CH_IQ_SAMPLES_PER_READ - 1) / CH_IQ_SAMPLES_PER_READ;
  406bae:	1d3b      	adds	r3, r7, #4
  406bb0:	881b      	ldrh	r3, [r3, #0]
  406bb2:	333f      	adds	r3, #63	; 0x3f
  406bb4:	2b00      	cmp	r3, #0
  406bb6:	da00      	bge.n	406bba <ch_common_get_amplitude_data+0x46>
  406bb8:	333f      	adds	r3, #63	; 0x3f
  406bba:	119b      	asrs	r3, r3, #6
  406bbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	/* Validate mode (only blocking mode is supported) and sample count/offset */
	if ((mode != CH_IO_MODE_BLOCK) || (start_sample + num_samples > dev_ptr->max_samples)) {
  406bc0:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
  406bc4:	2b00      	cmp	r3, #0
  406bc6:	d10a      	bne.n	406bde <ch_common_get_amplitude_data+0x6a>
  406bc8:	1dbb      	adds	r3, r7, #6
  406bca:	881a      	ldrh	r2, [r3, #0]
  406bcc:	1d3b      	adds	r3, r7, #4
  406bce:	881b      	ldrh	r3, [r3, #0]
  406bd0:	4413      	add	r3, r2
  406bd2:	f107 020c 	add.w	r2, r7, #12
  406bd6:	6812      	ldr	r2, [r2, #0]
  406bd8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
  406bda:	4293      	cmp	r3, r2
  406bdc:	dd52      	ble.n	406c84 <ch_common_get_amplitude_data+0x110>
		error = 1;
  406bde:	2301      	movs	r3, #1
  406be0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	}

	while (!error && (chunks_left-- > 0)) {
  406be4:	e04e      	b.n	406c84 <ch_common_get_amplitude_data+0x110>

		/* Read I/Q data */
		if (samples_left > CH_IQ_SAMPLES_PER_READ) {
  406be6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
  406bea:	2b40      	cmp	r3, #64	; 0x40
  406bec:	d903      	bls.n	406bf6 <ch_common_get_amplitude_data+0x82>
			samples_in_chunk = CH_IQ_SAMPLES_PER_READ;
  406bee:	2340      	movs	r3, #64	; 0x40
  406bf0:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
  406bf4:	e003      	b.n	406bfe <ch_common_get_amplitude_data+0x8a>
		} else {
			samples_in_chunk = samples_left;
  406bf6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
  406bfa:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
		}

		samples_left -= samples_in_chunk;			// adjust remaining sample count for next pass
  406bfe:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
  406c02:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
  406c06:	1ad3      	subs	r3, r2, r3
  406c08:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118

		error = get_sample_data(dev_ptr, iq_buf, sample_num, samples_in_chunk, mode, sizeof(ch_iq_sample_t));
  406c0c:	f8b7 411e 	ldrh.w	r4, [r7, #286]	; 0x11e
  406c10:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
  406c14:	f107 0114 	add.w	r1, r7, #20
  406c18:	f107 000c 	add.w	r0, r7, #12
  406c1c:	2304      	movs	r3, #4
  406c1e:	9301      	str	r3, [sp, #4]
  406c20:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
  406c24:	9300      	str	r3, [sp, #0]
  406c26:	4623      	mov	r3, r4
  406c28:	6800      	ldr	r0, [r0, #0]
  406c2a:	4c20      	ldr	r4, [pc, #128]	; (406cac <ch_common_get_amplitude_data+0x138>)
  406c2c:	47a0      	blx	r4
  406c2e:	4603      	mov	r3, r0
  406c30:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
		if (error) {
  406c34:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
  406c38:	2b00      	cmp	r3, #0
  406c3a:	d12f      	bne.n	406c9c <ch_common_get_amplitude_data+0x128>
			break;
		}

		/* Calculate amplitudes and store in user buffer */
		for (uint16_t idx = 0; idx < samples_in_chunk; idx++) {
  406c3c:	2300      	movs	r3, #0
  406c3e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  406c42:	e019      	b.n	406c78 <ch_common_get_amplitude_data+0x104>
			buf_ptr[sample_num++] = ch_iq_to_amplitude(&iq_buf[idx]);
  406c44:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
  406c48:	1c5a      	adds	r2, r3, #1
  406c4a:	f8a7 211a 	strh.w	r2, [r7, #282]	; 0x11a
  406c4e:	005b      	lsls	r3, r3, #1
  406c50:	f107 0208 	add.w	r2, r7, #8
  406c54:	6812      	ldr	r2, [r2, #0]
  406c56:	18d4      	adds	r4, r2, r3
  406c58:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
  406c5c:	f107 0214 	add.w	r2, r7, #20
  406c60:	009b      	lsls	r3, r3, #2
  406c62:	4413      	add	r3, r2
  406c64:	4618      	mov	r0, r3
  406c66:	4b12      	ldr	r3, [pc, #72]	; (406cb0 <ch_common_get_amplitude_data+0x13c>)
  406c68:	4798      	blx	r3
  406c6a:	4603      	mov	r3, r0
  406c6c:	8023      	strh	r3, [r4, #0]
		for (uint16_t idx = 0; idx < samples_in_chunk; idx++) {
  406c6e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
  406c72:	3301      	adds	r3, #1
  406c74:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  406c78:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
  406c7c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
  406c80:	429a      	cmp	r2, r3
  406c82:	d3df      	bcc.n	406c44 <ch_common_get_amplitude_data+0xd0>
	while (!error && (chunks_left-- > 0)) {
  406c84:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
  406c88:	2b00      	cmp	r3, #0
  406c8a:	d108      	bne.n	406c9e <ch_common_get_amplitude_data+0x12a>
  406c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
  406c90:	1e5a      	subs	r2, r3, #1
  406c92:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
  406c96:	2b00      	cmp	r3, #0
  406c98:	d1a5      	bne.n	406be6 <ch_common_get_amplitude_data+0x72>
  406c9a:	e000      	b.n	406c9e <ch_common_get_amplitude_data+0x12a>
			break;
  406c9c:	bf00      	nop
		}

	}

	return error;
  406c9e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
  406ca2:	4618      	mov	r0, r3
  406ca4:	f507 7792 	add.w	r7, r7, #292	; 0x124
  406ca8:	46bd      	mov	sp, r7
  406caa:	bd90      	pop	{r4, r7, pc}
  406cac:	00406831 	.word	0x00406831
  406cb0:	00405cb9 	.word	0x00405cb9

00406cb4 <ch_common_set_rx_holdoff>:

	return (ch_time_plan_t) time_plan;
}


uint8_t ch_common_set_rx_holdoff(ch_dev_t *dev_ptr, uint16_t num_samples) {
  406cb4:	b580      	push	{r7, lr}
  406cb6:	b084      	sub	sp, #16
  406cb8:	af00      	add	r7, sp, #0
  406cba:	6078      	str	r0, [r7, #4]
  406cbc:	460b      	mov	r3, r1
  406cbe:	807b      	strh	r3, [r7, #2]
	uint8_t rx_holdoff_reg;
	uint16_t reg_value;
	uint8_t ret_val = RET_OK;
  406cc0:	2300      	movs	r3, #0
  406cc2:	72fb      	strb	r3, [r7, #11]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406cc4:	687b      	ldr	r3, [r7, #4]
  406cc6:	8b9b      	ldrh	r3, [r3, #28]
  406cc8:	2b65      	cmp	r3, #101	; 0x65
  406cca:	d104      	bne.n	406cd6 <ch_common_set_rx_holdoff+0x22>
		rx_holdoff_reg = CH101_COMMON_REG_RX_HOLDOFF;
  406ccc:	2311      	movs	r3, #17
  406cce:	73fb      	strb	r3, [r7, #15]
		reg_value = num_samples;
  406cd0:	887b      	ldrh	r3, [r7, #2]
  406cd2:	81bb      	strh	r3, [r7, #12]
  406cd4:	e004      	b.n	406ce0 <ch_common_set_rx_holdoff+0x2c>
	} else {
		rx_holdoff_reg = CH201_COMMON_REG_RX_HOLDOFF;
  406cd6:	2311      	movs	r3, #17
  406cd8:	73fb      	strb	r3, [r7, #15]
		reg_value = (num_samples / 2);			// CH201 value is 1/2 actual sample count
  406cda:	887b      	ldrh	r3, [r7, #2]
  406cdc:	085b      	lsrs	r3, r3, #1
  406cde:	81bb      	strh	r3, [r7, #12]
	}

	if (dev_ptr->sensor_connected) {
  406ce0:	687b      	ldr	r3, [r7, #4]
  406ce2:	7fdb      	ldrb	r3, [r3, #31]
  406ce4:	2b00      	cmp	r3, #0
  406ce6:	d00e      	beq.n	406d06 <ch_common_set_rx_holdoff+0x52>
		ret_val |= chdrv_write_byte(dev_ptr, rx_holdoff_reg, (uint8_t) reg_value);
  406ce8:	7bfb      	ldrb	r3, [r7, #15]
  406cea:	b29b      	uxth	r3, r3
  406cec:	89ba      	ldrh	r2, [r7, #12]
  406cee:	b2d2      	uxtb	r2, r2
  406cf0:	4619      	mov	r1, r3
  406cf2:	6878      	ldr	r0, [r7, #4]
  406cf4:	4b06      	ldr	r3, [pc, #24]	; (406d10 <ch_common_set_rx_holdoff+0x5c>)
  406cf6:	4798      	blx	r3
  406cf8:	4603      	mov	r3, r0
  406cfa:	b25a      	sxtb	r2, r3
  406cfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
  406d00:	4313      	orrs	r3, r2
  406d02:	b25b      	sxtb	r3, r3
  406d04:	72fb      	strb	r3, [r7, #11]
	}

	return ret_val;
  406d06:	7afb      	ldrb	r3, [r7, #11]
}
  406d08:	4618      	mov	r0, r3
  406d0a:	3710      	adds	r7, #16
  406d0c:	46bd      	mov	sp, r7
  406d0e:	bd80      	pop	{r7, pc}
  406d10:	00406e15 	.word	0x00406e15

00406d14 <ch_common_get_rx_holdoff>:


uint16_t ch_common_get_rx_holdoff(ch_dev_t *dev_ptr) {
  406d14:	b580      	push	{r7, lr}
  406d16:	b084      	sub	sp, #16
  406d18:	af00      	add	r7, sp, #0
  406d1a:	6078      	str	r0, [r7, #4]
	uint8_t rx_holdoff_reg;
	uint8_t reg_val;
	uint16_t rx_holdoff = 0;
  406d1c:	2300      	movs	r3, #0
  406d1e:	81bb      	strh	r3, [r7, #12]

	if (dev_ptr->part_number == CH101_PART_NUMBER) {
  406d20:	687b      	ldr	r3, [r7, #4]
  406d22:	8b9b      	ldrh	r3, [r3, #28]
  406d24:	2b65      	cmp	r3, #101	; 0x65
  406d26:	d102      	bne.n	406d2e <ch_common_get_rx_holdoff+0x1a>
		rx_holdoff_reg = CH101_COMMON_REG_RX_HOLDOFF;
  406d28:	2311      	movs	r3, #17
  406d2a:	73fb      	strb	r3, [r7, #15]
  406d2c:	e001      	b.n	406d32 <ch_common_get_rx_holdoff+0x1e>
	} else {
		rx_holdoff_reg = CH201_COMMON_REG_RX_HOLDOFF;
  406d2e:	2311      	movs	r3, #17
  406d30:	73fb      	strb	r3, [r7, #15]
	}

	if (dev_ptr->sensor_connected) {
  406d32:	687b      	ldr	r3, [r7, #4]
  406d34:	7fdb      	ldrb	r3, [r3, #31]
  406d36:	2b00      	cmp	r3, #0
  406d38:	d007      	beq.n	406d4a <ch_common_get_rx_holdoff+0x36>
		chdrv_read_byte(dev_ptr, rx_holdoff_reg, &reg_val);
  406d3a:	7bfb      	ldrb	r3, [r7, #15]
  406d3c:	b29b      	uxth	r3, r3
  406d3e:	f107 020b 	add.w	r2, r7, #11
  406d42:	4619      	mov	r1, r3
  406d44:	6878      	ldr	r0, [r7, #4]
  406d46:	4b08      	ldr	r3, [pc, #32]	; (406d68 <ch_common_get_rx_holdoff+0x54>)
  406d48:	4798      	blx	r3
	}

	rx_holdoff = (uint16_t) reg_val;
  406d4a:	7afb      	ldrb	r3, [r7, #11]
  406d4c:	81bb      	strh	r3, [r7, #12]

	if (dev_ptr->part_number == CH201_PART_NUMBER) {
  406d4e:	687b      	ldr	r3, [r7, #4]
  406d50:	8b9b      	ldrh	r3, [r3, #28]
  406d52:	2bc9      	cmp	r3, #201	; 0xc9
  406d54:	d102      	bne.n	406d5c <ch_common_get_rx_holdoff+0x48>
		rx_holdoff *= 2;			// CH201 reports 1/2 actual sample count
  406d56:	89bb      	ldrh	r3, [r7, #12]
  406d58:	005b      	lsls	r3, r3, #1
  406d5a:	81bb      	strh	r3, [r7, #12]
	}

	return rx_holdoff;	
  406d5c:	89bb      	ldrh	r3, [r7, #12]
}
  406d5e:	4618      	mov	r0, r3
  406d60:	3710      	adds	r7, #16
  406d62:	46bd      	mov	sp, r7
  406d64:	bd80      	pop	{r7, pc}
  406d66:	bf00      	nop
  406d68:	00406e91 	.word	0x00406e91

00406d6c <chdrv_prog_i2c_write>:
 * \return 0 if successful, non-zero otherwise
 *
 * This function writes bytes to the device using the programming I2C address.  The
 * PROG line for the device must have been asserted before this function is called.
 */
int chdrv_prog_i2c_write(ch_dev_t *dev_ptr, uint8_t *message, uint16_t len) {
  406d6c:	b580      	push	{r7, lr}
  406d6e:	b086      	sub	sp, #24
  406d70:	af00      	add	r7, sp, #0
  406d72:	60f8      	str	r0, [r7, #12]
  406d74:	60b9      	str	r1, [r7, #8]
  406d76:	4613      	mov	r3, r2
  406d78:	80fb      	strh	r3, [r7, #6]

	dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
  406d7a:	68fb      	ldr	r3, [r7, #12]
  406d7c:	2245      	movs	r2, #69	; 0x45
  406d7e:	761a      	strb	r2, [r3, #24]
	int ch_err = chbsp_i2c_write(dev_ptr, message, len);
  406d80:	88fb      	ldrh	r3, [r7, #6]
  406d82:	461a      	mov	r2, r3
  406d84:	68b9      	ldr	r1, [r7, #8]
  406d86:	68f8      	ldr	r0, [r7, #12]
  406d88:	4b05      	ldr	r3, [pc, #20]	; (406da0 <chdrv_prog_i2c_write+0x34>)
  406d8a:	4798      	blx	r3
  406d8c:	6178      	str	r0, [r7, #20]
	dev_ptr->i2c_address = dev_ptr->app_i2c_address;
  406d8e:	68fb      	ldr	r3, [r7, #12]
  406d90:	7e5a      	ldrb	r2, [r3, #25]
  406d92:	68fb      	ldr	r3, [r7, #12]
  406d94:	761a      	strb	r2, [r3, #24]

	return ch_err;
  406d96:	697b      	ldr	r3, [r7, #20]
}
  406d98:	4618      	mov	r0, r3
  406d9a:	3718      	adds	r7, #24
  406d9c:	46bd      	mov	sp, r7
  406d9e:	bd80      	pop	{r7, pc}
  406da0:	00402709 	.word	0x00402709

00406da4 <chdrv_prog_i2c_read>:
 * \return 0 if successful, non-zero otherwise
 *
 * This function reads bytes from the device using the programming I2C address.  The
 * PROG line for the device must have been asserted before this function is called.
 */
int chdrv_prog_i2c_read(ch_dev_t *dev_ptr, uint8_t *message, uint16_t len) {
  406da4:	b580      	push	{r7, lr}
  406da6:	b086      	sub	sp, #24
  406da8:	af00      	add	r7, sp, #0
  406daa:	60f8      	str	r0, [r7, #12]
  406dac:	60b9      	str	r1, [r7, #8]
  406dae:	4613      	mov	r3, r2
  406db0:	80fb      	strh	r3, [r7, #6]

	dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
  406db2:	68fb      	ldr	r3, [r7, #12]
  406db4:	2245      	movs	r2, #69	; 0x45
  406db6:	761a      	strb	r2, [r3, #24]
	int ch_err = chbsp_i2c_read(dev_ptr, message, len);
  406db8:	88fb      	ldrh	r3, [r7, #6]
  406dba:	461a      	mov	r2, r3
  406dbc:	68b9      	ldr	r1, [r7, #8]
  406dbe:	68f8      	ldr	r0, [r7, #12]
  406dc0:	4b05      	ldr	r3, [pc, #20]	; (406dd8 <chdrv_prog_i2c_read+0x34>)
  406dc2:	4798      	blx	r3
  406dc4:	6178      	str	r0, [r7, #20]
	dev_ptr->i2c_address = dev_ptr->app_i2c_address;
  406dc6:	68fb      	ldr	r3, [r7, #12]
  406dc8:	7e5a      	ldrb	r2, [r3, #25]
  406dca:	68fb      	ldr	r3, [r7, #12]
  406dcc:	761a      	strb	r2, [r3, #24]

	return ch_err;
  406dce:	697b      	ldr	r3, [r7, #20]
}
  406dd0:	4618      	mov	r0, r3
  406dd2:	3718      	adds	r7, #24
  406dd4:	46bd      	mov	sp, r7
  406dd6:	bd80      	pop	{r7, pc}
  406dd8:	004027f5 	.word	0x004027f5

00406ddc <chdrv_prog_i2c_read_nb>:
 *
 * This function temporarily changes the device I2C address to the low-level programming
 * interface, and issues a non-blocking read request. The PROG line for the device must have 
 * been asserted before this function is called.
 */
int chdrv_prog_i2c_read_nb(ch_dev_t *dev_ptr, uint8_t *message, uint16_t len) {
  406ddc:	b580      	push	{r7, lr}
  406dde:	b086      	sub	sp, #24
  406de0:	af00      	add	r7, sp, #0
  406de2:	60f8      	str	r0, [r7, #12]
  406de4:	60b9      	str	r1, [r7, #8]
  406de6:	4613      	mov	r3, r2
  406de8:	80fb      	strh	r3, [r7, #6]

	dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
  406dea:	68fb      	ldr	r3, [r7, #12]
  406dec:	2245      	movs	r2, #69	; 0x45
  406dee:	761a      	strb	r2, [r3, #24]
	int ch_err = chbsp_i2c_read_nb(dev_ptr, message, len);
  406df0:	88fb      	ldrh	r3, [r7, #6]
  406df2:	461a      	mov	r2, r3
  406df4:	68b9      	ldr	r1, [r7, #8]
  406df6:	68f8      	ldr	r0, [r7, #12]
  406df8:	4b05      	ldr	r3, [pc, #20]	; (406e10 <chdrv_prog_i2c_read_nb+0x34>)
  406dfa:	4798      	blx	r3
  406dfc:	6178      	str	r0, [r7, #20]
	dev_ptr->i2c_address = dev_ptr->app_i2c_address;
  406dfe:	68fb      	ldr	r3, [r7, #12]
  406e00:	7e5a      	ldrb	r2, [r3, #25]
  406e02:	68fb      	ldr	r3, [r7, #12]
  406e04:	761a      	strb	r2, [r3, #24]

	return ch_err;
  406e06:	697b      	ldr	r3, [r7, #20]
}
  406e08:	4618      	mov	r0, r3
  406e0a:	3718      	adds	r7, #24
  406e0c:	46bd      	mov	sp, r7
  406e0e:	bd80      	pop	{r7, pc}
  406e10:	004028dd 	.word	0x004028dd

00406e14 <chdrv_write_byte>:
 * \param mem_addr 		sensor memory/register address
 * \param data_value	data value to transmit
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_write_byte(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t data_value) {
  406e14:	b590      	push	{r4, r7, lr}
  406e16:	b085      	sub	sp, #20
  406e18:	af00      	add	r7, sp, #0
  406e1a:	6078      	str	r0, [r7, #4]
  406e1c:	460b      	mov	r3, r1
  406e1e:	807b      	strh	r3, [r7, #2]
  406e20:	4613      	mov	r3, r2
  406e22:	707b      	strb	r3, [r7, #1]
	uint8_t message[] = { sizeof(data_value), data_value };		// insert byte count (1) at start of data
  406e24:	2301      	movs	r3, #1
  406e26:	723b      	strb	r3, [r7, #8]
  406e28:	787b      	ldrb	r3, [r7, #1]
  406e2a:	727b      	strb	r3, [r7, #9]

	int ch_err = chbsp_i2c_mem_write(dev_ptr, mem_addr, message, sizeof(message));
  406e2c:	f107 0208 	add.w	r2, r7, #8
  406e30:	8879      	ldrh	r1, [r7, #2]
  406e32:	2302      	movs	r3, #2
  406e34:	6878      	ldr	r0, [r7, #4]
  406e36:	4c04      	ldr	r4, [pc, #16]	; (406e48 <chdrv_write_byte+0x34>)
  406e38:	47a0      	blx	r4
  406e3a:	60f8      	str	r0, [r7, #12]

	return ch_err;
  406e3c:	68fb      	ldr	r3, [r7, #12]
}
  406e3e:	4618      	mov	r0, r3
  406e40:	3714      	adds	r7, #20
  406e42:	46bd      	mov	sp, r7
  406e44:	bd90      	pop	{r4, r7, pc}
  406e46:	bf00      	nop
  406e48:	00402769 	.word	0x00402769

00406e4c <chdrv_write_word>:
 * \param reg_addr 	sensor register address
 * \param data 		data value to transmit
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_write_word(ch_dev_t *dev_ptr, uint16_t mem_addr, uint16_t data_value) {
  406e4c:	b590      	push	{r4, r7, lr}
  406e4e:	b085      	sub	sp, #20
  406e50:	af00      	add	r7, sp, #0
  406e52:	6078      	str	r0, [r7, #4]
  406e54:	460b      	mov	r3, r1
  406e56:	807b      	strh	r3, [r7, #2]
  406e58:	4613      	mov	r3, r2
  406e5a:	803b      	strh	r3, [r7, #0]
	// First we write the register address, then the number of bytes we're writing

	// Place byte count (2) in first byte of message
	// Sensor is little-endian, so LSB goes in at the lower address
	uint8_t message[] = { sizeof(data_value), (uint8_t) data_value, (uint8_t) (data_value >> 8) }; 
  406e5c:	2302      	movs	r3, #2
  406e5e:	723b      	strb	r3, [r7, #8]
  406e60:	883b      	ldrh	r3, [r7, #0]
  406e62:	b2db      	uxtb	r3, r3
  406e64:	727b      	strb	r3, [r7, #9]
  406e66:	883b      	ldrh	r3, [r7, #0]
  406e68:	0a1b      	lsrs	r3, r3, #8
  406e6a:	b29b      	uxth	r3, r3
  406e6c:	b2db      	uxtb	r3, r3
  406e6e:	72bb      	strb	r3, [r7, #10]

	int ch_err = chbsp_i2c_mem_write(dev_ptr, mem_addr, message, sizeof(message));
  406e70:	f107 0208 	add.w	r2, r7, #8
  406e74:	8879      	ldrh	r1, [r7, #2]
  406e76:	2303      	movs	r3, #3
  406e78:	6878      	ldr	r0, [r7, #4]
  406e7a:	4c04      	ldr	r4, [pc, #16]	; (406e8c <chdrv_write_word+0x40>)
  406e7c:	47a0      	blx	r4
  406e7e:	60f8      	str	r0, [r7, #12]

	return ch_err;
  406e80:	68fb      	ldr	r3, [r7, #12]
}
  406e82:	4618      	mov	r0, r3
  406e84:	3714      	adds	r7, #20
  406e86:	46bd      	mov	sp, r7
  406e88:	bd90      	pop	{r4, r7, pc}
  406e8a:	bf00      	nop
  406e8c:	00402769 	.word	0x00402769

00406e90 <chdrv_read_byte>:
 * \param mem_addr 	sensor memory/register address
 * \param data 		pointer to receive buffer
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_read_byte(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data) {
  406e90:	b590      	push	{r4, r7, lr}
  406e92:	b085      	sub	sp, #20
  406e94:	af00      	add	r7, sp, #0
  406e96:	60f8      	str	r0, [r7, #12]
  406e98:	460b      	mov	r3, r1
  406e9a:	607a      	str	r2, [r7, #4]
  406e9c:	817b      	strh	r3, [r7, #10]

	return (chbsp_i2c_mem_read(dev_ptr, mem_addr, data, 1));
  406e9e:	8979      	ldrh	r1, [r7, #10]
  406ea0:	2301      	movs	r3, #1
  406ea2:	687a      	ldr	r2, [r7, #4]
  406ea4:	68f8      	ldr	r0, [r7, #12]
  406ea6:	4c03      	ldr	r4, [pc, #12]	; (406eb4 <chdrv_read_byte+0x24>)
  406ea8:	47a0      	blx	r4
  406eaa:	4603      	mov	r3, r0
}
  406eac:	4618      	mov	r0, r3
  406eae:	3714      	adds	r7, #20
  406eb0:	46bd      	mov	sp, r7
  406eb2:	bd90      	pop	{r4, r7, pc}
  406eb4:	00402865 	.word	0x00402865

00406eb8 <chdrv_burst_read>:
 * \param data 		pointer to receive buffer
 * \param len 		number of bytes to read
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_burst_read(ch_dev_t *dev_ptr, uint16_t mem_addr, uint8_t *data, uint16_t num_bytes) {
  406eb8:	b590      	push	{r4, r7, lr}
  406eba:	b085      	sub	sp, #20
  406ebc:	af00      	add	r7, sp, #0
  406ebe:	60f8      	str	r0, [r7, #12]
  406ec0:	607a      	str	r2, [r7, #4]
  406ec2:	461a      	mov	r2, r3
  406ec4:	460b      	mov	r3, r1
  406ec6:	817b      	strh	r3, [r7, #10]
  406ec8:	4613      	mov	r3, r2
  406eca:	813b      	strh	r3, [r7, #8]

	return (chbsp_i2c_mem_read(dev_ptr, mem_addr, data, num_bytes));
  406ecc:	893b      	ldrh	r3, [r7, #8]
  406ece:	8979      	ldrh	r1, [r7, #10]
  406ed0:	687a      	ldr	r2, [r7, #4]
  406ed2:	68f8      	ldr	r0, [r7, #12]
  406ed4:	4c03      	ldr	r4, [pc, #12]	; (406ee4 <chdrv_burst_read+0x2c>)
  406ed6:	47a0      	blx	r4
  406ed8:	4603      	mov	r3, r0
}
  406eda:	4618      	mov	r0, r3
  406edc:	3714      	adds	r7, #20
  406ede:	46bd      	mov	sp, r7
  406ee0:	bd90      	pop	{r4, r7, pc}
  406ee2:	bf00      	nop
  406ee4:	00402865 	.word	0x00402865

00406ee8 <chdrv_read_word>:
 * \param mem_addr 	sensor memory/register address
 * \param data 		pointer to receive buffer
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_read_word(ch_dev_t *dev_ptr, uint16_t mem_addr, uint16_t * data) {
  406ee8:	b590      	push	{r4, r7, lr}
  406eea:	b085      	sub	sp, #20
  406eec:	af00      	add	r7, sp, #0
  406eee:	60f8      	str	r0, [r7, #12]
  406ef0:	460b      	mov	r3, r1
  406ef2:	607a      	str	r2, [r7, #4]
  406ef4:	817b      	strh	r3, [r7, #10]
	//
	return (chbsp_i2c_mem_read(dev_ptr, mem_addr, (uint8_t *) data, 2));
  406ef6:	8979      	ldrh	r1, [r7, #10]
  406ef8:	2302      	movs	r3, #2
  406efa:	687a      	ldr	r2, [r7, #4]
  406efc:	68f8      	ldr	r0, [r7, #12]
  406efe:	4c03      	ldr	r4, [pc, #12]	; (406f0c <chdrv_read_word+0x24>)
  406f00:	47a0      	blx	r4
  406f02:	4603      	mov	r3, r0
}
  406f04:	4618      	mov	r0, r3
  406f06:	3714      	adds	r7, #20
  406f08:	46bd      	mov	sp, r7
  406f0a:	bd90      	pop	{r4, r7, pc}
  406f0c:	00402865 	.word	0x00402865

00406f10 <chdrv_group_measure_rtc>:
 *
 * \note The calibration pulse is sent to all devices in the group at the same time.  Therefore 
 * all connected devices will see the same reference pulse length.
 * 
 */
void chdrv_group_measure_rtc(ch_group_t *grp_ptr) {
  406f10:	b580      	push	{r7, lr}
  406f12:	b084      	sub	sp, #16
  406f14:	af00      	add	r7, sp, #0
  406f16:	6078      	str	r0, [r7, #4]
	uint8_t i;
	const uint32_t pulselength = grp_ptr->rtc_cal_pulse_ms;
  406f18:	687b      	ldr	r3, [r7, #4]
  406f1a:	88db      	ldrh	r3, [r3, #6]
  406f1c:	60bb      	str	r3, [r7, #8]

	/* Configure the host's side of the IO pin as a low output */
	chbsp_group_io_clear(grp_ptr);
  406f1e:	6878      	ldr	r0, [r7, #4]
  406f20:	4b3d      	ldr	r3, [pc, #244]	; (407018 <chdrv_group_measure_rtc+0x108>)
  406f22:	4798      	blx	r3
	chbsp_group_set_io_dir_out(grp_ptr);
  406f24:	6878      	ldr	r0, [r7, #4]
  406f26:	4b3d      	ldr	r3, [pc, #244]	; (40701c <chdrv_group_measure_rtc+0x10c>)
  406f28:	4798      	blx	r3

	/* Set up RTC calibration */
	for (i = 0; i < grp_ptr->num_ports; i++) {
  406f2a:	2300      	movs	r3, #0
  406f2c:	73fb      	strb	r3, [r7, #15]
  406f2e:	e017      	b.n	406f60 <chdrv_group_measure_rtc+0x50>
		if (grp_ptr->device[i]->sensor_connected) {
  406f30:	7bfa      	ldrb	r2, [r7, #15]
  406f32:	687b      	ldr	r3, [r7, #4]
  406f34:	3206      	adds	r2, #6
  406f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f3a:	7fdb      	ldrb	r3, [r3, #31]
  406f3c:	2b00      	cmp	r3, #0
  406f3e:	d00c      	beq.n	406f5a <chdrv_group_measure_rtc+0x4a>
			grp_ptr->device[i]->prepare_pulse_timer(grp_ptr->device[i]);
  406f40:	7bfa      	ldrb	r2, [r7, #15]
  406f42:	687b      	ldr	r3, [r7, #4]
  406f44:	3206      	adds	r2, #6
  406f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406f4c:	7bf9      	ldrb	r1, [r7, #15]
  406f4e:	687a      	ldr	r2, [r7, #4]
  406f50:	3106      	adds	r1, #6
  406f52:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406f56:	4610      	mov	r0, r2
  406f58:	4798      	blx	r3
	for (i = 0; i < grp_ptr->num_ports; i++) {
  406f5a:	7bfb      	ldrb	r3, [r7, #15]
  406f5c:	3301      	adds	r3, #1
  406f5e:	73fb      	strb	r3, [r7, #15]
  406f60:	687b      	ldr	r3, [r7, #4]
  406f62:	781b      	ldrb	r3, [r3, #0]
  406f64:	7bfa      	ldrb	r2, [r7, #15]
  406f66:	429a      	cmp	r2, r3
  406f68:	d3e2      	bcc.n	406f30 <chdrv_group_measure_rtc+0x20>
		}
	}

	/* Trigger a pulse on the IO pin */
	chbsp_group_io_set(grp_ptr);
  406f6a:	6878      	ldr	r0, [r7, #4]
  406f6c:	4b2c      	ldr	r3, [pc, #176]	; (407020 <chdrv_group_measure_rtc+0x110>)
  406f6e:	4798      	blx	r3
	chbsp_delay_ms(pulselength);
  406f70:	68b8      	ldr	r0, [r7, #8]
  406f72:	4b2c      	ldr	r3, [pc, #176]	; (407024 <chdrv_group_measure_rtc+0x114>)
  406f74:	4798      	blx	r3
	chbsp_group_io_clear(grp_ptr);
  406f76:	6878      	ldr	r0, [r7, #4]
  406f78:	4b27      	ldr	r3, [pc, #156]	; (407018 <chdrv_group_measure_rtc+0x108>)
  406f7a:	4798      	blx	r3

	/* Keep the IO low for at least 50 us to allow the ASIC FW to deactivate the PT logic.
	   It will be set as input later once we will expect INT from the CHx01. */
	chbsp_delay_us(100);
  406f7c:	2064      	movs	r0, #100	; 0x64
  406f7e:	4b2a      	ldr	r3, [pc, #168]	; (407028 <chdrv_group_measure_rtc+0x118>)
  406f80:	4798      	blx	r3

	for (i = 0; i < grp_ptr->num_ports; i++) {
  406f82:	2300      	movs	r3, #0
  406f84:	73fb      	strb	r3, [r7, #15]
  406f86:	e03e      	b.n	407006 <chdrv_group_measure_rtc+0xf6>
		if (grp_ptr->device[i]->sensor_connected) {
  406f88:	7bfa      	ldrb	r2, [r7, #15]
  406f8a:	687b      	ldr	r3, [r7, #4]
  406f8c:	3206      	adds	r2, #6
  406f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f92:	7fdb      	ldrb	r3, [r3, #31]
  406f94:	2b00      	cmp	r3, #0
  406f96:	d033      	beq.n	407000 <chdrv_group_measure_rtc+0xf0>
			grp_ptr->device[i]->store_pt_result(grp_ptr->device[i]);
  406f98:	7bfa      	ldrb	r2, [r7, #15]
  406f9a:	687b      	ldr	r3, [r7, #4]
  406f9c:	3206      	adds	r2, #6
  406f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406fa4:	7bf9      	ldrb	r1, [r7, #15]
  406fa6:	687a      	ldr	r2, [r7, #4]
  406fa8:	3106      	adds	r1, #6
  406faa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406fae:	4610      	mov	r0, r2
  406fb0:	4798      	blx	r3
			grp_ptr->device[i]->store_op_freq(grp_ptr->device[i]);
  406fb2:	7bfa      	ldrb	r2, [r7, #15]
  406fb4:	687b      	ldr	r3, [r7, #4]
  406fb6:	3206      	adds	r2, #6
  406fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406fbe:	7bf9      	ldrb	r1, [r7, #15]
  406fc0:	687a      	ldr	r2, [r7, #4]
  406fc2:	3106      	adds	r1, #6
  406fc4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406fc8:	4610      	mov	r0, r2
  406fca:	4798      	blx	r3
			grp_ptr->device[i]->store_bandwidth(grp_ptr->device[i]);
  406fcc:	7bfa      	ldrb	r2, [r7, #15]
  406fce:	687b      	ldr	r3, [r7, #4]
  406fd0:	3206      	adds	r2, #6
  406fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406fd8:	7bf9      	ldrb	r1, [r7, #15]
  406fda:	687a      	ldr	r2, [r7, #4]
  406fdc:	3106      	adds	r1, #6
  406fde:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406fe2:	4610      	mov	r0, r2
  406fe4:	4798      	blx	r3
			grp_ptr->device[i]->store_scalefactor(grp_ptr->device[i]);
  406fe6:	7bfa      	ldrb	r2, [r7, #15]
  406fe8:	687b      	ldr	r3, [r7, #4]
  406fea:	3206      	adds	r2, #6
  406fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406ff2:	7bf9      	ldrb	r1, [r7, #15]
  406ff4:	687a      	ldr	r2, [r7, #4]
  406ff6:	3106      	adds	r1, #6
  406ff8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  406ffc:	4610      	mov	r0, r2
  406ffe:	4798      	blx	r3
	for (i = 0; i < grp_ptr->num_ports; i++) {
  407000:	7bfb      	ldrb	r3, [r7, #15]
  407002:	3301      	adds	r3, #1
  407004:	73fb      	strb	r3, [r7, #15]
  407006:	687b      	ldr	r3, [r7, #4]
  407008:	781b      	ldrb	r3, [r3, #0]
  40700a:	7bfa      	ldrb	r2, [r7, #15]
  40700c:	429a      	cmp	r2, r3
  40700e:	d3bb      	bcc.n	406f88 <chdrv_group_measure_rtc+0x78>
		}
	}
}
  407010:	bf00      	nop
  407012:	3710      	adds	r7, #16
  407014:	46bd      	mov	sp, r7
  407016:	bd80      	pop	{r7, pc}
  407018:	004022e1 	.word	0x004022e1
  40701c:	004020b5 	.word	0x004020b5
  407020:	00402361 	.word	0x00402361
  407024:	004025f1 	.word	0x004025f1
  407028:	00402549 	.word	0x00402549

0040702c <chdrv_group_i2c_queue>:
 * \param data 		pointer to buffer to receive data or containing data to send
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_group_i2c_queue(ch_group_t *grp_ptr, ch_dev_t *dev_ptr, uint8_t rd_wrb, uint8_t type, 
						  uint16_t addr, uint16_t nbytes, uint8_t *data) {
  40702c:	b580      	push	{r7, lr}
  40702e:	b088      	sub	sp, #32
  407030:	af00      	add	r7, sp, #0
  407032:	60f8      	str	r0, [r7, #12]
  407034:	60b9      	str	r1, [r7, #8]
  407036:	4611      	mov	r1, r2
  407038:	461a      	mov	r2, r3
  40703a:	460b      	mov	r3, r1
  40703c:	71fb      	strb	r3, [r7, #7]
  40703e:	4613      	mov	r3, r2
  407040:	71bb      	strb	r3, [r7, #6]

	uint8_t bus_num = ch_get_i2c_bus(dev_ptr);
  407042:	68b8      	ldr	r0, [r7, #8]
  407044:	4b1e      	ldr	r3, [pc, #120]	; (4070c0 <chdrv_group_i2c_queue+0x94>)
  407046:	4798      	blx	r3
  407048:	4603      	mov	r3, r0
  40704a:	76fb      	strb	r3, [r7, #27]
	int	ret_val;

	chdrv_i2c_queue_t *q = &(grp_ptr->i2c_queue[bus_num]);
  40704c:	7efa      	ldrb	r2, [r7, #27]
  40704e:	4613      	mov	r3, r2
  407050:	011b      	lsls	r3, r3, #4
  407052:	4413      	add	r3, r2
  407054:	009b      	lsls	r3, r3, #2
  407056:	3328      	adds	r3, #40	; 0x28
  407058:	68fa      	ldr	r2, [r7, #12]
  40705a:	4413      	add	r3, r2
  40705c:	3304      	adds	r3, #4
  40705e:	617b      	str	r3, [r7, #20]
	chdrv_i2c_transaction_t *t = &(q->transaction[q->len]);
  407060:	697b      	ldr	r3, [r7, #20]
  407062:	789b      	ldrb	r3, [r3, #2]
  407064:	011b      	lsls	r3, r3, #4
  407066:	697a      	ldr	r2, [r7, #20]
  407068:	4413      	add	r3, r2
  40706a:	3304      	adds	r3, #4
  40706c:	613b      	str	r3, [r7, #16]

	if (q->len < CHDRV_MAX_I2C_QUEUE_LENGTH) {
  40706e:	697b      	ldr	r3, [r7, #20]
  407070:	789b      	ldrb	r3, [r3, #2]
  407072:	2b03      	cmp	r3, #3
  407074:	d81d      	bhi.n	4070b2 <chdrv_group_i2c_queue+0x86>
		t->databuf = data;
  407076:	693b      	ldr	r3, [r7, #16]
  407078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40707a:	60da      	str	r2, [r3, #12]
		t->dev_ptr = dev_ptr;
  40707c:	693b      	ldr	r3, [r7, #16]
  40707e:	68ba      	ldr	r2, [r7, #8]
  407080:	609a      	str	r2, [r3, #8]
		t->addr = addr;
  407082:	693b      	ldr	r3, [r7, #16]
  407084:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  407086:	809a      	strh	r2, [r3, #4]
		t->nbytes = nbytes;
  407088:	693b      	ldr	r3, [r7, #16]
  40708a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  40708c:	80da      	strh	r2, [r3, #6]
		t->rd_wrb = rd_wrb;
  40708e:	693b      	ldr	r3, [r7, #16]
  407090:	79fa      	ldrb	r2, [r7, #7]
  407092:	705a      	strb	r2, [r3, #1]
		t->type = type;
  407094:	693b      	ldr	r3, [r7, #16]
  407096:	79ba      	ldrb	r2, [r7, #6]
  407098:	701a      	strb	r2, [r3, #0]
		t->xfer_num = 0;
  40709a:	693b      	ldr	r3, [r7, #16]
  40709c:	2200      	movs	r2, #0
  40709e:	709a      	strb	r2, [r3, #2]
		q->len++;
  4070a0:	697b      	ldr	r3, [r7, #20]
  4070a2:	789b      	ldrb	r3, [r3, #2]
  4070a4:	3301      	adds	r3, #1
  4070a6:	b2da      	uxtb	r2, r3
  4070a8:	697b      	ldr	r3, [r7, #20]
  4070aa:	709a      	strb	r2, [r3, #2]
		ret_val = 0;
  4070ac:	2300      	movs	r3, #0
  4070ae:	61fb      	str	r3, [r7, #28]
  4070b0:	e001      	b.n	4070b6 <chdrv_group_i2c_queue+0x8a>
	} else {
		ret_val = 1;
  4070b2:	2301      	movs	r3, #1
  4070b4:	61fb      	str	r3, [r7, #28]
	}

	return ret_val;
  4070b6:	69fb      	ldr	r3, [r7, #28]
}
  4070b8:	4618      	mov	r0, r3
  4070ba:	3720      	adds	r7, #32
  4070bc:	46bd      	mov	sp, r7
  4070be:	bd80      	pop	{r7, pc}
  4070c0:	004059e1 	.word	0x004059e1

004070c4 <chdrv_group_i2c_irq_handler>:
 *
 * Call this function once from your I2C interrupt handler each time it executes.
 * It will call the user's callback routine (grp_ptr->io_complete_callback) when all transactions 
 * are complete.
 */
void chdrv_group_i2c_irq_handler(ch_group_t *grp_ptr, uint8_t i2c_bus_index) {
  4070c4:	b590      	push	{r4, r7, lr}
  4070c6:	b08d      	sub	sp, #52	; 0x34
  4070c8:	af00      	add	r7, sp, #0
  4070ca:	6078      	str	r0, [r7, #4]
  4070cc:	460b      	mov	r3, r1
  4070ce:	70fb      	strb	r3, [r7, #3]
	int i;
	int transactions_pending;
	chdrv_i2c_queue_t *q = &(grp_ptr->i2c_queue[i2c_bus_index]);
  4070d0:	78fa      	ldrb	r2, [r7, #3]
  4070d2:	4613      	mov	r3, r2
  4070d4:	011b      	lsls	r3, r3, #4
  4070d6:	4413      	add	r3, r2
  4070d8:	009b      	lsls	r3, r3, #2
  4070da:	3328      	adds	r3, #40	; 0x28
  4070dc:	687a      	ldr	r2, [r7, #4]
  4070de:	4413      	add	r3, r2
  4070e0:	3304      	adds	r3, #4
  4070e2:	623b      	str	r3, [r7, #32]
	chdrv_i2c_transaction_t *t = &(q->transaction[q->idx]);
  4070e4:	6a3b      	ldr	r3, [r7, #32]
  4070e6:	78db      	ldrb	r3, [r3, #3]
  4070e8:	011b      	lsls	r3, r3, #4
  4070ea:	6a3a      	ldr	r2, [r7, #32]
  4070ec:	4413      	add	r3, r2
  4070ee:	3304      	adds	r3, #4
  4070f0:	61fb      	str	r3, [r7, #28]
	ch_dev_t *dev_ptr = q->transaction[q->idx].dev_ptr;
  4070f2:	6a3b      	ldr	r3, [r7, #32]
  4070f4:	78db      	ldrb	r3, [r3, #3]
  4070f6:	6a3a      	ldr	r2, [r7, #32]
  4070f8:	011b      	lsls	r3, r3, #4
  4070fa:	4413      	add	r3, r2
  4070fc:	330c      	adds	r3, #12
  4070fe:	681b      	ldr	r3, [r3, #0]
  407100:	61bb      	str	r3, [r7, #24]


    chbsp_program_disable(dev_ptr);					// de-assert PROG pin, possibly only briefly
  407102:	69b8      	ldr	r0, [r7, #24]
  407104:	4b8c      	ldr	r3, [pc, #560]	; (407338 <chdrv_group_i2c_irq_handler+0x274>)
  407106:	4798      	blx	r3

    if (q->idx < q->len) {
  407108:	6a3b      	ldr	r3, [r7, #32]
  40710a:	78da      	ldrb	r2, [r3, #3]
  40710c:	6a3b      	ldr	r3, [r7, #32]
  40710e:	789b      	ldrb	r3, [r3, #2]
  407110:	429a      	cmp	r2, r3
  407112:	f080 80bf 	bcs.w	407294 <chdrv_group_i2c_irq_handler+0x1d0>
    	dev_ptr = q->transaction[q->idx].dev_ptr;
  407116:	6a3b      	ldr	r3, [r7, #32]
  407118:	78db      	ldrb	r3, [r3, #3]
  40711a:	6a3a      	ldr	r2, [r7, #32]
  40711c:	011b      	lsls	r3, r3, #4
  40711e:	4413      	add	r3, r2
  407120:	330c      	adds	r3, #12
  407122:	681b      	ldr	r3, [r3, #0]
  407124:	61bb      	str	r3, [r7, #24]
		q->running = 1;
  407126:	6a3b      	ldr	r3, [r7, #32]
  407128:	2201      	movs	r2, #1
  40712a:	705a      	strb	r2, [r3, #1]

		if (t->type == CHDRV_NB_TRANS_TYPE_EXTERNAL) {
  40712c:	69fb      	ldr	r3, [r7, #28]
  40712e:	781b      	ldrb	r3, [r3, #0]
  407130:	2b02      	cmp	r3, #2
  407132:	d10f      	bne.n	407154 <chdrv_group_i2c_irq_handler+0x90>
			/* Externally-requested transfer */

			(q->idx)++;
  407134:	6a3b      	ldr	r3, [r7, #32]
  407136:	78db      	ldrb	r3, [r3, #3]
  407138:	3301      	adds	r3, #1
  40713a:	b2da      	uxtb	r2, r3
  40713c:	6a3b      	ldr	r3, [r7, #32]
  40713e:	70da      	strb	r2, [r3, #3]
			chbsp_external_i2c_irq_handler(t);
  407140:	69f8      	ldr	r0, [r7, #28]
  407142:	4b7e      	ldr	r3, [pc, #504]	; (40733c <chdrv_group_i2c_irq_handler+0x278>)
  407144:	4798      	blx	r3
    		t->xfer_num++;			// count this transfer
  407146:	69fb      	ldr	r3, [r7, #28]
  407148:	789b      	ldrb	r3, [r3, #2]
  40714a:	3301      	adds	r3, #1
  40714c:	b2da      	uxtb	r2, r3
  40714e:	69fb      	ldr	r3, [r7, #28]
  407150:	709a      	strb	r2, [r3, #2]
  407152:	e09c      	b.n	40728e <chdrv_group_i2c_irq_handler+0x1ca>

		} else if (t->type == CHDRV_NB_TRANS_TYPE_PROG) {
  407154:	69fb      	ldr	r3, [r7, #28]
  407156:	781b      	ldrb	r3, [r3, #0]
  407158:	2b01      	cmp	r3, #1
  40715a:	d16d      	bne.n	407238 <chdrv_group_i2c_irq_handler+0x174>
			/* Programming interface transfer */

			/* programming interface has max transfer size - check if still more to do during this transaction */
			uint8_t total_xfers = (t->nbytes + (CH_PROG_XFER_SIZE - 1)) / CH_PROG_XFER_SIZE;
  40715c:	69fb      	ldr	r3, [r7, #28]
  40715e:	88db      	ldrh	r3, [r3, #6]
  407160:	33ff      	adds	r3, #255	; 0xff
  407162:	2b00      	cmp	r3, #0
  407164:	da00      	bge.n	407168 <chdrv_group_i2c_irq_handler+0xa4>
  407166:	33ff      	adds	r3, #255	; 0xff
  407168:	121b      	asrs	r3, r3, #8
  40716a:	75fb      	strb	r3, [r7, #23]


			if (t->xfer_num < total_xfers) {
  40716c:	69fb      	ldr	r3, [r7, #28]
  40716e:	789b      	ldrb	r3, [r3, #2]
  407170:	7dfa      	ldrb	r2, [r7, #23]
  407172:	429a      	cmp	r2, r3
  407174:	f240 808b 	bls.w	40728e <chdrv_group_i2c_irq_handler+0x1ca>
				/* still need to complete this transaction */

				uint16_t bytes_left;
				uint16_t xfer_bytes;

				bytes_left = (t->nbytes - (t->xfer_num * CH_PROG_XFER_SIZE));
  407178:	69fb      	ldr	r3, [r7, #28]
  40717a:	88da      	ldrh	r2, [r3, #6]
  40717c:	69fb      	ldr	r3, [r7, #28]
  40717e:	789b      	ldrb	r3, [r3, #2]
  407180:	b29b      	uxth	r3, r3
  407182:	021b      	lsls	r3, r3, #8
  407184:	b29b      	uxth	r3, r3
  407186:	1ad3      	subs	r3, r2, r3
  407188:	82bb      	strh	r3, [r7, #20]

				if (t->rd_wrb) {			// only read operations supported for now
  40718a:	69fb      	ldr	r3, [r7, #28]
  40718c:	785b      	ldrb	r3, [r3, #1]
  40718e:	2b00      	cmp	r3, #0
  407190:	d040      	beq.n	407214 <chdrv_group_i2c_irq_handler+0x150>

					if (grp_ptr->i2c_drv_flags & I2C_DRV_FLAG_RESET_AFTER_NB) {
  407192:	687b      	ldr	r3, [r7, #4]
  407194:	889b      	ldrh	r3, [r3, #4]
  407196:	f003 0301 	and.w	r3, r3, #1
  40719a:	2b00      	cmp	r3, #0
  40719c:	d002      	beq.n	4071a4 <chdrv_group_i2c_irq_handler+0xe0>
			    		chbsp_i2c_reset(dev_ptr);					// reset I2C bus if BSP says it's needed */
  40719e:	69b8      	ldr	r0, [r7, #24]
  4071a0:	4b67      	ldr	r3, [pc, #412]	; (407340 <chdrv_group_i2c_irq_handler+0x27c>)
  4071a2:	4798      	blx	r3
					}

					chbsp_program_enable(dev_ptr);					// assert PROG pin
  4071a4:	69b8      	ldr	r0, [r7, #24]
  4071a6:	4b67      	ldr	r3, [pc, #412]	; (407344 <chdrv_group_i2c_irq_handler+0x280>)
  4071a8:	4798      	blx	r3

	        		uint8_t message[] = { (0x80 | CH_PROG_REG_CTL), 0x09 };      // read burst command
  4071aa:	4b67      	ldr	r3, [pc, #412]	; (407348 <chdrv_group_i2c_irq_handler+0x284>)
  4071ac:	881b      	ldrh	r3, [r3, #0]
  4071ae:	81bb      	strh	r3, [r7, #12]

	        		if (bytes_left > CH_PROG_XFER_SIZE) {
  4071b0:	8abb      	ldrh	r3, [r7, #20]
  4071b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4071b6:	d903      	bls.n	4071c0 <chdrv_group_i2c_irq_handler+0xfc>
	                		xfer_bytes = CH_PROG_XFER_SIZE;
  4071b8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4071bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  4071be:	e001      	b.n	4071c4 <chdrv_group_i2c_irq_handler+0x100>
	        		} else {
	                		xfer_bytes = bytes_left;
  4071c0:	8abb      	ldrh	r3, [r7, #20]
  4071c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	        		}
	        		chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR, (t->addr + (t->xfer_num * CH_PROG_XFER_SIZE)));
  4071c4:	69fb      	ldr	r3, [r7, #28]
  4071c6:	889a      	ldrh	r2, [r3, #4]
  4071c8:	69fb      	ldr	r3, [r7, #28]
  4071ca:	789b      	ldrb	r3, [r3, #2]
  4071cc:	b29b      	uxth	r3, r3
  4071ce:	021b      	lsls	r3, r3, #8
  4071d0:	b29b      	uxth	r3, r3
  4071d2:	4413      	add	r3, r2
  4071d4:	b29b      	uxth	r3, r3
  4071d6:	461a      	mov	r2, r3
  4071d8:	2105      	movs	r1, #5
  4071da:	69b8      	ldr	r0, [r7, #24]
  4071dc:	4b5b      	ldr	r3, [pc, #364]	; (40734c <chdrv_group_i2c_irq_handler+0x288>)
  4071de:	4798      	blx	r3
	        		chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (xfer_bytes - 1));
  4071e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  4071e2:	3b01      	subs	r3, #1
  4071e4:	b29b      	uxth	r3, r3
  4071e6:	461a      	mov	r2, r3
  4071e8:	2107      	movs	r1, #7
  4071ea:	69b8      	ldr	r0, [r7, #24]
  4071ec:	4b57      	ldr	r3, [pc, #348]	; (40734c <chdrv_group_i2c_irq_handler+0x288>)
  4071ee:	4798      	blx	r3
	        		(void) chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
  4071f0:	f107 030c 	add.w	r3, r7, #12
  4071f4:	2202      	movs	r2, #2
  4071f6:	4619      	mov	r1, r3
  4071f8:	69b8      	ldr	r0, [r7, #24]
  4071fa:	4b55      	ldr	r3, [pc, #340]	; (407350 <chdrv_group_i2c_irq_handler+0x28c>)
  4071fc:	4798      	blx	r3
	        		(void) chdrv_prog_i2c_read_nb(dev_ptr, (t->databuf + (t->xfer_num * CH_PROG_XFER_SIZE)), xfer_bytes);
  4071fe:	69fb      	ldr	r3, [r7, #28]
  407200:	68db      	ldr	r3, [r3, #12]
  407202:	69fa      	ldr	r2, [r7, #28]
  407204:	7892      	ldrb	r2, [r2, #2]
  407206:	0212      	lsls	r2, r2, #8
  407208:	4413      	add	r3, r2
  40720a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  40720c:	4619      	mov	r1, r3
  40720e:	69b8      	ldr	r0, [r7, #24]
  407210:	4b50      	ldr	r3, [pc, #320]	; (407354 <chdrv_group_i2c_irq_handler+0x290>)
  407212:	4798      	blx	r3
				}

	    		t->xfer_num++;			// count this transfer
  407214:	69fb      	ldr	r3, [r7, #28]
  407216:	789b      	ldrb	r3, [r3, #2]
  407218:	3301      	adds	r3, #1
  40721a:	b2da      	uxtb	r2, r3
  40721c:	69fb      	ldr	r3, [r7, #28]
  40721e:	709a      	strb	r2, [r3, #2]

	    		/* if this is the last transfer in this transaction, advance queue index */
	    		if (t->xfer_num >= total_xfers) {
  407220:	69fb      	ldr	r3, [r7, #28]
  407222:	789b      	ldrb	r3, [r3, #2]
  407224:	7dfa      	ldrb	r2, [r7, #23]
  407226:	429a      	cmp	r2, r3
  407228:	d831      	bhi.n	40728e <chdrv_group_i2c_irq_handler+0x1ca>
					(q->idx)++;
  40722a:	6a3b      	ldr	r3, [r7, #32]
  40722c:	78db      	ldrb	r3, [r3, #3]
  40722e:	3301      	adds	r3, #1
  407230:	b2da      	uxtb	r2, r3
  407232:	6a3b      	ldr	r3, [r7, #32]
  407234:	70da      	strb	r2, [r3, #3]
  407236:	e02a      	b.n	40728e <chdrv_group_i2c_irq_handler+0x1ca>

			}

		} else {
			/* Standard transfer */
			if (t->rd_wrb) {
  407238:	69fb      	ldr	r3, [r7, #28]
  40723a:	785b      	ldrb	r3, [r3, #1]
  40723c:	2b00      	cmp	r3, #0
  40723e:	d010      	beq.n	407262 <chdrv_group_i2c_irq_handler+0x19e>
				(q->idx)++;
  407240:	6a3b      	ldr	r3, [r7, #32]
  407242:	78db      	ldrb	r3, [r3, #3]
  407244:	3301      	adds	r3, #1
  407246:	b2da      	uxtb	r2, r3
  407248:	6a3b      	ldr	r3, [r7, #32]
  40724a:	70da      	strb	r2, [r3, #3]
				chbsp_i2c_mem_read_nb(t->dev_ptr, t->addr, t->databuf, t->nbytes);
  40724c:	69fb      	ldr	r3, [r7, #28]
  40724e:	6898      	ldr	r0, [r3, #8]
  407250:	69fb      	ldr	r3, [r7, #28]
  407252:	8899      	ldrh	r1, [r3, #4]
  407254:	69fb      	ldr	r3, [r7, #28]
  407256:	68da      	ldr	r2, [r3, #12]
  407258:	69fb      	ldr	r3, [r7, #28]
  40725a:	88db      	ldrh	r3, [r3, #6]
  40725c:	4c3e      	ldr	r4, [pc, #248]	; (407358 <chdrv_group_i2c_irq_handler+0x294>)
  40725e:	47a0      	blx	r4
  407260:	e00f      	b.n	407282 <chdrv_group_i2c_irq_handler+0x1be>

			} else {
				(q->idx)++;
  407262:	6a3b      	ldr	r3, [r7, #32]
  407264:	78db      	ldrb	r3, [r3, #3]
  407266:	3301      	adds	r3, #1
  407268:	b2da      	uxtb	r2, r3
  40726a:	6a3b      	ldr	r3, [r7, #32]
  40726c:	70da      	strb	r2, [r3, #3]
				chbsp_i2c_mem_write_nb(t->dev_ptr, t->addr, t->databuf, t->nbytes);
  40726e:	69fb      	ldr	r3, [r7, #28]
  407270:	6898      	ldr	r0, [r3, #8]
  407272:	69fb      	ldr	r3, [r7, #28]
  407274:	8899      	ldrh	r1, [r3, #4]
  407276:	69fb      	ldr	r3, [r7, #28]
  407278:	68da      	ldr	r2, [r3, #12]
  40727a:	69fb      	ldr	r3, [r7, #28]
  40727c:	88db      	ldrh	r3, [r3, #6]
  40727e:	4c37      	ldr	r4, [pc, #220]	; (40735c <chdrv_group_i2c_irq_handler+0x298>)
  407280:	47a0      	blx	r4
			}
    		t->xfer_num++;			// count this transfer
  407282:	69fb      	ldr	r3, [r7, #28]
  407284:	789b      	ldrb	r3, [r3, #2]
  407286:	3301      	adds	r3, #1
  407288:	b2da      	uxtb	r2, r3
  40728a:	69fb      	ldr	r3, [r7, #28]
  40728c:	709a      	strb	r2, [r3, #2]
		}
		transactions_pending = 1;
  40728e:	2301      	movs	r3, #1
  407290:	62bb      	str	r3, [r7, #40]	; 0x28
  407292:	e040      	b.n	407316 <chdrv_group_i2c_irq_handler+0x252>
	} else {

		if (q->idx >= 1) {
  407294:	6a3b      	ldr	r3, [r7, #32]
  407296:	78db      	ldrb	r3, [r3, #3]
  407298:	2b00      	cmp	r3, #0
  40729a:	d017      	beq.n	4072cc <chdrv_group_i2c_irq_handler+0x208>
			dev_ptr = q->transaction[(q->idx - 1)].dev_ptr;		// get dev_ptr for previous completed transaction
  40729c:	6a3b      	ldr	r3, [r7, #32]
  40729e:	78db      	ldrb	r3, [r3, #3]
  4072a0:	3b01      	subs	r3, #1
  4072a2:	6a3a      	ldr	r2, [r7, #32]
  4072a4:	011b      	lsls	r3, r3, #4
  4072a6:	4413      	add	r3, r2
  4072a8:	330c      	adds	r3, #12
  4072aa:	681b      	ldr	r3, [r3, #0]
  4072ac:	61bb      	str	r3, [r7, #24]
			if (dev_ptr != NULL) {
  4072ae:	69bb      	ldr	r3, [r7, #24]
  4072b0:	2b00      	cmp	r3, #0
  4072b2:	d00b      	beq.n	4072cc <chdrv_group_i2c_irq_handler+0x208>
			    chbsp_program_disable(dev_ptr);					// de-assert PROG pin for completed transaction
  4072b4:	69b8      	ldr	r0, [r7, #24]
  4072b6:	4b20      	ldr	r3, [pc, #128]	; (407338 <chdrv_group_i2c_irq_handler+0x274>)
  4072b8:	4798      	blx	r3

					if (grp_ptr->i2c_drv_flags & I2C_DRV_FLAG_RESET_AFTER_NB) {
  4072ba:	687b      	ldr	r3, [r7, #4]
  4072bc:	889b      	ldrh	r3, [r3, #4]
  4072be:	f003 0301 	and.w	r3, r3, #1
  4072c2:	2b00      	cmp	r3, #0
  4072c4:	d002      	beq.n	4072cc <chdrv_group_i2c_irq_handler+0x208>
			    		chbsp_i2c_reset(dev_ptr);				// reset I2C bus if BSP requires it
  4072c6:	69b8      	ldr	r0, [r7, #24]
  4072c8:	4b1d      	ldr	r3, [pc, #116]	; (407340 <chdrv_group_i2c_irq_handler+0x27c>)
  4072ca:	4798      	blx	r3
					}
			}
		}

		q->len = 0;
  4072cc:	6a3b      	ldr	r3, [r7, #32]
  4072ce:	2200      	movs	r2, #0
  4072d0:	709a      	strb	r2, [r3, #2]
		q->idx = 0;
  4072d2:	6a3b      	ldr	r3, [r7, #32]
  4072d4:	2200      	movs	r2, #0
  4072d6:	70da      	strb	r2, [r3, #3]
		q->running = 0;
  4072d8:	6a3b      	ldr	r3, [r7, #32]
  4072da:	2200      	movs	r2, #0
  4072dc:	705a      	strb	r2, [r3, #1]
		transactions_pending = 0;
  4072de:	2300      	movs	r3, #0
  4072e0:	62bb      	str	r3, [r7, #40]	; 0x28

		for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
  4072e2:	2300      	movs	r3, #0
  4072e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4072e6:	e010      	b.n	40730a <chdrv_group_i2c_irq_handler+0x246>
			if (grp_ptr->i2c_queue[i].len) {
  4072e8:	6879      	ldr	r1, [r7, #4]
  4072ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4072ec:	4613      	mov	r3, r2
  4072ee:	011b      	lsls	r3, r3, #4
  4072f0:	4413      	add	r3, r2
  4072f2:	009b      	lsls	r3, r3, #2
  4072f4:	440b      	add	r3, r1
  4072f6:	332e      	adds	r3, #46	; 0x2e
  4072f8:	781b      	ldrb	r3, [r3, #0]
  4072fa:	2b00      	cmp	r3, #0
  4072fc:	d002      	beq.n	407304 <chdrv_group_i2c_irq_handler+0x240>
				transactions_pending = 1;
  4072fe:	2301      	movs	r3, #1
  407300:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
  407302:	e008      	b.n	407316 <chdrv_group_i2c_irq_handler+0x252>
		for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
  407304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  407306:	3301      	adds	r3, #1
  407308:	62fb      	str	r3, [r7, #44]	; 0x2c
  40730a:	687b      	ldr	r3, [r7, #4]
  40730c:	785b      	ldrb	r3, [r3, #1]
  40730e:	461a      	mov	r2, r3
  407310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  407312:	429a      	cmp	r2, r3
  407314:	dce8      	bgt.n	4072e8 <chdrv_group_i2c_irq_handler+0x224>
			}
		}
	}

	if (!transactions_pending) {
  407316:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407318:	2b00      	cmp	r3, #0
  40731a:	d108      	bne.n	40732e <chdrv_group_i2c_irq_handler+0x26a>
		ch_io_complete_callback_t func_ptr = grp_ptr->io_complete_callback;
  40731c:	687b      	ldr	r3, [r7, #4]
  40731e:	695b      	ldr	r3, [r3, #20]
  407320:	613b      	str	r3, [r7, #16]

		if (func_ptr != NULL) {
  407322:	693b      	ldr	r3, [r7, #16]
  407324:	2b00      	cmp	r3, #0
  407326:	d002      	beq.n	40732e <chdrv_group_i2c_irq_handler+0x26a>
			(*func_ptr)(grp_ptr);
  407328:	693b      	ldr	r3, [r7, #16]
  40732a:	6878      	ldr	r0, [r7, #4]
  40732c:	4798      	blx	r3
		}
	}

}
  40732e:	bf00      	nop
  407330:	3734      	adds	r7, #52	; 0x34
  407332:	46bd      	mov	sp, r7
  407334:	bd90      	pop	{r4, r7, pc}
  407336:	bf00      	nop
  407338:	00402045 	.word	0x00402045
  40733c:	00405773 	.word	0x00405773
  407340:	00402b71 	.word	0x00402b71
  407344:	0040200d 	.word	0x0040200d
  407348:	0040cd18 	.word	0x0040cd18
  40734c:	00407521 	.word	0x00407521
  407350:	00406d6d 	.word	0x00406d6d
  407354:	00406ddd 	.word	0x00406ddd
  407358:	00402a15 	.word	0x00402a15
  40735c:	004027d1 	.word	0x004027d1

00407360 <chdrv_wait_for_lock>:
 * \return 0 if startup sequence finished, non-zero if startup sequence timed out or sensor is not connected
 *
 * After the sensor is programmed, it executes an internal start-up and self-test sequence. This function waits the
 * specified time in milliseconds for the sensor to finish this sequence.
 */
int chdrv_wait_for_lock(ch_dev_t *dev_ptr, uint16_t timeout_ms) {
  407360:	b580      	push	{r7, lr}
  407362:	b084      	sub	sp, #16
  407364:	af00      	add	r7, sp, #0
  407366:	6078      	str	r0, [r7, #4]
  407368:	460b      	mov	r3, r1
  40736a:	807b      	strh	r3, [r7, #2]
	uint32_t start_time = chbsp_timestamp_ms();
  40736c:	4b14      	ldr	r3, [pc, #80]	; (4073c0 <chdrv_wait_for_lock+0x60>)
  40736e:	4798      	blx	r3
  407370:	60b8      	str	r0, [r7, #8]
	int ch_err = !(dev_ptr->sensor_connected);
  407372:	687b      	ldr	r3, [r7, #4]
  407374:	7fdb      	ldrb	r3, [r3, #31]
  407376:	2b00      	cmp	r3, #0
  407378:	bf0c      	ite	eq
  40737a:	2301      	moveq	r3, #1
  40737c:	2300      	movne	r3, #0
  40737e:	b2db      	uxtb	r3, r3
  407380:	60fb      	str	r3, [r7, #12]

	while (!ch_err && !(dev_ptr->get_locked_state(dev_ptr))) {
  407382:	e00e      	b.n	4073a2 <chdrv_wait_for_lock+0x42>
		chbsp_delay_ms(10);
  407384:	200a      	movs	r0, #10
  407386:	4b0f      	ldr	r3, [pc, #60]	; (4073c4 <chdrv_wait_for_lock+0x64>)
  407388:	4798      	blx	r3
		ch_err = ((chbsp_timestamp_ms() - start_time) > timeout_ms);
  40738a:	4b0d      	ldr	r3, [pc, #52]	; (4073c0 <chdrv_wait_for_lock+0x60>)
  40738c:	4798      	blx	r3
  40738e:	4602      	mov	r2, r0
  407390:	68bb      	ldr	r3, [r7, #8]
  407392:	1ad2      	subs	r2, r2, r3
  407394:	887b      	ldrh	r3, [r7, #2]
  407396:	429a      	cmp	r2, r3
  407398:	bf8c      	ite	hi
  40739a:	2301      	movhi	r3, #1
  40739c:	2300      	movls	r3, #0
  40739e:	b2db      	uxtb	r3, r3
  4073a0:	60fb      	str	r3, [r7, #12]
	while (!ch_err && !(dev_ptr->get_locked_state(dev_ptr))) {
  4073a2:	68fb      	ldr	r3, [r7, #12]
  4073a4:	2b00      	cmp	r3, #0
  4073a6:	d106      	bne.n	4073b6 <chdrv_wait_for_lock+0x56>
  4073a8:	687b      	ldr	r3, [r7, #4]
  4073aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4073ac:	6878      	ldr	r0, [r7, #4]
  4073ae:	4798      	blx	r3
  4073b0:	4603      	mov	r3, r0
  4073b2:	2b00      	cmp	r3, #0
  4073b4:	d0e6      	beq.n	407384 <chdrv_wait_for_lock+0x24>
		snprintf(cbuf, sizeof(cbuf), "Sensor %hhu initialization timed out or missing\n", dev_ptr->io_index);
		chbsp_print_str(cbuf);
	}
#endif

	return ch_err;
  4073b6:	68fb      	ldr	r3, [r7, #12]
}
  4073b8:	4618      	mov	r0, r3
  4073ba:	3710      	adds	r7, #16
  4073bc:	46bd      	mov	sp, r7
  4073be:	bd80      	pop	{r7, pc}
  4073c0:	00402ee1 	.word	0x00402ee1
  4073c4:	004025f1 	.word	0x004025f1

004073c8 <chdrv_group_wait_for_lock>:
 *
 * After each sensor is programmed, it executes an internal start-up and self-test sequence. This 
 * function waits for all sensor devices to finish this sequence.  For each device, the maximum 
 * time to wait is \a CHDRV_FREQLOCK_TIMEOUT_MS milliseconds.
 */
int chdrv_group_wait_for_lock(ch_group_t *grp_ptr) {
  4073c8:	b580      	push	{r7, lr}
  4073ca:	b086      	sub	sp, #24
  4073cc:	af00      	add	r7, sp, #0
  4073ce:	6078      	str	r0, [r7, #4]
	int ch_err = 0;
  4073d0:	2300      	movs	r3, #0
  4073d2:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
  4073d4:	2300      	movs	r3, #0
  4073d6:	74fb      	strb	r3, [r7, #19]
  4073d8:	e014      	b.n	407404 <chdrv_group_wait_for_lock+0x3c>
		ch_dev_t *dev_ptr = grp_ptr->device[i];
  4073da:	7cfa      	ldrb	r2, [r7, #19]
  4073dc:	687b      	ldr	r3, [r7, #4]
  4073de:	3206      	adds	r2, #6
  4073e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4073e4:	60fb      	str	r3, [r7, #12]

		if (dev_ptr->sensor_connected) {
  4073e6:	68fb      	ldr	r3, [r7, #12]
  4073e8:	7fdb      	ldrb	r3, [r3, #31]
  4073ea:	2b00      	cmp	r3, #0
  4073ec:	d007      	beq.n	4073fe <chdrv_group_wait_for_lock+0x36>
			ch_err |= chdrv_wait_for_lock(dev_ptr, CHDRV_FREQLOCK_TIMEOUT_MS);
  4073ee:	2164      	movs	r1, #100	; 0x64
  4073f0:	68f8      	ldr	r0, [r7, #12]
  4073f2:	4b09      	ldr	r3, [pc, #36]	; (407418 <chdrv_group_wait_for_lock+0x50>)
  4073f4:	4798      	blx	r3
  4073f6:	4602      	mov	r2, r0
  4073f8:	697b      	ldr	r3, [r7, #20]
  4073fa:	4313      	orrs	r3, r2
  4073fc:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
  4073fe:	7cfb      	ldrb	r3, [r7, #19]
  407400:	3301      	adds	r3, #1
  407402:	74fb      	strb	r3, [r7, #19]
  407404:	687b      	ldr	r3, [r7, #4]
  407406:	781b      	ldrb	r3, [r3, #0]
  407408:	7cfa      	ldrb	r2, [r7, #19]
  40740a:	429a      	cmp	r2, r3
  40740c:	d3e5      	bcc.n	4073da <chdrv_group_wait_for_lock+0x12>
		}
	}
	return ch_err;
  40740e:	697b      	ldr	r3, [r7, #20]
}
  407410:	4618      	mov	r0, r3
  407412:	3718      	adds	r7, #24
  407414:	46bd      	mov	sp, r7
  407416:	bd80      	pop	{r7, pc}
  407418:	00407361 	.word	0x00407361

0040741c <chdrv_group_hw_trigger>:
 * \return 0 if success, non-zero if \a grp_ptr pointer is invalid
 *
 * This function starts a triggered measurement on each sensor in a group, by briefly asserting the INT line to each device.  
 * Each sensor must have already been placed in hardware triggered mode before this function is called.
 */
int chdrv_group_hw_trigger(ch_group_t *grp_ptr) {
  40741c:	b580      	push	{r7, lr}
  40741e:	b086      	sub	sp, #24
  407420:	af00      	add	r7, sp, #0
  407422:	6078      	str	r0, [r7, #4]
	int ch_err = !grp_ptr;
  407424:	687b      	ldr	r3, [r7, #4]
  407426:	2b00      	cmp	r3, #0
  407428:	bf0c      	ite	eq
  40742a:	2301      	moveq	r3, #1
  40742c:	2300      	movne	r3, #0
  40742e:	b2db      	uxtb	r3, r3
  407430:	613b      	str	r3, [r7, #16]
	ch_dev_t *dev_ptr;
	uint8_t dev_num;

	if (!ch_err) {
  407432:	693b      	ldr	r3, [r7, #16]
  407434:	2b00      	cmp	r3, #0
  407436:	d15e      	bne.n	4074f6 <chdrv_group_hw_trigger+0xda>
		//Disable pin interrupt before triggering pulse
		chbsp_group_io_interrupt_disable(grp_ptr);
  407438:	6878      	ldr	r0, [r7, #4]
  40743a:	4b31      	ldr	r3, [pc, #196]	; (407500 <chdrv_group_hw_trigger+0xe4>)
  40743c:	4798      	blx	r3

		// Set INT pin as output
		chbsp_group_set_io_dir_out(grp_ptr);
  40743e:	6878      	ldr	r0, [r7, #4]
  407440:	4b30      	ldr	r3, [pc, #192]	; (407504 <chdrv_group_hw_trigger+0xe8>)
  407442:	4798      	blx	r3

		if (grp_ptr->pretrig_delay_us == 0) {
  407444:	687b      	ldr	r3, [r7, #4]
  407446:	891b      	ldrh	r3, [r3, #8]
  407448:	2b00      	cmp	r3, #0
  40744a:	d109      	bne.n	407460 <chdrv_group_hw_trigger+0x44>
			/* No pre-trigger delay - trigger rx-only and tx/rx nodes together */
			chbsp_group_io_set(grp_ptr);
  40744c:	6878      	ldr	r0, [r7, #4]
  40744e:	4b2e      	ldr	r3, [pc, #184]	; (407508 <chdrv_group_hw_trigger+0xec>)
  407450:	4798      	blx	r3
			chbsp_delay_us(CHDRV_TRIGGER_PULSE_US);
  407452:	2005      	movs	r0, #5
  407454:	4b2d      	ldr	r3, [pc, #180]	; (40750c <chdrv_group_hw_trigger+0xf0>)
  407456:	4798      	blx	r3
			chbsp_group_io_clear(grp_ptr);
  407458:	6878      	ldr	r0, [r7, #4]
  40745a:	4b2d      	ldr	r3, [pc, #180]	; (407510 <chdrv_group_hw_trigger+0xf4>)
  40745c:	4798      	blx	r3
  40745e:	e041      	b.n	4074e4 <chdrv_group_hw_trigger+0xc8>

		} else {
			/* Pre-trigger rx-only nodes, delay, then trigger tx/rx nodes */

			// Pre-trigger any rx-only nodes
			for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  407460:	2300      	movs	r3, #0
  407462:	75fb      	strb	r3, [r7, #23]
  407464:	e00f      	b.n	407486 <chdrv_group_hw_trigger+0x6a>
				dev_ptr = grp_ptr->device[dev_num];
  407466:	7dfa      	ldrb	r2, [r7, #23]
  407468:	687b      	ldr	r3, [r7, #4]
  40746a:	3206      	adds	r2, #6
  40746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407470:	60fb      	str	r3, [r7, #12]

				if (dev_ptr->mode == CH_MODE_TRIGGERED_RX_ONLY) {	// if rx-only mode
  407472:	68fb      	ldr	r3, [r7, #12]
  407474:	791b      	ldrb	r3, [r3, #4]
  407476:	2b20      	cmp	r3, #32
  407478:	d102      	bne.n	407480 <chdrv_group_hw_trigger+0x64>
					chbsp_io_set(dev_ptr);							//  trigger this sensor
  40747a:	68f8      	ldr	r0, [r7, #12]
  40747c:	4b25      	ldr	r3, [pc, #148]	; (407514 <chdrv_group_hw_trigger+0xf8>)
  40747e:	4798      	blx	r3
			for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  407480:	7dfb      	ldrb	r3, [r7, #23]
  407482:	3301      	adds	r3, #1
  407484:	75fb      	strb	r3, [r7, #23]
  407486:	687b      	ldr	r3, [r7, #4]
  407488:	781b      	ldrb	r3, [r3, #0]
  40748a:	7dfa      	ldrb	r2, [r7, #23]
  40748c:	429a      	cmp	r2, r3
  40748e:	d3ea      	bcc.n	407466 <chdrv_group_hw_trigger+0x4a>
				}
			}

			chbsp_delay_us(CHDRV_TRIGGER_PULSE_US);
  407490:	2005      	movs	r0, #5
  407492:	4b1e      	ldr	r3, [pc, #120]	; (40750c <chdrv_group_hw_trigger+0xf0>)
  407494:	4798      	blx	r3
			chbsp_group_io_clear(grp_ptr);
  407496:	6878      	ldr	r0, [r7, #4]
  407498:	4b1d      	ldr	r3, [pc, #116]	; (407510 <chdrv_group_hw_trigger+0xf4>)
  40749a:	4798      	blx	r3

			// Delay before triggering tx/rx node(s)
			chbsp_delay_us(grp_ptr->pretrig_delay_us - (CHDRV_TRIGGER_PULSE_US + CHDRV_DELAY_OVERHEAD_US)); 
  40749c:	687b      	ldr	r3, [r7, #4]
  40749e:	891b      	ldrh	r3, [r3, #8]
  4074a0:	3b11      	subs	r3, #17
  4074a2:	4618      	mov	r0, r3
  4074a4:	4b19      	ldr	r3, [pc, #100]	; (40750c <chdrv_group_hw_trigger+0xf0>)
  4074a6:	4798      	blx	r3

			// Trigger any tx/rx nodes
			for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  4074a8:	2300      	movs	r3, #0
  4074aa:	75fb      	strb	r3, [r7, #23]
  4074ac:	e00f      	b.n	4074ce <chdrv_group_hw_trigger+0xb2>
				dev_ptr = grp_ptr->device[dev_num];
  4074ae:	7dfa      	ldrb	r2, [r7, #23]
  4074b0:	687b      	ldr	r3, [r7, #4]
  4074b2:	3206      	adds	r2, #6
  4074b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4074b8:	60fb      	str	r3, [r7, #12]

				if (dev_ptr->mode == CH_MODE_TRIGGERED_TX_RX) {		// if tx/rx mode
  4074ba:	68fb      	ldr	r3, [r7, #12]
  4074bc:	791b      	ldrb	r3, [r3, #4]
  4074be:	2b10      	cmp	r3, #16
  4074c0:	d102      	bne.n	4074c8 <chdrv_group_hw_trigger+0xac>
					chbsp_io_set(dev_ptr);							//  trigger this sensor
  4074c2:	68f8      	ldr	r0, [r7, #12]
  4074c4:	4b13      	ldr	r3, [pc, #76]	; (407514 <chdrv_group_hw_trigger+0xf8>)
  4074c6:	4798      	blx	r3
			for (dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  4074c8:	7dfb      	ldrb	r3, [r7, #23]
  4074ca:	3301      	adds	r3, #1
  4074cc:	75fb      	strb	r3, [r7, #23]
  4074ce:	687b      	ldr	r3, [r7, #4]
  4074d0:	781b      	ldrb	r3, [r3, #0]
  4074d2:	7dfa      	ldrb	r2, [r7, #23]
  4074d4:	429a      	cmp	r2, r3
  4074d6:	d3ea      	bcc.n	4074ae <chdrv_group_hw_trigger+0x92>
				}
			}

			chbsp_delay_us(CHDRV_TRIGGER_PULSE_US);
  4074d8:	2005      	movs	r0, #5
  4074da:	4b0c      	ldr	r3, [pc, #48]	; (40750c <chdrv_group_hw_trigger+0xf0>)
  4074dc:	4798      	blx	r3
			chbsp_group_io_clear(grp_ptr);
  4074de:	6878      	ldr	r0, [r7, #4]
  4074e0:	4b0b      	ldr	r3, [pc, #44]	; (407510 <chdrv_group_hw_trigger+0xf4>)
  4074e2:	4798      	blx	r3
		}

		// Delay a bit before re-enabling pin interrupt to avoid possibly triggering on falling-edge noise
		chbsp_delay_us(10);
  4074e4:	200a      	movs	r0, #10
  4074e6:	4b09      	ldr	r3, [pc, #36]	; (40750c <chdrv_group_hw_trigger+0xf0>)
  4074e8:	4798      	blx	r3

		chbsp_group_set_io_dir_in(grp_ptr);
  4074ea:	6878      	ldr	r0, [r7, #4]
  4074ec:	4b0a      	ldr	r3, [pc, #40]	; (407518 <chdrv_group_hw_trigger+0xfc>)
  4074ee:	4798      	blx	r3
		chbsp_group_io_interrupt_enable(grp_ptr);
  4074f0:	6878      	ldr	r0, [r7, #4]
  4074f2:	4b0a      	ldr	r3, [pc, #40]	; (40751c <chdrv_group_hw_trigger+0x100>)
  4074f4:	4798      	blx	r3
	}
	return ch_err;
  4074f6:	693b      	ldr	r3, [r7, #16]
}
  4074f8:	4618      	mov	r0, r3
  4074fa:	3718      	adds	r7, #24
  4074fc:	46bd      	mov	sp, r7
  4074fe:	bd80      	pop	{r7, pc}
  407500:	0040248d 	.word	0x0040248d
  407504:	004020b5 	.word	0x004020b5
  407508:	00402361 	.word	0x00402361
  40750c:	00402549 	.word	0x00402549
  407510:	004022e1 	.word	0x004022e1
  407514:	00402515 	.word	0x00402515
  407518:	00402135 	.word	0x00402135
  40751c:	004023e1 	.word	0x004023e1

00407520 <chdrv_prog_write>:
 *
 * \return 0 if write to sensor succeeded, non-zero otherwise
 *
 * This local function writes a value to a sensor programming register.
 */
int chdrv_prog_write(ch_dev_t *dev_ptr, uint8_t reg_addr, uint16_t data) {
  407520:	b580      	push	{r7, lr}
  407522:	b084      	sub	sp, #16
  407524:	af00      	add	r7, sp, #0
  407526:	6078      	str	r0, [r7, #4]
  407528:	460b      	mov	r3, r1
  40752a:	70fb      	strb	r3, [r7, #3]
  40752c:	4613      	mov	r3, r2
  40752e:	803b      	strh	r3, [r7, #0]
	/* Set register address write bit */
	reg_addr |= 0x80;
  407530:	78fb      	ldrb	r3, [r7, #3]
  407532:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407536:	70fb      	strb	r3, [r7, #3]
	
	/* Write the register address, followed by the value to be written */
	uint8_t message[] = { reg_addr, (uint8_t) data, (uint8_t) (data >> 8) };
  407538:	78fb      	ldrb	r3, [r7, #3]
  40753a:	733b      	strb	r3, [r7, #12]
  40753c:	883b      	ldrh	r3, [r7, #0]
  40753e:	b2db      	uxtb	r3, r3
  407540:	737b      	strb	r3, [r7, #13]
  407542:	883b      	ldrh	r3, [r7, #0]
  407544:	0a1b      	lsrs	r3, r3, #8
  407546:	b29b      	uxth	r3, r3
  407548:	b2db      	uxtb	r3, r3
  40754a:	73bb      	strb	r3, [r7, #14]

	/* For the 2-byte registers, we also need to also write MSB after the LSB */
	return chdrv_prog_i2c_write(dev_ptr, message, (1 + CH_PROG_SIZEOF(reg_addr)));
  40754c:	78fb      	ldrb	r3, [r7, #3]
  40754e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  407552:	2b00      	cmp	r3, #0
  407554:	d001      	beq.n	40755a <chdrv_prog_write+0x3a>
  407556:	2202      	movs	r2, #2
  407558:	e000      	b.n	40755c <chdrv_prog_write+0x3c>
  40755a:	2203      	movs	r2, #3
  40755c:	f107 030c 	add.w	r3, r7, #12
  407560:	4619      	mov	r1, r3
  407562:	6878      	ldr	r0, [r7, #4]
  407564:	4b03      	ldr	r3, [pc, #12]	; (407574 <chdrv_prog_write+0x54>)
  407566:	4798      	blx	r3
  407568:	4603      	mov	r3, r0
}
  40756a:	4618      	mov	r0, r3
  40756c:	3710      	adds	r7, #16
  40756e:	46bd      	mov	sp, r7
  407570:	bd80      	pop	{r7, pc}
  407572:	bf00      	nop
  407574:	00406d6d 	.word	0x00406d6d

00407578 <chdrv_prog_mem_write>:
 * \return 0 if write to sensor succeeded, non-zero otherwise
 *
 * This function writes to sensor memory using the low-level programming interface.  The type 
 * of write is automatically determined based on data length and target address alignment.
 */
int chdrv_prog_mem_write(ch_dev_t *dev_ptr, uint16_t addr, uint8_t *message, uint16_t nbytes) {
  407578:	b580      	push	{r7, lr}
  40757a:	b088      	sub	sp, #32
  40757c:	af00      	add	r7, sp, #0
  40757e:	60f8      	str	r0, [r7, #12]
  407580:	607a      	str	r2, [r7, #4]
  407582:	461a      	mov	r2, r3
  407584:	460b      	mov	r3, r1
  407586:	817b      	strh	r3, [r7, #10]
  407588:	4613      	mov	r3, r2
  40758a:	813b      	strh	r3, [r7, #8]
	int ch_err = (nbytes == 0);
  40758c:	893b      	ldrh	r3, [r7, #8]
  40758e:	2b00      	cmp	r3, #0
  407590:	bf0c      	ite	eq
  407592:	2301      	moveq	r3, #1
  407594:	2300      	movne	r3, #0
  407596:	b2db      	uxtb	r3, r3
  407598:	61fb      	str	r3, [r7, #28]

	if (!ch_err) {
  40759a:	69fb      	ldr	r3, [r7, #28]
  40759c:	2b00      	cmp	r3, #0
  40759e:	d106      	bne.n	4075ae <chdrv_prog_mem_write+0x36>
		ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR, addr);
  4075a0:	897b      	ldrh	r3, [r7, #10]
  4075a2:	461a      	mov	r2, r3
  4075a4:	2105      	movs	r1, #5
  4075a6:	68f8      	ldr	r0, [r7, #12]
  4075a8:	4b30      	ldr	r3, [pc, #192]	; (40766c <chdrv_prog_mem_write+0xf4>)
  4075aa:	4798      	blx	r3
  4075ac:	61f8      	str	r0, [r7, #28]
	}

	if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
  4075ae:	893b      	ldrh	r3, [r7, #8]
  4075b0:	2b01      	cmp	r3, #1
  4075b2:	d007      	beq.n	4075c4 <chdrv_prog_mem_write+0x4c>
  4075b4:	893b      	ldrh	r3, [r7, #8]
  4075b6:	2b02      	cmp	r3, #2
  4075b8:	d12c      	bne.n	407614 <chdrv_prog_mem_write+0x9c>
  4075ba:	897b      	ldrh	r3, [r7, #10]
  4075bc:	f003 0301 	and.w	r3, r3, #1
  4075c0:	2b00      	cmp	r3, #0
  4075c2:	d127      	bne.n	407614 <chdrv_prog_mem_write+0x9c>
		uint16_t data = message[0] | (message[1] << 8);
  4075c4:	687b      	ldr	r3, [r7, #4]
  4075c6:	781b      	ldrb	r3, [r3, #0]
  4075c8:	b21a      	sxth	r2, r3
  4075ca:	687b      	ldr	r3, [r7, #4]
  4075cc:	3301      	adds	r3, #1
  4075ce:	781b      	ldrb	r3, [r3, #0]
  4075d0:	021b      	lsls	r3, r3, #8
  4075d2:	b21b      	sxth	r3, r3
  4075d4:	4313      	orrs	r3, r2
  4075d6:	b21b      	sxth	r3, r3
  4075d8:	837b      	strh	r3, [r7, #26]
		if (!ch_err) {
  4075da:	69fb      	ldr	r3, [r7, #28]
  4075dc:	2b00      	cmp	r3, #0
  4075de:	d106      	bne.n	4075ee <chdrv_prog_mem_write+0x76>
			ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_DATA, data);
  4075e0:	8b7b      	ldrh	r3, [r7, #26]
  4075e2:	461a      	mov	r2, r3
  4075e4:	2106      	movs	r1, #6
  4075e6:	68f8      	ldr	r0, [r7, #12]
  4075e8:	4b20      	ldr	r3, [pc, #128]	; (40766c <chdrv_prog_mem_write+0xf4>)
  4075ea:	4798      	blx	r3
  4075ec:	61f8      	str	r0, [r7, #28]
		}
		if (!ch_err) {
  4075ee:	69fb      	ldr	r3, [r7, #28]
  4075f0:	2b00      	cmp	r3, #0
  4075f2:	d134      	bne.n	40765e <chdrv_prog_mem_write+0xe6>
			uint8_t opcode = (0x03 | ((nbytes == 1) ? 0x08 : 0x00));			// XXX need define
  4075f4:	893b      	ldrh	r3, [r7, #8]
  4075f6:	2b01      	cmp	r3, #1
  4075f8:	d101      	bne.n	4075fe <chdrv_prog_mem_write+0x86>
  4075fa:	230b      	movs	r3, #11
  4075fc:	e000      	b.n	407600 <chdrv_prog_mem_write+0x88>
  4075fe:	2303      	movs	r3, #3
  407600:	767b      	strb	r3, [r7, #25]

			ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CTL, opcode);
  407602:	7e7b      	ldrb	r3, [r7, #25]
  407604:	b29b      	uxth	r3, r3
  407606:	461a      	mov	r2, r3
  407608:	2144      	movs	r1, #68	; 0x44
  40760a:	68f8      	ldr	r0, [r7, #12]
  40760c:	4b17      	ldr	r3, [pc, #92]	; (40766c <chdrv_prog_mem_write+0xf4>)
  40760e:	4798      	blx	r3
  407610:	61f8      	str	r0, [r7, #28]
	if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
  407612:	e024      	b.n	40765e <chdrv_prog_mem_write+0xe6>
		}
	} else {
		const uint8_t burst_hdr[2] = {0xC4, 0x0B};			// XXX need define
  407614:	4b16      	ldr	r3, [pc, #88]	; (407670 <chdrv_prog_mem_write+0xf8>)
  407616:	881b      	ldrh	r3, [r3, #0]
  407618:	82bb      	strh	r3, [r7, #20]

		if (!ch_err) {
  40761a:	69fb      	ldr	r3, [r7, #28]
  40761c:	2b00      	cmp	r3, #0
  40761e:	d108      	bne.n	407632 <chdrv_prog_mem_write+0xba>
			ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (nbytes - 1));
  407620:	893b      	ldrh	r3, [r7, #8]
  407622:	3b01      	subs	r3, #1
  407624:	b29b      	uxth	r3, r3
  407626:	461a      	mov	r2, r3
  407628:	2107      	movs	r1, #7
  40762a:	68f8      	ldr	r0, [r7, #12]
  40762c:	4b0f      	ldr	r3, [pc, #60]	; (40766c <chdrv_prog_mem_write+0xf4>)
  40762e:	4798      	blx	r3
  407630:	61f8      	str	r0, [r7, #28]
		}
		if (!ch_err) {
  407632:	69fb      	ldr	r3, [r7, #28]
  407634:	2b00      	cmp	r3, #0
  407636:	d107      	bne.n	407648 <chdrv_prog_mem_write+0xd0>
			ch_err = chdrv_prog_i2c_write(dev_ptr, (uint8_t *) burst_hdr, sizeof(burst_hdr));
  407638:	f107 0314 	add.w	r3, r7, #20
  40763c:	2202      	movs	r2, #2
  40763e:	4619      	mov	r1, r3
  407640:	68f8      	ldr	r0, [r7, #12]
  407642:	4b0c      	ldr	r3, [pc, #48]	; (407674 <chdrv_prog_mem_write+0xfc>)
  407644:	4798      	blx	r3
  407646:	61f8      	str	r0, [r7, #28]
		}
		if (!ch_err) {
  407648:	69fb      	ldr	r3, [r7, #28]
  40764a:	2b00      	cmp	r3, #0
  40764c:	d108      	bne.n	407660 <chdrv_prog_mem_write+0xe8>
			ch_err = chdrv_prog_i2c_write(dev_ptr, message, nbytes);
  40764e:	893b      	ldrh	r3, [r7, #8]
  407650:	461a      	mov	r2, r3
  407652:	6879      	ldr	r1, [r7, #4]
  407654:	68f8      	ldr	r0, [r7, #12]
  407656:	4b07      	ldr	r3, [pc, #28]	; (407674 <chdrv_prog_mem_write+0xfc>)
  407658:	4798      	blx	r3
  40765a:	61f8      	str	r0, [r7, #28]
  40765c:	e000      	b.n	407660 <chdrv_prog_mem_write+0xe8>
	if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
  40765e:	bf00      	nop
		}
	}
	return ch_err;
  407660:	69fb      	ldr	r3, [r7, #28]
}
  407662:	4618      	mov	r0, r3
  407664:	3720      	adds	r7, #32
  407666:	46bd      	mov	sp, r7
  407668:	bd80      	pop	{r7, pc}
  40766a:	bf00      	nop
  40766c:	00407521 	.word	0x00407521
  407670:	0040cd1c 	.word	0x0040cd1c
  407674:	00406d6d 	.word	0x00406d6d

00407678 <chdrv_prog_read>:
 *
 * \return 0 if read from sensor succeeded, non-zero otherwise
 *
 * This local function reads a value from a sensor programming register.
 */
static int chdrv_prog_read(ch_dev_t *dev_ptr, uint8_t reg_addr, uint16_t *data) {
  407678:	b580      	push	{r7, lr}
  40767a:	b088      	sub	sp, #32
  40767c:	af00      	add	r7, sp, #0
  40767e:	60f8      	str	r0, [r7, #12]
  407680:	460b      	mov	r3, r1
  407682:	607a      	str	r2, [r7, #4]
  407684:	72fb      	strb	r3, [r7, #11]
	uint8_t nbytes = CH_PROG_SIZEOF(reg_addr);
  407686:	7afb      	ldrb	r3, [r7, #11]
  407688:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40768c:	2b00      	cmp	r3, #0
  40768e:	d001      	beq.n	407694 <chdrv_prog_read+0x1c>
  407690:	2301      	movs	r3, #1
  407692:	e000      	b.n	407696 <chdrv_prog_read+0x1e>
  407694:	2302      	movs	r3, #2
  407696:	76fb      	strb	r3, [r7, #27]

	uint8_t read_data[2];
	uint8_t message[1] = { 0x7F & reg_addr };
  407698:	7afb      	ldrb	r3, [r7, #11]
  40769a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40769e:	b2db      	uxtb	r3, r3
  4076a0:	753b      	strb	r3, [r7, #20]

	int ch_err = chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
  4076a2:	f107 0314 	add.w	r3, r7, #20
  4076a6:	2201      	movs	r2, #1
  4076a8:	4619      	mov	r1, r3
  4076aa:	68f8      	ldr	r0, [r7, #12]
  4076ac:	4b14      	ldr	r3, [pc, #80]	; (407700 <chdrv_prog_read+0x88>)
  4076ae:	4798      	blx	r3
  4076b0:	61f8      	str	r0, [r7, #28]

	if (!ch_err) {
  4076b2:	69fb      	ldr	r3, [r7, #28]
  4076b4:	2b00      	cmp	r3, #0
  4076b6:	d108      	bne.n	4076ca <chdrv_prog_read+0x52>
		ch_err = chdrv_prog_i2c_read(dev_ptr, read_data, nbytes);
  4076b8:	7efb      	ldrb	r3, [r7, #27]
  4076ba:	b29a      	uxth	r2, r3
  4076bc:	f107 0318 	add.w	r3, r7, #24
  4076c0:	4619      	mov	r1, r3
  4076c2:	68f8      	ldr	r0, [r7, #12]
  4076c4:	4b0f      	ldr	r3, [pc, #60]	; (407704 <chdrv_prog_read+0x8c>)
  4076c6:	4798      	blx	r3
  4076c8:	61f8      	str	r0, [r7, #28]
	}

	if (!ch_err) {
  4076ca:	69fb      	ldr	r3, [r7, #28]
  4076cc:	2b00      	cmp	r3, #0
  4076ce:	d111      	bne.n	4076f4 <chdrv_prog_read+0x7c>
		*data = read_data[0];
  4076d0:	7e3b      	ldrb	r3, [r7, #24]
  4076d2:	b29a      	uxth	r2, r3
  4076d4:	687b      	ldr	r3, [r7, #4]
  4076d6:	801a      	strh	r2, [r3, #0]
		if (nbytes > 1) {
  4076d8:	7efb      	ldrb	r3, [r7, #27]
  4076da:	2b01      	cmp	r3, #1
  4076dc:	d90a      	bls.n	4076f4 <chdrv_prog_read+0x7c>
			*data |= (((uint16_t) read_data[1]) << 8);
  4076de:	687b      	ldr	r3, [r7, #4]
  4076e0:	881b      	ldrh	r3, [r3, #0]
  4076e2:	b21a      	sxth	r2, r3
  4076e4:	7e7b      	ldrb	r3, [r7, #25]
  4076e6:	021b      	lsls	r3, r3, #8
  4076e8:	b21b      	sxth	r3, r3
  4076ea:	4313      	orrs	r3, r2
  4076ec:	b21b      	sxth	r3, r3
  4076ee:	b29a      	uxth	r2, r3
  4076f0:	687b      	ldr	r3, [r7, #4]
  4076f2:	801a      	strh	r2, [r3, #0]
		}
	}

	return ch_err;
  4076f4:	69fb      	ldr	r3, [r7, #28]
}
  4076f6:	4618      	mov	r0, r3
  4076f8:	3720      	adds	r7, #32
  4076fa:	46bd      	mov	sp, r7
  4076fc:	bd80      	pop	{r7, pc}
  4076fe:	bf00      	nop
  407700:	00406d6d 	.word	0x00406d6d
  407704:	00406da5 	.word	0x00406da5

00407708 <chdrv_write_firmware>:
 *
 * This local function writes the sensor firmware image to the device.
 */
/*!
 */
static int chdrv_write_firmware(ch_dev_t *dev_ptr) {
  407708:	b580      	push	{r7, lr}
  40770a:	b084      	sub	sp, #16
  40770c:	af00      	add	r7, sp, #0
  40770e:	6078      	str	r0, [r7, #4]
	ch_fw_load_func_t func_ptr = dev_ptr->api_funcs.fw_load;	// pointer to firmware load function
  407710:	687b      	ldr	r3, [r7, #4]
  407712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  407714:	60bb      	str	r3, [r7, #8]
	int ch_err = ((func_ptr == NULL) || (!dev_ptr->sensor_connected));
  407716:	68bb      	ldr	r3, [r7, #8]
  407718:	2b00      	cmp	r3, #0
  40771a:	d003      	beq.n	407724 <chdrv_write_firmware+0x1c>
  40771c:	687b      	ldr	r3, [r7, #4]
  40771e:	7fdb      	ldrb	r3, [r3, #31]
  407720:	2b00      	cmp	r3, #0
  407722:	d101      	bne.n	407728 <chdrv_write_firmware+0x20>
  407724:	2301      	movs	r3, #1
  407726:	e000      	b.n	40772a <chdrv_write_firmware+0x22>
  407728:	2300      	movs	r3, #0
  40772a:	60fb      	str	r3, [r7, #12]
	if (!ch_err) {
		chbsp_print_str("chdrv_write_firmware\n");
	}
#endif

	if (!ch_err) {
  40772c:	68fb      	ldr	r3, [r7, #12]
  40772e:	2b00      	cmp	r3, #0
  407730:	d10a      	bne.n	407748 <chdrv_write_firmware+0x40>
#ifdef CHDRV_DEBUG
		chbsp_print_str("Programming Chirp sensor...\n");
		prog_time = chbsp_timestamp_ms();
#endif
		if (func_ptr != NULL) {
  407732:	68bb      	ldr	r3, [r7, #8]
  407734:	2b00      	cmp	r3, #0
  407736:	d005      	beq.n	407744 <chdrv_write_firmware+0x3c>
			ch_err = (*func_ptr)(dev_ptr);
  407738:	68bb      	ldr	r3, [r7, #8]
  40773a:	6878      	ldr	r0, [r7, #4]
  40773c:	4798      	blx	r3
  40773e:	4603      	mov	r3, r0
  407740:	60fb      	str	r3, [r7, #12]
  407742:	e001      	b.n	407748 <chdrv_write_firmware+0x40>
		} else {
			ch_err = 1;			// indicate error
  407744:	2301      	movs	r3, #1
  407746:	60fb      	str	r3, [r7, #12]
		snprintf(cbuf, sizeof(cbuf), "Wrote %u bytes in %lu ms.\n", CH101_FW_SIZE, prog_time);
		chbsp_print_str(cbuf);
	}
#endif

	return ch_err;
  407748:	68fb      	ldr	r3, [r7, #12]
}
  40774a:	4618      	mov	r0, r3
  40774c:	3710      	adds	r7, #16
  40774e:	46bd      	mov	sp, r7
  407750:	bd80      	pop	{r7, pc}
	...

00407754 <chdrv_init_ram>:
 *
 * \return 0 if memory write succeeded, non-zero otherwise
 *
 * This local function initializes memory locations in the Chirp sensor, as required by the firmware image.
 */
static int chdrv_init_ram(ch_dev_t *dev_ptr) {
  407754:	b590      	push	{r4, r7, lr}
  407756:	b085      	sub	sp, #20
  407758:	af00      	add	r7, sp, #0
  40775a:	6078      	str	r0, [r7, #4]
	int ch_err = ! dev_ptr || ! dev_ptr->sensor_connected;
  40775c:	687b      	ldr	r3, [r7, #4]
  40775e:	2b00      	cmp	r3, #0
  407760:	d003      	beq.n	40776a <chdrv_init_ram+0x16>
  407762:	687b      	ldr	r3, [r7, #4]
  407764:	7fdb      	ldrb	r3, [r3, #31]
  407766:	2b00      	cmp	r3, #0
  407768:	d101      	bne.n	40776e <chdrv_init_ram+0x1a>
  40776a:	2301      	movs	r3, #1
  40776c:	e000      	b.n	407770 <chdrv_init_ram+0x1c>
  40776e:	2300      	movs	r3, #0
  407770:	60fb      	str	r3, [r7, #12]
	if (!ch_err) {
		chbsp_print_str("chdrv_init_ram\n");
	}
#endif

	if ((!ch_err) && (dev_ptr->get_fw_ram_init_size() != 0)) {		// if size is not zero, ram init data exists
  407772:	68fb      	ldr	r3, [r7, #12]
  407774:	2b00      	cmp	r3, #0
  407776:	d11a      	bne.n	4077ae <chdrv_init_ram+0x5a>
  407778:	687b      	ldr	r3, [r7, #4]
  40777a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40777c:	4798      	blx	r3
  40777e:	4603      	mov	r3, r0
  407780:	2b00      	cmp	r3, #0
  407782:	d014      	beq.n	4077ae <chdrv_init_ram+0x5a>
		uint16_t ram_address;
		uint16_t ram_bytecount;

		ram_address = dev_ptr->get_fw_ram_init_addr();
  407784:	687b      	ldr	r3, [r7, #4]
  407786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  407788:	4798      	blx	r3
  40778a:	4603      	mov	r3, r0
  40778c:	817b      	strh	r3, [r7, #10]
		ram_bytecount = dev_ptr->get_fw_ram_init_size();
  40778e:	687b      	ldr	r3, [r7, #4]
  407790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  407792:	4798      	blx	r3
  407794:	4603      	mov	r3, r0
  407796:	813b      	strh	r3, [r7, #8]

		if (!ch_err) {
  407798:	68fb      	ldr	r3, [r7, #12]
  40779a:	2b00      	cmp	r3, #0
  40779c:	d107      	bne.n	4077ae <chdrv_init_ram+0x5a>
#ifdef CHDRV_DEBUG
			chbsp_print_str("Loading RAM init data...\n");
			prog_time = chbsp_timestamp_ms();
#endif
			ch_err = chdrv_prog_mem_write(dev_ptr, ram_address, (uint8_t *) dev_ptr->ram_init, ram_bytecount);
  40779e:	687b      	ldr	r3, [r7, #4]
  4077a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4077a2:	893b      	ldrh	r3, [r7, #8]
  4077a4:	8979      	ldrh	r1, [r7, #10]
  4077a6:	6878      	ldr	r0, [r7, #4]
  4077a8:	4c03      	ldr	r4, [pc, #12]	; (4077b8 <chdrv_init_ram+0x64>)
  4077aa:	47a0      	blx	r4
  4077ac:	60f8      	str	r0, [r7, #12]
				chbsp_print_str(cbuf);
			}
#endif
		}
	}
	return ch_err;
  4077ae:	68fb      	ldr	r3, [r7, #12]
}
  4077b0:	4618      	mov	r0, r3
  4077b2:	3714      	adds	r7, #20
  4077b4:	46bd      	mov	sp, r7
  4077b6:	bd90      	pop	{r4, r7, pc}
  4077b8:	00407579 	.word	0x00407579

004077bc <chdrv_reset_and_halt>:
 *
 * This function resets and halts a sensor device by writing to the control registers.
 *
 * In order for the device to respond, the PROG pin for the device must be asserted before this function is called. 
 */
static int chdrv_reset_and_halt(ch_dev_t * dev_ptr) {
  4077bc:	b580      	push	{r7, lr}
  4077be:	b084      	sub	sp, #16
  4077c0:	af00      	add	r7, sp, #0
  4077c2:	6078      	str	r0, [r7, #4]
	int ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 0x40);    	// reset asic			// XXX need define
  4077c4:	2240      	movs	r2, #64	; 0x40
  4077c6:	2142      	movs	r1, #66	; 0x42
  4077c8:	6878      	ldr	r0, [r7, #4]
  4077ca:	4b08      	ldr	r3, [pc, #32]	; (4077ec <chdrv_reset_and_halt+0x30>)
  4077cc:	4798      	blx	r3
  4077ce:	60f8      	str	r0, [r7, #12]

	ch_err |= chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 0x11);   		// halt asic and disable watchdog;			// XXX need define
  4077d0:	2211      	movs	r2, #17
  4077d2:	2142      	movs	r1, #66	; 0x42
  4077d4:	6878      	ldr	r0, [r7, #4]
  4077d6:	4b05      	ldr	r3, [pc, #20]	; (4077ec <chdrv_reset_and_halt+0x30>)
  4077d8:	4798      	blx	r3
  4077da:	4602      	mov	r2, r0
  4077dc:	68fb      	ldr	r3, [r7, #12]
  4077de:	4313      	orrs	r3, r2
  4077e0:	60fb      	str	r3, [r7, #12]

	return ch_err;
  4077e2:	68fb      	ldr	r3, [r7, #12]
}
  4077e4:	4618      	mov	r0, r3
  4077e6:	3710      	adds	r7, #16
  4077e8:	46bd      	mov	sp, r7
  4077ea:	bd80      	pop	{r7, pc}
  4077ec:	00407521 	.word	0x00407521

004077f0 <chdrv_prog_ping>:
 * This function checks for a sensor sensor on the I2C bus by attempting to reset, halt, and read from the device using
 * the programming interface I2C address (0x45). 
 *
 * In order for the device to respond, the PROG pin for the device must be asserted before this function is called. 
 */
int chdrv_prog_ping(ch_dev_t *dev_ptr) {
  4077f0:	b580      	push	{r7, lr}
  4077f2:	b084      	sub	sp, #16
  4077f4:	af00      	add	r7, sp, #0
  4077f6:	6078      	str	r0, [r7, #4]
	// Try a dummy write to the sensor to make sure it's connected and working
	uint16_t tmp;
	int ch_err;

    ch_err = chdrv_reset_and_halt(dev_ptr);
  4077f8:	6878      	ldr	r0, [r7, #4]
  4077fa:	4b0c      	ldr	r3, [pc, #48]	; (40782c <chdrv_prog_ping+0x3c>)
  4077fc:	4798      	blx	r3
  4077fe:	60f8      	str	r0, [r7, #12]

    ch_err |= chdrv_prog_read(dev_ptr, CH_PROG_REG_PING, &tmp);
  407800:	f107 030a 	add.w	r3, r7, #10
  407804:	461a      	mov	r2, r3
  407806:	2100      	movs	r1, #0
  407808:	6878      	ldr	r0, [r7, #4]
  40780a:	4b09      	ldr	r3, [pc, #36]	; (407830 <chdrv_prog_ping+0x40>)
  40780c:	4798      	blx	r3
  40780e:	4602      	mov	r2, r0
  407810:	68fb      	ldr	r3, [r7, #12]
  407812:	4313      	orrs	r3, r2
  407814:	60fb      	str	r3, [r7, #12]
		snprintf(cbuf, sizeof(cbuf), "Test I2C read: %04X\n", tmp);
		chbsp_print_str(cbuf);
	}
#endif

	return !(ch_err);
  407816:	68fb      	ldr	r3, [r7, #12]
  407818:	2b00      	cmp	r3, #0
  40781a:	bf0c      	ite	eq
  40781c:	2301      	moveq	r3, #1
  40781e:	2300      	movne	r3, #0
  407820:	b2db      	uxtb	r3, r3
}
  407822:	4618      	mov	r0, r3
  407824:	3710      	adds	r7, #16
  407826:	46bd      	mov	sp, r7
  407828:	bd80      	pop	{r7, pc}
  40782a:	bf00      	nop
  40782c:	004077bd 	.word	0x004077bd
  407830:	00407679 	.word	0x00407679

00407834 <chdrv_detect_and_program>:
 * Once started, the sensor device will begin an internal initialization and self-test sequence.  The \a chdrv_wait_for_lock()
 * function may be used to wait for this sequence to complete.
 *
 * \note This routine will leave the PROG pin de-asserted when it completes.
 */
int chdrv_detect_and_program(ch_dev_t *dev_ptr) {
  407834:	b590      	push	{r4, r7, lr}
  407836:	b087      	sub	sp, #28
  407838:	af00      	add	r7, sp, #0
  40783a:	6078      	str	r0, [r7, #4]
	int ch_err = ! dev_ptr;
  40783c:	687b      	ldr	r3, [r7, #4]
  40783e:	2b00      	cmp	r3, #0
  407840:	bf0c      	ite	eq
  407842:	2301      	moveq	r3, #1
  407844:	2300      	movne	r3, #0
  407846:	b2db      	uxtb	r3, r3
  407848:	617b      	str	r3, [r7, #20]
	if (ch_err) {
  40784a:	697b      	ldr	r3, [r7, #20]
  40784c:	2b00      	cmp	r3, #0
  40784e:	d001      	beq.n	407854 <chdrv_detect_and_program+0x20>
		return ch_err;
  407850:	697b      	ldr	r3, [r7, #20]
  407852:	e08c      	b.n	40796e <chdrv_detect_and_program+0x13a>
	}

	chbsp_program_enable(dev_ptr);					// assert PROG pin
  407854:	6878      	ldr	r0, [r7, #4]
  407856:	4b48      	ldr	r3, [pc, #288]	; (407978 <chdrv_detect_and_program+0x144>)
  407858:	4798      	blx	r3

	if (chdrv_prog_ping(dev_ptr)) {					// if device found
  40785a:	6878      	ldr	r0, [r7, #4]
  40785c:	4b47      	ldr	r3, [pc, #284]	; (40797c <chdrv_detect_and_program+0x148>)
  40785e:	4798      	blx	r3
  407860:	4603      	mov	r3, r0
  407862:	2b00      	cmp	r3, #0
  407864:	d06d      	beq.n	407942 <chdrv_detect_and_program+0x10e>
		dev_ptr->sensor_connected = 1;
  407866:	687b      	ldr	r3, [r7, #4]
  407868:	2201      	movs	r2, #1
  40786a:	77da      	strb	r2, [r3, #31]

		// Call device discovery hook routine, if any
		chdrv_discovery_hook_t hook_ptr = dev_ptr->group->disco_hook;
  40786c:	687b      	ldr	r3, [r7, #4]
  40786e:	681b      	ldr	r3, [r3, #0]
  407870:	68db      	ldr	r3, [r3, #12]
  407872:	613b      	str	r3, [r7, #16]
		if (hook_ptr != NULL) {
  407874:	693b      	ldr	r3, [r7, #16]
  407876:	2b00      	cmp	r3, #0
  407878:	d004      	beq.n	407884 <chdrv_detect_and_program+0x50>
			ch_err = (*hook_ptr)(dev_ptr);		// hook routine can return error, will abort device init
  40787a:	693b      	ldr	r3, [r7, #16]
  40787c:	6878      	ldr	r0, [r7, #4]
  40787e:	4798      	blx	r3
  407880:	4603      	mov	r3, r0
  407882:	617b      	str	r3, [r7, #20]
			snprintf(cbuf, sizeof(cbuf), "PROG_STAT: 0x%02X\n", prog_stat);
			chbsp_print_str(cbuf);
		}
#endif

		ch_err = chdrv_init_ram(dev_ptr) ||                // init ram values
  407884:	6878      	ldr	r0, [r7, #4]
  407886:	4b3e      	ldr	r3, [pc, #248]	; (407980 <chdrv_detect_and_program+0x14c>)
  407888:	4798      	blx	r3
  40788a:	4603      	mov	r3, r0
				 chdrv_write_firmware(dev_ptr) ||          // transfer program
  40788c:	2b00      	cmp	r3, #0
  40788e:	d10b      	bne.n	4078a8 <chdrv_detect_and_program+0x74>
  407890:	6878      	ldr	r0, [r7, #4]
  407892:	4b3c      	ldr	r3, [pc, #240]	; (407984 <chdrv_detect_and_program+0x150>)
  407894:	4798      	blx	r3
  407896:	4603      	mov	r3, r0
		ch_err = chdrv_init_ram(dev_ptr) ||                // init ram values
  407898:	2b00      	cmp	r3, #0
  40789a:	d105      	bne.n	4078a8 <chdrv_detect_and_program+0x74>
				 chdrv_reset_and_halt(dev_ptr); 			// reset asic, since it was running mystery code before halt
  40789c:	6878      	ldr	r0, [r7, #4]
  40789e:	4b3a      	ldr	r3, [pc, #232]	; (407988 <chdrv_detect_and_program+0x154>)
  4078a0:	4798      	blx	r3
  4078a2:	4603      	mov	r3, r0
				 chdrv_write_firmware(dev_ptr) ||          // transfer program
  4078a4:	2b00      	cmp	r3, #0
  4078a6:	d001      	beq.n	4078ac <chdrv_detect_and_program+0x78>
  4078a8:	2301      	movs	r3, #1
  4078aa:	e000      	b.n	4078ae <chdrv_detect_and_program+0x7a>
  4078ac:	2300      	movs	r3, #0
		ch_err = chdrv_init_ram(dev_ptr) ||                // init ram values
  4078ae:	617b      	str	r3, [r7, #20]
			snprintf(cbuf, sizeof(cbuf), "Changing I2C address to %u\n", dev_ptr->i2c_address);
			chbsp_print_str(cbuf);
		}
#endif

		if (!ch_err ) {
  4078b0:	697b      	ldr	r3, [r7, #20]
  4078b2:	2b00      	cmp	r3, #0
  4078b4:	d109      	bne.n	4078ca <chdrv_detect_and_program+0x96>
			ch_err = chdrv_prog_mem_write(dev_ptr, 0x01C5, &dev_ptr->i2c_address, 1);			// XXX need define
  4078b6:	687b      	ldr	r3, [r7, #4]
  4078b8:	f103 0218 	add.w	r2, r3, #24
  4078bc:	2301      	movs	r3, #1
  4078be:	f240 11c5 	movw	r1, #453	; 0x1c5
  4078c2:	6878      	ldr	r0, [r7, #4]
  4078c4:	4c31      	ldr	r4, [pc, #196]	; (40798c <chdrv_detect_and_program+0x158>)
  4078c6:	47a0      	blx	r4
  4078c8:	6178      	str	r0, [r7, #20]
		}

		/* Run charge pumps */
		if (!ch_err) {
  4078ca:	697b      	ldr	r3, [r7, #20]
  4078cc:	2b00      	cmp	r3, #0
  4078ce:	d12e      	bne.n	40792e <chdrv_detect_and_program+0xfa>
			uint16_t write_val;
			write_val = 0x0200;			// XXX need defines
  4078d0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4078d4:	81fb      	strh	r3, [r7, #14]
            ch_err |= chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *)&write_val, 2);		// PMUT.CNTRL4 = HVVSS_FON
  4078d6:	f107 020e 	add.w	r2, r7, #14
  4078da:	2302      	movs	r3, #2
  4078dc:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  4078e0:	6878      	ldr	r0, [r7, #4]
  4078e2:	4c2a      	ldr	r4, [pc, #168]	; (40798c <chdrv_detect_and_program+0x158>)
  4078e4:	47a0      	blx	r4
  4078e6:	4602      	mov	r2, r0
  4078e8:	697b      	ldr	r3, [r7, #20]
  4078ea:	4313      	orrs	r3, r2
  4078ec:	617b      	str	r3, [r7, #20]
			chbsp_delay_ms(5);
  4078ee:	2005      	movs	r0, #5
  4078f0:	4b27      	ldr	r3, [pc, #156]	; (407990 <chdrv_detect_and_program+0x15c>)
  4078f2:	4798      	blx	r3
			write_val = 0x0600;
  4078f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  4078f8:	81fb      	strh	r3, [r7, #14]
            ch_err = chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *)&write_val, 2);		// PMUT.CNTRL4 = (HVVSS_FON | HVVDD_FON)
  4078fa:	f107 020e 	add.w	r2, r7, #14
  4078fe:	2302      	movs	r3, #2
  407900:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  407904:	6878      	ldr	r0, [r7, #4]
  407906:	4c21      	ldr	r4, [pc, #132]	; (40798c <chdrv_detect_and_program+0x158>)
  407908:	47a0      	blx	r4
  40790a:	6178      	str	r0, [r7, #20]
			chbsp_delay_ms(5);
  40790c:	2005      	movs	r0, #5
  40790e:	4b20      	ldr	r3, [pc, #128]	; (407990 <chdrv_detect_and_program+0x15c>)
  407910:	4798      	blx	r3
			write_val = 0x0000;
  407912:	2300      	movs	r3, #0
  407914:	81fb      	strh	r3, [r7, #14]
			ch_err |= chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *)&write_val, 2);		// PMUT.CNTRL4 = 0
  407916:	f107 020e 	add.w	r2, r7, #14
  40791a:	2302      	movs	r3, #2
  40791c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  407920:	6878      	ldr	r0, [r7, #4]
  407922:	4c1a      	ldr	r4, [pc, #104]	; (40798c <chdrv_detect_and_program+0x158>)
  407924:	47a0      	blx	r4
  407926:	4602      	mov	r2, r0
  407928:	697b      	ldr	r3, [r7, #20]
  40792a:	4313      	orrs	r3, r2
  40792c:	617b      	str	r3, [r7, #20]
		}

		if (!ch_err ) {
  40792e:	697b      	ldr	r3, [r7, #20]
  407930:	2b00      	cmp	r3, #0
  407932:	d109      	bne.n	407948 <chdrv_detect_and_program+0x114>
			ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 2);	// Exit programming mode and run the chip
  407934:	2202      	movs	r2, #2
  407936:	2142      	movs	r1, #66	; 0x42
  407938:	6878      	ldr	r0, [r7, #4]
  40793a:	4b16      	ldr	r3, [pc, #88]	; (407994 <chdrv_detect_and_program+0x160>)
  40793c:	4798      	blx	r3
  40793e:	6178      	str	r0, [r7, #20]
  407940:	e002      	b.n	407948 <chdrv_detect_and_program+0x114>
		}
	} else {
		dev_ptr->sensor_connected = 0;				// prog_ping failed - no device found
  407942:	687b      	ldr	r3, [r7, #4]
  407944:	2200      	movs	r2, #0
  407946:	77da      	strb	r2, [r3, #31]
	}

	chbsp_program_disable(dev_ptr);				// de-assert PROG pin
  407948:	6878      	ldr	r0, [r7, #4]
  40794a:	4b13      	ldr	r3, [pc, #76]	; (407998 <chdrv_detect_and_program+0x164>)
  40794c:	4798      	blx	r3

	if (ch_err) { 								// if error, reinitialize I2C bus associated with this device
  40794e:	697b      	ldr	r3, [r7, #20]
  407950:	2b00      	cmp	r3, #0
  407952:	d005      	beq.n	407960 <chdrv_detect_and_program+0x12c>
		chbsp_debug_toggle(CHDRV_DEBUG_PIN_NUM);
  407954:	2000      	movs	r0, #0
  407956:	4b11      	ldr	r3, [pc, #68]	; (40799c <chdrv_detect_and_program+0x168>)
  407958:	4798      	blx	r3
		chbsp_i2c_reset(dev_ptr);
  40795a:	6878      	ldr	r0, [r7, #4]
  40795c:	4b10      	ldr	r3, [pc, #64]	; (4079a0 <chdrv_detect_and_program+0x16c>)
  40795e:	4798      	blx	r3
	}

	if (ch_err) {
  407960:	697b      	ldr	r3, [r7, #20]
  407962:	2b00      	cmp	r3, #0
  407964:	d002      	beq.n	40796c <chdrv_detect_and_program+0x138>
		dev_ptr->sensor_connected = 0;     		// only marked as connected if no errors
  407966:	687b      	ldr	r3, [r7, #4]
  407968:	2200      	movs	r2, #0
  40796a:	77da      	strb	r2, [r3, #31]
	}

	return ch_err;
  40796c:	697b      	ldr	r3, [r7, #20]
}
  40796e:	4618      	mov	r0, r3
  407970:	371c      	adds	r7, #28
  407972:	46bd      	mov	sp, r7
  407974:	bd90      	pop	{r4, r7, pc}
  407976:	bf00      	nop
  407978:	0040200d 	.word	0x0040200d
  40797c:	004077f1 	.word	0x004077f1
  407980:	00407755 	.word	0x00407755
  407984:	00407709 	.word	0x00407709
  407988:	004077bd 	.word	0x004077bd
  40798c:	00407579 	.word	0x00407579
  407990:	004025f1 	.word	0x004025f1
  407994:	00407521 	.word	0x00407521
  407998:	00402045 	.word	0x00402045
  40799c:	0040575d 	.word	0x0040575d
  4079a0:	00402b71 	.word	0x00402b71

004079a4 <chdrv_set_idle>:
 * on the given bus are halted in programming mode (i.e. PROG line is asserted).
 *
 * \note This routine writes to all devices simultaneously, so I2C signalling (i.e. ack's) on the bus may be driven by multiple
 * slaves at once.
 */
int chdrv_set_idle(ch_dev_t * dev_ptr) {
  4079a4:	b590      	push	{r4, r7, lr}
  4079a6:	b087      	sub	sp, #28
  4079a8:	af00      	add	r7, sp, #0
  4079aa:	6078      	str	r0, [r7, #4]
	const uint16_t idle_loop[2] = {0x4003,0xFFFC}; 		// XXX need define
  4079ac:	4b13      	ldr	r3, [pc, #76]	; (4079fc <chdrv_set_idle+0x58>)
  4079ae:	681b      	ldr	r3, [r3, #0]
  4079b0:	613b      	str	r3, [r7, #16]

	int ch_err = chdrv_prog_mem_write(dev_ptr, 0xFFFC, (uint8_t *) &idle_loop[0], sizeof(idle_loop));
  4079b2:	f107 0210 	add.w	r2, r7, #16
  4079b6:	2304      	movs	r3, #4
  4079b8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
  4079bc:	6878      	ldr	r0, [r7, #4]
  4079be:	4c10      	ldr	r4, [pc, #64]	; (407a00 <chdrv_set_idle+0x5c>)
  4079c0:	47a0      	blx	r4
  4079c2:	6178      	str	r0, [r7, #20]
	if (!ch_err) {
  4079c4:	697b      	ldr	r3, [r7, #20]
  4079c6:	2b00      	cmp	r3, #0
  4079c8:	d103      	bne.n	4079d2 <chdrv_set_idle+0x2e>
		ch_err = chdrv_reset_and_halt(dev_ptr);
  4079ca:	6878      	ldr	r0, [r7, #4]
  4079cc:	4b0d      	ldr	r3, [pc, #52]	; (407a04 <chdrv_set_idle+0x60>)
  4079ce:	4798      	blx	r3
  4079d0:	6178      	str	r0, [r7, #20]
	}

	// keep wdt stopped after we exit programming mode
	uint16_t val = 0x5a80;			// XXX need define
  4079d2:	f44f 43b5 	mov.w	r3, #23168	; 0x5a80
  4079d6:	81fb      	strh	r3, [r7, #14]
	if (!ch_err) {
  4079d8:	697b      	ldr	r3, [r7, #20]
  4079da:	2b00      	cmp	r3, #0
  4079dc:	d108      	bne.n	4079f0 <chdrv_set_idle+0x4c>
		ch_err = chdrv_prog_mem_write(dev_ptr, 0x0120, (uint8_t *)&val, sizeof(val));			// XXX need define
  4079de:	f107 020e 	add.w	r2, r7, #14
  4079e2:	2302      	movs	r3, #2
  4079e4:	f44f 7190 	mov.w	r1, #288	; 0x120
  4079e8:	6878      	ldr	r0, [r7, #4]
  4079ea:	4c05      	ldr	r4, [pc, #20]	; (407a00 <chdrv_set_idle+0x5c>)
  4079ec:	47a0      	blx	r4
  4079ee:	6178      	str	r0, [r7, #20]
	}

	return ch_err;
  4079f0:	697b      	ldr	r3, [r7, #20]
}
  4079f2:	4618      	mov	r0, r3
  4079f4:	371c      	adds	r7, #28
  4079f6:	46bd      	mov	sp, r7
  4079f8:	bd90      	pop	{r4, r7, pc}
  4079fa:	bf00      	nop
  4079fc:	0040cd20 	.word	0x0040cd20
  407a00:	00407579 	.word	0x00407579
  407a04:	004077bd 	.word	0x004077bd

00407a08 <chdrv_group_detect_and_program>:
 * Once started, each sensor device will begin an internal initialization and self-test sequence.  The 
 * \a chdrv_group_wait_for_lock() function may be used to wait for this sequence to complete on all devices in the group.
 *
 * \note This routine will leave the PROG pin de-asserted for all devices in the group when it completes.
 */
int chdrv_group_detect_and_program(ch_group_t *grp_ptr) {
  407a08:	b580      	push	{r7, lr}
  407a0a:	b086      	sub	sp, #24
  407a0c:	af00      	add	r7, sp, #0
  407a0e:	6078      	str	r0, [r7, #4]
	int ch_err = 0;
  407a10:	2300      	movs	r3, #0
  407a12:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
  407a14:	2300      	movs	r3, #0
  407a16:	74fb      	strb	r3, [r7, #19]
  407a18:	e01c      	b.n	407a54 <chdrv_group_detect_and_program+0x4c>
		ch_dev_t *dev_ptr = grp_ptr->device[i];
  407a1a:	7cfa      	ldrb	r2, [r7, #19]
  407a1c:	687b      	ldr	r3, [r7, #4]
  407a1e:	3206      	adds	r2, #6
  407a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407a24:	60fb      	str	r3, [r7, #12]

		ch_err = chdrv_detect_and_program(dev_ptr);
  407a26:	68f8      	ldr	r0, [r7, #12]
  407a28:	4b10      	ldr	r3, [pc, #64]	; (407a6c <chdrv_group_detect_and_program+0x64>)
  407a2a:	4798      	blx	r3
  407a2c:	6178      	str	r0, [r7, #20]

		if (!ch_err && dev_ptr->sensor_connected) {
  407a2e:	697b      	ldr	r3, [r7, #20]
  407a30:	2b00      	cmp	r3, #0
  407a32:	d109      	bne.n	407a48 <chdrv_group_detect_and_program+0x40>
  407a34:	68fb      	ldr	r3, [r7, #12]
  407a36:	7fdb      	ldrb	r3, [r3, #31]
  407a38:	2b00      	cmp	r3, #0
  407a3a:	d005      	beq.n	407a48 <chdrv_group_detect_and_program+0x40>
			grp_ptr->sensor_count++;
  407a3c:	687b      	ldr	r3, [r7, #4]
  407a3e:	789b      	ldrb	r3, [r3, #2]
  407a40:	3301      	adds	r3, #1
  407a42:	b2da      	uxtb	r2, r3
  407a44:	687b      	ldr	r3, [r7, #4]
  407a46:	709a      	strb	r2, [r3, #2]
		}

		if (ch_err) {
  407a48:	697b      	ldr	r3, [r7, #20]
  407a4a:	2b00      	cmp	r3, #0
  407a4c:	d108      	bne.n	407a60 <chdrv_group_detect_and_program+0x58>
	for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
  407a4e:	7cfb      	ldrb	r3, [r7, #19]
  407a50:	3301      	adds	r3, #1
  407a52:	74fb      	strb	r3, [r7, #19]
  407a54:	687b      	ldr	r3, [r7, #4]
  407a56:	781b      	ldrb	r3, [r3, #0]
  407a58:	7cfa      	ldrb	r2, [r7, #19]
  407a5a:	429a      	cmp	r2, r3
  407a5c:	d3dd      	bcc.n	407a1a <chdrv_group_detect_and_program+0x12>
  407a5e:	e000      	b.n	407a62 <chdrv_group_detect_and_program+0x5a>
			break;
  407a60:	bf00      	nop
		}
	}
	return ch_err;
  407a62:	697b      	ldr	r3, [r7, #20]
}
  407a64:	4618      	mov	r0, r3
  407a66:	3718      	adds	r7, #24
  407a68:	46bd      	mov	sp, r7
  407a6a:	bd80      	pop	{r7, pc}
  407a6c:	00407835 	.word	0x00407835

00407a70 <chdrv_group_prepare>:
 *
 * \return 0 if hardware initialization is successful, non-zero otherwise
 *
 * This function is called internally by \a chdrv_group_start().
 */
int chdrv_group_prepare(ch_group_t* grp_ptr) {
  407a70:	b580      	push	{r7, lr}
  407a72:	b084      	sub	sp, #16
  407a74:	af00      	add	r7, sp, #0
  407a76:	6078      	str	r0, [r7, #4]
	int ch_err = ! grp_ptr;
  407a78:	687b      	ldr	r3, [r7, #4]
  407a7a:	2b00      	cmp	r3, #0
  407a7c:	bf0c      	ite	eq
  407a7e:	2301      	moveq	r3, #1
  407a80:	2300      	movne	r3, #0
  407a82:	b2db      	uxtb	r3, r3
  407a84:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	if (!ch_err) {
  407a86:	68fb      	ldr	r3, [r7, #12]
  407a88:	2b00      	cmp	r3, #0
  407a8a:	d13b      	bne.n	407b04 <chdrv_group_prepare+0x94>
		grp_ptr->sensor_count = 0;
  407a8c:	687b      	ldr	r3, [r7, #4]
  407a8e:	2200      	movs	r2, #0
  407a90:	709a      	strb	r2, [r3, #2]

		for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
  407a92:	2300      	movs	r3, #0
  407a94:	72fb      	strb	r3, [r7, #11]
  407a96:	e02a      	b.n	407aee <chdrv_group_prepare+0x7e>
			grp_ptr->i2c_queue[i].len = 0;
  407a98:	7afa      	ldrb	r2, [r7, #11]
  407a9a:	6879      	ldr	r1, [r7, #4]
  407a9c:	4613      	mov	r3, r2
  407a9e:	011b      	lsls	r3, r3, #4
  407aa0:	4413      	add	r3, r2
  407aa2:	009b      	lsls	r3, r3, #2
  407aa4:	440b      	add	r3, r1
  407aa6:	332e      	adds	r3, #46	; 0x2e
  407aa8:	2200      	movs	r2, #0
  407aaa:	701a      	strb	r2, [r3, #0]
			grp_ptr->i2c_queue[i].idx = 0;
  407aac:	7afa      	ldrb	r2, [r7, #11]
  407aae:	6879      	ldr	r1, [r7, #4]
  407ab0:	4613      	mov	r3, r2
  407ab2:	011b      	lsls	r3, r3, #4
  407ab4:	4413      	add	r3, r2
  407ab6:	009b      	lsls	r3, r3, #2
  407ab8:	440b      	add	r3, r1
  407aba:	332f      	adds	r3, #47	; 0x2f
  407abc:	2200      	movs	r2, #0
  407abe:	701a      	strb	r2, [r3, #0]
			grp_ptr->i2c_queue[i].read_pending = 0;
  407ac0:	7afa      	ldrb	r2, [r7, #11]
  407ac2:	6879      	ldr	r1, [r7, #4]
  407ac4:	4613      	mov	r3, r2
  407ac6:	011b      	lsls	r3, r3, #4
  407ac8:	4413      	add	r3, r2
  407aca:	009b      	lsls	r3, r3, #2
  407acc:	440b      	add	r3, r1
  407ace:	332c      	adds	r3, #44	; 0x2c
  407ad0:	2200      	movs	r2, #0
  407ad2:	701a      	strb	r2, [r3, #0]
			grp_ptr->i2c_queue[i].running = 0;
  407ad4:	7afa      	ldrb	r2, [r7, #11]
  407ad6:	6879      	ldr	r1, [r7, #4]
  407ad8:	4613      	mov	r3, r2
  407ada:	011b      	lsls	r3, r3, #4
  407adc:	4413      	add	r3, r2
  407ade:	009b      	lsls	r3, r3, #2
  407ae0:	440b      	add	r3, r1
  407ae2:	332d      	adds	r3, #45	; 0x2d
  407ae4:	2200      	movs	r2, #0
  407ae6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
  407ae8:	7afb      	ldrb	r3, [r7, #11]
  407aea:	3301      	adds	r3, #1
  407aec:	72fb      	strb	r3, [r7, #11]
  407aee:	687b      	ldr	r3, [r7, #4]
  407af0:	785b      	ldrb	r3, [r3, #1]
  407af2:	7afa      	ldrb	r2, [r7, #11]
  407af4:	429a      	cmp	r2, r3
  407af6:	d3cf      	bcc.n	407a98 <chdrv_group_prepare+0x28>
		}

		chbsp_group_pin_init(grp_ptr);
  407af8:	6878      	ldr	r0, [r7, #4]
  407afa:	4b05      	ldr	r3, [pc, #20]	; (407b10 <chdrv_group_prepare+0xa0>)
  407afc:	4798      	blx	r3

		ch_err = chbsp_i2c_init();
  407afe:	4b05      	ldr	r3, [pc, #20]	; (407b14 <chdrv_group_prepare+0xa4>)
  407b00:	4798      	blx	r3
  407b02:	60f8      	str	r0, [r7, #12]
	}

	return ch_err;
  407b04:	68fb      	ldr	r3, [r7, #12]
}
  407b06:	4618      	mov	r0, r3
  407b08:	3710      	adds	r7, #16
  407b0a:	46bd      	mov	sp, r7
  407b0c:	bd80      	pop	{r7, pc}
  407b0e:	bf00      	nop
  407b10:	004021b5 	.word	0x004021b5
  407b14:	004026a9 	.word	0x004026a9

00407b18 <chdrv_group_start>:
 *
 * This function assumes firmware-specific initialization has already been performed for each a ch_dev_t
 * descriptor for each sensor in the group.  See \a ch_init().
 */
#define CH_PROG_XFER_RETRY 4
int chdrv_group_start(ch_group_t *grp_ptr) {
  407b18:	b580      	push	{r7, lr}
  407b1a:	b08a      	sub	sp, #40	; 0x28
  407b1c:	af00      	add	r7, sp, #0
  407b1e:	6078      	str	r0, [r7, #4]
	int ch_err = ! grp_ptr;
  407b20:	687b      	ldr	r3, [r7, #4]
  407b22:	2b00      	cmp	r3, #0
  407b24:	bf0c      	ite	eq
  407b26:	2301      	moveq	r3, #1
  407b28:	2300      	movne	r3, #0
  407b2a:	b2db      	uxtb	r3, r3
  407b2c:	627b      	str	r3, [r7, #36]	; 0x24
	int i;
	uint8_t prog_tries = 0;
  407b2e:	2300      	movs	r3, #0
  407b30:	77fb      	strb	r3, [r7, #31]
#ifdef CHDRV_DEBUG
	char cbuf[80];
	const uint32_t start_time = chbsp_timestamp_ms();
#endif

	if (!ch_err) {
  407b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407b34:	2b00      	cmp	r3, #0
  407b36:	d103      	bne.n	407b40 <chdrv_group_start+0x28>
		ch_err = chdrv_group_prepare(grp_ptr);
  407b38:	6878      	ldr	r0, [r7, #4]
  407b3a:	4b5d      	ldr	r3, [pc, #372]	; (407cb0 <chdrv_group_start+0x198>)
  407b3c:	4798      	blx	r3
  407b3e:	6278      	str	r0, [r7, #36]	; 0x24
	}

	if (ch_err) {
  407b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407b42:	2b00      	cmp	r3, #0
  407b44:	d001      	beq.n	407b4a <chdrv_group_start+0x32>
		return ch_err;
  407b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407b48:	e0ad      	b.n	407ca6 <chdrv_group_start+0x18e>
	}

RESET_AND_LOAD:
	do {
		chbsp_reset_assert();
  407b4a:	4b5a      	ldr	r3, [pc, #360]	; (407cb4 <chdrv_group_start+0x19c>)
  407b4c:	4798      	blx	r3
		for (i = 0; i < grp_ptr->num_ports; i++) {
  407b4e:	2300      	movs	r3, #0
  407b50:	623b      	str	r3, [r7, #32]
  407b52:	e00a      	b.n	407b6a <chdrv_group_start+0x52>
			chbsp_program_enable(grp_ptr->device[i]);
  407b54:	687b      	ldr	r3, [r7, #4]
  407b56:	6a3a      	ldr	r2, [r7, #32]
  407b58:	3206      	adds	r2, #6
  407b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407b5e:	4618      	mov	r0, r3
  407b60:	4b55      	ldr	r3, [pc, #340]	; (407cb8 <chdrv_group_start+0x1a0>)
  407b62:	4798      	blx	r3
		for (i = 0; i < grp_ptr->num_ports; i++) {
  407b64:	6a3b      	ldr	r3, [r7, #32]
  407b66:	3301      	adds	r3, #1
  407b68:	623b      	str	r3, [r7, #32]
  407b6a:	687b      	ldr	r3, [r7, #4]
  407b6c:	781b      	ldrb	r3, [r3, #0]
  407b6e:	461a      	mov	r2, r3
  407b70:	6a3b      	ldr	r3, [r7, #32]
  407b72:	429a      	cmp	r2, r3
  407b74:	dcee      	bgt.n	407b54 <chdrv_group_start+0x3c>
		}
		chbsp_delay_ms(1);
  407b76:	2001      	movs	r0, #1
  407b78:	4b50      	ldr	r3, [pc, #320]	; (407cbc <chdrv_group_start+0x1a4>)
  407b7a:	4798      	blx	r3
		chbsp_reset_release();
  407b7c:	4b50      	ldr	r3, [pc, #320]	; (407cc0 <chdrv_group_start+0x1a8>)
  407b7e:	4798      	blx	r3

		 /* For every i2c bus, set the devices idle in parallel, then disable programming mode for all devices on that bus
		  * This is kludgey because we don't have a great way of iterating over the i2c buses */
		ch_dev_t * c_prev = grp_ptr->device[0];
  407b80:	687b      	ldr	r3, [r7, #4]
  407b82:	699b      	ldr	r3, [r3, #24]
  407b84:	61bb      	str	r3, [r7, #24]
		chdrv_set_idle(c_prev);
  407b86:	69b8      	ldr	r0, [r7, #24]
  407b88:	4b4e      	ldr	r3, [pc, #312]	; (407cc4 <chdrv_group_start+0x1ac>)
  407b8a:	4798      	blx	r3
		for (i = 0; i < grp_ptr->num_ports; i++) {
  407b8c:	2300      	movs	r3, #0
  407b8e:	623b      	str	r3, [r7, #32]
  407b90:	e018      	b.n	407bc4 <chdrv_group_start+0xac>
			ch_dev_t * c = grp_ptr->device[i];
  407b92:	687b      	ldr	r3, [r7, #4]
  407b94:	6a3a      	ldr	r2, [r7, #32]
  407b96:	3206      	adds	r2, #6
  407b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407b9c:	60fb      	str	r3, [r7, #12]

			if (c->i2c_bus_index != c_prev->i2c_bus_index) {
  407b9e:	68fb      	ldr	r3, [r7, #12]
  407ba0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
  407ba4:	69bb      	ldr	r3, [r7, #24]
  407ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  407baa:	429a      	cmp	r2, r3
  407bac:	d002      	beq.n	407bb4 <chdrv_group_start+0x9c>
				chdrv_set_idle(c);
  407bae:	68f8      	ldr	r0, [r7, #12]
  407bb0:	4b44      	ldr	r3, [pc, #272]	; (407cc4 <chdrv_group_start+0x1ac>)
  407bb2:	4798      	blx	r3
			}

			chbsp_program_disable(c);
  407bb4:	68f8      	ldr	r0, [r7, #12]
  407bb6:	4b44      	ldr	r3, [pc, #272]	; (407cc8 <chdrv_group_start+0x1b0>)
  407bb8:	4798      	blx	r3
			c_prev = c;
  407bba:	68fb      	ldr	r3, [r7, #12]
  407bbc:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < grp_ptr->num_ports; i++) {
  407bbe:	6a3b      	ldr	r3, [r7, #32]
  407bc0:	3301      	adds	r3, #1
  407bc2:	623b      	str	r3, [r7, #32]
  407bc4:	687b      	ldr	r3, [r7, #4]
  407bc6:	781b      	ldrb	r3, [r3, #0]
  407bc8:	461a      	mov	r2, r3
  407bca:	6a3b      	ldr	r3, [r7, #32]
  407bcc:	429a      	cmp	r2, r3
  407bce:	dce0      	bgt.n	407b92 <chdrv_group_start+0x7a>
		}

		ch_err = chdrv_group_detect_and_program(grp_ptr);
  407bd0:	6878      	ldr	r0, [r7, #4]
  407bd2:	4b3e      	ldr	r3, [pc, #248]	; (407ccc <chdrv_group_start+0x1b4>)
  407bd4:	4798      	blx	r3
  407bd6:	6278      	str	r0, [r7, #36]	; 0x24

	} while (ch_err && prog_tries++ < CH_PROG_XFER_RETRY);
  407bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407bda:	2b00      	cmp	r3, #0
  407bdc:	d004      	beq.n	407be8 <chdrv_group_start+0xd0>
  407bde:	7ffb      	ldrb	r3, [r7, #31]
  407be0:	1c5a      	adds	r2, r3, #1
  407be2:	77fa      	strb	r2, [r7, #31]
  407be4:	2b03      	cmp	r3, #3
  407be6:	d9b0      	bls.n	407b4a <chdrv_group_start+0x32>

	if (!ch_err) {
  407be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407bea:	2b00      	cmp	r3, #0
  407bec:	d107      	bne.n	407bfe <chdrv_group_start+0xe6>
		ch_err = (grp_ptr->sensor_count == 0);
  407bee:	687b      	ldr	r3, [r7, #4]
  407bf0:	789b      	ldrb	r3, [r3, #2]
  407bf2:	2b00      	cmp	r3, #0
  407bf4:	bf0c      	ite	eq
  407bf6:	2301      	moveq	r3, #1
  407bf8:	2300      	movne	r3, #0
  407bfa:	b2db      	uxtb	r3, r3
  407bfc:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}
#endif
	}

	if (!ch_err) {
  407bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407c00:	2b00      	cmp	r3, #0
  407c02:	d10c      	bne.n	407c1e <chdrv_group_start+0x106>
		ch_err = chdrv_group_wait_for_lock(grp_ptr);
  407c04:	6878      	ldr	r0, [r7, #4]
  407c06:	4b32      	ldr	r3, [pc, #200]	; (407cd0 <chdrv_group_start+0x1b8>)
  407c08:	4798      	blx	r3
  407c0a:	6278      	str	r0, [r7, #36]	; 0x24
		if(ch_err && prog_tries++ < CH_PROG_XFER_RETRY+1) {
  407c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407c0e:	2b00      	cmp	r3, #0
  407c10:	d005      	beq.n	407c1e <chdrv_group_start+0x106>
  407c12:	7ffb      	ldrb	r3, [r7, #31]
  407c14:	1c5a      	adds	r2, r3, #1
  407c16:	77fa      	strb	r2, [r7, #31]
  407c18:	2b04      	cmp	r3, #4
  407c1a:	d800      	bhi.n	407c1e <chdrv_group_start+0x106>
			goto RESET_AND_LOAD;
  407c1c:	e795      	b.n	407b4a <chdrv_group_start+0x32>
		}
	}

	if (!ch_err) {
  407c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407c20:	2b00      	cmp	r3, #0
  407c22:	d105      	bne.n	407c30 <chdrv_group_start+0x118>
#ifdef CHDRV_DEBUG
		snprintf(cbuf, sizeof(cbuf), "Frequency locked, %lu ms\n", chbsp_timestamp_ms() - start_time);
		chbsp_print_str(cbuf);
#endif

		chbsp_delay_ms(1);
  407c24:	2001      	movs	r0, #1
  407c26:	4b25      	ldr	r3, [pc, #148]	; (407cbc <chdrv_group_start+0x1a4>)
  407c28:	4798      	blx	r3

		chdrv_group_measure_rtc(grp_ptr);
  407c2a:	6878      	ldr	r0, [r7, #4]
  407c2c:	4b29      	ldr	r3, [pc, #164]	; (407cd4 <chdrv_group_start+0x1bc>)
  407c2e:	4798      	blx	r3
		}
#endif
	}

	/* Put counts of connected devices per bus in group struct */
	for (int bus_num = 0; bus_num < grp_ptr->num_i2c_buses; bus_num++) {
  407c30:	2300      	movs	r3, #0
  407c32:	617b      	str	r3, [r7, #20]
  407c34:	e008      	b.n	407c48 <chdrv_group_start+0x130>
		grp_ptr->num_connected[bus_num] = 0;						// init all counts
  407c36:	687a      	ldr	r2, [r7, #4]
  407c38:	697b      	ldr	r3, [r7, #20]
  407c3a:	4413      	add	r3, r2
  407c3c:	3328      	adds	r3, #40	; 0x28
  407c3e:	2200      	movs	r2, #0
  407c40:	701a      	strb	r2, [r3, #0]
	for (int bus_num = 0; bus_num < grp_ptr->num_i2c_buses; bus_num++) {
  407c42:	697b      	ldr	r3, [r7, #20]
  407c44:	3301      	adds	r3, #1
  407c46:	617b      	str	r3, [r7, #20]
  407c48:	687b      	ldr	r3, [r7, #4]
  407c4a:	785b      	ldrb	r3, [r3, #1]
  407c4c:	461a      	mov	r2, r3
  407c4e:	697b      	ldr	r3, [r7, #20]
  407c50:	429a      	cmp	r2, r3
  407c52:	dcf0      	bgt.n	407c36 <chdrv_group_start+0x11e>
	}

	for (int dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  407c54:	2300      	movs	r3, #0
  407c56:	613b      	str	r3, [r7, #16]
  407c58:	e01e      	b.n	407c98 <chdrv_group_start+0x180>
		ch_dev_t *dev_ptr = grp_ptr->device[dev_num];
  407c5a:	687b      	ldr	r3, [r7, #4]
  407c5c:	693a      	ldr	r2, [r7, #16]
  407c5e:	3206      	adds	r2, #6
  407c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407c64:	60bb      	str	r3, [r7, #8]

		if (dev_ptr->sensor_connected) {
  407c66:	68bb      	ldr	r3, [r7, #8]
  407c68:	7fdb      	ldrb	r3, [r3, #31]
  407c6a:	2b00      	cmp	r3, #0
  407c6c:	d011      	beq.n	407c92 <chdrv_group_start+0x17a>
			grp_ptr->num_connected[dev_ptr->i2c_bus_index] += 1;	// count one more on this bus
  407c6e:	68bb      	ldr	r3, [r7, #8]
  407c70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  407c74:	4619      	mov	r1, r3
  407c76:	68bb      	ldr	r3, [r7, #8]
  407c78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  407c7c:	461a      	mov	r2, r3
  407c7e:	687b      	ldr	r3, [r7, #4]
  407c80:	4413      	add	r3, r2
  407c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
  407c86:	3301      	adds	r3, #1
  407c88:	b2da      	uxtb	r2, r3
  407c8a:	687b      	ldr	r3, [r7, #4]
  407c8c:	440b      	add	r3, r1
  407c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (int dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
  407c92:	693b      	ldr	r3, [r7, #16]
  407c94:	3301      	adds	r3, #1
  407c96:	613b      	str	r3, [r7, #16]
  407c98:	687b      	ldr	r3, [r7, #4]
  407c9a:	781b      	ldrb	r3, [r3, #0]
  407c9c:	461a      	mov	r2, r3
  407c9e:	693b      	ldr	r3, [r7, #16]
  407ca0:	429a      	cmp	r2, r3
  407ca2:	dcda      	bgt.n	407c5a <chdrv_group_start+0x142>
		}
	}

	return ch_err;
  407ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  407ca6:	4618      	mov	r0, r3
  407ca8:	3728      	adds	r7, #40	; 0x28
  407caa:	46bd      	mov	sp, r7
  407cac:	bd80      	pop	{r7, pc}
  407cae:	bf00      	nop
  407cb0:	00407a71 	.word	0x00407a71
  407cb4:	00401fe5 	.word	0x00401fe5
  407cb8:	0040200d 	.word	0x0040200d
  407cbc:	004025f1 	.word	0x004025f1
  407cc0:	00401ff9 	.word	0x00401ff9
  407cc4:	004079a5 	.word	0x004079a5
  407cc8:	00402045 	.word	0x00402045
  407ccc:	00407a09 	.word	0x00407a09
  407cd0:	004073c9 	.word	0x004073c9
  407cd4:	00406f11 	.word	0x00406f11

00407cd8 <chdrv_pretrigger_delay_set>:
 * This function sets a delay interval that will be inserted between triggering rx-only sensor
 * and tx/rx sensors.  This delay allows the rx-only sensor(s) to settle from any startup disruption
 * (e.g. PMUT "ringdown") before the ultrasound pulse is generated by the tx node.
 *
 */
void chdrv_pretrigger_delay_set(ch_group_t *grp_ptr, uint16_t delay_us){
  407cd8:	b480      	push	{r7}
  407cda:	b083      	sub	sp, #12
  407cdc:	af00      	add	r7, sp, #0
  407cde:	6078      	str	r0, [r7, #4]
  407ce0:	460b      	mov	r3, r1
  407ce2:	807b      	strh	r3, [r7, #2]

	grp_ptr->pretrig_delay_us = delay_us;
  407ce4:	687b      	ldr	r3, [r7, #4]
  407ce6:	887a      	ldrh	r2, [r7, #2]
  407ce8:	811a      	strh	r2, [r3, #8]
}
  407cea:	bf00      	nop
  407cec:	370c      	adds	r7, #12
  407cee:	46bd      	mov	sp, r7
  407cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
  407cf4:	4770      	bx	lr

00407cf6 <sqrt_int32>:
  407cf6:	b480      	push	{r7}
  407cf8:	b087      	sub	sp, #28
  407cfa:	af00      	add	r7, sp, #0
  407cfc:	6078      	str	r0, [r7, #4]
  407cfe:	687b      	ldr	r3, [r7, #4]
  407d00:	60fb      	str	r3, [r7, #12]
  407d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  407d06:	613b      	str	r3, [r7, #16]
  407d08:	2300      	movs	r3, #0
  407d0a:	617b      	str	r3, [r7, #20]
  407d0c:	e015      	b.n	407d3a <sqrt_int32+0x44>
  407d0e:	697a      	ldr	r2, [r7, #20]
  407d10:	693b      	ldr	r3, [r7, #16]
  407d12:	4413      	add	r3, r2
  407d14:	60bb      	str	r3, [r7, #8]
  407d16:	697b      	ldr	r3, [r7, #20]
  407d18:	085b      	lsrs	r3, r3, #1
  407d1a:	617b      	str	r3, [r7, #20]
  407d1c:	68fa      	ldr	r2, [r7, #12]
  407d1e:	68bb      	ldr	r3, [r7, #8]
  407d20:	429a      	cmp	r2, r3
  407d22:	d307      	bcc.n	407d34 <sqrt_int32+0x3e>
  407d24:	68fa      	ldr	r2, [r7, #12]
  407d26:	68bb      	ldr	r3, [r7, #8]
  407d28:	1ad3      	subs	r3, r2, r3
  407d2a:	60fb      	str	r3, [r7, #12]
  407d2c:	697a      	ldr	r2, [r7, #20]
  407d2e:	693b      	ldr	r3, [r7, #16]
  407d30:	4413      	add	r3, r2
  407d32:	617b      	str	r3, [r7, #20]
  407d34:	693b      	ldr	r3, [r7, #16]
  407d36:	089b      	lsrs	r3, r3, #2
  407d38:	613b      	str	r3, [r7, #16]
  407d3a:	693b      	ldr	r3, [r7, #16]
  407d3c:	2b00      	cmp	r3, #0
  407d3e:	d1e6      	bne.n	407d0e <sqrt_int32+0x18>
  407d40:	697b      	ldr	r3, [r7, #20]
  407d42:	4618      	mov	r0, r3
  407d44:	371c      	adds	r7, #28
  407d46:	46bd      	mov	sp, r7
  407d48:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d4c:	4770      	bx	lr
	...

00407d50 <NVIC_EnableIRQ>:
  407d50:	b480      	push	{r7}
  407d52:	b083      	sub	sp, #12
  407d54:	af00      	add	r7, sp, #0
  407d56:	4603      	mov	r3, r0
  407d58:	71fb      	strb	r3, [r7, #7]
  407d5a:	4909      	ldr	r1, [pc, #36]	; (407d80 <NVIC_EnableIRQ+0x30>)
  407d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407d60:	095b      	lsrs	r3, r3, #5
  407d62:	79fa      	ldrb	r2, [r7, #7]
  407d64:	f002 021f 	and.w	r2, r2, #31
  407d68:	2001      	movs	r0, #1
  407d6a:	fa00 f202 	lsl.w	r2, r0, r2
  407d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407d72:	bf00      	nop
  407d74:	370c      	adds	r7, #12
  407d76:	46bd      	mov	sp, r7
  407d78:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d7c:	4770      	bx	lr
  407d7e:	bf00      	nop
  407d80:	e000e100 	.word	0xe000e100

00407d84 <NVIC_DisableIRQ>:
  407d84:	b480      	push	{r7}
  407d86:	b083      	sub	sp, #12
  407d88:	af00      	add	r7, sp, #0
  407d8a:	4603      	mov	r3, r0
  407d8c:	71fb      	strb	r3, [r7, #7]
  407d8e:	4909      	ldr	r1, [pc, #36]	; (407db4 <NVIC_DisableIRQ+0x30>)
  407d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407d94:	095b      	lsrs	r3, r3, #5
  407d96:	79fa      	ldrb	r2, [r7, #7]
  407d98:	f002 021f 	and.w	r2, r2, #31
  407d9c:	2001      	movs	r0, #1
  407d9e:	fa00 f202 	lsl.w	r2, r0, r2
  407da2:	3320      	adds	r3, #32
  407da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407da8:	bf00      	nop
  407daa:	370c      	adds	r7, #12
  407dac:	46bd      	mov	sp, r7
  407dae:	f85d 7b04 	ldr.w	r7, [sp], #4
  407db2:	4770      	bx	lr
  407db4:	e000e100 	.word	0xe000e100

00407db8 <NVIC_ClearPendingIRQ>:
  407db8:	b480      	push	{r7}
  407dba:	b083      	sub	sp, #12
  407dbc:	af00      	add	r7, sp, #0
  407dbe:	4603      	mov	r3, r0
  407dc0:	71fb      	strb	r3, [r7, #7]
  407dc2:	4909      	ldr	r1, [pc, #36]	; (407de8 <NVIC_ClearPendingIRQ+0x30>)
  407dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407dc8:	095b      	lsrs	r3, r3, #5
  407dca:	79fa      	ldrb	r2, [r7, #7]
  407dcc:	f002 021f 	and.w	r2, r2, #31
  407dd0:	2001      	movs	r0, #1
  407dd2:	fa00 f202 	lsl.w	r2, r0, r2
  407dd6:	3360      	adds	r3, #96	; 0x60
  407dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407ddc:	bf00      	nop
  407dde:	370c      	adds	r7, #12
  407de0:	46bd      	mov	sp, r7
  407de2:	f85d 7b04 	ldr.w	r7, [sp], #4
  407de6:	4770      	bx	lr
  407de8:	e000e100 	.word	0xe000e100

00407dec <NVIC_SetPriority>:
  407dec:	b480      	push	{r7}
  407dee:	b083      	sub	sp, #12
  407df0:	af00      	add	r7, sp, #0
  407df2:	4603      	mov	r3, r0
  407df4:	6039      	str	r1, [r7, #0]
  407df6:	71fb      	strb	r3, [r7, #7]
  407df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407dfc:	2b00      	cmp	r3, #0
  407dfe:	da0b      	bge.n	407e18 <NVIC_SetPriority+0x2c>
  407e00:	490d      	ldr	r1, [pc, #52]	; (407e38 <NVIC_SetPriority+0x4c>)
  407e02:	79fb      	ldrb	r3, [r7, #7]
  407e04:	f003 030f 	and.w	r3, r3, #15
  407e08:	3b04      	subs	r3, #4
  407e0a:	683a      	ldr	r2, [r7, #0]
  407e0c:	b2d2      	uxtb	r2, r2
  407e0e:	0112      	lsls	r2, r2, #4
  407e10:	b2d2      	uxtb	r2, r2
  407e12:	440b      	add	r3, r1
  407e14:	761a      	strb	r2, [r3, #24]
  407e16:	e009      	b.n	407e2c <NVIC_SetPriority+0x40>
  407e18:	4908      	ldr	r1, [pc, #32]	; (407e3c <NVIC_SetPriority+0x50>)
  407e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407e1e:	683a      	ldr	r2, [r7, #0]
  407e20:	b2d2      	uxtb	r2, r2
  407e22:	0112      	lsls	r2, r2, #4
  407e24:	b2d2      	uxtb	r2, r2
  407e26:	440b      	add	r3, r1
  407e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  407e2c:	bf00      	nop
  407e2e:	370c      	adds	r7, #12
  407e30:	46bd      	mov	sp, r7
  407e32:	f85d 7b04 	ldr.w	r7, [sp], #4
  407e36:	4770      	bx	lr
  407e38:	e000ed00 	.word	0xe000ed00
  407e3c:	e000e100 	.word	0xe000e100

00407e40 <osc_get_rate>:
  407e40:	b480      	push	{r7}
  407e42:	b083      	sub	sp, #12
  407e44:	af00      	add	r7, sp, #0
  407e46:	6078      	str	r0, [r7, #4]
  407e48:	687b      	ldr	r3, [r7, #4]
  407e4a:	2b07      	cmp	r3, #7
  407e4c:	d825      	bhi.n	407e9a <osc_get_rate+0x5a>
  407e4e:	a201      	add	r2, pc, #4	; (adr r2, 407e54 <osc_get_rate+0x14>)
  407e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407e54:	00407e75 	.word	0x00407e75
  407e58:	00407e7b 	.word	0x00407e7b
  407e5c:	00407e81 	.word	0x00407e81
  407e60:	00407e87 	.word	0x00407e87
  407e64:	00407e8b 	.word	0x00407e8b
  407e68:	00407e8f 	.word	0x00407e8f
  407e6c:	00407e93 	.word	0x00407e93
  407e70:	00407e97 	.word	0x00407e97
  407e74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  407e78:	e010      	b.n	407e9c <osc_get_rate+0x5c>
  407e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407e7e:	e00d      	b.n	407e9c <osc_get_rate+0x5c>
  407e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407e84:	e00a      	b.n	407e9c <osc_get_rate+0x5c>
  407e86:	4b08      	ldr	r3, [pc, #32]	; (407ea8 <osc_get_rate+0x68>)
  407e88:	e008      	b.n	407e9c <osc_get_rate+0x5c>
  407e8a:	4b08      	ldr	r3, [pc, #32]	; (407eac <osc_get_rate+0x6c>)
  407e8c:	e006      	b.n	407e9c <osc_get_rate+0x5c>
  407e8e:	4b08      	ldr	r3, [pc, #32]	; (407eb0 <osc_get_rate+0x70>)
  407e90:	e004      	b.n	407e9c <osc_get_rate+0x5c>
  407e92:	2300      	movs	r3, #0
  407e94:	e002      	b.n	407e9c <osc_get_rate+0x5c>
  407e96:	2300      	movs	r3, #0
  407e98:	e000      	b.n	407e9c <osc_get_rate+0x5c>
  407e9a:	2300      	movs	r3, #0
  407e9c:	4618      	mov	r0, r3
  407e9e:	370c      	adds	r7, #12
  407ea0:	46bd      	mov	sp, r7
  407ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
  407ea6:	4770      	bx	lr
  407ea8:	007a1200 	.word	0x007a1200
  407eac:	00f42400 	.word	0x00f42400
  407eb0:	016e3600 	.word	0x016e3600

00407eb4 <sysclk_get_main_hz>:
  407eb4:	b580      	push	{r7, lr}
  407eb6:	af00      	add	r7, sp, #0
  407eb8:	2001      	movs	r0, #1
  407eba:	4b04      	ldr	r3, [pc, #16]	; (407ecc <sysclk_get_main_hz+0x18>)
  407ebc:	4798      	blx	r3
  407ebe:	4602      	mov	r2, r0
  407ec0:	f640 634e 	movw	r3, #3662	; 0xe4e
  407ec4:	fb03 f302 	mul.w	r3, r3, r2
  407ec8:	4618      	mov	r0, r3
  407eca:	bd80      	pop	{r7, pc}
  407ecc:	00407e41 	.word	0x00407e41

00407ed0 <sysclk_get_peripheral_hz>:
  407ed0:	b580      	push	{r7, lr}
  407ed2:	af00      	add	r7, sp, #0
  407ed4:	4b02      	ldr	r3, [pc, #8]	; (407ee0 <sysclk_get_peripheral_hz+0x10>)
  407ed6:	4798      	blx	r3
  407ed8:	4603      	mov	r3, r0
  407eda:	4618      	mov	r0, r3
  407edc:	bd80      	pop	{r7, pc}
  407ede:	bf00      	nop
  407ee0:	00407eb5 	.word	0x00407eb5

00407ee4 <i2c_master_initialize1>:
  407ee4:	b580      	push	{r7, lr}
  407ee6:	af00      	add	r7, sp, #0
  407ee8:	4810      	ldr	r0, [pc, #64]	; (407f2c <i2c_master_initialize1+0x48>)
  407eea:	4b11      	ldr	r3, [pc, #68]	; (407f30 <i2c_master_initialize1+0x4c>)
  407eec:	4798      	blx	r3
  407eee:	2103      	movs	r1, #3
  407ef0:	480e      	ldr	r0, [pc, #56]	; (407f2c <i2c_master_initialize1+0x48>)
  407ef2:	4b10      	ldr	r3, [pc, #64]	; (407f34 <i2c_master_initialize1+0x50>)
  407ef4:	4798      	blx	r3
  407ef6:	4b10      	ldr	r3, [pc, #64]	; (407f38 <i2c_master_initialize1+0x54>)
  407ef8:	4798      	blx	r3
  407efa:	4602      	mov	r2, r0
  407efc:	4b0f      	ldr	r3, [pc, #60]	; (407f3c <i2c_master_initialize1+0x58>)
  407efe:	601a      	str	r2, [r3, #0]
  407f00:	4b0e      	ldr	r3, [pc, #56]	; (407f3c <i2c_master_initialize1+0x58>)
  407f02:	4a0f      	ldr	r2, [pc, #60]	; (407f40 <i2c_master_initialize1+0x5c>)
  407f04:	605a      	str	r2, [r3, #4]
  407f06:	490d      	ldr	r1, [pc, #52]	; (407f3c <i2c_master_initialize1+0x58>)
  407f08:	480e      	ldr	r0, [pc, #56]	; (407f44 <i2c_master_initialize1+0x60>)
  407f0a:	4b0f      	ldr	r3, [pc, #60]	; (407f48 <i2c_master_initialize1+0x64>)
  407f0c:	4798      	blx	r3
  407f0e:	2009      	movs	r0, #9
  407f10:	4b0e      	ldr	r3, [pc, #56]	; (407f4c <i2c_master_initialize1+0x68>)
  407f12:	4798      	blx	r3
  407f14:	2009      	movs	r0, #9
  407f16:	4b0e      	ldr	r3, [pc, #56]	; (407f50 <i2c_master_initialize1+0x6c>)
  407f18:	4798      	blx	r3
  407f1a:	2101      	movs	r1, #1
  407f1c:	2009      	movs	r0, #9
  407f1e:	4b0d      	ldr	r3, [pc, #52]	; (407f54 <i2c_master_initialize1+0x70>)
  407f20:	4798      	blx	r3
  407f22:	2009      	movs	r0, #9
  407f24:	4b0c      	ldr	r3, [pc, #48]	; (407f58 <i2c_master_initialize1+0x74>)
  407f26:	4798      	blx	r3
  407f28:	bf00      	nop
  407f2a:	bd80      	pop	{r7, pc}
  407f2c:	40020000 	.word	0x40020000
  407f30:	00403841 	.word	0x00403841
  407f34:	004039a9 	.word	0x004039a9
  407f38:	00407ed1 	.word	0x00407ed1
  407f3c:	2000090c 	.word	0x2000090c
  407f40:	00061a80 	.word	0x00061a80
  407f44:	40020600 	.word	0x40020600
  407f48:	00404a99 	.word	0x00404a99
  407f4c:	00407d85 	.word	0x00407d85
  407f50:	00407db9 	.word	0x00407db9
  407f54:	00407ded 	.word	0x00407ded
  407f58:	00407d51 	.word	0x00407d51

00407f5c <i2c_master_initialize3>:
  407f5c:	b580      	push	{r7, lr}
  407f5e:	af00      	add	r7, sp, #0
  407f60:	4810      	ldr	r0, [pc, #64]	; (407fa4 <i2c_master_initialize3+0x48>)
  407f62:	4b11      	ldr	r3, [pc, #68]	; (407fa8 <i2c_master_initialize3+0x4c>)
  407f64:	4798      	blx	r3
  407f66:	2103      	movs	r1, #3
  407f68:	480e      	ldr	r0, [pc, #56]	; (407fa4 <i2c_master_initialize3+0x48>)
  407f6a:	4b10      	ldr	r3, [pc, #64]	; (407fac <i2c_master_initialize3+0x50>)
  407f6c:	4798      	blx	r3
  407f6e:	4b10      	ldr	r3, [pc, #64]	; (407fb0 <i2c_master_initialize3+0x54>)
  407f70:	4798      	blx	r3
  407f72:	4602      	mov	r2, r0
  407f74:	4b0f      	ldr	r3, [pc, #60]	; (407fb4 <i2c_master_initialize3+0x58>)
  407f76:	601a      	str	r2, [r3, #0]
  407f78:	4b0e      	ldr	r3, [pc, #56]	; (407fb4 <i2c_master_initialize3+0x58>)
  407f7a:	4a0f      	ldr	r2, [pc, #60]	; (407fb8 <i2c_master_initialize3+0x5c>)
  407f7c:	605a      	str	r2, [r3, #4]
  407f7e:	490d      	ldr	r1, [pc, #52]	; (407fb4 <i2c_master_initialize3+0x58>)
  407f80:	480e      	ldr	r0, [pc, #56]	; (407fbc <i2c_master_initialize3+0x60>)
  407f82:	4b0f      	ldr	r3, [pc, #60]	; (407fc0 <i2c_master_initialize3+0x64>)
  407f84:	4798      	blx	r3
  407f86:	2013      	movs	r0, #19
  407f88:	4b0e      	ldr	r3, [pc, #56]	; (407fc4 <i2c_master_initialize3+0x68>)
  407f8a:	4798      	blx	r3
  407f8c:	2013      	movs	r0, #19
  407f8e:	4b0e      	ldr	r3, [pc, #56]	; (407fc8 <i2c_master_initialize3+0x6c>)
  407f90:	4798      	blx	r3
  407f92:	2101      	movs	r1, #1
  407f94:	2013      	movs	r0, #19
  407f96:	4b0d      	ldr	r3, [pc, #52]	; (407fcc <i2c_master_initialize3+0x70>)
  407f98:	4798      	blx	r3
  407f9a:	2013      	movs	r0, #19
  407f9c:	4b0c      	ldr	r3, [pc, #48]	; (407fd0 <i2c_master_initialize3+0x74>)
  407f9e:	4798      	blx	r3
  407fa0:	bf00      	nop
  407fa2:	bd80      	pop	{r7, pc}
  407fa4:	40018000 	.word	0x40018000
  407fa8:	00403841 	.word	0x00403841
  407fac:	004039a9 	.word	0x004039a9
  407fb0:	00407ed1 	.word	0x00407ed1
  407fb4:	2000090c 	.word	0x2000090c
  407fb8:	00061a80 	.word	0x00061a80
  407fbc:	40018600 	.word	0x40018600
  407fc0:	00404a99 	.word	0x00404a99
  407fc4:	00407d85 	.word	0x00407d85
  407fc8:	00407db9 	.word	0x00407db9
  407fcc:	00407ded 	.word	0x00407ded
  407fd0:	00407d51 	.word	0x00407d51

00407fd4 <i2c_master_init>:
  407fd4:	b580      	push	{r7, lr}
  407fd6:	af00      	add	r7, sp, #0
  407fd8:	4b0c      	ldr	r3, [pc, #48]	; (40800c <i2c_master_init+0x38>)
  407fda:	4798      	blx	r3
  407fdc:	4b0c      	ldr	r3, [pc, #48]	; (408010 <i2c_master_init+0x3c>)
  407fde:	4798      	blx	r3
  407fe0:	2200      	movs	r2, #0
  407fe2:	2118      	movs	r1, #24
  407fe4:	480b      	ldr	r0, [pc, #44]	; (408014 <i2c_master_init+0x40>)
  407fe6:	4b0c      	ldr	r3, [pc, #48]	; (408018 <i2c_master_init+0x44>)
  407fe8:	4798      	blx	r3
  407fea:	2200      	movs	r2, #0
  407fec:	2118      	movs	r1, #24
  407fee:	4809      	ldr	r0, [pc, #36]	; (408014 <i2c_master_init+0x40>)
  407ff0:	4b0a      	ldr	r3, [pc, #40]	; (40801c <i2c_master_init+0x48>)
  407ff2:	4798      	blx	r3
  407ff4:	2200      	movs	r2, #0
  407ff6:	210c      	movs	r1, #12
  407ff8:	4809      	ldr	r0, [pc, #36]	; (408020 <i2c_master_init+0x4c>)
  407ffa:	4b07      	ldr	r3, [pc, #28]	; (408018 <i2c_master_init+0x44>)
  407ffc:	4798      	blx	r3
  407ffe:	2200      	movs	r2, #0
  408000:	210c      	movs	r1, #12
  408002:	4807      	ldr	r0, [pc, #28]	; (408020 <i2c_master_init+0x4c>)
  408004:	4b05      	ldr	r3, [pc, #20]	; (40801c <i2c_master_init+0x48>)
  408006:	4798      	blx	r3
  408008:	bf00      	nop
  40800a:	bd80      	pop	{r7, pc}
  40800c:	00407ee5 	.word	0x00407ee5
  408010:	00407f5d 	.word	0x00407f5d
  408014:	400e0e00 	.word	0x400e0e00
  408018:	00403cbd 	.word	0x00403cbd
  40801c:	00403a4f 	.word	0x00403a4f
  408020:	400e1000 	.word	0x400e1000

00408024 <i2c_master_read_register1>:
  408024:	b580      	push	{r7, lr}
  408026:	b088      	sub	sp, #32
  408028:	af00      	add	r7, sp, #0
  40802a:	603b      	str	r3, [r7, #0]
  40802c:	4603      	mov	r3, r0
  40802e:	71fb      	strb	r3, [r7, #7]
  408030:	460b      	mov	r3, r1
  408032:	71bb      	strb	r3, [r7, #6]
  408034:	4613      	mov	r3, r2
  408036:	80bb      	strh	r3, [r7, #4]
  408038:	79fb      	ldrb	r3, [r7, #7]
  40803a:	773b      	strb	r3, [r7, #28]
  40803c:	79bb      	ldrb	r3, [r7, #6]
  40803e:	733b      	strb	r3, [r7, #12]
  408040:	2301      	movs	r3, #1
  408042:	613b      	str	r3, [r7, #16]
  408044:	683b      	ldr	r3, [r7, #0]
  408046:	617b      	str	r3, [r7, #20]
  408048:	88bb      	ldrh	r3, [r7, #4]
  40804a:	61bb      	str	r3, [r7, #24]
  40804c:	f107 030c 	add.w	r3, r7, #12
  408050:	4619      	mov	r1, r3
  408052:	4806      	ldr	r0, [pc, #24]	; (40806c <i2c_master_read_register1+0x48>)
  408054:	4b06      	ldr	r3, [pc, #24]	; (408070 <i2c_master_read_register1+0x4c>)
  408056:	4798      	blx	r3
  408058:	4603      	mov	r3, r0
  40805a:	2b00      	cmp	r3, #0
  40805c:	d101      	bne.n	408062 <i2c_master_read_register1+0x3e>
  40805e:	2300      	movs	r3, #0
  408060:	e000      	b.n	408064 <i2c_master_read_register1+0x40>
  408062:	2308      	movs	r3, #8
  408064:	4618      	mov	r0, r3
  408066:	3720      	adds	r7, #32
  408068:	46bd      	mov	sp, r7
  40806a:	bd80      	pop	{r7, pc}
  40806c:	40020600 	.word	0x40020600
  408070:	00404c4d 	.word	0x00404c4d

00408074 <i2c_master_read_register1_raw>:
  408074:	b580      	push	{r7, lr}
  408076:	b088      	sub	sp, #32
  408078:	af00      	add	r7, sp, #0
  40807a:	4603      	mov	r3, r0
  40807c:	603a      	str	r2, [r7, #0]
  40807e:	71fb      	strb	r3, [r7, #7]
  408080:	460b      	mov	r3, r1
  408082:	80bb      	strh	r3, [r7, #4]
  408084:	79fb      	ldrb	r3, [r7, #7]
  408086:	773b      	strb	r3, [r7, #28]
  408088:	2300      	movs	r3, #0
  40808a:	613b      	str	r3, [r7, #16]
  40808c:	683b      	ldr	r3, [r7, #0]
  40808e:	617b      	str	r3, [r7, #20]
  408090:	88bb      	ldrh	r3, [r7, #4]
  408092:	61bb      	str	r3, [r7, #24]
  408094:	f107 030c 	add.w	r3, r7, #12
  408098:	4619      	mov	r1, r3
  40809a:	4806      	ldr	r0, [pc, #24]	; (4080b4 <i2c_master_read_register1_raw+0x40>)
  40809c:	4b06      	ldr	r3, [pc, #24]	; (4080b8 <i2c_master_read_register1_raw+0x44>)
  40809e:	4798      	blx	r3
  4080a0:	4603      	mov	r3, r0
  4080a2:	2b00      	cmp	r3, #0
  4080a4:	d101      	bne.n	4080aa <i2c_master_read_register1_raw+0x36>
  4080a6:	2300      	movs	r3, #0
  4080a8:	e000      	b.n	4080ac <i2c_master_read_register1_raw+0x38>
  4080aa:	2308      	movs	r3, #8
  4080ac:	4618      	mov	r0, r3
  4080ae:	3720      	adds	r7, #32
  4080b0:	46bd      	mov	sp, r7
  4080b2:	bd80      	pop	{r7, pc}
  4080b4:	40020600 	.word	0x40020600
  4080b8:	00404c4d 	.word	0x00404c4d

004080bc <i2c_master_read_register3>:
  4080bc:	b580      	push	{r7, lr}
  4080be:	b088      	sub	sp, #32
  4080c0:	af00      	add	r7, sp, #0
  4080c2:	603b      	str	r3, [r7, #0]
  4080c4:	4603      	mov	r3, r0
  4080c6:	71fb      	strb	r3, [r7, #7]
  4080c8:	460b      	mov	r3, r1
  4080ca:	71bb      	strb	r3, [r7, #6]
  4080cc:	4613      	mov	r3, r2
  4080ce:	80bb      	strh	r3, [r7, #4]
  4080d0:	79fb      	ldrb	r3, [r7, #7]
  4080d2:	773b      	strb	r3, [r7, #28]
  4080d4:	79bb      	ldrb	r3, [r7, #6]
  4080d6:	733b      	strb	r3, [r7, #12]
  4080d8:	2301      	movs	r3, #1
  4080da:	613b      	str	r3, [r7, #16]
  4080dc:	683b      	ldr	r3, [r7, #0]
  4080de:	617b      	str	r3, [r7, #20]
  4080e0:	88bb      	ldrh	r3, [r7, #4]
  4080e2:	61bb      	str	r3, [r7, #24]
  4080e4:	f107 030c 	add.w	r3, r7, #12
  4080e8:	4619      	mov	r1, r3
  4080ea:	4806      	ldr	r0, [pc, #24]	; (408104 <i2c_master_read_register3+0x48>)
  4080ec:	4b06      	ldr	r3, [pc, #24]	; (408108 <i2c_master_read_register3+0x4c>)
  4080ee:	4798      	blx	r3
  4080f0:	4603      	mov	r3, r0
  4080f2:	2b00      	cmp	r3, #0
  4080f4:	d101      	bne.n	4080fa <i2c_master_read_register3+0x3e>
  4080f6:	2300      	movs	r3, #0
  4080f8:	e000      	b.n	4080fc <i2c_master_read_register3+0x40>
  4080fa:	2308      	movs	r3, #8
  4080fc:	4618      	mov	r0, r3
  4080fe:	3720      	adds	r7, #32
  408100:	46bd      	mov	sp, r7
  408102:	bd80      	pop	{r7, pc}
  408104:	40018600 	.word	0x40018600
  408108:	00404c4d 	.word	0x00404c4d

0040810c <i2c_master_read_register3_raw>:
  40810c:	b580      	push	{r7, lr}
  40810e:	b088      	sub	sp, #32
  408110:	af00      	add	r7, sp, #0
  408112:	4603      	mov	r3, r0
  408114:	603a      	str	r2, [r7, #0]
  408116:	71fb      	strb	r3, [r7, #7]
  408118:	460b      	mov	r3, r1
  40811a:	80bb      	strh	r3, [r7, #4]
  40811c:	79fb      	ldrb	r3, [r7, #7]
  40811e:	773b      	strb	r3, [r7, #28]
  408120:	2300      	movs	r3, #0
  408122:	613b      	str	r3, [r7, #16]
  408124:	683b      	ldr	r3, [r7, #0]
  408126:	617b      	str	r3, [r7, #20]
  408128:	88bb      	ldrh	r3, [r7, #4]
  40812a:	61bb      	str	r3, [r7, #24]
  40812c:	f107 030c 	add.w	r3, r7, #12
  408130:	4619      	mov	r1, r3
  408132:	4806      	ldr	r0, [pc, #24]	; (40814c <i2c_master_read_register3_raw+0x40>)
  408134:	4b06      	ldr	r3, [pc, #24]	; (408150 <i2c_master_read_register3_raw+0x44>)
  408136:	4798      	blx	r3
  408138:	4603      	mov	r3, r0
  40813a:	2b00      	cmp	r3, #0
  40813c:	d101      	bne.n	408142 <i2c_master_read_register3_raw+0x36>
  40813e:	2300      	movs	r3, #0
  408140:	e000      	b.n	408144 <i2c_master_read_register3_raw+0x38>
  408142:	2308      	movs	r3, #8
  408144:	4618      	mov	r0, r3
  408146:	3720      	adds	r7, #32
  408148:	46bd      	mov	sp, r7
  40814a:	bd80      	pop	{r7, pc}
  40814c:	40018600 	.word	0x40018600
  408150:	00404c4d 	.word	0x00404c4d

00408154 <i2c_master_write_register1>:
  408154:	b580      	push	{r7, lr}
  408156:	b088      	sub	sp, #32
  408158:	af00      	add	r7, sp, #0
  40815a:	603b      	str	r3, [r7, #0]
  40815c:	4603      	mov	r3, r0
  40815e:	71fb      	strb	r3, [r7, #7]
  408160:	460b      	mov	r3, r1
  408162:	71bb      	strb	r3, [r7, #6]
  408164:	4613      	mov	r3, r2
  408166:	80bb      	strh	r3, [r7, #4]
  408168:	79fb      	ldrb	r3, [r7, #7]
  40816a:	773b      	strb	r3, [r7, #28]
  40816c:	79bb      	ldrb	r3, [r7, #6]
  40816e:	733b      	strb	r3, [r7, #12]
  408170:	2301      	movs	r3, #1
  408172:	613b      	str	r3, [r7, #16]
  408174:	683b      	ldr	r3, [r7, #0]
  408176:	617b      	str	r3, [r7, #20]
  408178:	88bb      	ldrh	r3, [r7, #4]
  40817a:	61bb      	str	r3, [r7, #24]
  40817c:	f107 030c 	add.w	r3, r7, #12
  408180:	4619      	mov	r1, r3
  408182:	4804      	ldr	r0, [pc, #16]	; (408194 <i2c_master_write_register1+0x40>)
  408184:	4b04      	ldr	r3, [pc, #16]	; (408198 <i2c_master_write_register1+0x44>)
  408186:	4798      	blx	r3
  408188:	4603      	mov	r3, r0
  40818a:	4618      	mov	r0, r3
  40818c:	3720      	adds	r7, #32
  40818e:	46bd      	mov	sp, r7
  408190:	bd80      	pop	{r7, pc}
  408192:	bf00      	nop
  408194:	40020600 	.word	0x40020600
  408198:	00404d59 	.word	0x00404d59

0040819c <i2c_master_write_register1_raw>:
  40819c:	b580      	push	{r7, lr}
  40819e:	b088      	sub	sp, #32
  4081a0:	af00      	add	r7, sp, #0
  4081a2:	4603      	mov	r3, r0
  4081a4:	603a      	str	r2, [r7, #0]
  4081a6:	71fb      	strb	r3, [r7, #7]
  4081a8:	460b      	mov	r3, r1
  4081aa:	80bb      	strh	r3, [r7, #4]
  4081ac:	79fb      	ldrb	r3, [r7, #7]
  4081ae:	773b      	strb	r3, [r7, #28]
  4081b0:	2300      	movs	r3, #0
  4081b2:	613b      	str	r3, [r7, #16]
  4081b4:	683b      	ldr	r3, [r7, #0]
  4081b6:	617b      	str	r3, [r7, #20]
  4081b8:	88bb      	ldrh	r3, [r7, #4]
  4081ba:	61bb      	str	r3, [r7, #24]
  4081bc:	f107 030c 	add.w	r3, r7, #12
  4081c0:	4619      	mov	r1, r3
  4081c2:	4804      	ldr	r0, [pc, #16]	; (4081d4 <i2c_master_write_register1_raw+0x38>)
  4081c4:	4b04      	ldr	r3, [pc, #16]	; (4081d8 <i2c_master_write_register1_raw+0x3c>)
  4081c6:	4798      	blx	r3
  4081c8:	4603      	mov	r3, r0
  4081ca:	4618      	mov	r0, r3
  4081cc:	3720      	adds	r7, #32
  4081ce:	46bd      	mov	sp, r7
  4081d0:	bd80      	pop	{r7, pc}
  4081d2:	bf00      	nop
  4081d4:	40020600 	.word	0x40020600
  4081d8:	00404d59 	.word	0x00404d59

004081dc <i2c_master_write_register3>:
  4081dc:	b580      	push	{r7, lr}
  4081de:	b088      	sub	sp, #32
  4081e0:	af00      	add	r7, sp, #0
  4081e2:	603b      	str	r3, [r7, #0]
  4081e4:	4603      	mov	r3, r0
  4081e6:	71fb      	strb	r3, [r7, #7]
  4081e8:	460b      	mov	r3, r1
  4081ea:	71bb      	strb	r3, [r7, #6]
  4081ec:	4613      	mov	r3, r2
  4081ee:	80bb      	strh	r3, [r7, #4]
  4081f0:	79fb      	ldrb	r3, [r7, #7]
  4081f2:	773b      	strb	r3, [r7, #28]
  4081f4:	79bb      	ldrb	r3, [r7, #6]
  4081f6:	733b      	strb	r3, [r7, #12]
  4081f8:	2301      	movs	r3, #1
  4081fa:	613b      	str	r3, [r7, #16]
  4081fc:	683b      	ldr	r3, [r7, #0]
  4081fe:	617b      	str	r3, [r7, #20]
  408200:	88bb      	ldrh	r3, [r7, #4]
  408202:	61bb      	str	r3, [r7, #24]
  408204:	f107 030c 	add.w	r3, r7, #12
  408208:	4619      	mov	r1, r3
  40820a:	4804      	ldr	r0, [pc, #16]	; (40821c <i2c_master_write_register3+0x40>)
  40820c:	4b04      	ldr	r3, [pc, #16]	; (408220 <i2c_master_write_register3+0x44>)
  40820e:	4798      	blx	r3
  408210:	4603      	mov	r3, r0
  408212:	4618      	mov	r0, r3
  408214:	3720      	adds	r7, #32
  408216:	46bd      	mov	sp, r7
  408218:	bd80      	pop	{r7, pc}
  40821a:	bf00      	nop
  40821c:	40018600 	.word	0x40018600
  408220:	00404d59 	.word	0x00404d59

00408224 <i2c_master_write_register3_raw>:
  408224:	b580      	push	{r7, lr}
  408226:	b088      	sub	sp, #32
  408228:	af00      	add	r7, sp, #0
  40822a:	4603      	mov	r3, r0
  40822c:	603a      	str	r2, [r7, #0]
  40822e:	71fb      	strb	r3, [r7, #7]
  408230:	460b      	mov	r3, r1
  408232:	80bb      	strh	r3, [r7, #4]
  408234:	79fb      	ldrb	r3, [r7, #7]
  408236:	773b      	strb	r3, [r7, #28]
  408238:	2300      	movs	r3, #0
  40823a:	613b      	str	r3, [r7, #16]
  40823c:	683b      	ldr	r3, [r7, #0]
  40823e:	617b      	str	r3, [r7, #20]
  408240:	88bb      	ldrh	r3, [r7, #4]
  408242:	61bb      	str	r3, [r7, #24]
  408244:	f107 030c 	add.w	r3, r7, #12
  408248:	4619      	mov	r1, r3
  40824a:	4804      	ldr	r0, [pc, #16]	; (40825c <i2c_master_write_register3_raw+0x38>)
  40824c:	4b04      	ldr	r3, [pc, #16]	; (408260 <i2c_master_write_register3_raw+0x3c>)
  40824e:	4798      	blx	r3
  408250:	4603      	mov	r3, r0
  408252:	4618      	mov	r0, r3
  408254:	3720      	adds	r7, #32
  408256:	46bd      	mov	sp, r7
  408258:	bd80      	pop	{r7, pc}
  40825a:	bf00      	nop
  40825c:	40018600 	.word	0x40018600
  408260:	00404d59 	.word	0x00404d59

00408264 <osc_get_rate>:
  408264:	b480      	push	{r7}
  408266:	b083      	sub	sp, #12
  408268:	af00      	add	r7, sp, #0
  40826a:	6078      	str	r0, [r7, #4]
  40826c:	687b      	ldr	r3, [r7, #4]
  40826e:	2b07      	cmp	r3, #7
  408270:	d825      	bhi.n	4082be <osc_get_rate+0x5a>
  408272:	a201      	add	r2, pc, #4	; (adr r2, 408278 <osc_get_rate+0x14>)
  408274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408278:	00408299 	.word	0x00408299
  40827c:	0040829f 	.word	0x0040829f
  408280:	004082a5 	.word	0x004082a5
  408284:	004082ab 	.word	0x004082ab
  408288:	004082af 	.word	0x004082af
  40828c:	004082b3 	.word	0x004082b3
  408290:	004082b7 	.word	0x004082b7
  408294:	004082bb 	.word	0x004082bb
  408298:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40829c:	e010      	b.n	4082c0 <osc_get_rate+0x5c>
  40829e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4082a2:	e00d      	b.n	4082c0 <osc_get_rate+0x5c>
  4082a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4082a8:	e00a      	b.n	4082c0 <osc_get_rate+0x5c>
  4082aa:	4b08      	ldr	r3, [pc, #32]	; (4082cc <osc_get_rate+0x68>)
  4082ac:	e008      	b.n	4082c0 <osc_get_rate+0x5c>
  4082ae:	4b08      	ldr	r3, [pc, #32]	; (4082d0 <osc_get_rate+0x6c>)
  4082b0:	e006      	b.n	4082c0 <osc_get_rate+0x5c>
  4082b2:	4b08      	ldr	r3, [pc, #32]	; (4082d4 <osc_get_rate+0x70>)
  4082b4:	e004      	b.n	4082c0 <osc_get_rate+0x5c>
  4082b6:	2300      	movs	r3, #0
  4082b8:	e002      	b.n	4082c0 <osc_get_rate+0x5c>
  4082ba:	2300      	movs	r3, #0
  4082bc:	e000      	b.n	4082c0 <osc_get_rate+0x5c>
  4082be:	2300      	movs	r3, #0
  4082c0:	4618      	mov	r0, r3
  4082c2:	370c      	adds	r7, #12
  4082c4:	46bd      	mov	sp, r7
  4082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4082ca:	4770      	bx	lr
  4082cc:	007a1200 	.word	0x007a1200
  4082d0:	00f42400 	.word	0x00f42400
  4082d4:	016e3600 	.word	0x016e3600

004082d8 <sysclk_get_main_hz>:
  4082d8:	b580      	push	{r7, lr}
  4082da:	af00      	add	r7, sp, #0
  4082dc:	2001      	movs	r0, #1
  4082de:	4b04      	ldr	r3, [pc, #16]	; (4082f0 <sysclk_get_main_hz+0x18>)
  4082e0:	4798      	blx	r3
  4082e2:	4602      	mov	r2, r0
  4082e4:	f640 634e 	movw	r3, #3662	; 0xe4e
  4082e8:	fb03 f302 	mul.w	r3, r3, r2
  4082ec:	4618      	mov	r0, r3
  4082ee:	bd80      	pop	{r7, pc}
  4082f0:	00408265 	.word	0x00408265

004082f4 <sysclk_get_peripheral_hz>:
  4082f4:	b580      	push	{r7, lr}
  4082f6:	af00      	add	r7, sp, #0
  4082f8:	4b02      	ldr	r3, [pc, #8]	; (408304 <sysclk_get_peripheral_hz+0x10>)
  4082fa:	4798      	blx	r3
  4082fc:	4603      	mov	r3, r0
  4082fe:	4618      	mov	r0, r3
  408300:	bd80      	pop	{r7, pc}
  408302:	bf00      	nop
  408304:	004082d9 	.word	0x004082d9

00408308 <sysclk_enable_peripheral_clock>:
  408308:	b580      	push	{r7, lr}
  40830a:	b082      	sub	sp, #8
  40830c:	af00      	add	r7, sp, #0
  40830e:	6078      	str	r0, [r7, #4]
  408310:	6878      	ldr	r0, [r7, #4]
  408312:	4b03      	ldr	r3, [pc, #12]	; (408320 <sysclk_enable_peripheral_clock+0x18>)
  408314:	4798      	blx	r3
  408316:	bf00      	nop
  408318:	3708      	adds	r7, #8
  40831a:	46bd      	mov	sp, r7
  40831c:	bd80      	pop	{r7, pc}
  40831e:	bf00      	nop
  408320:	00404375 	.word	0x00404375

00408324 <ioport_disable_pin>:
  408324:	b480      	push	{r7}
  408326:	b089      	sub	sp, #36	; 0x24
  408328:	af00      	add	r7, sp, #0
  40832a:	6078      	str	r0, [r7, #4]
  40832c:	687b      	ldr	r3, [r7, #4]
  40832e:	61fb      	str	r3, [r7, #28]
  408330:	69fb      	ldr	r3, [r7, #28]
  408332:	61bb      	str	r3, [r7, #24]
  408334:	69bb      	ldr	r3, [r7, #24]
  408336:	095a      	lsrs	r2, r3, #5
  408338:	69fb      	ldr	r3, [r7, #28]
  40833a:	617b      	str	r3, [r7, #20]
  40833c:	697b      	ldr	r3, [r7, #20]
  40833e:	f003 031f 	and.w	r3, r3, #31
  408342:	2101      	movs	r1, #1
  408344:	fa01 f303 	lsl.w	r3, r1, r3
  408348:	613a      	str	r2, [r7, #16]
  40834a:	60fb      	str	r3, [r7, #12]
  40834c:	693b      	ldr	r3, [r7, #16]
  40834e:	60bb      	str	r3, [r7, #8]
  408350:	68bb      	ldr	r3, [r7, #8]
  408352:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  408356:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40835a:	025b      	lsls	r3, r3, #9
  40835c:	461a      	mov	r2, r3
  40835e:	68fb      	ldr	r3, [r7, #12]
  408360:	6053      	str	r3, [r2, #4]
  408362:	bf00      	nop
  408364:	3724      	adds	r7, #36	; 0x24
  408366:	46bd      	mov	sp, r7
  408368:	f85d 7b04 	ldr.w	r7, [sp], #4
  40836c:	4770      	bx	lr

0040836e <ioport_disable_port>:
  40836e:	b480      	push	{r7}
  408370:	b087      	sub	sp, #28
  408372:	af00      	add	r7, sp, #0
  408374:	6078      	str	r0, [r7, #4]
  408376:	6039      	str	r1, [r7, #0]
  408378:	687b      	ldr	r3, [r7, #4]
  40837a:	617b      	str	r3, [r7, #20]
  40837c:	683b      	ldr	r3, [r7, #0]
  40837e:	613b      	str	r3, [r7, #16]
  408380:	697b      	ldr	r3, [r7, #20]
  408382:	60fb      	str	r3, [r7, #12]
  408384:	68fb      	ldr	r3, [r7, #12]
  408386:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40838a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40838e:	025b      	lsls	r3, r3, #9
  408390:	461a      	mov	r2, r3
  408392:	693b      	ldr	r3, [r7, #16]
  408394:	6053      	str	r3, [r2, #4]
  408396:	bf00      	nop
  408398:	371c      	adds	r7, #28
  40839a:	46bd      	mov	sp, r7
  40839c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4083a0:	4770      	bx	lr

004083a2 <ioport_set_port_mode>:
  4083a2:	b480      	push	{r7}
  4083a4:	b08b      	sub	sp, #44	; 0x2c
  4083a6:	af00      	add	r7, sp, #0
  4083a8:	60f8      	str	r0, [r7, #12]
  4083aa:	60b9      	str	r1, [r7, #8]
  4083ac:	607a      	str	r2, [r7, #4]
  4083ae:	68fb      	ldr	r3, [r7, #12]
  4083b0:	627b      	str	r3, [r7, #36]	; 0x24
  4083b2:	68bb      	ldr	r3, [r7, #8]
  4083b4:	623b      	str	r3, [r7, #32]
  4083b6:	687b      	ldr	r3, [r7, #4]
  4083b8:	61fb      	str	r3, [r7, #28]
  4083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4083bc:	61bb      	str	r3, [r7, #24]
  4083be:	69bb      	ldr	r3, [r7, #24]
  4083c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4083c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4083c8:	025b      	lsls	r3, r3, #9
  4083ca:	617b      	str	r3, [r7, #20]
  4083cc:	69fb      	ldr	r3, [r7, #28]
  4083ce:	f003 0308 	and.w	r3, r3, #8
  4083d2:	2b00      	cmp	r3, #0
  4083d4:	d003      	beq.n	4083de <ioport_set_port_mode+0x3c>
  4083d6:	697b      	ldr	r3, [r7, #20]
  4083d8:	6a3a      	ldr	r2, [r7, #32]
  4083da:	665a      	str	r2, [r3, #100]	; 0x64
  4083dc:	e002      	b.n	4083e4 <ioport_set_port_mode+0x42>
  4083de:	697b      	ldr	r3, [r7, #20]
  4083e0:	6a3a      	ldr	r2, [r7, #32]
  4083e2:	661a      	str	r2, [r3, #96]	; 0x60
  4083e4:	69fb      	ldr	r3, [r7, #28]
  4083e6:	f003 0310 	and.w	r3, r3, #16
  4083ea:	2b00      	cmp	r3, #0
  4083ec:	d004      	beq.n	4083f8 <ioport_set_port_mode+0x56>
  4083ee:	697b      	ldr	r3, [r7, #20]
  4083f0:	6a3a      	ldr	r2, [r7, #32]
  4083f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4083f6:	e003      	b.n	408400 <ioport_set_port_mode+0x5e>
  4083f8:	697b      	ldr	r3, [r7, #20]
  4083fa:	6a3a      	ldr	r2, [r7, #32]
  4083fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  408400:	69fb      	ldr	r3, [r7, #28]
  408402:	f003 0320 	and.w	r3, r3, #32
  408406:	2b00      	cmp	r3, #0
  408408:	d003      	beq.n	408412 <ioport_set_port_mode+0x70>
  40840a:	697b      	ldr	r3, [r7, #20]
  40840c:	6a3a      	ldr	r2, [r7, #32]
  40840e:	651a      	str	r2, [r3, #80]	; 0x50
  408410:	e002      	b.n	408418 <ioport_set_port_mode+0x76>
  408412:	697b      	ldr	r3, [r7, #20]
  408414:	6a3a      	ldr	r2, [r7, #32]
  408416:	655a      	str	r2, [r3, #84]	; 0x54
  408418:	69fb      	ldr	r3, [r7, #28]
  40841a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40841e:	2b00      	cmp	r3, #0
  408420:	d003      	beq.n	40842a <ioport_set_port_mode+0x88>
  408422:	697b      	ldr	r3, [r7, #20]
  408424:	6a3a      	ldr	r2, [r7, #32]
  408426:	621a      	str	r2, [r3, #32]
  408428:	e002      	b.n	408430 <ioport_set_port_mode+0x8e>
  40842a:	697b      	ldr	r3, [r7, #20]
  40842c:	6a3a      	ldr	r2, [r7, #32]
  40842e:	625a      	str	r2, [r3, #36]	; 0x24
  408430:	69fb      	ldr	r3, [r7, #28]
  408432:	f003 0380 	and.w	r3, r3, #128	; 0x80
  408436:	2b00      	cmp	r3, #0
  408438:	d004      	beq.n	408444 <ioport_set_port_mode+0xa2>
  40843a:	697b      	ldr	r3, [r7, #20]
  40843c:	6a3a      	ldr	r2, [r7, #32]
  40843e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  408442:	e003      	b.n	40844c <ioport_set_port_mode+0xaa>
  408444:	697b      	ldr	r3, [r7, #20]
  408446:	6a3a      	ldr	r2, [r7, #32]
  408448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40844c:	69fb      	ldr	r3, [r7, #28]
  40844e:	f003 0301 	and.w	r3, r3, #1
  408452:	2b00      	cmp	r3, #0
  408454:	d006      	beq.n	408464 <ioport_set_port_mode+0xc2>
  408456:	697b      	ldr	r3, [r7, #20]
  408458:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40845a:	6a3b      	ldr	r3, [r7, #32]
  40845c:	431a      	orrs	r2, r3
  40845e:	697b      	ldr	r3, [r7, #20]
  408460:	671a      	str	r2, [r3, #112]	; 0x70
  408462:	e006      	b.n	408472 <ioport_set_port_mode+0xd0>
  408464:	697b      	ldr	r3, [r7, #20]
  408466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408468:	6a3b      	ldr	r3, [r7, #32]
  40846a:	43db      	mvns	r3, r3
  40846c:	401a      	ands	r2, r3
  40846e:	697b      	ldr	r3, [r7, #20]
  408470:	671a      	str	r2, [r3, #112]	; 0x70
  408472:	69fb      	ldr	r3, [r7, #28]
  408474:	f003 0302 	and.w	r3, r3, #2
  408478:	2b00      	cmp	r3, #0
  40847a:	d006      	beq.n	40848a <ioport_set_port_mode+0xe8>
  40847c:	697b      	ldr	r3, [r7, #20]
  40847e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408480:	6a3b      	ldr	r3, [r7, #32]
  408482:	431a      	orrs	r2, r3
  408484:	697b      	ldr	r3, [r7, #20]
  408486:	675a      	str	r2, [r3, #116]	; 0x74
  408488:	e006      	b.n	408498 <ioport_set_port_mode+0xf6>
  40848a:	697b      	ldr	r3, [r7, #20]
  40848c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40848e:	6a3b      	ldr	r3, [r7, #32]
  408490:	43db      	mvns	r3, r3
  408492:	401a      	ands	r2, r3
  408494:	697b      	ldr	r3, [r7, #20]
  408496:	675a      	str	r2, [r3, #116]	; 0x74
  408498:	bf00      	nop
  40849a:	372c      	adds	r7, #44	; 0x2c
  40849c:	46bd      	mov	sp, r7
  40849e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4084a2:	4770      	bx	lr

004084a4 <ioport_set_pin_mode>:
  4084a4:	b480      	push	{r7}
  4084a6:	b08d      	sub	sp, #52	; 0x34
  4084a8:	af00      	add	r7, sp, #0
  4084aa:	6078      	str	r0, [r7, #4]
  4084ac:	6039      	str	r1, [r7, #0]
  4084ae:	687b      	ldr	r3, [r7, #4]
  4084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4084b2:	683b      	ldr	r3, [r7, #0]
  4084b4:	62bb      	str	r3, [r7, #40]	; 0x28
  4084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4084b8:	627b      	str	r3, [r7, #36]	; 0x24
  4084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4084bc:	095a      	lsrs	r2, r3, #5
  4084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4084c0:	623b      	str	r3, [r7, #32]
  4084c2:	6a3b      	ldr	r3, [r7, #32]
  4084c4:	f003 031f 	and.w	r3, r3, #31
  4084c8:	2101      	movs	r1, #1
  4084ca:	fa01 f303 	lsl.w	r3, r1, r3
  4084ce:	61fa      	str	r2, [r7, #28]
  4084d0:	61bb      	str	r3, [r7, #24]
  4084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4084d4:	617b      	str	r3, [r7, #20]
  4084d6:	69fb      	ldr	r3, [r7, #28]
  4084d8:	613b      	str	r3, [r7, #16]
  4084da:	693b      	ldr	r3, [r7, #16]
  4084dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4084e0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4084e4:	025b      	lsls	r3, r3, #9
  4084e6:	60fb      	str	r3, [r7, #12]
  4084e8:	697b      	ldr	r3, [r7, #20]
  4084ea:	f003 0308 	and.w	r3, r3, #8
  4084ee:	2b00      	cmp	r3, #0
  4084f0:	d003      	beq.n	4084fa <ioport_set_pin_mode+0x56>
  4084f2:	68fb      	ldr	r3, [r7, #12]
  4084f4:	69ba      	ldr	r2, [r7, #24]
  4084f6:	665a      	str	r2, [r3, #100]	; 0x64
  4084f8:	e002      	b.n	408500 <ioport_set_pin_mode+0x5c>
  4084fa:	68fb      	ldr	r3, [r7, #12]
  4084fc:	69ba      	ldr	r2, [r7, #24]
  4084fe:	661a      	str	r2, [r3, #96]	; 0x60
  408500:	697b      	ldr	r3, [r7, #20]
  408502:	f003 0310 	and.w	r3, r3, #16
  408506:	2b00      	cmp	r3, #0
  408508:	d004      	beq.n	408514 <ioport_set_pin_mode+0x70>
  40850a:	68fb      	ldr	r3, [r7, #12]
  40850c:	69ba      	ldr	r2, [r7, #24]
  40850e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  408512:	e003      	b.n	40851c <ioport_set_pin_mode+0x78>
  408514:	68fb      	ldr	r3, [r7, #12]
  408516:	69ba      	ldr	r2, [r7, #24]
  408518:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  40851c:	697b      	ldr	r3, [r7, #20]
  40851e:	f003 0320 	and.w	r3, r3, #32
  408522:	2b00      	cmp	r3, #0
  408524:	d003      	beq.n	40852e <ioport_set_pin_mode+0x8a>
  408526:	68fb      	ldr	r3, [r7, #12]
  408528:	69ba      	ldr	r2, [r7, #24]
  40852a:	651a      	str	r2, [r3, #80]	; 0x50
  40852c:	e002      	b.n	408534 <ioport_set_pin_mode+0x90>
  40852e:	68fb      	ldr	r3, [r7, #12]
  408530:	69ba      	ldr	r2, [r7, #24]
  408532:	655a      	str	r2, [r3, #84]	; 0x54
  408534:	697b      	ldr	r3, [r7, #20]
  408536:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40853a:	2b00      	cmp	r3, #0
  40853c:	d003      	beq.n	408546 <ioport_set_pin_mode+0xa2>
  40853e:	68fb      	ldr	r3, [r7, #12]
  408540:	69ba      	ldr	r2, [r7, #24]
  408542:	621a      	str	r2, [r3, #32]
  408544:	e002      	b.n	40854c <ioport_set_pin_mode+0xa8>
  408546:	68fb      	ldr	r3, [r7, #12]
  408548:	69ba      	ldr	r2, [r7, #24]
  40854a:	625a      	str	r2, [r3, #36]	; 0x24
  40854c:	697b      	ldr	r3, [r7, #20]
  40854e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  408552:	2b00      	cmp	r3, #0
  408554:	d004      	beq.n	408560 <ioport_set_pin_mode+0xbc>
  408556:	68fb      	ldr	r3, [r7, #12]
  408558:	69ba      	ldr	r2, [r7, #24]
  40855a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40855e:	e003      	b.n	408568 <ioport_set_pin_mode+0xc4>
  408560:	68fb      	ldr	r3, [r7, #12]
  408562:	69ba      	ldr	r2, [r7, #24]
  408564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  408568:	697b      	ldr	r3, [r7, #20]
  40856a:	f003 0301 	and.w	r3, r3, #1
  40856e:	2b00      	cmp	r3, #0
  408570:	d006      	beq.n	408580 <ioport_set_pin_mode+0xdc>
  408572:	68fb      	ldr	r3, [r7, #12]
  408574:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408576:	69bb      	ldr	r3, [r7, #24]
  408578:	431a      	orrs	r2, r3
  40857a:	68fb      	ldr	r3, [r7, #12]
  40857c:	671a      	str	r2, [r3, #112]	; 0x70
  40857e:	e006      	b.n	40858e <ioport_set_pin_mode+0xea>
  408580:	68fb      	ldr	r3, [r7, #12]
  408582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408584:	69bb      	ldr	r3, [r7, #24]
  408586:	43db      	mvns	r3, r3
  408588:	401a      	ands	r2, r3
  40858a:	68fb      	ldr	r3, [r7, #12]
  40858c:	671a      	str	r2, [r3, #112]	; 0x70
  40858e:	697b      	ldr	r3, [r7, #20]
  408590:	f003 0302 	and.w	r3, r3, #2
  408594:	2b00      	cmp	r3, #0
  408596:	d006      	beq.n	4085a6 <ioport_set_pin_mode+0x102>
  408598:	68fb      	ldr	r3, [r7, #12]
  40859a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40859c:	69bb      	ldr	r3, [r7, #24]
  40859e:	431a      	orrs	r2, r3
  4085a0:	68fb      	ldr	r3, [r7, #12]
  4085a2:	675a      	str	r2, [r3, #116]	; 0x74
  4085a4:	e006      	b.n	4085b4 <ioport_set_pin_mode+0x110>
  4085a6:	68fb      	ldr	r3, [r7, #12]
  4085a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4085aa:	69bb      	ldr	r3, [r7, #24]
  4085ac:	43db      	mvns	r3, r3
  4085ae:	401a      	ands	r2, r3
  4085b0:	68fb      	ldr	r3, [r7, #12]
  4085b2:	675a      	str	r2, [r3, #116]	; 0x74
  4085b4:	bf00      	nop
  4085b6:	3734      	adds	r7, #52	; 0x34
  4085b8:	46bd      	mov	sp, r7
  4085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4085be:	4770      	bx	lr

004085c0 <usart_serial_init>:
  4085c0:	b580      	push	{r7, lr}
  4085c2:	b088      	sub	sp, #32
  4085c4:	af00      	add	r7, sp, #0
  4085c6:	6078      	str	r0, [r7, #4]
  4085c8:	6039      	str	r1, [r7, #0]
  4085ca:	683b      	ldr	r3, [r7, #0]
  4085cc:	681b      	ldr	r3, [r3, #0]
  4085ce:	60bb      	str	r3, [r7, #8]
  4085d0:	683b      	ldr	r3, [r7, #0]
  4085d2:	685b      	ldr	r3, [r3, #4]
  4085d4:	60fb      	str	r3, [r7, #12]
  4085d6:	683b      	ldr	r3, [r7, #0]
  4085d8:	689b      	ldr	r3, [r3, #8]
  4085da:	613b      	str	r3, [r7, #16]
  4085dc:	683b      	ldr	r3, [r7, #0]
  4085de:	68db      	ldr	r3, [r3, #12]
  4085e0:	617b      	str	r3, [r7, #20]
  4085e2:	2300      	movs	r3, #0
  4085e4:	61bb      	str	r3, [r7, #24]
  4085e6:	687b      	ldr	r3, [r7, #4]
  4085e8:	4a69      	ldr	r2, [pc, #420]	; (408790 <usart_serial_init+0x1d0>)
  4085ea:	4293      	cmp	r3, r2
  4085ec:	d115      	bne.n	40861a <usart_serial_init+0x5a>
  4085ee:	4869      	ldr	r0, [pc, #420]	; (408794 <usart_serial_init+0x1d4>)
  4085f0:	4b69      	ldr	r3, [pc, #420]	; (408798 <usart_serial_init+0x1d8>)
  4085f2:	4798      	blx	r3
  4085f4:	2101      	movs	r1, #1
  4085f6:	4867      	ldr	r0, [pc, #412]	; (408794 <usart_serial_init+0x1d4>)
  4085f8:	4b68      	ldr	r3, [pc, #416]	; (40879c <usart_serial_init+0x1dc>)
  4085fa:	4798      	blx	r3
  4085fc:	4b68      	ldr	r3, [pc, #416]	; (4087a0 <usart_serial_init+0x1e0>)
  4085fe:	4798      	blx	r3
  408600:	4602      	mov	r2, r0
  408602:	f107 0308 	add.w	r3, r7, #8
  408606:	4619      	mov	r1, r3
  408608:	6878      	ldr	r0, [r7, #4]
  40860a:	4b66      	ldr	r3, [pc, #408]	; (4087a4 <usart_serial_init+0x1e4>)
  40860c:	4798      	blx	r3
  40860e:	6878      	ldr	r0, [r7, #4]
  408610:	4b65      	ldr	r3, [pc, #404]	; (4087a8 <usart_serial_init+0x1e8>)
  408612:	4798      	blx	r3
  408614:	6878      	ldr	r0, [r7, #4]
  408616:	4b65      	ldr	r3, [pc, #404]	; (4087ac <usart_serial_init+0x1ec>)
  408618:	4798      	blx	r3
  40861a:	687b      	ldr	r3, [r7, #4]
  40861c:	4a64      	ldr	r2, [pc, #400]	; (4087b0 <usart_serial_init+0x1f0>)
  40861e:	4293      	cmp	r3, r2
  408620:	d115      	bne.n	40864e <usart_serial_init+0x8e>
  408622:	4864      	ldr	r0, [pc, #400]	; (4087b4 <usart_serial_init+0x1f4>)
  408624:	4b5c      	ldr	r3, [pc, #368]	; (408798 <usart_serial_init+0x1d8>)
  408626:	4798      	blx	r3
  408628:	2101      	movs	r1, #1
  40862a:	4862      	ldr	r0, [pc, #392]	; (4087b4 <usart_serial_init+0x1f4>)
  40862c:	4b5b      	ldr	r3, [pc, #364]	; (40879c <usart_serial_init+0x1dc>)
  40862e:	4798      	blx	r3
  408630:	4b5b      	ldr	r3, [pc, #364]	; (4087a0 <usart_serial_init+0x1e0>)
  408632:	4798      	blx	r3
  408634:	4602      	mov	r2, r0
  408636:	f107 0308 	add.w	r3, r7, #8
  40863a:	4619      	mov	r1, r3
  40863c:	6878      	ldr	r0, [r7, #4]
  40863e:	4b59      	ldr	r3, [pc, #356]	; (4087a4 <usart_serial_init+0x1e4>)
  408640:	4798      	blx	r3
  408642:	6878      	ldr	r0, [r7, #4]
  408644:	4b58      	ldr	r3, [pc, #352]	; (4087a8 <usart_serial_init+0x1e8>)
  408646:	4798      	blx	r3
  408648:	6878      	ldr	r0, [r7, #4]
  40864a:	4b58      	ldr	r3, [pc, #352]	; (4087ac <usart_serial_init+0x1ec>)
  40864c:	4798      	blx	r3
  40864e:	687b      	ldr	r3, [r7, #4]
  408650:	4a59      	ldr	r2, [pc, #356]	; (4087b8 <usart_serial_init+0x1f8>)
  408652:	4293      	cmp	r3, r2
  408654:	d115      	bne.n	408682 <usart_serial_init+0xc2>
  408656:	4859      	ldr	r0, [pc, #356]	; (4087bc <usart_serial_init+0x1fc>)
  408658:	4b4f      	ldr	r3, [pc, #316]	; (408798 <usart_serial_init+0x1d8>)
  40865a:	4798      	blx	r3
  40865c:	2101      	movs	r1, #1
  40865e:	4857      	ldr	r0, [pc, #348]	; (4087bc <usart_serial_init+0x1fc>)
  408660:	4b4e      	ldr	r3, [pc, #312]	; (40879c <usart_serial_init+0x1dc>)
  408662:	4798      	blx	r3
  408664:	4b4e      	ldr	r3, [pc, #312]	; (4087a0 <usart_serial_init+0x1e0>)
  408666:	4798      	blx	r3
  408668:	4602      	mov	r2, r0
  40866a:	f107 0308 	add.w	r3, r7, #8
  40866e:	4619      	mov	r1, r3
  408670:	6878      	ldr	r0, [r7, #4]
  408672:	4b4c      	ldr	r3, [pc, #304]	; (4087a4 <usart_serial_init+0x1e4>)
  408674:	4798      	blx	r3
  408676:	6878      	ldr	r0, [r7, #4]
  408678:	4b4b      	ldr	r3, [pc, #300]	; (4087a8 <usart_serial_init+0x1e8>)
  40867a:	4798      	blx	r3
  40867c:	6878      	ldr	r0, [r7, #4]
  40867e:	4b4b      	ldr	r3, [pc, #300]	; (4087ac <usart_serial_init+0x1ec>)
  408680:	4798      	blx	r3
  408682:	687b      	ldr	r3, [r7, #4]
  408684:	4a4e      	ldr	r2, [pc, #312]	; (4087c0 <usart_serial_init+0x200>)
  408686:	4293      	cmp	r3, r2
  408688:	d115      	bne.n	4086b6 <usart_serial_init+0xf6>
  40868a:	484e      	ldr	r0, [pc, #312]	; (4087c4 <usart_serial_init+0x204>)
  40868c:	4b42      	ldr	r3, [pc, #264]	; (408798 <usart_serial_init+0x1d8>)
  40868e:	4798      	blx	r3
  408690:	2101      	movs	r1, #1
  408692:	484c      	ldr	r0, [pc, #304]	; (4087c4 <usart_serial_init+0x204>)
  408694:	4b41      	ldr	r3, [pc, #260]	; (40879c <usart_serial_init+0x1dc>)
  408696:	4798      	blx	r3
  408698:	4b41      	ldr	r3, [pc, #260]	; (4087a0 <usart_serial_init+0x1e0>)
  40869a:	4798      	blx	r3
  40869c:	4602      	mov	r2, r0
  40869e:	f107 0308 	add.w	r3, r7, #8
  4086a2:	4619      	mov	r1, r3
  4086a4:	6878      	ldr	r0, [r7, #4]
  4086a6:	4b3f      	ldr	r3, [pc, #252]	; (4087a4 <usart_serial_init+0x1e4>)
  4086a8:	4798      	blx	r3
  4086aa:	6878      	ldr	r0, [r7, #4]
  4086ac:	4b3e      	ldr	r3, [pc, #248]	; (4087a8 <usart_serial_init+0x1e8>)
  4086ae:	4798      	blx	r3
  4086b0:	6878      	ldr	r0, [r7, #4]
  4086b2:	4b3e      	ldr	r3, [pc, #248]	; (4087ac <usart_serial_init+0x1ec>)
  4086b4:	4798      	blx	r3
  4086b6:	687b      	ldr	r3, [r7, #4]
  4086b8:	4a43      	ldr	r2, [pc, #268]	; (4087c8 <usart_serial_init+0x208>)
  4086ba:	4293      	cmp	r3, r2
  4086bc:	d115      	bne.n	4086ea <usart_serial_init+0x12a>
  4086be:	4843      	ldr	r0, [pc, #268]	; (4087cc <usart_serial_init+0x20c>)
  4086c0:	4b35      	ldr	r3, [pc, #212]	; (408798 <usart_serial_init+0x1d8>)
  4086c2:	4798      	blx	r3
  4086c4:	2101      	movs	r1, #1
  4086c6:	4841      	ldr	r0, [pc, #260]	; (4087cc <usart_serial_init+0x20c>)
  4086c8:	4b34      	ldr	r3, [pc, #208]	; (40879c <usart_serial_init+0x1dc>)
  4086ca:	4798      	blx	r3
  4086cc:	4b34      	ldr	r3, [pc, #208]	; (4087a0 <usart_serial_init+0x1e0>)
  4086ce:	4798      	blx	r3
  4086d0:	4602      	mov	r2, r0
  4086d2:	f107 0308 	add.w	r3, r7, #8
  4086d6:	4619      	mov	r1, r3
  4086d8:	6878      	ldr	r0, [r7, #4]
  4086da:	4b32      	ldr	r3, [pc, #200]	; (4087a4 <usart_serial_init+0x1e4>)
  4086dc:	4798      	blx	r3
  4086de:	6878      	ldr	r0, [r7, #4]
  4086e0:	4b31      	ldr	r3, [pc, #196]	; (4087a8 <usart_serial_init+0x1e8>)
  4086e2:	4798      	blx	r3
  4086e4:	6878      	ldr	r0, [r7, #4]
  4086e6:	4b31      	ldr	r3, [pc, #196]	; (4087ac <usart_serial_init+0x1ec>)
  4086e8:	4798      	blx	r3
  4086ea:	687b      	ldr	r3, [r7, #4]
  4086ec:	4a38      	ldr	r2, [pc, #224]	; (4087d0 <usart_serial_init+0x210>)
  4086ee:	4293      	cmp	r3, r2
  4086f0:	d115      	bne.n	40871e <usart_serial_init+0x15e>
  4086f2:	4838      	ldr	r0, [pc, #224]	; (4087d4 <usart_serial_init+0x214>)
  4086f4:	4b28      	ldr	r3, [pc, #160]	; (408798 <usart_serial_init+0x1d8>)
  4086f6:	4798      	blx	r3
  4086f8:	2101      	movs	r1, #1
  4086fa:	4836      	ldr	r0, [pc, #216]	; (4087d4 <usart_serial_init+0x214>)
  4086fc:	4b27      	ldr	r3, [pc, #156]	; (40879c <usart_serial_init+0x1dc>)
  4086fe:	4798      	blx	r3
  408700:	4b27      	ldr	r3, [pc, #156]	; (4087a0 <usart_serial_init+0x1e0>)
  408702:	4798      	blx	r3
  408704:	4602      	mov	r2, r0
  408706:	f107 0308 	add.w	r3, r7, #8
  40870a:	4619      	mov	r1, r3
  40870c:	6878      	ldr	r0, [r7, #4]
  40870e:	4b25      	ldr	r3, [pc, #148]	; (4087a4 <usart_serial_init+0x1e4>)
  408710:	4798      	blx	r3
  408712:	6878      	ldr	r0, [r7, #4]
  408714:	4b24      	ldr	r3, [pc, #144]	; (4087a8 <usart_serial_init+0x1e8>)
  408716:	4798      	blx	r3
  408718:	6878      	ldr	r0, [r7, #4]
  40871a:	4b24      	ldr	r3, [pc, #144]	; (4087ac <usart_serial_init+0x1ec>)
  40871c:	4798      	blx	r3
  40871e:	687b      	ldr	r3, [r7, #4]
  408720:	4a2d      	ldr	r2, [pc, #180]	; (4087d8 <usart_serial_init+0x218>)
  408722:	4293      	cmp	r3, r2
  408724:	d115      	bne.n	408752 <usart_serial_init+0x192>
  408726:	482d      	ldr	r0, [pc, #180]	; (4087dc <usart_serial_init+0x21c>)
  408728:	4b1b      	ldr	r3, [pc, #108]	; (408798 <usart_serial_init+0x1d8>)
  40872a:	4798      	blx	r3
  40872c:	2101      	movs	r1, #1
  40872e:	482b      	ldr	r0, [pc, #172]	; (4087dc <usart_serial_init+0x21c>)
  408730:	4b1a      	ldr	r3, [pc, #104]	; (40879c <usart_serial_init+0x1dc>)
  408732:	4798      	blx	r3
  408734:	4b1a      	ldr	r3, [pc, #104]	; (4087a0 <usart_serial_init+0x1e0>)
  408736:	4798      	blx	r3
  408738:	4602      	mov	r2, r0
  40873a:	f107 0308 	add.w	r3, r7, #8
  40873e:	4619      	mov	r1, r3
  408740:	6878      	ldr	r0, [r7, #4]
  408742:	4b18      	ldr	r3, [pc, #96]	; (4087a4 <usart_serial_init+0x1e4>)
  408744:	4798      	blx	r3
  408746:	6878      	ldr	r0, [r7, #4]
  408748:	4b17      	ldr	r3, [pc, #92]	; (4087a8 <usart_serial_init+0x1e8>)
  40874a:	4798      	blx	r3
  40874c:	6878      	ldr	r0, [r7, #4]
  40874e:	4b17      	ldr	r3, [pc, #92]	; (4087ac <usart_serial_init+0x1ec>)
  408750:	4798      	blx	r3
  408752:	687b      	ldr	r3, [r7, #4]
  408754:	4a22      	ldr	r2, [pc, #136]	; (4087e0 <usart_serial_init+0x220>)
  408756:	4293      	cmp	r3, r2
  408758:	d115      	bne.n	408786 <usart_serial_init+0x1c6>
  40875a:	4822      	ldr	r0, [pc, #136]	; (4087e4 <usart_serial_init+0x224>)
  40875c:	4b0e      	ldr	r3, [pc, #56]	; (408798 <usart_serial_init+0x1d8>)
  40875e:	4798      	blx	r3
  408760:	2101      	movs	r1, #1
  408762:	4820      	ldr	r0, [pc, #128]	; (4087e4 <usart_serial_init+0x224>)
  408764:	4b0d      	ldr	r3, [pc, #52]	; (40879c <usart_serial_init+0x1dc>)
  408766:	4798      	blx	r3
  408768:	4b0d      	ldr	r3, [pc, #52]	; (4087a0 <usart_serial_init+0x1e0>)
  40876a:	4798      	blx	r3
  40876c:	4602      	mov	r2, r0
  40876e:	f107 0308 	add.w	r3, r7, #8
  408772:	4619      	mov	r1, r3
  408774:	6878      	ldr	r0, [r7, #4]
  408776:	4b0b      	ldr	r3, [pc, #44]	; (4087a4 <usart_serial_init+0x1e4>)
  408778:	4798      	blx	r3
  40877a:	6878      	ldr	r0, [r7, #4]
  40877c:	4b0a      	ldr	r3, [pc, #40]	; (4087a8 <usart_serial_init+0x1e8>)
  40877e:	4798      	blx	r3
  408780:	6878      	ldr	r0, [r7, #4]
  408782:	4b0a      	ldr	r3, [pc, #40]	; (4087ac <usart_serial_init+0x1ec>)
  408784:	4798      	blx	r3
  408786:	bf00      	nop
  408788:	3720      	adds	r7, #32
  40878a:	46bd      	mov	sp, r7
  40878c:	bd80      	pop	{r7, pc}
  40878e:	bf00      	nop
  408790:	4000c200 	.word	0x4000c200
  408794:	4000c000 	.word	0x4000c000
  408798:	00403841 	.word	0x00403841
  40879c:	004039a9 	.word	0x004039a9
  4087a0:	004082f5 	.word	0x004082f5
  4087a4:	00404ffd 	.word	0x00404ffd
  4087a8:	00405081 	.word	0x00405081
  4087ac:	004050b5 	.word	0x004050b5
  4087b0:	40020200 	.word	0x40020200
  4087b4:	40020000 	.word	0x40020000
  4087b8:	40024200 	.word	0x40024200
  4087bc:	40024000 	.word	0x40024000
  4087c0:	40018200 	.word	0x40018200
  4087c4:	40018000 	.word	0x40018000
  4087c8:	4001c200 	.word	0x4001c200
  4087cc:	4001c000 	.word	0x4001c000
  4087d0:	40008200 	.word	0x40008200
  4087d4:	40008000 	.word	0x40008000
  4087d8:	40040200 	.word	0x40040200
  4087dc:	40040000 	.word	0x40040000
  4087e0:	40034200 	.word	0x40034200
  4087e4:	40034000 	.word	0x40034000

004087e8 <usart_serial_putchar>:
  4087e8:	b580      	push	{r7, lr}
  4087ea:	b082      	sub	sp, #8
  4087ec:	af00      	add	r7, sp, #0
  4087ee:	6078      	str	r0, [r7, #4]
  4087f0:	460b      	mov	r3, r1
  4087f2:	70fb      	strb	r3, [r7, #3]
  4087f4:	687b      	ldr	r3, [r7, #4]
  4087f6:	4a3e      	ldr	r2, [pc, #248]	; (4088f0 <usart_serial_putchar+0x108>)
  4087f8:	4293      	cmp	r3, r2
  4087fa:	d10a      	bne.n	408812 <usart_serial_putchar+0x2a>
  4087fc:	bf00      	nop
  4087fe:	78fb      	ldrb	r3, [r7, #3]
  408800:	4619      	mov	r1, r3
  408802:	6878      	ldr	r0, [r7, #4]
  408804:	4b3b      	ldr	r3, [pc, #236]	; (4088f4 <usart_serial_putchar+0x10c>)
  408806:	4798      	blx	r3
  408808:	4603      	mov	r3, r0
  40880a:	2b00      	cmp	r3, #0
  40880c:	d1f7      	bne.n	4087fe <usart_serial_putchar+0x16>
  40880e:	2301      	movs	r3, #1
  408810:	e069      	b.n	4088e6 <usart_serial_putchar+0xfe>
  408812:	687b      	ldr	r3, [r7, #4]
  408814:	4a38      	ldr	r2, [pc, #224]	; (4088f8 <usart_serial_putchar+0x110>)
  408816:	4293      	cmp	r3, r2
  408818:	d10a      	bne.n	408830 <usart_serial_putchar+0x48>
  40881a:	bf00      	nop
  40881c:	78fb      	ldrb	r3, [r7, #3]
  40881e:	4619      	mov	r1, r3
  408820:	6878      	ldr	r0, [r7, #4]
  408822:	4b34      	ldr	r3, [pc, #208]	; (4088f4 <usart_serial_putchar+0x10c>)
  408824:	4798      	blx	r3
  408826:	4603      	mov	r3, r0
  408828:	2b00      	cmp	r3, #0
  40882a:	d1f7      	bne.n	40881c <usart_serial_putchar+0x34>
  40882c:	2301      	movs	r3, #1
  40882e:	e05a      	b.n	4088e6 <usart_serial_putchar+0xfe>
  408830:	687b      	ldr	r3, [r7, #4]
  408832:	4a32      	ldr	r2, [pc, #200]	; (4088fc <usart_serial_putchar+0x114>)
  408834:	4293      	cmp	r3, r2
  408836:	d10a      	bne.n	40884e <usart_serial_putchar+0x66>
  408838:	bf00      	nop
  40883a:	78fb      	ldrb	r3, [r7, #3]
  40883c:	4619      	mov	r1, r3
  40883e:	6878      	ldr	r0, [r7, #4]
  408840:	4b2c      	ldr	r3, [pc, #176]	; (4088f4 <usart_serial_putchar+0x10c>)
  408842:	4798      	blx	r3
  408844:	4603      	mov	r3, r0
  408846:	2b00      	cmp	r3, #0
  408848:	d1f7      	bne.n	40883a <usart_serial_putchar+0x52>
  40884a:	2301      	movs	r3, #1
  40884c:	e04b      	b.n	4088e6 <usart_serial_putchar+0xfe>
  40884e:	687b      	ldr	r3, [r7, #4]
  408850:	4a2b      	ldr	r2, [pc, #172]	; (408900 <usart_serial_putchar+0x118>)
  408852:	4293      	cmp	r3, r2
  408854:	d10a      	bne.n	40886c <usart_serial_putchar+0x84>
  408856:	bf00      	nop
  408858:	78fb      	ldrb	r3, [r7, #3]
  40885a:	4619      	mov	r1, r3
  40885c:	6878      	ldr	r0, [r7, #4]
  40885e:	4b25      	ldr	r3, [pc, #148]	; (4088f4 <usart_serial_putchar+0x10c>)
  408860:	4798      	blx	r3
  408862:	4603      	mov	r3, r0
  408864:	2b00      	cmp	r3, #0
  408866:	d1f7      	bne.n	408858 <usart_serial_putchar+0x70>
  408868:	2301      	movs	r3, #1
  40886a:	e03c      	b.n	4088e6 <usart_serial_putchar+0xfe>
  40886c:	687b      	ldr	r3, [r7, #4]
  40886e:	4a25      	ldr	r2, [pc, #148]	; (408904 <usart_serial_putchar+0x11c>)
  408870:	4293      	cmp	r3, r2
  408872:	d10a      	bne.n	40888a <usart_serial_putchar+0xa2>
  408874:	bf00      	nop
  408876:	78fb      	ldrb	r3, [r7, #3]
  408878:	4619      	mov	r1, r3
  40887a:	6878      	ldr	r0, [r7, #4]
  40887c:	4b1d      	ldr	r3, [pc, #116]	; (4088f4 <usart_serial_putchar+0x10c>)
  40887e:	4798      	blx	r3
  408880:	4603      	mov	r3, r0
  408882:	2b00      	cmp	r3, #0
  408884:	d1f7      	bne.n	408876 <usart_serial_putchar+0x8e>
  408886:	2301      	movs	r3, #1
  408888:	e02d      	b.n	4088e6 <usart_serial_putchar+0xfe>
  40888a:	687b      	ldr	r3, [r7, #4]
  40888c:	4a1e      	ldr	r2, [pc, #120]	; (408908 <usart_serial_putchar+0x120>)
  40888e:	4293      	cmp	r3, r2
  408890:	d10a      	bne.n	4088a8 <usart_serial_putchar+0xc0>
  408892:	bf00      	nop
  408894:	78fb      	ldrb	r3, [r7, #3]
  408896:	4619      	mov	r1, r3
  408898:	6878      	ldr	r0, [r7, #4]
  40889a:	4b16      	ldr	r3, [pc, #88]	; (4088f4 <usart_serial_putchar+0x10c>)
  40889c:	4798      	blx	r3
  40889e:	4603      	mov	r3, r0
  4088a0:	2b00      	cmp	r3, #0
  4088a2:	d1f7      	bne.n	408894 <usart_serial_putchar+0xac>
  4088a4:	2301      	movs	r3, #1
  4088a6:	e01e      	b.n	4088e6 <usart_serial_putchar+0xfe>
  4088a8:	687b      	ldr	r3, [r7, #4]
  4088aa:	4a18      	ldr	r2, [pc, #96]	; (40890c <usart_serial_putchar+0x124>)
  4088ac:	4293      	cmp	r3, r2
  4088ae:	d10a      	bne.n	4088c6 <usart_serial_putchar+0xde>
  4088b0:	bf00      	nop
  4088b2:	78fb      	ldrb	r3, [r7, #3]
  4088b4:	4619      	mov	r1, r3
  4088b6:	6878      	ldr	r0, [r7, #4]
  4088b8:	4b0e      	ldr	r3, [pc, #56]	; (4088f4 <usart_serial_putchar+0x10c>)
  4088ba:	4798      	blx	r3
  4088bc:	4603      	mov	r3, r0
  4088be:	2b00      	cmp	r3, #0
  4088c0:	d1f7      	bne.n	4088b2 <usart_serial_putchar+0xca>
  4088c2:	2301      	movs	r3, #1
  4088c4:	e00f      	b.n	4088e6 <usart_serial_putchar+0xfe>
  4088c6:	687b      	ldr	r3, [r7, #4]
  4088c8:	4a11      	ldr	r2, [pc, #68]	; (408910 <usart_serial_putchar+0x128>)
  4088ca:	4293      	cmp	r3, r2
  4088cc:	d10a      	bne.n	4088e4 <usart_serial_putchar+0xfc>
  4088ce:	bf00      	nop
  4088d0:	78fb      	ldrb	r3, [r7, #3]
  4088d2:	4619      	mov	r1, r3
  4088d4:	6878      	ldr	r0, [r7, #4]
  4088d6:	4b07      	ldr	r3, [pc, #28]	; (4088f4 <usart_serial_putchar+0x10c>)
  4088d8:	4798      	blx	r3
  4088da:	4603      	mov	r3, r0
  4088dc:	2b00      	cmp	r3, #0
  4088de:	d1f7      	bne.n	4088d0 <usart_serial_putchar+0xe8>
  4088e0:	2301      	movs	r3, #1
  4088e2:	e000      	b.n	4088e6 <usart_serial_putchar+0xfe>
  4088e4:	2300      	movs	r3, #0
  4088e6:	4618      	mov	r0, r3
  4088e8:	3708      	adds	r7, #8
  4088ea:	46bd      	mov	sp, r7
  4088ec:	bd80      	pop	{r7, pc}
  4088ee:	bf00      	nop
  4088f0:	4000c200 	.word	0x4000c200
  4088f4:	00405121 	.word	0x00405121
  4088f8:	40020200 	.word	0x40020200
  4088fc:	40024200 	.word	0x40024200
  408900:	40018200 	.word	0x40018200
  408904:	4001c200 	.word	0x4001c200
  408908:	40008200 	.word	0x40008200
  40890c:	40040200 	.word	0x40040200
  408910:	40034200 	.word	0x40034200

00408914 <usart_serial_getchar>:
  408914:	b580      	push	{r7, lr}
  408916:	b084      	sub	sp, #16
  408918:	af00      	add	r7, sp, #0
  40891a:	6078      	str	r0, [r7, #4]
  40891c:	6039      	str	r1, [r7, #0]
  40891e:	2300      	movs	r3, #0
  408920:	60fb      	str	r3, [r7, #12]
  408922:	687b      	ldr	r3, [r7, #4]
  408924:	4a49      	ldr	r2, [pc, #292]	; (408a4c <usart_serial_getchar+0x138>)
  408926:	4293      	cmp	r3, r2
  408928:	d10d      	bne.n	408946 <usart_serial_getchar+0x32>
  40892a:	bf00      	nop
  40892c:	f107 030c 	add.w	r3, r7, #12
  408930:	4619      	mov	r1, r3
  408932:	6878      	ldr	r0, [r7, #4]
  408934:	4b46      	ldr	r3, [pc, #280]	; (408a50 <usart_serial_getchar+0x13c>)
  408936:	4798      	blx	r3
  408938:	4603      	mov	r3, r0
  40893a:	2b00      	cmp	r3, #0
  40893c:	d1f6      	bne.n	40892c <usart_serial_getchar+0x18>
  40893e:	68fb      	ldr	r3, [r7, #12]
  408940:	b2da      	uxtb	r2, r3
  408942:	683b      	ldr	r3, [r7, #0]
  408944:	701a      	strb	r2, [r3, #0]
  408946:	687b      	ldr	r3, [r7, #4]
  408948:	4a42      	ldr	r2, [pc, #264]	; (408a54 <usart_serial_getchar+0x140>)
  40894a:	4293      	cmp	r3, r2
  40894c:	d10d      	bne.n	40896a <usart_serial_getchar+0x56>
  40894e:	bf00      	nop
  408950:	f107 030c 	add.w	r3, r7, #12
  408954:	4619      	mov	r1, r3
  408956:	6878      	ldr	r0, [r7, #4]
  408958:	4b3d      	ldr	r3, [pc, #244]	; (408a50 <usart_serial_getchar+0x13c>)
  40895a:	4798      	blx	r3
  40895c:	4603      	mov	r3, r0
  40895e:	2b00      	cmp	r3, #0
  408960:	d1f6      	bne.n	408950 <usart_serial_getchar+0x3c>
  408962:	68fb      	ldr	r3, [r7, #12]
  408964:	b2da      	uxtb	r2, r3
  408966:	683b      	ldr	r3, [r7, #0]
  408968:	701a      	strb	r2, [r3, #0]
  40896a:	687b      	ldr	r3, [r7, #4]
  40896c:	4a3a      	ldr	r2, [pc, #232]	; (408a58 <usart_serial_getchar+0x144>)
  40896e:	4293      	cmp	r3, r2
  408970:	d10d      	bne.n	40898e <usart_serial_getchar+0x7a>
  408972:	bf00      	nop
  408974:	f107 030c 	add.w	r3, r7, #12
  408978:	4619      	mov	r1, r3
  40897a:	6878      	ldr	r0, [r7, #4]
  40897c:	4b34      	ldr	r3, [pc, #208]	; (408a50 <usart_serial_getchar+0x13c>)
  40897e:	4798      	blx	r3
  408980:	4603      	mov	r3, r0
  408982:	2b00      	cmp	r3, #0
  408984:	d1f6      	bne.n	408974 <usart_serial_getchar+0x60>
  408986:	68fb      	ldr	r3, [r7, #12]
  408988:	b2da      	uxtb	r2, r3
  40898a:	683b      	ldr	r3, [r7, #0]
  40898c:	701a      	strb	r2, [r3, #0]
  40898e:	687b      	ldr	r3, [r7, #4]
  408990:	4a32      	ldr	r2, [pc, #200]	; (408a5c <usart_serial_getchar+0x148>)
  408992:	4293      	cmp	r3, r2
  408994:	d10d      	bne.n	4089b2 <usart_serial_getchar+0x9e>
  408996:	bf00      	nop
  408998:	f107 030c 	add.w	r3, r7, #12
  40899c:	4619      	mov	r1, r3
  40899e:	6878      	ldr	r0, [r7, #4]
  4089a0:	4b2b      	ldr	r3, [pc, #172]	; (408a50 <usart_serial_getchar+0x13c>)
  4089a2:	4798      	blx	r3
  4089a4:	4603      	mov	r3, r0
  4089a6:	2b00      	cmp	r3, #0
  4089a8:	d1f6      	bne.n	408998 <usart_serial_getchar+0x84>
  4089aa:	68fb      	ldr	r3, [r7, #12]
  4089ac:	b2da      	uxtb	r2, r3
  4089ae:	683b      	ldr	r3, [r7, #0]
  4089b0:	701a      	strb	r2, [r3, #0]
  4089b2:	687b      	ldr	r3, [r7, #4]
  4089b4:	4a2a      	ldr	r2, [pc, #168]	; (408a60 <usart_serial_getchar+0x14c>)
  4089b6:	4293      	cmp	r3, r2
  4089b8:	d10d      	bne.n	4089d6 <usart_serial_getchar+0xc2>
  4089ba:	bf00      	nop
  4089bc:	f107 030c 	add.w	r3, r7, #12
  4089c0:	4619      	mov	r1, r3
  4089c2:	6878      	ldr	r0, [r7, #4]
  4089c4:	4b22      	ldr	r3, [pc, #136]	; (408a50 <usart_serial_getchar+0x13c>)
  4089c6:	4798      	blx	r3
  4089c8:	4603      	mov	r3, r0
  4089ca:	2b00      	cmp	r3, #0
  4089cc:	d1f6      	bne.n	4089bc <usart_serial_getchar+0xa8>
  4089ce:	68fb      	ldr	r3, [r7, #12]
  4089d0:	b2da      	uxtb	r2, r3
  4089d2:	683b      	ldr	r3, [r7, #0]
  4089d4:	701a      	strb	r2, [r3, #0]
  4089d6:	687b      	ldr	r3, [r7, #4]
  4089d8:	4a22      	ldr	r2, [pc, #136]	; (408a64 <usart_serial_getchar+0x150>)
  4089da:	4293      	cmp	r3, r2
  4089dc:	d10d      	bne.n	4089fa <usart_serial_getchar+0xe6>
  4089de:	bf00      	nop
  4089e0:	f107 030c 	add.w	r3, r7, #12
  4089e4:	4619      	mov	r1, r3
  4089e6:	6878      	ldr	r0, [r7, #4]
  4089e8:	4b19      	ldr	r3, [pc, #100]	; (408a50 <usart_serial_getchar+0x13c>)
  4089ea:	4798      	blx	r3
  4089ec:	4603      	mov	r3, r0
  4089ee:	2b00      	cmp	r3, #0
  4089f0:	d1f6      	bne.n	4089e0 <usart_serial_getchar+0xcc>
  4089f2:	68fb      	ldr	r3, [r7, #12]
  4089f4:	b2da      	uxtb	r2, r3
  4089f6:	683b      	ldr	r3, [r7, #0]
  4089f8:	701a      	strb	r2, [r3, #0]
  4089fa:	687b      	ldr	r3, [r7, #4]
  4089fc:	4a1a      	ldr	r2, [pc, #104]	; (408a68 <usart_serial_getchar+0x154>)
  4089fe:	4293      	cmp	r3, r2
  408a00:	d10d      	bne.n	408a1e <usart_serial_getchar+0x10a>
  408a02:	bf00      	nop
  408a04:	f107 030c 	add.w	r3, r7, #12
  408a08:	4619      	mov	r1, r3
  408a0a:	6878      	ldr	r0, [r7, #4]
  408a0c:	4b10      	ldr	r3, [pc, #64]	; (408a50 <usart_serial_getchar+0x13c>)
  408a0e:	4798      	blx	r3
  408a10:	4603      	mov	r3, r0
  408a12:	2b00      	cmp	r3, #0
  408a14:	d1f6      	bne.n	408a04 <usart_serial_getchar+0xf0>
  408a16:	68fb      	ldr	r3, [r7, #12]
  408a18:	b2da      	uxtb	r2, r3
  408a1a:	683b      	ldr	r3, [r7, #0]
  408a1c:	701a      	strb	r2, [r3, #0]
  408a1e:	687b      	ldr	r3, [r7, #4]
  408a20:	4a12      	ldr	r2, [pc, #72]	; (408a6c <usart_serial_getchar+0x158>)
  408a22:	4293      	cmp	r3, r2
  408a24:	d10d      	bne.n	408a42 <usart_serial_getchar+0x12e>
  408a26:	bf00      	nop
  408a28:	f107 030c 	add.w	r3, r7, #12
  408a2c:	4619      	mov	r1, r3
  408a2e:	6878      	ldr	r0, [r7, #4]
  408a30:	4b07      	ldr	r3, [pc, #28]	; (408a50 <usart_serial_getchar+0x13c>)
  408a32:	4798      	blx	r3
  408a34:	4603      	mov	r3, r0
  408a36:	2b00      	cmp	r3, #0
  408a38:	d1f6      	bne.n	408a28 <usart_serial_getchar+0x114>
  408a3a:	68fb      	ldr	r3, [r7, #12]
  408a3c:	b2da      	uxtb	r2, r3
  408a3e:	683b      	ldr	r3, [r7, #0]
  408a40:	701a      	strb	r2, [r3, #0]
  408a42:	bf00      	nop
  408a44:	3710      	adds	r7, #16
  408a46:	46bd      	mov	sp, r7
  408a48:	bd80      	pop	{r7, pc}
  408a4a:	bf00      	nop
  408a4c:	4000c200 	.word	0x4000c200
  408a50:	00405153 	.word	0x00405153
  408a54:	40020200 	.word	0x40020200
  408a58:	40024200 	.word	0x40024200
  408a5c:	40018200 	.word	0x40018200
  408a60:	4001c200 	.word	0x4001c200
  408a64:	40008200 	.word	0x40008200
  408a68:	40040200 	.word	0x40040200
  408a6c:	40034200 	.word	0x40034200

00408a70 <stdio_serial_init>:
  408a70:	b580      	push	{r7, lr}
  408a72:	b082      	sub	sp, #8
  408a74:	af00      	add	r7, sp, #0
  408a76:	6078      	str	r0, [r7, #4]
  408a78:	6039      	str	r1, [r7, #0]
  408a7a:	4a0f      	ldr	r2, [pc, #60]	; (408ab8 <stdio_serial_init+0x48>)
  408a7c:	687b      	ldr	r3, [r7, #4]
  408a7e:	6013      	str	r3, [r2, #0]
  408a80:	4b0e      	ldr	r3, [pc, #56]	; (408abc <stdio_serial_init+0x4c>)
  408a82:	4a0f      	ldr	r2, [pc, #60]	; (408ac0 <stdio_serial_init+0x50>)
  408a84:	601a      	str	r2, [r3, #0]
  408a86:	4b0f      	ldr	r3, [pc, #60]	; (408ac4 <stdio_serial_init+0x54>)
  408a88:	4a0f      	ldr	r2, [pc, #60]	; (408ac8 <stdio_serial_init+0x58>)
  408a8a:	601a      	str	r2, [r3, #0]
  408a8c:	6839      	ldr	r1, [r7, #0]
  408a8e:	6878      	ldr	r0, [r7, #4]
  408a90:	4b0e      	ldr	r3, [pc, #56]	; (408acc <stdio_serial_init+0x5c>)
  408a92:	4798      	blx	r3
  408a94:	4b0e      	ldr	r3, [pc, #56]	; (408ad0 <stdio_serial_init+0x60>)
  408a96:	681b      	ldr	r3, [r3, #0]
  408a98:	689b      	ldr	r3, [r3, #8]
  408a9a:	2100      	movs	r1, #0
  408a9c:	4618      	mov	r0, r3
  408a9e:	4b0d      	ldr	r3, [pc, #52]	; (408ad4 <stdio_serial_init+0x64>)
  408aa0:	4798      	blx	r3
  408aa2:	4b0b      	ldr	r3, [pc, #44]	; (408ad0 <stdio_serial_init+0x60>)
  408aa4:	681b      	ldr	r3, [r3, #0]
  408aa6:	685b      	ldr	r3, [r3, #4]
  408aa8:	2100      	movs	r1, #0
  408aaa:	4618      	mov	r0, r3
  408aac:	4b09      	ldr	r3, [pc, #36]	; (408ad4 <stdio_serial_init+0x64>)
  408aae:	4798      	blx	r3
  408ab0:	bf00      	nop
  408ab2:	3708      	adds	r7, #8
  408ab4:	46bd      	mov	sp, r7
  408ab6:	bd80      	pop	{r7, pc}
  408ab8:	20000880 	.word	0x20000880
  408abc:	2000087c 	.word	0x2000087c
  408ac0:	004087e9 	.word	0x004087e9
  408ac4:	20000878 	.word	0x20000878
  408ac8:	00408915 	.word	0x00408915
  408acc:	004085c1 	.word	0x004085c1
  408ad0:	20000178 	.word	0x20000178
  408ad4:	004094d1 	.word	0x004094d1

00408ad8 <configure_console>:
  408ad8:	b590      	push	{r4, r7, lr}
  408ada:	b085      	sub	sp, #20
  408adc:	af00      	add	r7, sp, #0
  408ade:	2201      	movs	r2, #1
  408ae0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408ae4:	2000      	movs	r0, #0
  408ae6:	4b18      	ldr	r3, [pc, #96]	; (408b48 <configure_console+0x70>)
  408ae8:	4798      	blx	r3
  408aea:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408aee:	2000      	movs	r0, #0
  408af0:	4b16      	ldr	r3, [pc, #88]	; (408b4c <configure_console+0x74>)
  408af2:	4798      	blx	r3
  408af4:	2101      	movs	r1, #1
  408af6:	201b      	movs	r0, #27
  408af8:	4b15      	ldr	r3, [pc, #84]	; (408b50 <configure_console+0x78>)
  408afa:	4798      	blx	r3
  408afc:	201b      	movs	r0, #27
  408afe:	4b15      	ldr	r3, [pc, #84]	; (408b54 <configure_console+0x7c>)
  408b00:	4798      	blx	r3
  408b02:	2101      	movs	r1, #1
  408b04:	201c      	movs	r0, #28
  408b06:	4b12      	ldr	r3, [pc, #72]	; (408b50 <configure_console+0x78>)
  408b08:	4798      	blx	r3
  408b0a:	201c      	movs	r0, #28
  408b0c:	4b11      	ldr	r3, [pc, #68]	; (408b54 <configure_console+0x7c>)
  408b0e:	4798      	blx	r3
  408b10:	4b11      	ldr	r3, [pc, #68]	; (408b58 <configure_console+0x80>)
  408b12:	463c      	mov	r4, r7
  408b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  408b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  408b1a:	2007      	movs	r0, #7
  408b1c:	4b0f      	ldr	r3, [pc, #60]	; (408b5c <configure_console+0x84>)
  408b1e:	4798      	blx	r3
  408b20:	463b      	mov	r3, r7
  408b22:	4619      	mov	r1, r3
  408b24:	480e      	ldr	r0, [pc, #56]	; (408b60 <configure_console+0x88>)
  408b26:	4b0f      	ldr	r3, [pc, #60]	; (408b64 <configure_console+0x8c>)
  408b28:	4798      	blx	r3
  408b2a:	463b      	mov	r3, r7
  408b2c:	4619      	mov	r1, r3
  408b2e:	480c      	ldr	r0, [pc, #48]	; (408b60 <configure_console+0x88>)
  408b30:	4b0d      	ldr	r3, [pc, #52]	; (408b68 <configure_console+0x90>)
  408b32:	4798      	blx	r3
  408b34:	480a      	ldr	r0, [pc, #40]	; (408b60 <configure_console+0x88>)
  408b36:	4b0d      	ldr	r3, [pc, #52]	; (408b6c <configure_console+0x94>)
  408b38:	4798      	blx	r3
  408b3a:	4809      	ldr	r0, [pc, #36]	; (408b60 <configure_console+0x88>)
  408b3c:	4b0c      	ldr	r3, [pc, #48]	; (408b70 <configure_console+0x98>)
  408b3e:	4798      	blx	r3
  408b40:	bf00      	nop
  408b42:	3714      	adds	r7, #20
  408b44:	46bd      	mov	sp, r7
  408b46:	bd90      	pop	{r4, r7, pc}
  408b48:	004083a3 	.word	0x004083a3
  408b4c:	0040836f 	.word	0x0040836f
  408b50:	004084a5 	.word	0x004084a5
  408b54:	00408325 	.word	0x00408325
  408b58:	0040cd24 	.word	0x0040cd24
  408b5c:	00408309 	.word	0x00408309
  408b60:	40034200 	.word	0x40034200
  408b64:	004085c1 	.word	0x004085c1
  408b68:	00408a71 	.word	0x00408a71
  408b6c:	004050b5 	.word	0x004050b5
  408b70:	00405081 	.word	0x00405081

00408b74 <__libc_init_array>:
  408b74:	b570      	push	{r4, r5, r6, lr}
  408b76:	4e0d      	ldr	r6, [pc, #52]	; (408bac <__libc_init_array+0x38>)
  408b78:	4c0d      	ldr	r4, [pc, #52]	; (408bb0 <__libc_init_array+0x3c>)
  408b7a:	1ba4      	subs	r4, r4, r6
  408b7c:	10a4      	asrs	r4, r4, #2
  408b7e:	2500      	movs	r5, #0
  408b80:	42a5      	cmp	r5, r4
  408b82:	d109      	bne.n	408b98 <__libc_init_array+0x24>
  408b84:	4e0b      	ldr	r6, [pc, #44]	; (408bb4 <__libc_init_array+0x40>)
  408b86:	4c0c      	ldr	r4, [pc, #48]	; (408bb8 <__libc_init_array+0x44>)
  408b88:	f004 fa36 	bl	40cff8 <_init>
  408b8c:	1ba4      	subs	r4, r4, r6
  408b8e:	10a4      	asrs	r4, r4, #2
  408b90:	2500      	movs	r5, #0
  408b92:	42a5      	cmp	r5, r4
  408b94:	d105      	bne.n	408ba2 <__libc_init_array+0x2e>
  408b96:	bd70      	pop	{r4, r5, r6, pc}
  408b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  408b9c:	4798      	blx	r3
  408b9e:	3501      	adds	r5, #1
  408ba0:	e7ee      	b.n	408b80 <__libc_init_array+0xc>
  408ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  408ba6:	4798      	blx	r3
  408ba8:	3501      	adds	r5, #1
  408baa:	e7f2      	b.n	408b92 <__libc_init_array+0x1e>
  408bac:	0040d004 	.word	0x0040d004
  408bb0:	0040d004 	.word	0x0040d004
  408bb4:	0040d004 	.word	0x0040d004
  408bb8:	0040d008 	.word	0x0040d008

00408bbc <memcpy>:
  408bbc:	b510      	push	{r4, lr}
  408bbe:	1e43      	subs	r3, r0, #1
  408bc0:	440a      	add	r2, r1
  408bc2:	4291      	cmp	r1, r2
  408bc4:	d100      	bne.n	408bc8 <memcpy+0xc>
  408bc6:	bd10      	pop	{r4, pc}
  408bc8:	f811 4b01 	ldrb.w	r4, [r1], #1
  408bcc:	f803 4f01 	strb.w	r4, [r3, #1]!
  408bd0:	e7f7      	b.n	408bc2 <memcpy+0x6>

00408bd2 <memset>:
  408bd2:	4402      	add	r2, r0
  408bd4:	4603      	mov	r3, r0
  408bd6:	4293      	cmp	r3, r2
  408bd8:	d100      	bne.n	408bdc <memset+0xa>
  408bda:	4770      	bx	lr
  408bdc:	f803 1b01 	strb.w	r1, [r3], #1
  408be0:	e7f9      	b.n	408bd6 <memset+0x4>

00408be2 <__cvt>:
  408be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408be6:	b088      	sub	sp, #32
  408be8:	2b00      	cmp	r3, #0
  408bea:	9f14      	ldr	r7, [sp, #80]	; 0x50
  408bec:	9912      	ldr	r1, [sp, #72]	; 0x48
  408bee:	9d10      	ldr	r5, [sp, #64]	; 0x40
  408bf0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  408bf4:	461e      	mov	r6, r3
  408bf6:	f027 0720 	bic.w	r7, r7, #32
  408bfa:	bfbb      	ittet	lt
  408bfc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  408c00:	461e      	movlt	r6, r3
  408c02:	2300      	movge	r3, #0
  408c04:	232d      	movlt	r3, #45	; 0x2d
  408c06:	2f46      	cmp	r7, #70	; 0x46
  408c08:	4614      	mov	r4, r2
  408c0a:	700b      	strb	r3, [r1, #0]
  408c0c:	d004      	beq.n	408c18 <__cvt+0x36>
  408c0e:	2f45      	cmp	r7, #69	; 0x45
  408c10:	d100      	bne.n	408c14 <__cvt+0x32>
  408c12:	3501      	adds	r5, #1
  408c14:	2302      	movs	r3, #2
  408c16:	e000      	b.n	408c1a <__cvt+0x38>
  408c18:	2303      	movs	r3, #3
  408c1a:	aa07      	add	r2, sp, #28
  408c1c:	9204      	str	r2, [sp, #16]
  408c1e:	aa06      	add	r2, sp, #24
  408c20:	9203      	str	r2, [sp, #12]
  408c22:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  408c26:	4622      	mov	r2, r4
  408c28:	4633      	mov	r3, r6
  408c2a:	f000 fd9d 	bl	409768 <_dtoa_r>
  408c2e:	2f47      	cmp	r7, #71	; 0x47
  408c30:	4680      	mov	r8, r0
  408c32:	d102      	bne.n	408c3a <__cvt+0x58>
  408c34:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c36:	07db      	lsls	r3, r3, #31
  408c38:	d526      	bpl.n	408c88 <__cvt+0xa6>
  408c3a:	2f46      	cmp	r7, #70	; 0x46
  408c3c:	eb08 0905 	add.w	r9, r8, r5
  408c40:	d111      	bne.n	408c66 <__cvt+0x84>
  408c42:	f898 3000 	ldrb.w	r3, [r8]
  408c46:	2b30      	cmp	r3, #48	; 0x30
  408c48:	d10a      	bne.n	408c60 <__cvt+0x7e>
  408c4a:	2200      	movs	r2, #0
  408c4c:	2300      	movs	r3, #0
  408c4e:	4620      	mov	r0, r4
  408c50:	4631      	mov	r1, r6
  408c52:	f003 f82b 	bl	40bcac <__aeabi_dcmpeq>
  408c56:	b918      	cbnz	r0, 408c60 <__cvt+0x7e>
  408c58:	f1c5 0501 	rsb	r5, r5, #1
  408c5c:	f8ca 5000 	str.w	r5, [sl]
  408c60:	f8da 3000 	ldr.w	r3, [sl]
  408c64:	4499      	add	r9, r3
  408c66:	2200      	movs	r2, #0
  408c68:	2300      	movs	r3, #0
  408c6a:	4620      	mov	r0, r4
  408c6c:	4631      	mov	r1, r6
  408c6e:	f003 f81d 	bl	40bcac <__aeabi_dcmpeq>
  408c72:	b938      	cbnz	r0, 408c84 <__cvt+0xa2>
  408c74:	2230      	movs	r2, #48	; 0x30
  408c76:	9b07      	ldr	r3, [sp, #28]
  408c78:	4599      	cmp	r9, r3
  408c7a:	d905      	bls.n	408c88 <__cvt+0xa6>
  408c7c:	1c59      	adds	r1, r3, #1
  408c7e:	9107      	str	r1, [sp, #28]
  408c80:	701a      	strb	r2, [r3, #0]
  408c82:	e7f8      	b.n	408c76 <__cvt+0x94>
  408c84:	f8cd 901c 	str.w	r9, [sp, #28]
  408c88:	9b07      	ldr	r3, [sp, #28]
  408c8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  408c8c:	eba3 0308 	sub.w	r3, r3, r8
  408c90:	4640      	mov	r0, r8
  408c92:	6013      	str	r3, [r2, #0]
  408c94:	b008      	add	sp, #32
  408c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00408c9a <__exponent>:
  408c9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  408c9c:	4603      	mov	r3, r0
  408c9e:	2900      	cmp	r1, #0
  408ca0:	bfb8      	it	lt
  408ca2:	4249      	neglt	r1, r1
  408ca4:	f803 2b02 	strb.w	r2, [r3], #2
  408ca8:	bfb4      	ite	lt
  408caa:	222d      	movlt	r2, #45	; 0x2d
  408cac:	222b      	movge	r2, #43	; 0x2b
  408cae:	2909      	cmp	r1, #9
  408cb0:	7042      	strb	r2, [r0, #1]
  408cb2:	dd20      	ble.n	408cf6 <__exponent+0x5c>
  408cb4:	f10d 0207 	add.w	r2, sp, #7
  408cb8:	4617      	mov	r7, r2
  408cba:	260a      	movs	r6, #10
  408cbc:	fb91 f5f6 	sdiv	r5, r1, r6
  408cc0:	fb06 1115 	mls	r1, r6, r5, r1
  408cc4:	3130      	adds	r1, #48	; 0x30
  408cc6:	2d09      	cmp	r5, #9
  408cc8:	f802 1c01 	strb.w	r1, [r2, #-1]
  408ccc:	f102 34ff 	add.w	r4, r2, #4294967295
  408cd0:	4629      	mov	r1, r5
  408cd2:	dc09      	bgt.n	408ce8 <__exponent+0x4e>
  408cd4:	3130      	adds	r1, #48	; 0x30
  408cd6:	3a02      	subs	r2, #2
  408cd8:	f804 1c01 	strb.w	r1, [r4, #-1]
  408cdc:	42ba      	cmp	r2, r7
  408cde:	461c      	mov	r4, r3
  408ce0:	d304      	bcc.n	408cec <__exponent+0x52>
  408ce2:	1a20      	subs	r0, r4, r0
  408ce4:	b003      	add	sp, #12
  408ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408ce8:	4622      	mov	r2, r4
  408cea:	e7e7      	b.n	408cbc <__exponent+0x22>
  408cec:	f812 1b01 	ldrb.w	r1, [r2], #1
  408cf0:	f803 1b01 	strb.w	r1, [r3], #1
  408cf4:	e7f2      	b.n	408cdc <__exponent+0x42>
  408cf6:	2230      	movs	r2, #48	; 0x30
  408cf8:	461c      	mov	r4, r3
  408cfa:	4411      	add	r1, r2
  408cfc:	f804 2b02 	strb.w	r2, [r4], #2
  408d00:	7059      	strb	r1, [r3, #1]
  408d02:	e7ee      	b.n	408ce2 <__exponent+0x48>

00408d04 <_printf_float>:
  408d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d08:	b091      	sub	sp, #68	; 0x44
  408d0a:	460c      	mov	r4, r1
  408d0c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  408d0e:	4693      	mov	fp, r2
  408d10:	461e      	mov	r6, r3
  408d12:	4605      	mov	r5, r0
  408d14:	f001 fc76 	bl	40a604 <_localeconv_r>
  408d18:	6803      	ldr	r3, [r0, #0]
  408d1a:	9309      	str	r3, [sp, #36]	; 0x24
  408d1c:	4618      	mov	r0, r3
  408d1e:	f000 fc8d 	bl	40963c <strlen>
  408d22:	2300      	movs	r3, #0
  408d24:	930e      	str	r3, [sp, #56]	; 0x38
  408d26:	683b      	ldr	r3, [r7, #0]
  408d28:	900a      	str	r0, [sp, #40]	; 0x28
  408d2a:	3307      	adds	r3, #7
  408d2c:	f023 0307 	bic.w	r3, r3, #7
  408d30:	f103 0208 	add.w	r2, r3, #8
  408d34:	f894 8018 	ldrb.w	r8, [r4, #24]
  408d38:	f8d4 a000 	ldr.w	sl, [r4]
  408d3c:	603a      	str	r2, [r7, #0]
  408d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408d42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  408d46:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  408d4a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  408d4c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  408d50:	930b      	str	r3, [sp, #44]	; 0x2c
  408d52:	f04f 32ff 	mov.w	r2, #4294967295
  408d56:	4ba6      	ldr	r3, [pc, #664]	; (408ff0 <_printf_float+0x2ec>)
  408d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408d5a:	4638      	mov	r0, r7
  408d5c:	f002 ffd8 	bl	40bd10 <__aeabi_dcmpun>
  408d60:	2800      	cmp	r0, #0
  408d62:	f040 81f7 	bne.w	409154 <_printf_float+0x450>
  408d66:	f04f 32ff 	mov.w	r2, #4294967295
  408d6a:	4ba1      	ldr	r3, [pc, #644]	; (408ff0 <_printf_float+0x2ec>)
  408d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408d6e:	4638      	mov	r0, r7
  408d70:	f002 ffb0 	bl	40bcd4 <__aeabi_dcmple>
  408d74:	2800      	cmp	r0, #0
  408d76:	f040 81ed 	bne.w	409154 <_printf_float+0x450>
  408d7a:	2200      	movs	r2, #0
  408d7c:	2300      	movs	r3, #0
  408d7e:	4638      	mov	r0, r7
  408d80:	4649      	mov	r1, r9
  408d82:	f002 ff9d 	bl	40bcc0 <__aeabi_dcmplt>
  408d86:	b110      	cbz	r0, 408d8e <_printf_float+0x8a>
  408d88:	232d      	movs	r3, #45	; 0x2d
  408d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  408d8e:	4b99      	ldr	r3, [pc, #612]	; (408ff4 <_printf_float+0x2f0>)
  408d90:	4f99      	ldr	r7, [pc, #612]	; (408ff8 <_printf_float+0x2f4>)
  408d92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  408d96:	bf98      	it	ls
  408d98:	461f      	movls	r7, r3
  408d9a:	2303      	movs	r3, #3
  408d9c:	6123      	str	r3, [r4, #16]
  408d9e:	f02a 0304 	bic.w	r3, sl, #4
  408da2:	6023      	str	r3, [r4, #0]
  408da4:	f04f 0900 	mov.w	r9, #0
  408da8:	9600      	str	r6, [sp, #0]
  408daa:	465b      	mov	r3, fp
  408dac:	aa0f      	add	r2, sp, #60	; 0x3c
  408dae:	4621      	mov	r1, r4
  408db0:	4628      	mov	r0, r5
  408db2:	f000 f9df 	bl	409174 <_printf_common>
  408db6:	3001      	adds	r0, #1
  408db8:	f040 809a 	bne.w	408ef0 <_printf_float+0x1ec>
  408dbc:	f04f 30ff 	mov.w	r0, #4294967295
  408dc0:	b011      	add	sp, #68	; 0x44
  408dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408dc6:	6862      	ldr	r2, [r4, #4]
  408dc8:	1c53      	adds	r3, r2, #1
  408dca:	a80e      	add	r0, sp, #56	; 0x38
  408dcc:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  408dd0:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  408dd4:	d141      	bne.n	408e5a <_printf_float+0x156>
  408dd6:	2206      	movs	r2, #6
  408dd8:	6062      	str	r2, [r4, #4]
  408dda:	6023      	str	r3, [r4, #0]
  408ddc:	2100      	movs	r1, #0
  408dde:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  408de2:	9301      	str	r3, [sp, #4]
  408de4:	6863      	ldr	r3, [r4, #4]
  408de6:	9005      	str	r0, [sp, #20]
  408de8:	9202      	str	r2, [sp, #8]
  408dea:	9300      	str	r3, [sp, #0]
  408dec:	463a      	mov	r2, r7
  408dee:	464b      	mov	r3, r9
  408df0:	9106      	str	r1, [sp, #24]
  408df2:	f8cd 8010 	str.w	r8, [sp, #16]
  408df6:	f8cd e00c 	str.w	lr, [sp, #12]
  408dfa:	4628      	mov	r0, r5
  408dfc:	f7ff fef1 	bl	408be2 <__cvt>
  408e00:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  408e04:	2b47      	cmp	r3, #71	; 0x47
  408e06:	4607      	mov	r7, r0
  408e08:	d109      	bne.n	408e1e <_printf_float+0x11a>
  408e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408e0c:	1cd8      	adds	r0, r3, #3
  408e0e:	db02      	blt.n	408e16 <_printf_float+0x112>
  408e10:	6862      	ldr	r2, [r4, #4]
  408e12:	4293      	cmp	r3, r2
  408e14:	dd59      	ble.n	408eca <_printf_float+0x1c6>
  408e16:	f1a8 0802 	sub.w	r8, r8, #2
  408e1a:	fa5f f888 	uxtb.w	r8, r8
  408e1e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  408e22:	990d      	ldr	r1, [sp, #52]	; 0x34
  408e24:	d836      	bhi.n	408e94 <_printf_float+0x190>
  408e26:	3901      	subs	r1, #1
  408e28:	4642      	mov	r2, r8
  408e2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  408e2e:	910d      	str	r1, [sp, #52]	; 0x34
  408e30:	f7ff ff33 	bl	408c9a <__exponent>
  408e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408e36:	1883      	adds	r3, r0, r2
  408e38:	2a01      	cmp	r2, #1
  408e3a:	4681      	mov	r9, r0
  408e3c:	6123      	str	r3, [r4, #16]
  408e3e:	dc02      	bgt.n	408e46 <_printf_float+0x142>
  408e40:	6822      	ldr	r2, [r4, #0]
  408e42:	07d1      	lsls	r1, r2, #31
  408e44:	d501      	bpl.n	408e4a <_printf_float+0x146>
  408e46:	3301      	adds	r3, #1
  408e48:	6123      	str	r3, [r4, #16]
  408e4a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  408e4e:	2b00      	cmp	r3, #0
  408e50:	d0aa      	beq.n	408da8 <_printf_float+0xa4>
  408e52:	232d      	movs	r3, #45	; 0x2d
  408e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  408e58:	e7a6      	b.n	408da8 <_printf_float+0xa4>
  408e5a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  408e5e:	d002      	beq.n	408e66 <_printf_float+0x162>
  408e60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  408e64:	d1b9      	bne.n	408dda <_printf_float+0xd6>
  408e66:	b19a      	cbz	r2, 408e90 <_printf_float+0x18c>
  408e68:	2100      	movs	r1, #0
  408e6a:	9106      	str	r1, [sp, #24]
  408e6c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  408e70:	e88d 000c 	stmia.w	sp, {r2, r3}
  408e74:	6023      	str	r3, [r4, #0]
  408e76:	9005      	str	r0, [sp, #20]
  408e78:	463a      	mov	r2, r7
  408e7a:	f8cd 8010 	str.w	r8, [sp, #16]
  408e7e:	f8cd e00c 	str.w	lr, [sp, #12]
  408e82:	9102      	str	r1, [sp, #8]
  408e84:	464b      	mov	r3, r9
  408e86:	4628      	mov	r0, r5
  408e88:	f7ff feab 	bl	408be2 <__cvt>
  408e8c:	4607      	mov	r7, r0
  408e8e:	e7bc      	b.n	408e0a <_printf_float+0x106>
  408e90:	2201      	movs	r2, #1
  408e92:	e7a1      	b.n	408dd8 <_printf_float+0xd4>
  408e94:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  408e98:	d119      	bne.n	408ece <_printf_float+0x1ca>
  408e9a:	2900      	cmp	r1, #0
  408e9c:	6863      	ldr	r3, [r4, #4]
  408e9e:	dd0c      	ble.n	408eba <_printf_float+0x1b6>
  408ea0:	6121      	str	r1, [r4, #16]
  408ea2:	b913      	cbnz	r3, 408eaa <_printf_float+0x1a6>
  408ea4:	6822      	ldr	r2, [r4, #0]
  408ea6:	07d2      	lsls	r2, r2, #31
  408ea8:	d502      	bpl.n	408eb0 <_printf_float+0x1ac>
  408eaa:	3301      	adds	r3, #1
  408eac:	440b      	add	r3, r1
  408eae:	6123      	str	r3, [r4, #16]
  408eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408eb2:	65a3      	str	r3, [r4, #88]	; 0x58
  408eb4:	f04f 0900 	mov.w	r9, #0
  408eb8:	e7c7      	b.n	408e4a <_printf_float+0x146>
  408eba:	b913      	cbnz	r3, 408ec2 <_printf_float+0x1be>
  408ebc:	6822      	ldr	r2, [r4, #0]
  408ebe:	07d0      	lsls	r0, r2, #31
  408ec0:	d501      	bpl.n	408ec6 <_printf_float+0x1c2>
  408ec2:	3302      	adds	r3, #2
  408ec4:	e7f3      	b.n	408eae <_printf_float+0x1aa>
  408ec6:	2301      	movs	r3, #1
  408ec8:	e7f1      	b.n	408eae <_printf_float+0x1aa>
  408eca:	f04f 0867 	mov.w	r8, #103	; 0x67
  408ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408ed2:	4293      	cmp	r3, r2
  408ed4:	db05      	blt.n	408ee2 <_printf_float+0x1de>
  408ed6:	6822      	ldr	r2, [r4, #0]
  408ed8:	6123      	str	r3, [r4, #16]
  408eda:	07d1      	lsls	r1, r2, #31
  408edc:	d5e8      	bpl.n	408eb0 <_printf_float+0x1ac>
  408ede:	3301      	adds	r3, #1
  408ee0:	e7e5      	b.n	408eae <_printf_float+0x1aa>
  408ee2:	2b00      	cmp	r3, #0
  408ee4:	bfd4      	ite	le
  408ee6:	f1c3 0302 	rsble	r3, r3, #2
  408eea:	2301      	movgt	r3, #1
  408eec:	4413      	add	r3, r2
  408eee:	e7de      	b.n	408eae <_printf_float+0x1aa>
  408ef0:	6823      	ldr	r3, [r4, #0]
  408ef2:	055a      	lsls	r2, r3, #21
  408ef4:	d407      	bmi.n	408f06 <_printf_float+0x202>
  408ef6:	6923      	ldr	r3, [r4, #16]
  408ef8:	463a      	mov	r2, r7
  408efa:	4659      	mov	r1, fp
  408efc:	4628      	mov	r0, r5
  408efe:	47b0      	blx	r6
  408f00:	3001      	adds	r0, #1
  408f02:	d12a      	bne.n	408f5a <_printf_float+0x256>
  408f04:	e75a      	b.n	408dbc <_printf_float+0xb8>
  408f06:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  408f0a:	f240 80dc 	bls.w	4090c6 <_printf_float+0x3c2>
  408f0e:	2200      	movs	r2, #0
  408f10:	2300      	movs	r3, #0
  408f12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  408f16:	f002 fec9 	bl	40bcac <__aeabi_dcmpeq>
  408f1a:	2800      	cmp	r0, #0
  408f1c:	d039      	beq.n	408f92 <_printf_float+0x28e>
  408f1e:	2301      	movs	r3, #1
  408f20:	4a36      	ldr	r2, [pc, #216]	; (408ffc <_printf_float+0x2f8>)
  408f22:	4659      	mov	r1, fp
  408f24:	4628      	mov	r0, r5
  408f26:	47b0      	blx	r6
  408f28:	3001      	adds	r0, #1
  408f2a:	f43f af47 	beq.w	408dbc <_printf_float+0xb8>
  408f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408f30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408f32:	429a      	cmp	r2, r3
  408f34:	db02      	blt.n	408f3c <_printf_float+0x238>
  408f36:	6823      	ldr	r3, [r4, #0]
  408f38:	07d8      	lsls	r0, r3, #31
  408f3a:	d50e      	bpl.n	408f5a <_printf_float+0x256>
  408f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408f40:	4659      	mov	r1, fp
  408f42:	4628      	mov	r0, r5
  408f44:	47b0      	blx	r6
  408f46:	3001      	adds	r0, #1
  408f48:	f43f af38 	beq.w	408dbc <_printf_float+0xb8>
  408f4c:	2700      	movs	r7, #0
  408f4e:	f104 081a 	add.w	r8, r4, #26
  408f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408f54:	3b01      	subs	r3, #1
  408f56:	429f      	cmp	r7, r3
  408f58:	db11      	blt.n	408f7e <_printf_float+0x27a>
  408f5a:	6823      	ldr	r3, [r4, #0]
  408f5c:	079f      	lsls	r7, r3, #30
  408f5e:	d508      	bpl.n	408f72 <_printf_float+0x26e>
  408f60:	2700      	movs	r7, #0
  408f62:	f104 0819 	add.w	r8, r4, #25
  408f66:	68e3      	ldr	r3, [r4, #12]
  408f68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408f6a:	1a9b      	subs	r3, r3, r2
  408f6c:	429f      	cmp	r7, r3
  408f6e:	f2c0 80e7 	blt.w	409140 <_printf_float+0x43c>
  408f72:	68e0      	ldr	r0, [r4, #12]
  408f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408f76:	4298      	cmp	r0, r3
  408f78:	bfb8      	it	lt
  408f7a:	4618      	movlt	r0, r3
  408f7c:	e720      	b.n	408dc0 <_printf_float+0xbc>
  408f7e:	2301      	movs	r3, #1
  408f80:	4642      	mov	r2, r8
  408f82:	4659      	mov	r1, fp
  408f84:	4628      	mov	r0, r5
  408f86:	47b0      	blx	r6
  408f88:	3001      	adds	r0, #1
  408f8a:	f43f af17 	beq.w	408dbc <_printf_float+0xb8>
  408f8e:	3701      	adds	r7, #1
  408f90:	e7df      	b.n	408f52 <_printf_float+0x24e>
  408f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408f94:	2b00      	cmp	r3, #0
  408f96:	dc33      	bgt.n	409000 <_printf_float+0x2fc>
  408f98:	2301      	movs	r3, #1
  408f9a:	4a18      	ldr	r2, [pc, #96]	; (408ffc <_printf_float+0x2f8>)
  408f9c:	4659      	mov	r1, fp
  408f9e:	4628      	mov	r0, r5
  408fa0:	47b0      	blx	r6
  408fa2:	3001      	adds	r0, #1
  408fa4:	f43f af0a 	beq.w	408dbc <_printf_float+0xb8>
  408fa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408faa:	b923      	cbnz	r3, 408fb6 <_printf_float+0x2b2>
  408fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408fae:	b913      	cbnz	r3, 408fb6 <_printf_float+0x2b2>
  408fb0:	6823      	ldr	r3, [r4, #0]
  408fb2:	07d9      	lsls	r1, r3, #31
  408fb4:	d5d1      	bpl.n	408f5a <_printf_float+0x256>
  408fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408fba:	4659      	mov	r1, fp
  408fbc:	4628      	mov	r0, r5
  408fbe:	47b0      	blx	r6
  408fc0:	3001      	adds	r0, #1
  408fc2:	f43f aefb 	beq.w	408dbc <_printf_float+0xb8>
  408fc6:	f04f 0800 	mov.w	r8, #0
  408fca:	f104 091a 	add.w	r9, r4, #26
  408fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408fd0:	425b      	negs	r3, r3
  408fd2:	4598      	cmp	r8, r3
  408fd4:	db01      	blt.n	408fda <_printf_float+0x2d6>
  408fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408fd8:	e78e      	b.n	408ef8 <_printf_float+0x1f4>
  408fda:	2301      	movs	r3, #1
  408fdc:	464a      	mov	r2, r9
  408fde:	4659      	mov	r1, fp
  408fe0:	4628      	mov	r0, r5
  408fe2:	47b0      	blx	r6
  408fe4:	3001      	adds	r0, #1
  408fe6:	f43f aee9 	beq.w	408dbc <_printf_float+0xb8>
  408fea:	f108 0801 	add.w	r8, r8, #1
  408fee:	e7ee      	b.n	408fce <_printf_float+0x2ca>
  408ff0:	7fefffff 	.word	0x7fefffff
  408ff4:	0040cd38 	.word	0x0040cd38
  408ff8:	0040cd3c 	.word	0x0040cd3c
  408ffc:	0040cd48 	.word	0x0040cd48
  409000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409002:	6da3      	ldr	r3, [r4, #88]	; 0x58
  409004:	429a      	cmp	r2, r3
  409006:	bfa8      	it	ge
  409008:	461a      	movge	r2, r3
  40900a:	2a00      	cmp	r2, #0
  40900c:	4690      	mov	r8, r2
  40900e:	dc36      	bgt.n	40907e <_printf_float+0x37a>
  409010:	f104 031a 	add.w	r3, r4, #26
  409014:	f04f 0a00 	mov.w	sl, #0
  409018:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40901c:	930b      	str	r3, [sp, #44]	; 0x2c
  40901e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  409022:	eba9 0308 	sub.w	r3, r9, r8
  409026:	459a      	cmp	sl, r3
  409028:	db31      	blt.n	40908e <_printf_float+0x38a>
  40902a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40902c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40902e:	429a      	cmp	r2, r3
  409030:	db38      	blt.n	4090a4 <_printf_float+0x3a0>
  409032:	6823      	ldr	r3, [r4, #0]
  409034:	07da      	lsls	r2, r3, #31
  409036:	d435      	bmi.n	4090a4 <_printf_float+0x3a0>
  409038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40903a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40903c:	eba3 0209 	sub.w	r2, r3, r9
  409040:	eba3 0801 	sub.w	r8, r3, r1
  409044:	4590      	cmp	r8, r2
  409046:	bfa8      	it	ge
  409048:	4690      	movge	r8, r2
  40904a:	f1b8 0f00 	cmp.w	r8, #0
  40904e:	dc31      	bgt.n	4090b4 <_printf_float+0x3b0>
  409050:	2700      	movs	r7, #0
  409052:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  409056:	f104 091a 	add.w	r9, r4, #26
  40905a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40905c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40905e:	1a9b      	subs	r3, r3, r2
  409060:	eba3 0308 	sub.w	r3, r3, r8
  409064:	429f      	cmp	r7, r3
  409066:	f6bf af78 	bge.w	408f5a <_printf_float+0x256>
  40906a:	2301      	movs	r3, #1
  40906c:	464a      	mov	r2, r9
  40906e:	4659      	mov	r1, fp
  409070:	4628      	mov	r0, r5
  409072:	47b0      	blx	r6
  409074:	3001      	adds	r0, #1
  409076:	f43f aea1 	beq.w	408dbc <_printf_float+0xb8>
  40907a:	3701      	adds	r7, #1
  40907c:	e7ed      	b.n	40905a <_printf_float+0x356>
  40907e:	4613      	mov	r3, r2
  409080:	4659      	mov	r1, fp
  409082:	463a      	mov	r2, r7
  409084:	4628      	mov	r0, r5
  409086:	47b0      	blx	r6
  409088:	3001      	adds	r0, #1
  40908a:	d1c1      	bne.n	409010 <_printf_float+0x30c>
  40908c:	e696      	b.n	408dbc <_printf_float+0xb8>
  40908e:	2301      	movs	r3, #1
  409090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409092:	4659      	mov	r1, fp
  409094:	4628      	mov	r0, r5
  409096:	47b0      	blx	r6
  409098:	3001      	adds	r0, #1
  40909a:	f43f ae8f 	beq.w	408dbc <_printf_float+0xb8>
  40909e:	f10a 0a01 	add.w	sl, sl, #1
  4090a2:	e7bc      	b.n	40901e <_printf_float+0x31a>
  4090a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4090a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4090a8:	4659      	mov	r1, fp
  4090aa:	4628      	mov	r0, r5
  4090ac:	47b0      	blx	r6
  4090ae:	3001      	adds	r0, #1
  4090b0:	d1c2      	bne.n	409038 <_printf_float+0x334>
  4090b2:	e683      	b.n	408dbc <_printf_float+0xb8>
  4090b4:	4643      	mov	r3, r8
  4090b6:	eb07 0209 	add.w	r2, r7, r9
  4090ba:	4659      	mov	r1, fp
  4090bc:	4628      	mov	r0, r5
  4090be:	47b0      	blx	r6
  4090c0:	3001      	adds	r0, #1
  4090c2:	d1c5      	bne.n	409050 <_printf_float+0x34c>
  4090c4:	e67a      	b.n	408dbc <_printf_float+0xb8>
  4090c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4090c8:	2a01      	cmp	r2, #1
  4090ca:	dc01      	bgt.n	4090d0 <_printf_float+0x3cc>
  4090cc:	07db      	lsls	r3, r3, #31
  4090ce:	d534      	bpl.n	40913a <_printf_float+0x436>
  4090d0:	2301      	movs	r3, #1
  4090d2:	463a      	mov	r2, r7
  4090d4:	4659      	mov	r1, fp
  4090d6:	4628      	mov	r0, r5
  4090d8:	47b0      	blx	r6
  4090da:	3001      	adds	r0, #1
  4090dc:	f43f ae6e 	beq.w	408dbc <_printf_float+0xb8>
  4090e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4090e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4090e4:	4659      	mov	r1, fp
  4090e6:	4628      	mov	r0, r5
  4090e8:	47b0      	blx	r6
  4090ea:	3001      	adds	r0, #1
  4090ec:	f43f ae66 	beq.w	408dbc <_printf_float+0xb8>
  4090f0:	2200      	movs	r2, #0
  4090f2:	2300      	movs	r3, #0
  4090f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4090f8:	f002 fdd8 	bl	40bcac <__aeabi_dcmpeq>
  4090fc:	b150      	cbz	r0, 409114 <_printf_float+0x410>
  4090fe:	2700      	movs	r7, #0
  409100:	f104 081a 	add.w	r8, r4, #26
  409104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409106:	3b01      	subs	r3, #1
  409108:	429f      	cmp	r7, r3
  40910a:	db0c      	blt.n	409126 <_printf_float+0x422>
  40910c:	464b      	mov	r3, r9
  40910e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  409112:	e6f2      	b.n	408efa <_printf_float+0x1f6>
  409114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409116:	1c7a      	adds	r2, r7, #1
  409118:	3b01      	subs	r3, #1
  40911a:	4659      	mov	r1, fp
  40911c:	4628      	mov	r0, r5
  40911e:	47b0      	blx	r6
  409120:	3001      	adds	r0, #1
  409122:	d1f3      	bne.n	40910c <_printf_float+0x408>
  409124:	e64a      	b.n	408dbc <_printf_float+0xb8>
  409126:	2301      	movs	r3, #1
  409128:	4642      	mov	r2, r8
  40912a:	4659      	mov	r1, fp
  40912c:	4628      	mov	r0, r5
  40912e:	47b0      	blx	r6
  409130:	3001      	adds	r0, #1
  409132:	f43f ae43 	beq.w	408dbc <_printf_float+0xb8>
  409136:	3701      	adds	r7, #1
  409138:	e7e4      	b.n	409104 <_printf_float+0x400>
  40913a:	2301      	movs	r3, #1
  40913c:	463a      	mov	r2, r7
  40913e:	e7ec      	b.n	40911a <_printf_float+0x416>
  409140:	2301      	movs	r3, #1
  409142:	4642      	mov	r2, r8
  409144:	4659      	mov	r1, fp
  409146:	4628      	mov	r0, r5
  409148:	47b0      	blx	r6
  40914a:	3001      	adds	r0, #1
  40914c:	f43f ae36 	beq.w	408dbc <_printf_float+0xb8>
  409150:	3701      	adds	r7, #1
  409152:	e708      	b.n	408f66 <_printf_float+0x262>
  409154:	463a      	mov	r2, r7
  409156:	464b      	mov	r3, r9
  409158:	4638      	mov	r0, r7
  40915a:	4649      	mov	r1, r9
  40915c:	f002 fdd8 	bl	40bd10 <__aeabi_dcmpun>
  409160:	2800      	cmp	r0, #0
  409162:	f43f ae30 	beq.w	408dc6 <_printf_float+0xc2>
  409166:	4b01      	ldr	r3, [pc, #4]	; (40916c <_printf_float+0x468>)
  409168:	4f01      	ldr	r7, [pc, #4]	; (409170 <_printf_float+0x46c>)
  40916a:	e612      	b.n	408d92 <_printf_float+0x8e>
  40916c:	0040cd40 	.word	0x0040cd40
  409170:	0040cd44 	.word	0x0040cd44

00409174 <_printf_common>:
  409174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409178:	4691      	mov	r9, r2
  40917a:	461f      	mov	r7, r3
  40917c:	688a      	ldr	r2, [r1, #8]
  40917e:	690b      	ldr	r3, [r1, #16]
  409180:	f8dd 8020 	ldr.w	r8, [sp, #32]
  409184:	4293      	cmp	r3, r2
  409186:	bfb8      	it	lt
  409188:	4613      	movlt	r3, r2
  40918a:	f8c9 3000 	str.w	r3, [r9]
  40918e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  409192:	4606      	mov	r6, r0
  409194:	460c      	mov	r4, r1
  409196:	b112      	cbz	r2, 40919e <_printf_common+0x2a>
  409198:	3301      	adds	r3, #1
  40919a:	f8c9 3000 	str.w	r3, [r9]
  40919e:	6823      	ldr	r3, [r4, #0]
  4091a0:	0699      	lsls	r1, r3, #26
  4091a2:	bf42      	ittt	mi
  4091a4:	f8d9 3000 	ldrmi.w	r3, [r9]
  4091a8:	3302      	addmi	r3, #2
  4091aa:	f8c9 3000 	strmi.w	r3, [r9]
  4091ae:	6825      	ldr	r5, [r4, #0]
  4091b0:	f015 0506 	ands.w	r5, r5, #6
  4091b4:	d107      	bne.n	4091c6 <_printf_common+0x52>
  4091b6:	f104 0a19 	add.w	sl, r4, #25
  4091ba:	68e3      	ldr	r3, [r4, #12]
  4091bc:	f8d9 2000 	ldr.w	r2, [r9]
  4091c0:	1a9b      	subs	r3, r3, r2
  4091c2:	429d      	cmp	r5, r3
  4091c4:	db29      	blt.n	40921a <_printf_common+0xa6>
  4091c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4091ca:	6822      	ldr	r2, [r4, #0]
  4091cc:	3300      	adds	r3, #0
  4091ce:	bf18      	it	ne
  4091d0:	2301      	movne	r3, #1
  4091d2:	0692      	lsls	r2, r2, #26
  4091d4:	d42e      	bmi.n	409234 <_printf_common+0xc0>
  4091d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4091da:	4639      	mov	r1, r7
  4091dc:	4630      	mov	r0, r6
  4091de:	47c0      	blx	r8
  4091e0:	3001      	adds	r0, #1
  4091e2:	d021      	beq.n	409228 <_printf_common+0xb4>
  4091e4:	6823      	ldr	r3, [r4, #0]
  4091e6:	68e5      	ldr	r5, [r4, #12]
  4091e8:	f8d9 2000 	ldr.w	r2, [r9]
  4091ec:	f003 0306 	and.w	r3, r3, #6
  4091f0:	2b04      	cmp	r3, #4
  4091f2:	bf08      	it	eq
  4091f4:	1aad      	subeq	r5, r5, r2
  4091f6:	68a3      	ldr	r3, [r4, #8]
  4091f8:	6922      	ldr	r2, [r4, #16]
  4091fa:	bf0c      	ite	eq
  4091fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  409200:	2500      	movne	r5, #0
  409202:	4293      	cmp	r3, r2
  409204:	bfc4      	itt	gt
  409206:	1a9b      	subgt	r3, r3, r2
  409208:	18ed      	addgt	r5, r5, r3
  40920a:	f04f 0900 	mov.w	r9, #0
  40920e:	341a      	adds	r4, #26
  409210:	454d      	cmp	r5, r9
  409212:	d11b      	bne.n	40924c <_printf_common+0xd8>
  409214:	2000      	movs	r0, #0
  409216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40921a:	2301      	movs	r3, #1
  40921c:	4652      	mov	r2, sl
  40921e:	4639      	mov	r1, r7
  409220:	4630      	mov	r0, r6
  409222:	47c0      	blx	r8
  409224:	3001      	adds	r0, #1
  409226:	d103      	bne.n	409230 <_printf_common+0xbc>
  409228:	f04f 30ff 	mov.w	r0, #4294967295
  40922c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409230:	3501      	adds	r5, #1
  409232:	e7c2      	b.n	4091ba <_printf_common+0x46>
  409234:	18e1      	adds	r1, r4, r3
  409236:	1c5a      	adds	r2, r3, #1
  409238:	2030      	movs	r0, #48	; 0x30
  40923a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40923e:	4422      	add	r2, r4
  409240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  409244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  409248:	3302      	adds	r3, #2
  40924a:	e7c4      	b.n	4091d6 <_printf_common+0x62>
  40924c:	2301      	movs	r3, #1
  40924e:	4622      	mov	r2, r4
  409250:	4639      	mov	r1, r7
  409252:	4630      	mov	r0, r6
  409254:	47c0      	blx	r8
  409256:	3001      	adds	r0, #1
  409258:	d0e6      	beq.n	409228 <_printf_common+0xb4>
  40925a:	f109 0901 	add.w	r9, r9, #1
  40925e:	e7d7      	b.n	409210 <_printf_common+0x9c>

00409260 <_printf_i>:
  409260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409264:	4617      	mov	r7, r2
  409266:	7e0a      	ldrb	r2, [r1, #24]
  409268:	b085      	sub	sp, #20
  40926a:	2a6e      	cmp	r2, #110	; 0x6e
  40926c:	4698      	mov	r8, r3
  40926e:	4606      	mov	r6, r0
  409270:	460c      	mov	r4, r1
  409272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409274:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  409278:	f000 80bc 	beq.w	4093f4 <_printf_i+0x194>
  40927c:	d81a      	bhi.n	4092b4 <_printf_i+0x54>
  40927e:	2a63      	cmp	r2, #99	; 0x63
  409280:	d02e      	beq.n	4092e0 <_printf_i+0x80>
  409282:	d80a      	bhi.n	40929a <_printf_i+0x3a>
  409284:	2a00      	cmp	r2, #0
  409286:	f000 80c8 	beq.w	40941a <_printf_i+0x1ba>
  40928a:	2a58      	cmp	r2, #88	; 0x58
  40928c:	f000 808a 	beq.w	4093a4 <_printf_i+0x144>
  409290:	f104 0542 	add.w	r5, r4, #66	; 0x42
  409294:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  409298:	e02a      	b.n	4092f0 <_printf_i+0x90>
  40929a:	2a64      	cmp	r2, #100	; 0x64
  40929c:	d001      	beq.n	4092a2 <_printf_i+0x42>
  40929e:	2a69      	cmp	r2, #105	; 0x69
  4092a0:	d1f6      	bne.n	409290 <_printf_i+0x30>
  4092a2:	6821      	ldr	r1, [r4, #0]
  4092a4:	681a      	ldr	r2, [r3, #0]
  4092a6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4092aa:	d023      	beq.n	4092f4 <_printf_i+0x94>
  4092ac:	1d11      	adds	r1, r2, #4
  4092ae:	6019      	str	r1, [r3, #0]
  4092b0:	6813      	ldr	r3, [r2, #0]
  4092b2:	e027      	b.n	409304 <_printf_i+0xa4>
  4092b4:	2a73      	cmp	r2, #115	; 0x73
  4092b6:	f000 80b4 	beq.w	409422 <_printf_i+0x1c2>
  4092ba:	d808      	bhi.n	4092ce <_printf_i+0x6e>
  4092bc:	2a6f      	cmp	r2, #111	; 0x6f
  4092be:	d02a      	beq.n	409316 <_printf_i+0xb6>
  4092c0:	2a70      	cmp	r2, #112	; 0x70
  4092c2:	d1e5      	bne.n	409290 <_printf_i+0x30>
  4092c4:	680a      	ldr	r2, [r1, #0]
  4092c6:	f042 0220 	orr.w	r2, r2, #32
  4092ca:	600a      	str	r2, [r1, #0]
  4092cc:	e003      	b.n	4092d6 <_printf_i+0x76>
  4092ce:	2a75      	cmp	r2, #117	; 0x75
  4092d0:	d021      	beq.n	409316 <_printf_i+0xb6>
  4092d2:	2a78      	cmp	r2, #120	; 0x78
  4092d4:	d1dc      	bne.n	409290 <_printf_i+0x30>
  4092d6:	2278      	movs	r2, #120	; 0x78
  4092d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4092dc:	496e      	ldr	r1, [pc, #440]	; (409498 <_printf_i+0x238>)
  4092de:	e064      	b.n	4093aa <_printf_i+0x14a>
  4092e0:	681a      	ldr	r2, [r3, #0]
  4092e2:	f101 0542 	add.w	r5, r1, #66	; 0x42
  4092e6:	1d11      	adds	r1, r2, #4
  4092e8:	6019      	str	r1, [r3, #0]
  4092ea:	6813      	ldr	r3, [r2, #0]
  4092ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4092f0:	2301      	movs	r3, #1
  4092f2:	e0a3      	b.n	40943c <_printf_i+0x1dc>
  4092f4:	f011 0f40 	tst.w	r1, #64	; 0x40
  4092f8:	f102 0104 	add.w	r1, r2, #4
  4092fc:	6019      	str	r1, [r3, #0]
  4092fe:	d0d7      	beq.n	4092b0 <_printf_i+0x50>
  409300:	f9b2 3000 	ldrsh.w	r3, [r2]
  409304:	2b00      	cmp	r3, #0
  409306:	da03      	bge.n	409310 <_printf_i+0xb0>
  409308:	222d      	movs	r2, #45	; 0x2d
  40930a:	425b      	negs	r3, r3
  40930c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  409310:	4962      	ldr	r1, [pc, #392]	; (40949c <_printf_i+0x23c>)
  409312:	220a      	movs	r2, #10
  409314:	e017      	b.n	409346 <_printf_i+0xe6>
  409316:	6820      	ldr	r0, [r4, #0]
  409318:	6819      	ldr	r1, [r3, #0]
  40931a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40931e:	d003      	beq.n	409328 <_printf_i+0xc8>
  409320:	1d08      	adds	r0, r1, #4
  409322:	6018      	str	r0, [r3, #0]
  409324:	680b      	ldr	r3, [r1, #0]
  409326:	e006      	b.n	409336 <_printf_i+0xd6>
  409328:	f010 0f40 	tst.w	r0, #64	; 0x40
  40932c:	f101 0004 	add.w	r0, r1, #4
  409330:	6018      	str	r0, [r3, #0]
  409332:	d0f7      	beq.n	409324 <_printf_i+0xc4>
  409334:	880b      	ldrh	r3, [r1, #0]
  409336:	4959      	ldr	r1, [pc, #356]	; (40949c <_printf_i+0x23c>)
  409338:	2a6f      	cmp	r2, #111	; 0x6f
  40933a:	bf14      	ite	ne
  40933c:	220a      	movne	r2, #10
  40933e:	2208      	moveq	r2, #8
  409340:	2000      	movs	r0, #0
  409342:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  409346:	6865      	ldr	r5, [r4, #4]
  409348:	60a5      	str	r5, [r4, #8]
  40934a:	2d00      	cmp	r5, #0
  40934c:	f2c0 809c 	blt.w	409488 <_printf_i+0x228>
  409350:	6820      	ldr	r0, [r4, #0]
  409352:	f020 0004 	bic.w	r0, r0, #4
  409356:	6020      	str	r0, [r4, #0]
  409358:	2b00      	cmp	r3, #0
  40935a:	d13f      	bne.n	4093dc <_printf_i+0x17c>
  40935c:	2d00      	cmp	r5, #0
  40935e:	f040 8095 	bne.w	40948c <_printf_i+0x22c>
  409362:	4675      	mov	r5, lr
  409364:	2a08      	cmp	r2, #8
  409366:	d10b      	bne.n	409380 <_printf_i+0x120>
  409368:	6823      	ldr	r3, [r4, #0]
  40936a:	07da      	lsls	r2, r3, #31
  40936c:	d508      	bpl.n	409380 <_printf_i+0x120>
  40936e:	6923      	ldr	r3, [r4, #16]
  409370:	6862      	ldr	r2, [r4, #4]
  409372:	429a      	cmp	r2, r3
  409374:	bfde      	ittt	le
  409376:	2330      	movle	r3, #48	; 0x30
  409378:	f805 3c01 	strble.w	r3, [r5, #-1]
  40937c:	f105 35ff 	addle.w	r5, r5, #4294967295
  409380:	ebae 0305 	sub.w	r3, lr, r5
  409384:	6123      	str	r3, [r4, #16]
  409386:	f8cd 8000 	str.w	r8, [sp]
  40938a:	463b      	mov	r3, r7
  40938c:	aa03      	add	r2, sp, #12
  40938e:	4621      	mov	r1, r4
  409390:	4630      	mov	r0, r6
  409392:	f7ff feef 	bl	409174 <_printf_common>
  409396:	3001      	adds	r0, #1
  409398:	d155      	bne.n	409446 <_printf_i+0x1e6>
  40939a:	f04f 30ff 	mov.w	r0, #4294967295
  40939e:	b005      	add	sp, #20
  4093a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4093a4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  4093a8:	493c      	ldr	r1, [pc, #240]	; (40949c <_printf_i+0x23c>)
  4093aa:	6822      	ldr	r2, [r4, #0]
  4093ac:	6818      	ldr	r0, [r3, #0]
  4093ae:	f012 0f80 	tst.w	r2, #128	; 0x80
  4093b2:	f100 0504 	add.w	r5, r0, #4
  4093b6:	601d      	str	r5, [r3, #0]
  4093b8:	d001      	beq.n	4093be <_printf_i+0x15e>
  4093ba:	6803      	ldr	r3, [r0, #0]
  4093bc:	e002      	b.n	4093c4 <_printf_i+0x164>
  4093be:	0655      	lsls	r5, r2, #25
  4093c0:	d5fb      	bpl.n	4093ba <_printf_i+0x15a>
  4093c2:	8803      	ldrh	r3, [r0, #0]
  4093c4:	07d0      	lsls	r0, r2, #31
  4093c6:	bf44      	itt	mi
  4093c8:	f042 0220 	orrmi.w	r2, r2, #32
  4093cc:	6022      	strmi	r2, [r4, #0]
  4093ce:	b91b      	cbnz	r3, 4093d8 <_printf_i+0x178>
  4093d0:	6822      	ldr	r2, [r4, #0]
  4093d2:	f022 0220 	bic.w	r2, r2, #32
  4093d6:	6022      	str	r2, [r4, #0]
  4093d8:	2210      	movs	r2, #16
  4093da:	e7b1      	b.n	409340 <_printf_i+0xe0>
  4093dc:	4675      	mov	r5, lr
  4093de:	fbb3 f0f2 	udiv	r0, r3, r2
  4093e2:	fb02 3310 	mls	r3, r2, r0, r3
  4093e6:	5ccb      	ldrb	r3, [r1, r3]
  4093e8:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4093ec:	4603      	mov	r3, r0
  4093ee:	2800      	cmp	r0, #0
  4093f0:	d1f5      	bne.n	4093de <_printf_i+0x17e>
  4093f2:	e7b7      	b.n	409364 <_printf_i+0x104>
  4093f4:	6808      	ldr	r0, [r1, #0]
  4093f6:	681a      	ldr	r2, [r3, #0]
  4093f8:	6949      	ldr	r1, [r1, #20]
  4093fa:	f010 0f80 	tst.w	r0, #128	; 0x80
  4093fe:	d004      	beq.n	40940a <_printf_i+0x1aa>
  409400:	1d10      	adds	r0, r2, #4
  409402:	6018      	str	r0, [r3, #0]
  409404:	6813      	ldr	r3, [r2, #0]
  409406:	6019      	str	r1, [r3, #0]
  409408:	e007      	b.n	40941a <_printf_i+0x1ba>
  40940a:	f010 0f40 	tst.w	r0, #64	; 0x40
  40940e:	f102 0004 	add.w	r0, r2, #4
  409412:	6018      	str	r0, [r3, #0]
  409414:	6813      	ldr	r3, [r2, #0]
  409416:	d0f6      	beq.n	409406 <_printf_i+0x1a6>
  409418:	8019      	strh	r1, [r3, #0]
  40941a:	2300      	movs	r3, #0
  40941c:	6123      	str	r3, [r4, #16]
  40941e:	4675      	mov	r5, lr
  409420:	e7b1      	b.n	409386 <_printf_i+0x126>
  409422:	681a      	ldr	r2, [r3, #0]
  409424:	1d11      	adds	r1, r2, #4
  409426:	6019      	str	r1, [r3, #0]
  409428:	6815      	ldr	r5, [r2, #0]
  40942a:	6862      	ldr	r2, [r4, #4]
  40942c:	2100      	movs	r1, #0
  40942e:	4628      	mov	r0, r5
  409430:	f001 f966 	bl	40a700 <memchr>
  409434:	b108      	cbz	r0, 40943a <_printf_i+0x1da>
  409436:	1b40      	subs	r0, r0, r5
  409438:	6060      	str	r0, [r4, #4]
  40943a:	6863      	ldr	r3, [r4, #4]
  40943c:	6123      	str	r3, [r4, #16]
  40943e:	2300      	movs	r3, #0
  409440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  409444:	e79f      	b.n	409386 <_printf_i+0x126>
  409446:	6923      	ldr	r3, [r4, #16]
  409448:	462a      	mov	r2, r5
  40944a:	4639      	mov	r1, r7
  40944c:	4630      	mov	r0, r6
  40944e:	47c0      	blx	r8
  409450:	3001      	adds	r0, #1
  409452:	d0a2      	beq.n	40939a <_printf_i+0x13a>
  409454:	6823      	ldr	r3, [r4, #0]
  409456:	079b      	lsls	r3, r3, #30
  409458:	d507      	bpl.n	40946a <_printf_i+0x20a>
  40945a:	2500      	movs	r5, #0
  40945c:	f104 0919 	add.w	r9, r4, #25
  409460:	68e3      	ldr	r3, [r4, #12]
  409462:	9a03      	ldr	r2, [sp, #12]
  409464:	1a9b      	subs	r3, r3, r2
  409466:	429d      	cmp	r5, r3
  409468:	db05      	blt.n	409476 <_printf_i+0x216>
  40946a:	68e0      	ldr	r0, [r4, #12]
  40946c:	9b03      	ldr	r3, [sp, #12]
  40946e:	4298      	cmp	r0, r3
  409470:	bfb8      	it	lt
  409472:	4618      	movlt	r0, r3
  409474:	e793      	b.n	40939e <_printf_i+0x13e>
  409476:	2301      	movs	r3, #1
  409478:	464a      	mov	r2, r9
  40947a:	4639      	mov	r1, r7
  40947c:	4630      	mov	r0, r6
  40947e:	47c0      	blx	r8
  409480:	3001      	adds	r0, #1
  409482:	d08a      	beq.n	40939a <_printf_i+0x13a>
  409484:	3501      	adds	r5, #1
  409486:	e7eb      	b.n	409460 <_printf_i+0x200>
  409488:	2b00      	cmp	r3, #0
  40948a:	d1a7      	bne.n	4093dc <_printf_i+0x17c>
  40948c:	780b      	ldrb	r3, [r1, #0]
  40948e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  409492:	f104 0542 	add.w	r5, r4, #66	; 0x42
  409496:	e765      	b.n	409364 <_printf_i+0x104>
  409498:	0040cd5b 	.word	0x0040cd5b
  40949c:	0040cd4a 	.word	0x0040cd4a

004094a0 <iprintf>:
  4094a0:	b40f      	push	{r0, r1, r2, r3}
  4094a2:	4b0a      	ldr	r3, [pc, #40]	; (4094cc <iprintf+0x2c>)
  4094a4:	b513      	push	{r0, r1, r4, lr}
  4094a6:	681c      	ldr	r4, [r3, #0]
  4094a8:	b124      	cbz	r4, 4094b4 <iprintf+0x14>
  4094aa:	69a3      	ldr	r3, [r4, #24]
  4094ac:	b913      	cbnz	r3, 4094b4 <iprintf+0x14>
  4094ae:	4620      	mov	r0, r4
  4094b0:	f001 f81e 	bl	40a4f0 <__sinit>
  4094b4:	ab05      	add	r3, sp, #20
  4094b6:	9a04      	ldr	r2, [sp, #16]
  4094b8:	68a1      	ldr	r1, [r4, #8]
  4094ba:	9301      	str	r3, [sp, #4]
  4094bc:	4620      	mov	r0, r4
  4094be:	f001 fd21 	bl	40af04 <_vfiprintf_r>
  4094c2:	b002      	add	sp, #8
  4094c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4094c8:	b004      	add	sp, #16
  4094ca:	4770      	bx	lr
  4094cc:	20000178 	.word	0x20000178

004094d0 <setbuf>:
  4094d0:	2900      	cmp	r1, #0
  4094d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4094d6:	bf0c      	ite	eq
  4094d8:	2202      	moveq	r2, #2
  4094da:	2200      	movne	r2, #0
  4094dc:	f000 b800 	b.w	4094e0 <setvbuf>

004094e0 <setvbuf>:
  4094e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4094e4:	461d      	mov	r5, r3
  4094e6:	4b51      	ldr	r3, [pc, #324]	; (40962c <setvbuf+0x14c>)
  4094e8:	681e      	ldr	r6, [r3, #0]
  4094ea:	4604      	mov	r4, r0
  4094ec:	460f      	mov	r7, r1
  4094ee:	4690      	mov	r8, r2
  4094f0:	b126      	cbz	r6, 4094fc <setvbuf+0x1c>
  4094f2:	69b3      	ldr	r3, [r6, #24]
  4094f4:	b913      	cbnz	r3, 4094fc <setvbuf+0x1c>
  4094f6:	4630      	mov	r0, r6
  4094f8:	f000 fffa 	bl	40a4f0 <__sinit>
  4094fc:	4b4c      	ldr	r3, [pc, #304]	; (409630 <setvbuf+0x150>)
  4094fe:	429c      	cmp	r4, r3
  409500:	d152      	bne.n	4095a8 <setvbuf+0xc8>
  409502:	6874      	ldr	r4, [r6, #4]
  409504:	f1b8 0f02 	cmp.w	r8, #2
  409508:	d006      	beq.n	409518 <setvbuf+0x38>
  40950a:	f1b8 0f01 	cmp.w	r8, #1
  40950e:	f200 8089 	bhi.w	409624 <setvbuf+0x144>
  409512:	2d00      	cmp	r5, #0
  409514:	f2c0 8086 	blt.w	409624 <setvbuf+0x144>
  409518:	4621      	mov	r1, r4
  40951a:	4630      	mov	r0, r6
  40951c:	f000 ff7e 	bl	40a41c <_fflush_r>
  409520:	6b61      	ldr	r1, [r4, #52]	; 0x34
  409522:	b141      	cbz	r1, 409536 <setvbuf+0x56>
  409524:	f104 0344 	add.w	r3, r4, #68	; 0x44
  409528:	4299      	cmp	r1, r3
  40952a:	d002      	beq.n	409532 <setvbuf+0x52>
  40952c:	4630      	mov	r0, r6
  40952e:	f001 fc15 	bl	40ad5c <_free_r>
  409532:	2300      	movs	r3, #0
  409534:	6363      	str	r3, [r4, #52]	; 0x34
  409536:	2300      	movs	r3, #0
  409538:	61a3      	str	r3, [r4, #24]
  40953a:	6063      	str	r3, [r4, #4]
  40953c:	89a3      	ldrh	r3, [r4, #12]
  40953e:	061b      	lsls	r3, r3, #24
  409540:	d503      	bpl.n	40954a <setvbuf+0x6a>
  409542:	6921      	ldr	r1, [r4, #16]
  409544:	4630      	mov	r0, r6
  409546:	f001 fc09 	bl	40ad5c <_free_r>
  40954a:	89a3      	ldrh	r3, [r4, #12]
  40954c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  409550:	f023 0303 	bic.w	r3, r3, #3
  409554:	f1b8 0f02 	cmp.w	r8, #2
  409558:	81a3      	strh	r3, [r4, #12]
  40955a:	d05d      	beq.n	409618 <setvbuf+0x138>
  40955c:	ab01      	add	r3, sp, #4
  40955e:	466a      	mov	r2, sp
  409560:	4621      	mov	r1, r4
  409562:	4630      	mov	r0, r6
  409564:	f001 f85c 	bl	40a620 <__swhatbuf_r>
  409568:	89a3      	ldrh	r3, [r4, #12]
  40956a:	4318      	orrs	r0, r3
  40956c:	81a0      	strh	r0, [r4, #12]
  40956e:	bb2d      	cbnz	r5, 4095bc <setvbuf+0xdc>
  409570:	9d00      	ldr	r5, [sp, #0]
  409572:	4628      	mov	r0, r5
  409574:	f001 f8b8 	bl	40a6e8 <malloc>
  409578:	4607      	mov	r7, r0
  40957a:	2800      	cmp	r0, #0
  40957c:	d14e      	bne.n	40961c <setvbuf+0x13c>
  40957e:	f8dd 9000 	ldr.w	r9, [sp]
  409582:	45a9      	cmp	r9, r5
  409584:	d13c      	bne.n	409600 <setvbuf+0x120>
  409586:	f04f 30ff 	mov.w	r0, #4294967295
  40958a:	89a3      	ldrh	r3, [r4, #12]
  40958c:	f043 0302 	orr.w	r3, r3, #2
  409590:	81a3      	strh	r3, [r4, #12]
  409592:	2300      	movs	r3, #0
  409594:	60a3      	str	r3, [r4, #8]
  409596:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40959a:	6023      	str	r3, [r4, #0]
  40959c:	6123      	str	r3, [r4, #16]
  40959e:	2301      	movs	r3, #1
  4095a0:	6163      	str	r3, [r4, #20]
  4095a2:	b003      	add	sp, #12
  4095a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4095a8:	4b22      	ldr	r3, [pc, #136]	; (409634 <setvbuf+0x154>)
  4095aa:	429c      	cmp	r4, r3
  4095ac:	d101      	bne.n	4095b2 <setvbuf+0xd2>
  4095ae:	68b4      	ldr	r4, [r6, #8]
  4095b0:	e7a8      	b.n	409504 <setvbuf+0x24>
  4095b2:	4b21      	ldr	r3, [pc, #132]	; (409638 <setvbuf+0x158>)
  4095b4:	429c      	cmp	r4, r3
  4095b6:	bf08      	it	eq
  4095b8:	68f4      	ldreq	r4, [r6, #12]
  4095ba:	e7a3      	b.n	409504 <setvbuf+0x24>
  4095bc:	2f00      	cmp	r7, #0
  4095be:	d0d8      	beq.n	409572 <setvbuf+0x92>
  4095c0:	69b3      	ldr	r3, [r6, #24]
  4095c2:	b913      	cbnz	r3, 4095ca <setvbuf+0xea>
  4095c4:	4630      	mov	r0, r6
  4095c6:	f000 ff93 	bl	40a4f0 <__sinit>
  4095ca:	f1b8 0f01 	cmp.w	r8, #1
  4095ce:	bf08      	it	eq
  4095d0:	89a3      	ldrheq	r3, [r4, #12]
  4095d2:	6027      	str	r7, [r4, #0]
  4095d4:	bf04      	itt	eq
  4095d6:	f043 0301 	orreq.w	r3, r3, #1
  4095da:	81a3      	strheq	r3, [r4, #12]
  4095dc:	89a3      	ldrh	r3, [r4, #12]
  4095de:	6127      	str	r7, [r4, #16]
  4095e0:	f013 0008 	ands.w	r0, r3, #8
  4095e4:	6165      	str	r5, [r4, #20]
  4095e6:	d01b      	beq.n	409620 <setvbuf+0x140>
  4095e8:	f013 0001 	ands.w	r0, r3, #1
  4095ec:	bf18      	it	ne
  4095ee:	426d      	negne	r5, r5
  4095f0:	f04f 0300 	mov.w	r3, #0
  4095f4:	bf1d      	ittte	ne
  4095f6:	60a3      	strne	r3, [r4, #8]
  4095f8:	61a5      	strne	r5, [r4, #24]
  4095fa:	4618      	movne	r0, r3
  4095fc:	60a5      	streq	r5, [r4, #8]
  4095fe:	e7d0      	b.n	4095a2 <setvbuf+0xc2>
  409600:	4648      	mov	r0, r9
  409602:	f001 f871 	bl	40a6e8 <malloc>
  409606:	4607      	mov	r7, r0
  409608:	2800      	cmp	r0, #0
  40960a:	d0bc      	beq.n	409586 <setvbuf+0xa6>
  40960c:	89a3      	ldrh	r3, [r4, #12]
  40960e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  409612:	81a3      	strh	r3, [r4, #12]
  409614:	464d      	mov	r5, r9
  409616:	e7d3      	b.n	4095c0 <setvbuf+0xe0>
  409618:	2000      	movs	r0, #0
  40961a:	e7b6      	b.n	40958a <setvbuf+0xaa>
  40961c:	46a9      	mov	r9, r5
  40961e:	e7f5      	b.n	40960c <setvbuf+0x12c>
  409620:	60a0      	str	r0, [r4, #8]
  409622:	e7be      	b.n	4095a2 <setvbuf+0xc2>
  409624:	f04f 30ff 	mov.w	r0, #4294967295
  409628:	e7bb      	b.n	4095a2 <setvbuf+0xc2>
  40962a:	bf00      	nop
  40962c:	20000178 	.word	0x20000178
  409630:	0040cd9c 	.word	0x0040cd9c
  409634:	0040cdbc 	.word	0x0040cdbc
  409638:	0040cd7c 	.word	0x0040cd7c

0040963c <strlen>:
  40963c:	4603      	mov	r3, r0
  40963e:	f813 2b01 	ldrb.w	r2, [r3], #1
  409642:	2a00      	cmp	r2, #0
  409644:	d1fb      	bne.n	40963e <strlen+0x2>
  409646:	1a18      	subs	r0, r3, r0
  409648:	3801      	subs	r0, #1
  40964a:	4770      	bx	lr

0040964c <quorem>:
  40964c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409650:	6903      	ldr	r3, [r0, #16]
  409652:	690c      	ldr	r4, [r1, #16]
  409654:	429c      	cmp	r4, r3
  409656:	4680      	mov	r8, r0
  409658:	f300 8082 	bgt.w	409760 <quorem+0x114>
  40965c:	3c01      	subs	r4, #1
  40965e:	f101 0714 	add.w	r7, r1, #20
  409662:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  409666:	f100 0614 	add.w	r6, r0, #20
  40966a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  40966e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  409672:	eb06 030e 	add.w	r3, r6, lr
  409676:	3501      	adds	r5, #1
  409678:	eb07 090e 	add.w	r9, r7, lr
  40967c:	9301      	str	r3, [sp, #4]
  40967e:	fbb0 f5f5 	udiv	r5, r0, r5
  409682:	b395      	cbz	r5, 4096ea <quorem+0x9e>
  409684:	f04f 0a00 	mov.w	sl, #0
  409688:	4638      	mov	r0, r7
  40968a:	46b4      	mov	ip, r6
  40968c:	46d3      	mov	fp, sl
  40968e:	f850 2b04 	ldr.w	r2, [r0], #4
  409692:	b293      	uxth	r3, r2
  409694:	fb05 a303 	mla	r3, r5, r3, sl
  409698:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  40969c:	b29b      	uxth	r3, r3
  40969e:	ebab 0303 	sub.w	r3, fp, r3
  4096a2:	0c12      	lsrs	r2, r2, #16
  4096a4:	f8bc b000 	ldrh.w	fp, [ip]
  4096a8:	fb05 a202 	mla	r2, r5, r2, sl
  4096ac:	fa13 f38b 	uxtah	r3, r3, fp
  4096b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4096b4:	fa1f fb82 	uxth.w	fp, r2
  4096b8:	f8dc 2000 	ldr.w	r2, [ip]
  4096bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4096c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4096c4:	b29b      	uxth	r3, r3
  4096c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4096ca:	4581      	cmp	r9, r0
  4096cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4096d0:	f84c 3b04 	str.w	r3, [ip], #4
  4096d4:	d2db      	bcs.n	40968e <quorem+0x42>
  4096d6:	f856 300e 	ldr.w	r3, [r6, lr]
  4096da:	b933      	cbnz	r3, 4096ea <quorem+0x9e>
  4096dc:	9b01      	ldr	r3, [sp, #4]
  4096de:	3b04      	subs	r3, #4
  4096e0:	429e      	cmp	r6, r3
  4096e2:	461a      	mov	r2, r3
  4096e4:	d330      	bcc.n	409748 <quorem+0xfc>
  4096e6:	f8c8 4010 	str.w	r4, [r8, #16]
  4096ea:	4640      	mov	r0, r8
  4096ec:	f001 fa61 	bl	40abb2 <__mcmp>
  4096f0:	2800      	cmp	r0, #0
  4096f2:	db25      	blt.n	409740 <quorem+0xf4>
  4096f4:	3501      	adds	r5, #1
  4096f6:	4630      	mov	r0, r6
  4096f8:	f04f 0e00 	mov.w	lr, #0
  4096fc:	f857 2b04 	ldr.w	r2, [r7], #4
  409700:	f8d0 c000 	ldr.w	ip, [r0]
  409704:	b293      	uxth	r3, r2
  409706:	ebae 0303 	sub.w	r3, lr, r3
  40970a:	0c12      	lsrs	r2, r2, #16
  40970c:	fa13 f38c 	uxtah	r3, r3, ip
  409710:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  409714:	eb02 4223 	add.w	r2, r2, r3, asr #16
  409718:	b29b      	uxth	r3, r3
  40971a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40971e:	45b9      	cmp	r9, r7
  409720:	ea4f 4e22 	mov.w	lr, r2, asr #16
  409724:	f840 3b04 	str.w	r3, [r0], #4
  409728:	d2e8      	bcs.n	4096fc <quorem+0xb0>
  40972a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40972e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  409732:	b92a      	cbnz	r2, 409740 <quorem+0xf4>
  409734:	3b04      	subs	r3, #4
  409736:	429e      	cmp	r6, r3
  409738:	461a      	mov	r2, r3
  40973a:	d30b      	bcc.n	409754 <quorem+0x108>
  40973c:	f8c8 4010 	str.w	r4, [r8, #16]
  409740:	4628      	mov	r0, r5
  409742:	b003      	add	sp, #12
  409744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409748:	6812      	ldr	r2, [r2, #0]
  40974a:	3b04      	subs	r3, #4
  40974c:	2a00      	cmp	r2, #0
  40974e:	d1ca      	bne.n	4096e6 <quorem+0x9a>
  409750:	3c01      	subs	r4, #1
  409752:	e7c5      	b.n	4096e0 <quorem+0x94>
  409754:	6812      	ldr	r2, [r2, #0]
  409756:	3b04      	subs	r3, #4
  409758:	2a00      	cmp	r2, #0
  40975a:	d1ef      	bne.n	40973c <quorem+0xf0>
  40975c:	3c01      	subs	r4, #1
  40975e:	e7ea      	b.n	409736 <quorem+0xea>
  409760:	2000      	movs	r0, #0
  409762:	e7ee      	b.n	409742 <quorem+0xf6>
  409764:	0000      	movs	r0, r0
	...

00409768 <_dtoa_r>:
  409768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40976c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40976e:	b095      	sub	sp, #84	; 0x54
  409770:	4604      	mov	r4, r0
  409772:	9d21      	ldr	r5, [sp, #132]	; 0x84
  409774:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409778:	b93e      	cbnz	r6, 40978a <_dtoa_r+0x22>
  40977a:	2010      	movs	r0, #16
  40977c:	f000 ffb4 	bl	40a6e8 <malloc>
  409780:	6260      	str	r0, [r4, #36]	; 0x24
  409782:	6046      	str	r6, [r0, #4]
  409784:	6086      	str	r6, [r0, #8]
  409786:	6006      	str	r6, [r0, #0]
  409788:	60c6      	str	r6, [r0, #12]
  40978a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40978c:	6819      	ldr	r1, [r3, #0]
  40978e:	b151      	cbz	r1, 4097a6 <_dtoa_r+0x3e>
  409790:	685a      	ldr	r2, [r3, #4]
  409792:	604a      	str	r2, [r1, #4]
  409794:	2301      	movs	r3, #1
  409796:	4093      	lsls	r3, r2
  409798:	608b      	str	r3, [r1, #8]
  40979a:	4620      	mov	r0, r4
  40979c:	f001 f834 	bl	40a808 <_Bfree>
  4097a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4097a2:	2200      	movs	r2, #0
  4097a4:	601a      	str	r2, [r3, #0]
  4097a6:	9b03      	ldr	r3, [sp, #12]
  4097a8:	2b00      	cmp	r3, #0
  4097aa:	bfbf      	itttt	lt
  4097ac:	2301      	movlt	r3, #1
  4097ae:	602b      	strlt	r3, [r5, #0]
  4097b0:	9b03      	ldrlt	r3, [sp, #12]
  4097b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4097b6:	bfb2      	itee	lt
  4097b8:	9303      	strlt	r3, [sp, #12]
  4097ba:	2300      	movge	r3, #0
  4097bc:	602b      	strge	r3, [r5, #0]
  4097be:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4097c2:	4ba9      	ldr	r3, [pc, #676]	; (409a68 <_dtoa_r+0x300>)
  4097c4:	ea33 0309 	bics.w	r3, r3, r9
  4097c8:	d11b      	bne.n	409802 <_dtoa_r+0x9a>
  4097ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4097cc:	f242 730f 	movw	r3, #9999	; 0x270f
  4097d0:	6013      	str	r3, [r2, #0]
  4097d2:	9b02      	ldr	r3, [sp, #8]
  4097d4:	b923      	cbnz	r3, 4097e0 <_dtoa_r+0x78>
  4097d6:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4097da:	2800      	cmp	r0, #0
  4097dc:	f000 8581 	beq.w	40a2e2 <_dtoa_r+0xb7a>
  4097e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4097e2:	b953      	cbnz	r3, 4097fa <_dtoa_r+0x92>
  4097e4:	4ba1      	ldr	r3, [pc, #644]	; (409a6c <_dtoa_r+0x304>)
  4097e6:	e021      	b.n	40982c <_dtoa_r+0xc4>
  4097e8:	4ba1      	ldr	r3, [pc, #644]	; (409a70 <_dtoa_r+0x308>)
  4097ea:	9306      	str	r3, [sp, #24]
  4097ec:	3308      	adds	r3, #8
  4097ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4097f0:	6013      	str	r3, [r2, #0]
  4097f2:	9806      	ldr	r0, [sp, #24]
  4097f4:	b015      	add	sp, #84	; 0x54
  4097f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4097fa:	4b9c      	ldr	r3, [pc, #624]	; (409a6c <_dtoa_r+0x304>)
  4097fc:	9306      	str	r3, [sp, #24]
  4097fe:	3303      	adds	r3, #3
  409800:	e7f5      	b.n	4097ee <_dtoa_r+0x86>
  409802:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  409806:	2200      	movs	r2, #0
  409808:	2300      	movs	r3, #0
  40980a:	4630      	mov	r0, r6
  40980c:	4639      	mov	r1, r7
  40980e:	f002 fa4d 	bl	40bcac <__aeabi_dcmpeq>
  409812:	4680      	mov	r8, r0
  409814:	b160      	cbz	r0, 409830 <_dtoa_r+0xc8>
  409816:	9a20      	ldr	r2, [sp, #128]	; 0x80
  409818:	2301      	movs	r3, #1
  40981a:	6013      	str	r3, [r2, #0]
  40981c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40981e:	2b00      	cmp	r3, #0
  409820:	f000 855c 	beq.w	40a2dc <_dtoa_r+0xb74>
  409824:	4b93      	ldr	r3, [pc, #588]	; (409a74 <_dtoa_r+0x30c>)
  409826:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409828:	6013      	str	r3, [r2, #0]
  40982a:	3b01      	subs	r3, #1
  40982c:	9306      	str	r3, [sp, #24]
  40982e:	e7e0      	b.n	4097f2 <_dtoa_r+0x8a>
  409830:	ab12      	add	r3, sp, #72	; 0x48
  409832:	9301      	str	r3, [sp, #4]
  409834:	ab13      	add	r3, sp, #76	; 0x4c
  409836:	9300      	str	r3, [sp, #0]
  409838:	4632      	mov	r2, r6
  40983a:	463b      	mov	r3, r7
  40983c:	4620      	mov	r0, r4
  40983e:	f001 fa30 	bl	40aca2 <__d2b>
  409842:	f3c9 550a 	ubfx	r5, r9, #20, #11
  409846:	4682      	mov	sl, r0
  409848:	2d00      	cmp	r5, #0
  40984a:	d07c      	beq.n	409946 <_dtoa_r+0x1de>
  40984c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  409850:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  409854:	4630      	mov	r0, r6
  409856:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40985a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40985e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  409862:	2200      	movs	r2, #0
  409864:	4b84      	ldr	r3, [pc, #528]	; (409a78 <_dtoa_r+0x310>)
  409866:	f001 fe05 	bl	40b474 <__aeabi_dsub>
  40986a:	a379      	add	r3, pc, #484	; (adr r3, 409a50 <_dtoa_r+0x2e8>)
  40986c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409870:	f001 ffb4 	bl	40b7dc <__aeabi_dmul>
  409874:	a378      	add	r3, pc, #480	; (adr r3, 409a58 <_dtoa_r+0x2f0>)
  409876:	e9d3 2300 	ldrd	r2, r3, [r3]
  40987a:	f001 fdfd 	bl	40b478 <__adddf3>
  40987e:	4606      	mov	r6, r0
  409880:	4628      	mov	r0, r5
  409882:	460f      	mov	r7, r1
  409884:	f001 ff44 	bl	40b710 <__aeabi_i2d>
  409888:	a375      	add	r3, pc, #468	; (adr r3, 409a60 <_dtoa_r+0x2f8>)
  40988a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40988e:	f001 ffa5 	bl	40b7dc <__aeabi_dmul>
  409892:	4602      	mov	r2, r0
  409894:	460b      	mov	r3, r1
  409896:	4630      	mov	r0, r6
  409898:	4639      	mov	r1, r7
  40989a:	f001 fded 	bl	40b478 <__adddf3>
  40989e:	4606      	mov	r6, r0
  4098a0:	460f      	mov	r7, r1
  4098a2:	f002 fa4b 	bl	40bd3c <__aeabi_d2iz>
  4098a6:	2200      	movs	r2, #0
  4098a8:	4683      	mov	fp, r0
  4098aa:	2300      	movs	r3, #0
  4098ac:	4630      	mov	r0, r6
  4098ae:	4639      	mov	r1, r7
  4098b0:	f002 fa06 	bl	40bcc0 <__aeabi_dcmplt>
  4098b4:	b158      	cbz	r0, 4098ce <_dtoa_r+0x166>
  4098b6:	4658      	mov	r0, fp
  4098b8:	f001 ff2a 	bl	40b710 <__aeabi_i2d>
  4098bc:	4602      	mov	r2, r0
  4098be:	460b      	mov	r3, r1
  4098c0:	4630      	mov	r0, r6
  4098c2:	4639      	mov	r1, r7
  4098c4:	f002 f9f2 	bl	40bcac <__aeabi_dcmpeq>
  4098c8:	b908      	cbnz	r0, 4098ce <_dtoa_r+0x166>
  4098ca:	f10b 3bff 	add.w	fp, fp, #4294967295
  4098ce:	f1bb 0f16 	cmp.w	fp, #22
  4098d2:	d857      	bhi.n	409984 <_dtoa_r+0x21c>
  4098d4:	4969      	ldr	r1, [pc, #420]	; (409a7c <_dtoa_r+0x314>)
  4098d6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4098da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4098de:	e9d1 0100 	ldrd	r0, r1, [r1]
  4098e2:	f002 fa0b 	bl	40bcfc <__aeabi_dcmpgt>
  4098e6:	2800      	cmp	r0, #0
  4098e8:	d04e      	beq.n	409988 <_dtoa_r+0x220>
  4098ea:	f10b 3bff 	add.w	fp, fp, #4294967295
  4098ee:	2300      	movs	r3, #0
  4098f0:	930d      	str	r3, [sp, #52]	; 0x34
  4098f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4098f4:	1b5d      	subs	r5, r3, r5
  4098f6:	1e6b      	subs	r3, r5, #1
  4098f8:	9307      	str	r3, [sp, #28]
  4098fa:	bf43      	ittte	mi
  4098fc:	2300      	movmi	r3, #0
  4098fe:	f1c5 0801 	rsbmi	r8, r5, #1
  409902:	9307      	strmi	r3, [sp, #28]
  409904:	f04f 0800 	movpl.w	r8, #0
  409908:	f1bb 0f00 	cmp.w	fp, #0
  40990c:	db3e      	blt.n	40998c <_dtoa_r+0x224>
  40990e:	9b07      	ldr	r3, [sp, #28]
  409910:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  409914:	445b      	add	r3, fp
  409916:	9307      	str	r3, [sp, #28]
  409918:	2300      	movs	r3, #0
  40991a:	9308      	str	r3, [sp, #32]
  40991c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40991e:	2b09      	cmp	r3, #9
  409920:	f200 80b0 	bhi.w	409a84 <_dtoa_r+0x31c>
  409924:	2b05      	cmp	r3, #5
  409926:	bfc4      	itt	gt
  409928:	3b04      	subgt	r3, #4
  40992a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40992c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40992e:	f1a3 0302 	sub.w	r3, r3, #2
  409932:	bfcc      	ite	gt
  409934:	2600      	movgt	r6, #0
  409936:	2601      	movle	r6, #1
  409938:	2b03      	cmp	r3, #3
  40993a:	f200 80af 	bhi.w	409a9c <_dtoa_r+0x334>
  40993e:	e8df f003 	tbb	[pc, r3]
  409942:	8583      	.short	0x8583
  409944:	772d      	.short	0x772d
  409946:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409948:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40994a:	441d      	add	r5, r3
  40994c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  409950:	2b20      	cmp	r3, #32
  409952:	dd11      	ble.n	409978 <_dtoa_r+0x210>
  409954:	9a02      	ldr	r2, [sp, #8]
  409956:	f205 4012 	addw	r0, r5, #1042	; 0x412
  40995a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40995e:	fa22 f000 	lsr.w	r0, r2, r0
  409962:	fa09 f303 	lsl.w	r3, r9, r3
  409966:	4318      	orrs	r0, r3
  409968:	f001 fec2 	bl	40b6f0 <__aeabi_ui2d>
  40996c:	2301      	movs	r3, #1
  40996e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409972:	3d01      	subs	r5, #1
  409974:	9310      	str	r3, [sp, #64]	; 0x40
  409976:	e774      	b.n	409862 <_dtoa_r+0xfa>
  409978:	f1c3 0020 	rsb	r0, r3, #32
  40997c:	9b02      	ldr	r3, [sp, #8]
  40997e:	fa03 f000 	lsl.w	r0, r3, r0
  409982:	e7f1      	b.n	409968 <_dtoa_r+0x200>
  409984:	2301      	movs	r3, #1
  409986:	e7b3      	b.n	4098f0 <_dtoa_r+0x188>
  409988:	900d      	str	r0, [sp, #52]	; 0x34
  40998a:	e7b2      	b.n	4098f2 <_dtoa_r+0x18a>
  40998c:	f1cb 0300 	rsb	r3, fp, #0
  409990:	9308      	str	r3, [sp, #32]
  409992:	2300      	movs	r3, #0
  409994:	eba8 080b 	sub.w	r8, r8, fp
  409998:	930c      	str	r3, [sp, #48]	; 0x30
  40999a:	e7bf      	b.n	40991c <_dtoa_r+0x1b4>
  40999c:	2301      	movs	r3, #1
  40999e:	9309      	str	r3, [sp, #36]	; 0x24
  4099a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4099a2:	2b00      	cmp	r3, #0
  4099a4:	dd7d      	ble.n	409aa2 <_dtoa_r+0x33a>
  4099a6:	9304      	str	r3, [sp, #16]
  4099a8:	4699      	mov	r9, r3
  4099aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4099ac:	2200      	movs	r2, #0
  4099ae:	606a      	str	r2, [r5, #4]
  4099b0:	2104      	movs	r1, #4
  4099b2:	f101 0214 	add.w	r2, r1, #20
  4099b6:	429a      	cmp	r2, r3
  4099b8:	d978      	bls.n	409aac <_dtoa_r+0x344>
  4099ba:	6869      	ldr	r1, [r5, #4]
  4099bc:	4620      	mov	r0, r4
  4099be:	f000 feef 	bl	40a7a0 <_Balloc>
  4099c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4099c4:	6028      	str	r0, [r5, #0]
  4099c6:	681b      	ldr	r3, [r3, #0]
  4099c8:	9306      	str	r3, [sp, #24]
  4099ca:	f1b9 0f0e 	cmp.w	r9, #14
  4099ce:	f200 80ee 	bhi.w	409bae <_dtoa_r+0x446>
  4099d2:	2e00      	cmp	r6, #0
  4099d4:	f000 80eb 	beq.w	409bae <_dtoa_r+0x446>
  4099d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4099dc:	f1bb 0f00 	cmp.w	fp, #0
  4099e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4099e4:	dd77      	ble.n	409ad6 <_dtoa_r+0x36e>
  4099e6:	4a25      	ldr	r2, [pc, #148]	; (409a7c <_dtoa_r+0x314>)
  4099e8:	f00b 030f 	and.w	r3, fp, #15
  4099ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4099f4:	ea4f 162b 	mov.w	r6, fp, asr #4
  4099f8:	06f0      	lsls	r0, r6, #27
  4099fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4099fe:	d55a      	bpl.n	409ab6 <_dtoa_r+0x34e>
  409a00:	4b1f      	ldr	r3, [pc, #124]	; (409a80 <_dtoa_r+0x318>)
  409a02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  409a06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  409a0a:	f002 f811 	bl	40ba30 <__aeabi_ddiv>
  409a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409a12:	f006 060f 	and.w	r6, r6, #15
  409a16:	2503      	movs	r5, #3
  409a18:	4f19      	ldr	r7, [pc, #100]	; (409a80 <_dtoa_r+0x318>)
  409a1a:	2e00      	cmp	r6, #0
  409a1c:	d14d      	bne.n	409aba <_dtoa_r+0x352>
  409a1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409a26:	f002 f803 	bl	40ba30 <__aeabi_ddiv>
  409a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409a2e:	e06c      	b.n	409b0a <_dtoa_r+0x3a2>
  409a30:	2301      	movs	r3, #1
  409a32:	9309      	str	r3, [sp, #36]	; 0x24
  409a34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409a36:	445b      	add	r3, fp
  409a38:	f103 0901 	add.w	r9, r3, #1
  409a3c:	9304      	str	r3, [sp, #16]
  409a3e:	464b      	mov	r3, r9
  409a40:	2b01      	cmp	r3, #1
  409a42:	bfb8      	it	lt
  409a44:	2301      	movlt	r3, #1
  409a46:	e7b0      	b.n	4099aa <_dtoa_r+0x242>
  409a48:	2300      	movs	r3, #0
  409a4a:	e7a8      	b.n	40999e <_dtoa_r+0x236>
  409a4c:	2300      	movs	r3, #0
  409a4e:	e7f0      	b.n	409a32 <_dtoa_r+0x2ca>
  409a50:	636f4361 	.word	0x636f4361
  409a54:	3fd287a7 	.word	0x3fd287a7
  409a58:	8b60c8b3 	.word	0x8b60c8b3
  409a5c:	3fc68a28 	.word	0x3fc68a28
  409a60:	509f79fb 	.word	0x509f79fb
  409a64:	3fd34413 	.word	0x3fd34413
  409a68:	7ff00000 	.word	0x7ff00000
  409a6c:	0040cd75 	.word	0x0040cd75
  409a70:	0040cd6c 	.word	0x0040cd6c
  409a74:	0040cd49 	.word	0x0040cd49
  409a78:	3ff80000 	.word	0x3ff80000
  409a7c:	0040ce08 	.word	0x0040ce08
  409a80:	0040cde0 	.word	0x0040cde0
  409a84:	2601      	movs	r6, #1
  409a86:	2300      	movs	r3, #0
  409a88:	931e      	str	r3, [sp, #120]	; 0x78
  409a8a:	9609      	str	r6, [sp, #36]	; 0x24
  409a8c:	f04f 33ff 	mov.w	r3, #4294967295
  409a90:	9304      	str	r3, [sp, #16]
  409a92:	4699      	mov	r9, r3
  409a94:	2200      	movs	r2, #0
  409a96:	2312      	movs	r3, #18
  409a98:	921f      	str	r2, [sp, #124]	; 0x7c
  409a9a:	e786      	b.n	4099aa <_dtoa_r+0x242>
  409a9c:	2301      	movs	r3, #1
  409a9e:	9309      	str	r3, [sp, #36]	; 0x24
  409aa0:	e7f4      	b.n	409a8c <_dtoa_r+0x324>
  409aa2:	2301      	movs	r3, #1
  409aa4:	9304      	str	r3, [sp, #16]
  409aa6:	4699      	mov	r9, r3
  409aa8:	461a      	mov	r2, r3
  409aaa:	e7f5      	b.n	409a98 <_dtoa_r+0x330>
  409aac:	686a      	ldr	r2, [r5, #4]
  409aae:	3201      	adds	r2, #1
  409ab0:	606a      	str	r2, [r5, #4]
  409ab2:	0049      	lsls	r1, r1, #1
  409ab4:	e77d      	b.n	4099b2 <_dtoa_r+0x24a>
  409ab6:	2502      	movs	r5, #2
  409ab8:	e7ae      	b.n	409a18 <_dtoa_r+0x2b0>
  409aba:	07f1      	lsls	r1, r6, #31
  409abc:	d508      	bpl.n	409ad0 <_dtoa_r+0x368>
  409abe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
  409ac6:	f001 fe89 	bl	40b7dc <__aeabi_dmul>
  409aca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409ace:	3501      	adds	r5, #1
  409ad0:	1076      	asrs	r6, r6, #1
  409ad2:	3708      	adds	r7, #8
  409ad4:	e7a1      	b.n	409a1a <_dtoa_r+0x2b2>
  409ad6:	f000 80a5 	beq.w	409c24 <_dtoa_r+0x4bc>
  409ada:	f1cb 0600 	rsb	r6, fp, #0
  409ade:	4ba3      	ldr	r3, [pc, #652]	; (409d6c <_dtoa_r+0x604>)
  409ae0:	4fa3      	ldr	r7, [pc, #652]	; (409d70 <_dtoa_r+0x608>)
  409ae2:	f006 020f 	and.w	r2, r6, #15
  409ae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409aea:	e9d3 2300 	ldrd	r2, r3, [r3]
  409aee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  409af2:	f001 fe73 	bl	40b7dc <__aeabi_dmul>
  409af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409afa:	1136      	asrs	r6, r6, #4
  409afc:	2300      	movs	r3, #0
  409afe:	2502      	movs	r5, #2
  409b00:	2e00      	cmp	r6, #0
  409b02:	f040 8084 	bne.w	409c0e <_dtoa_r+0x4a6>
  409b06:	2b00      	cmp	r3, #0
  409b08:	d18f      	bne.n	409a2a <_dtoa_r+0x2c2>
  409b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409b0c:	2b00      	cmp	r3, #0
  409b0e:	f000 808b 	beq.w	409c28 <_dtoa_r+0x4c0>
  409b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409b16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  409b1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409b1e:	2200      	movs	r2, #0
  409b20:	4b94      	ldr	r3, [pc, #592]	; (409d74 <_dtoa_r+0x60c>)
  409b22:	f002 f8cd 	bl	40bcc0 <__aeabi_dcmplt>
  409b26:	2800      	cmp	r0, #0
  409b28:	d07e      	beq.n	409c28 <_dtoa_r+0x4c0>
  409b2a:	f1b9 0f00 	cmp.w	r9, #0
  409b2e:	d07b      	beq.n	409c28 <_dtoa_r+0x4c0>
  409b30:	9b04      	ldr	r3, [sp, #16]
  409b32:	2b00      	cmp	r3, #0
  409b34:	dd37      	ble.n	409ba6 <_dtoa_r+0x43e>
  409b36:	2200      	movs	r2, #0
  409b38:	4b8f      	ldr	r3, [pc, #572]	; (409d78 <_dtoa_r+0x610>)
  409b3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409b3e:	f001 fe4d 	bl	40b7dc <__aeabi_dmul>
  409b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409b46:	9e04      	ldr	r6, [sp, #16]
  409b48:	f10b 37ff 	add.w	r7, fp, #4294967295
  409b4c:	3501      	adds	r5, #1
  409b4e:	4628      	mov	r0, r5
  409b50:	f001 fdde 	bl	40b710 <__aeabi_i2d>
  409b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409b58:	f001 fe40 	bl	40b7dc <__aeabi_dmul>
  409b5c:	4b87      	ldr	r3, [pc, #540]	; (409d7c <_dtoa_r+0x614>)
  409b5e:	2200      	movs	r2, #0
  409b60:	f001 fc8a 	bl	40b478 <__adddf3>
  409b64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409b6a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  409b6e:	950b      	str	r5, [sp, #44]	; 0x2c
  409b70:	2e00      	cmp	r6, #0
  409b72:	d15c      	bne.n	409c2e <_dtoa_r+0x4c6>
  409b74:	2200      	movs	r2, #0
  409b76:	4b82      	ldr	r3, [pc, #520]	; (409d80 <_dtoa_r+0x618>)
  409b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b7c:	f001 fc7a 	bl	40b474 <__aeabi_dsub>
  409b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409b82:	462b      	mov	r3, r5
  409b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409b88:	f002 f8b8 	bl	40bcfc <__aeabi_dcmpgt>
  409b8c:	2800      	cmp	r0, #0
  409b8e:	f040 82f7 	bne.w	40a180 <_dtoa_r+0xa18>
  409b92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409b94:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  409b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b9c:	f002 f890 	bl	40bcc0 <__aeabi_dcmplt>
  409ba0:	2800      	cmp	r0, #0
  409ba2:	f040 82eb 	bne.w	40a17c <_dtoa_r+0xa14>
  409ba6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  409baa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409bae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409bb0:	2b00      	cmp	r3, #0
  409bb2:	f2c0 8151 	blt.w	409e58 <_dtoa_r+0x6f0>
  409bb6:	f1bb 0f0e 	cmp.w	fp, #14
  409bba:	f300 814d 	bgt.w	409e58 <_dtoa_r+0x6f0>
  409bbe:	4b6b      	ldr	r3, [pc, #428]	; (409d6c <_dtoa_r+0x604>)
  409bc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  409bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  409bc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  409bcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409bce:	2b00      	cmp	r3, #0
  409bd0:	f280 80da 	bge.w	409d88 <_dtoa_r+0x620>
  409bd4:	f1b9 0f00 	cmp.w	r9, #0
  409bd8:	f300 80d6 	bgt.w	409d88 <_dtoa_r+0x620>
  409bdc:	f040 82cd 	bne.w	40a17a <_dtoa_r+0xa12>
  409be0:	2200      	movs	r2, #0
  409be2:	4b67      	ldr	r3, [pc, #412]	; (409d80 <_dtoa_r+0x618>)
  409be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409be8:	f001 fdf8 	bl	40b7dc <__aeabi_dmul>
  409bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409bf0:	f002 f87a 	bl	40bce8 <__aeabi_dcmpge>
  409bf4:	464e      	mov	r6, r9
  409bf6:	464f      	mov	r7, r9
  409bf8:	2800      	cmp	r0, #0
  409bfa:	f040 82a4 	bne.w	40a146 <_dtoa_r+0x9de>
  409bfe:	9b06      	ldr	r3, [sp, #24]
  409c00:	9a06      	ldr	r2, [sp, #24]
  409c02:	1c5d      	adds	r5, r3, #1
  409c04:	2331      	movs	r3, #49	; 0x31
  409c06:	7013      	strb	r3, [r2, #0]
  409c08:	f10b 0b01 	add.w	fp, fp, #1
  409c0c:	e29f      	b.n	40a14e <_dtoa_r+0x9e6>
  409c0e:	07f2      	lsls	r2, r6, #31
  409c10:	d505      	bpl.n	409c1e <_dtoa_r+0x4b6>
  409c12:	e9d7 2300 	ldrd	r2, r3, [r7]
  409c16:	f001 fde1 	bl	40b7dc <__aeabi_dmul>
  409c1a:	3501      	adds	r5, #1
  409c1c:	2301      	movs	r3, #1
  409c1e:	1076      	asrs	r6, r6, #1
  409c20:	3708      	adds	r7, #8
  409c22:	e76d      	b.n	409b00 <_dtoa_r+0x398>
  409c24:	2502      	movs	r5, #2
  409c26:	e770      	b.n	409b0a <_dtoa_r+0x3a2>
  409c28:	465f      	mov	r7, fp
  409c2a:	464e      	mov	r6, r9
  409c2c:	e78f      	b.n	409b4e <_dtoa_r+0x3e6>
  409c2e:	9a06      	ldr	r2, [sp, #24]
  409c30:	4b4e      	ldr	r3, [pc, #312]	; (409d6c <_dtoa_r+0x604>)
  409c32:	4432      	add	r2, r6
  409c34:	9211      	str	r2, [sp, #68]	; 0x44
  409c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409c38:	1e71      	subs	r1, r6, #1
  409c3a:	2a00      	cmp	r2, #0
  409c3c:	d048      	beq.n	409cd0 <_dtoa_r+0x568>
  409c3e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  409c42:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c46:	2000      	movs	r0, #0
  409c48:	494e      	ldr	r1, [pc, #312]	; (409d84 <_dtoa_r+0x61c>)
  409c4a:	f001 fef1 	bl	40ba30 <__aeabi_ddiv>
  409c4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409c52:	f001 fc0f 	bl	40b474 <__aeabi_dsub>
  409c56:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409c5a:	9d06      	ldr	r5, [sp, #24]
  409c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409c60:	f002 f86c 	bl	40bd3c <__aeabi_d2iz>
  409c64:	4606      	mov	r6, r0
  409c66:	f001 fd53 	bl	40b710 <__aeabi_i2d>
  409c6a:	4602      	mov	r2, r0
  409c6c:	460b      	mov	r3, r1
  409c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409c72:	f001 fbff 	bl	40b474 <__aeabi_dsub>
  409c76:	3630      	adds	r6, #48	; 0x30
  409c78:	f805 6b01 	strb.w	r6, [r5], #1
  409c7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409c84:	f002 f81c 	bl	40bcc0 <__aeabi_dcmplt>
  409c88:	2800      	cmp	r0, #0
  409c8a:	d165      	bne.n	409d58 <_dtoa_r+0x5f0>
  409c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409c90:	2000      	movs	r0, #0
  409c92:	4938      	ldr	r1, [pc, #224]	; (409d74 <_dtoa_r+0x60c>)
  409c94:	f001 fbee 	bl	40b474 <__aeabi_dsub>
  409c98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409c9c:	f002 f810 	bl	40bcc0 <__aeabi_dcmplt>
  409ca0:	2800      	cmp	r0, #0
  409ca2:	f040 80b9 	bne.w	409e18 <_dtoa_r+0x6b0>
  409ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409ca8:	429d      	cmp	r5, r3
  409caa:	f43f af7c 	beq.w	409ba6 <_dtoa_r+0x43e>
  409cae:	2200      	movs	r2, #0
  409cb0:	4b31      	ldr	r3, [pc, #196]	; (409d78 <_dtoa_r+0x610>)
  409cb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409cb6:	f001 fd91 	bl	40b7dc <__aeabi_dmul>
  409cba:	2200      	movs	r2, #0
  409cbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409cc0:	4b2d      	ldr	r3, [pc, #180]	; (409d78 <_dtoa_r+0x610>)
  409cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409cc6:	f001 fd89 	bl	40b7dc <__aeabi_dmul>
  409cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409cce:	e7c5      	b.n	409c5c <_dtoa_r+0x4f4>
  409cd0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  409cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
  409cd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409cdc:	f001 fd7e 	bl	40b7dc <__aeabi_dmul>
  409ce0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409ce4:	9d06      	ldr	r5, [sp, #24]
  409ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409cea:	f002 f827 	bl	40bd3c <__aeabi_d2iz>
  409cee:	4606      	mov	r6, r0
  409cf0:	f001 fd0e 	bl	40b710 <__aeabi_i2d>
  409cf4:	3630      	adds	r6, #48	; 0x30
  409cf6:	4602      	mov	r2, r0
  409cf8:	460b      	mov	r3, r1
  409cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409cfe:	f001 fbb9 	bl	40b474 <__aeabi_dsub>
  409d02:	f805 6b01 	strb.w	r6, [r5], #1
  409d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409d08:	42ab      	cmp	r3, r5
  409d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409d0e:	f04f 0200 	mov.w	r2, #0
  409d12:	d125      	bne.n	409d60 <_dtoa_r+0x5f8>
  409d14:	4b1b      	ldr	r3, [pc, #108]	; (409d84 <_dtoa_r+0x61c>)
  409d16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409d1a:	f001 fbad 	bl	40b478 <__adddf3>
  409d1e:	4602      	mov	r2, r0
  409d20:	460b      	mov	r3, r1
  409d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409d26:	f001 ffe9 	bl	40bcfc <__aeabi_dcmpgt>
  409d2a:	2800      	cmp	r0, #0
  409d2c:	d174      	bne.n	409e18 <_dtoa_r+0x6b0>
  409d2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409d32:	2000      	movs	r0, #0
  409d34:	4913      	ldr	r1, [pc, #76]	; (409d84 <_dtoa_r+0x61c>)
  409d36:	f001 fb9d 	bl	40b474 <__aeabi_dsub>
  409d3a:	4602      	mov	r2, r0
  409d3c:	460b      	mov	r3, r1
  409d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409d42:	f001 ffbd 	bl	40bcc0 <__aeabi_dcmplt>
  409d46:	2800      	cmp	r0, #0
  409d48:	f43f af2d 	beq.w	409ba6 <_dtoa_r+0x43e>
  409d4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409d50:	2b30      	cmp	r3, #48	; 0x30
  409d52:	f105 32ff 	add.w	r2, r5, #4294967295
  409d56:	d001      	beq.n	409d5c <_dtoa_r+0x5f4>
  409d58:	46bb      	mov	fp, r7
  409d5a:	e04c      	b.n	409df6 <_dtoa_r+0x68e>
  409d5c:	4615      	mov	r5, r2
  409d5e:	e7f5      	b.n	409d4c <_dtoa_r+0x5e4>
  409d60:	4b05      	ldr	r3, [pc, #20]	; (409d78 <_dtoa_r+0x610>)
  409d62:	f001 fd3b 	bl	40b7dc <__aeabi_dmul>
  409d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409d6a:	e7bc      	b.n	409ce6 <_dtoa_r+0x57e>
  409d6c:	0040ce08 	.word	0x0040ce08
  409d70:	0040cde0 	.word	0x0040cde0
  409d74:	3ff00000 	.word	0x3ff00000
  409d78:	40240000 	.word	0x40240000
  409d7c:	401c0000 	.word	0x401c0000
  409d80:	40140000 	.word	0x40140000
  409d84:	3fe00000 	.word	0x3fe00000
  409d88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  409d8c:	9d06      	ldr	r5, [sp, #24]
  409d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  409d92:	4630      	mov	r0, r6
  409d94:	4639      	mov	r1, r7
  409d96:	f001 fe4b 	bl	40ba30 <__aeabi_ddiv>
  409d9a:	f001 ffcf 	bl	40bd3c <__aeabi_d2iz>
  409d9e:	4680      	mov	r8, r0
  409da0:	f001 fcb6 	bl	40b710 <__aeabi_i2d>
  409da4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  409da8:	f001 fd18 	bl	40b7dc <__aeabi_dmul>
  409dac:	4602      	mov	r2, r0
  409dae:	460b      	mov	r3, r1
  409db0:	4630      	mov	r0, r6
  409db2:	4639      	mov	r1, r7
  409db4:	f108 0630 	add.w	r6, r8, #48	; 0x30
  409db8:	f001 fb5c 	bl	40b474 <__aeabi_dsub>
  409dbc:	f805 6b01 	strb.w	r6, [r5], #1
  409dc0:	9e06      	ldr	r6, [sp, #24]
  409dc2:	1bae      	subs	r6, r5, r6
  409dc4:	45b1      	cmp	r9, r6
  409dc6:	4602      	mov	r2, r0
  409dc8:	460b      	mov	r3, r1
  409dca:	d138      	bne.n	409e3e <_dtoa_r+0x6d6>
  409dcc:	f001 fb54 	bl	40b478 <__adddf3>
  409dd0:	4606      	mov	r6, r0
  409dd2:	460f      	mov	r7, r1
  409dd4:	4602      	mov	r2, r0
  409dd6:	460b      	mov	r3, r1
  409dd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409ddc:	f001 ff70 	bl	40bcc0 <__aeabi_dcmplt>
  409de0:	b9c8      	cbnz	r0, 409e16 <_dtoa_r+0x6ae>
  409de2:	4632      	mov	r2, r6
  409de4:	463b      	mov	r3, r7
  409de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409dea:	f001 ff5f 	bl	40bcac <__aeabi_dcmpeq>
  409dee:	b110      	cbz	r0, 409df6 <_dtoa_r+0x68e>
  409df0:	f018 0f01 	tst.w	r8, #1
  409df4:	d10f      	bne.n	409e16 <_dtoa_r+0x6ae>
  409df6:	4651      	mov	r1, sl
  409df8:	4620      	mov	r0, r4
  409dfa:	f000 fd05 	bl	40a808 <_Bfree>
  409dfe:	2300      	movs	r3, #0
  409e00:	9a20      	ldr	r2, [sp, #128]	; 0x80
  409e02:	702b      	strb	r3, [r5, #0]
  409e04:	f10b 0301 	add.w	r3, fp, #1
  409e08:	6013      	str	r3, [r2, #0]
  409e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409e0c:	2b00      	cmp	r3, #0
  409e0e:	f43f acf0 	beq.w	4097f2 <_dtoa_r+0x8a>
  409e12:	601d      	str	r5, [r3, #0]
  409e14:	e4ed      	b.n	4097f2 <_dtoa_r+0x8a>
  409e16:	465f      	mov	r7, fp
  409e18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  409e1c:	2a39      	cmp	r2, #57	; 0x39
  409e1e:	f105 33ff 	add.w	r3, r5, #4294967295
  409e22:	d106      	bne.n	409e32 <_dtoa_r+0x6ca>
  409e24:	9a06      	ldr	r2, [sp, #24]
  409e26:	429a      	cmp	r2, r3
  409e28:	d107      	bne.n	409e3a <_dtoa_r+0x6d2>
  409e2a:	2330      	movs	r3, #48	; 0x30
  409e2c:	7013      	strb	r3, [r2, #0]
  409e2e:	3701      	adds	r7, #1
  409e30:	4613      	mov	r3, r2
  409e32:	781a      	ldrb	r2, [r3, #0]
  409e34:	3201      	adds	r2, #1
  409e36:	701a      	strb	r2, [r3, #0]
  409e38:	e78e      	b.n	409d58 <_dtoa_r+0x5f0>
  409e3a:	461d      	mov	r5, r3
  409e3c:	e7ec      	b.n	409e18 <_dtoa_r+0x6b0>
  409e3e:	2200      	movs	r2, #0
  409e40:	4bb4      	ldr	r3, [pc, #720]	; (40a114 <_dtoa_r+0x9ac>)
  409e42:	f001 fccb 	bl	40b7dc <__aeabi_dmul>
  409e46:	2200      	movs	r2, #0
  409e48:	2300      	movs	r3, #0
  409e4a:	4606      	mov	r6, r0
  409e4c:	460f      	mov	r7, r1
  409e4e:	f001 ff2d 	bl	40bcac <__aeabi_dcmpeq>
  409e52:	2800      	cmp	r0, #0
  409e54:	d09b      	beq.n	409d8e <_dtoa_r+0x626>
  409e56:	e7ce      	b.n	409df6 <_dtoa_r+0x68e>
  409e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409e5a:	2a00      	cmp	r2, #0
  409e5c:	f000 8129 	beq.w	40a0b2 <_dtoa_r+0x94a>
  409e60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  409e62:	2a01      	cmp	r2, #1
  409e64:	f300 810e 	bgt.w	40a084 <_dtoa_r+0x91c>
  409e68:	9a10      	ldr	r2, [sp, #64]	; 0x40
  409e6a:	2a00      	cmp	r2, #0
  409e6c:	f000 8106 	beq.w	40a07c <_dtoa_r+0x914>
  409e70:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409e74:	9e08      	ldr	r6, [sp, #32]
  409e76:	4645      	mov	r5, r8
  409e78:	9a07      	ldr	r2, [sp, #28]
  409e7a:	2101      	movs	r1, #1
  409e7c:	441a      	add	r2, r3
  409e7e:	4620      	mov	r0, r4
  409e80:	4498      	add	r8, r3
  409e82:	9207      	str	r2, [sp, #28]
  409e84:	f000 fd60 	bl	40a948 <__i2b>
  409e88:	4607      	mov	r7, r0
  409e8a:	2d00      	cmp	r5, #0
  409e8c:	dd0b      	ble.n	409ea6 <_dtoa_r+0x73e>
  409e8e:	9b07      	ldr	r3, [sp, #28]
  409e90:	2b00      	cmp	r3, #0
  409e92:	dd08      	ble.n	409ea6 <_dtoa_r+0x73e>
  409e94:	42ab      	cmp	r3, r5
  409e96:	9a07      	ldr	r2, [sp, #28]
  409e98:	bfa8      	it	ge
  409e9a:	462b      	movge	r3, r5
  409e9c:	eba8 0803 	sub.w	r8, r8, r3
  409ea0:	1aed      	subs	r5, r5, r3
  409ea2:	1ad3      	subs	r3, r2, r3
  409ea4:	9307      	str	r3, [sp, #28]
  409ea6:	9b08      	ldr	r3, [sp, #32]
  409ea8:	b1fb      	cbz	r3, 409eea <_dtoa_r+0x782>
  409eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409eac:	2b00      	cmp	r3, #0
  409eae:	f000 8104 	beq.w	40a0ba <_dtoa_r+0x952>
  409eb2:	2e00      	cmp	r6, #0
  409eb4:	dd11      	ble.n	409eda <_dtoa_r+0x772>
  409eb6:	4639      	mov	r1, r7
  409eb8:	4632      	mov	r2, r6
  409eba:	4620      	mov	r0, r4
  409ebc:	f000 fdda 	bl	40aa74 <__pow5mult>
  409ec0:	4652      	mov	r2, sl
  409ec2:	4601      	mov	r1, r0
  409ec4:	4607      	mov	r7, r0
  409ec6:	4620      	mov	r0, r4
  409ec8:	f000 fd47 	bl	40a95a <__multiply>
  409ecc:	4651      	mov	r1, sl
  409ece:	900a      	str	r0, [sp, #40]	; 0x28
  409ed0:	4620      	mov	r0, r4
  409ed2:	f000 fc99 	bl	40a808 <_Bfree>
  409ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409ed8:	469a      	mov	sl, r3
  409eda:	9b08      	ldr	r3, [sp, #32]
  409edc:	1b9a      	subs	r2, r3, r6
  409ede:	d004      	beq.n	409eea <_dtoa_r+0x782>
  409ee0:	4651      	mov	r1, sl
  409ee2:	4620      	mov	r0, r4
  409ee4:	f000 fdc6 	bl	40aa74 <__pow5mult>
  409ee8:	4682      	mov	sl, r0
  409eea:	2101      	movs	r1, #1
  409eec:	4620      	mov	r0, r4
  409eee:	f000 fd2b 	bl	40a948 <__i2b>
  409ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409ef4:	2b00      	cmp	r3, #0
  409ef6:	4606      	mov	r6, r0
  409ef8:	f340 80e1 	ble.w	40a0be <_dtoa_r+0x956>
  409efc:	461a      	mov	r2, r3
  409efe:	4601      	mov	r1, r0
  409f00:	4620      	mov	r0, r4
  409f02:	f000 fdb7 	bl	40aa74 <__pow5mult>
  409f06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  409f08:	2b01      	cmp	r3, #1
  409f0a:	4606      	mov	r6, r0
  409f0c:	f340 80da 	ble.w	40a0c4 <_dtoa_r+0x95c>
  409f10:	2300      	movs	r3, #0
  409f12:	9308      	str	r3, [sp, #32]
  409f14:	6933      	ldr	r3, [r6, #16]
  409f16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  409f1a:	6918      	ldr	r0, [r3, #16]
  409f1c:	f000 fcc6 	bl	40a8ac <__hi0bits>
  409f20:	f1c0 0020 	rsb	r0, r0, #32
  409f24:	9b07      	ldr	r3, [sp, #28]
  409f26:	4418      	add	r0, r3
  409f28:	f010 001f 	ands.w	r0, r0, #31
  409f2c:	f000 80f0 	beq.w	40a110 <_dtoa_r+0x9a8>
  409f30:	f1c0 0320 	rsb	r3, r0, #32
  409f34:	2b04      	cmp	r3, #4
  409f36:	f340 80e2 	ble.w	40a0fe <_dtoa_r+0x996>
  409f3a:	9b07      	ldr	r3, [sp, #28]
  409f3c:	f1c0 001c 	rsb	r0, r0, #28
  409f40:	4480      	add	r8, r0
  409f42:	4405      	add	r5, r0
  409f44:	4403      	add	r3, r0
  409f46:	9307      	str	r3, [sp, #28]
  409f48:	f1b8 0f00 	cmp.w	r8, #0
  409f4c:	dd05      	ble.n	409f5a <_dtoa_r+0x7f2>
  409f4e:	4651      	mov	r1, sl
  409f50:	4642      	mov	r2, r8
  409f52:	4620      	mov	r0, r4
  409f54:	f000 fddc 	bl	40ab10 <__lshift>
  409f58:	4682      	mov	sl, r0
  409f5a:	9b07      	ldr	r3, [sp, #28]
  409f5c:	2b00      	cmp	r3, #0
  409f5e:	dd05      	ble.n	409f6c <_dtoa_r+0x804>
  409f60:	4631      	mov	r1, r6
  409f62:	461a      	mov	r2, r3
  409f64:	4620      	mov	r0, r4
  409f66:	f000 fdd3 	bl	40ab10 <__lshift>
  409f6a:	4606      	mov	r6, r0
  409f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409f6e:	2b00      	cmp	r3, #0
  409f70:	f000 80d2 	beq.w	40a118 <_dtoa_r+0x9b0>
  409f74:	4631      	mov	r1, r6
  409f76:	4650      	mov	r0, sl
  409f78:	f000 fe1b 	bl	40abb2 <__mcmp>
  409f7c:	2800      	cmp	r0, #0
  409f7e:	f280 80cb 	bge.w	40a118 <_dtoa_r+0x9b0>
  409f82:	2300      	movs	r3, #0
  409f84:	4651      	mov	r1, sl
  409f86:	220a      	movs	r2, #10
  409f88:	4620      	mov	r0, r4
  409f8a:	f000 fc54 	bl	40a836 <__multadd>
  409f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409f90:	f10b 3bff 	add.w	fp, fp, #4294967295
  409f94:	4682      	mov	sl, r0
  409f96:	2b00      	cmp	r3, #0
  409f98:	f000 81aa 	beq.w	40a2f0 <_dtoa_r+0xb88>
  409f9c:	2300      	movs	r3, #0
  409f9e:	4639      	mov	r1, r7
  409fa0:	220a      	movs	r2, #10
  409fa2:	4620      	mov	r0, r4
  409fa4:	f000 fc47 	bl	40a836 <__multadd>
  409fa8:	9b04      	ldr	r3, [sp, #16]
  409faa:	2b00      	cmp	r3, #0
  409fac:	4607      	mov	r7, r0
  409fae:	dc03      	bgt.n	409fb8 <_dtoa_r+0x850>
  409fb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  409fb2:	2b02      	cmp	r3, #2
  409fb4:	f300 80b8 	bgt.w	40a128 <_dtoa_r+0x9c0>
  409fb8:	2d00      	cmp	r5, #0
  409fba:	dd05      	ble.n	409fc8 <_dtoa_r+0x860>
  409fbc:	4639      	mov	r1, r7
  409fbe:	462a      	mov	r2, r5
  409fc0:	4620      	mov	r0, r4
  409fc2:	f000 fda5 	bl	40ab10 <__lshift>
  409fc6:	4607      	mov	r7, r0
  409fc8:	9b08      	ldr	r3, [sp, #32]
  409fca:	2b00      	cmp	r3, #0
  409fcc:	f000 8110 	beq.w	40a1f0 <_dtoa_r+0xa88>
  409fd0:	6879      	ldr	r1, [r7, #4]
  409fd2:	4620      	mov	r0, r4
  409fd4:	f000 fbe4 	bl	40a7a0 <_Balloc>
  409fd8:	693a      	ldr	r2, [r7, #16]
  409fda:	3202      	adds	r2, #2
  409fdc:	4605      	mov	r5, r0
  409fde:	0092      	lsls	r2, r2, #2
  409fe0:	f107 010c 	add.w	r1, r7, #12
  409fe4:	300c      	adds	r0, #12
  409fe6:	f7fe fde9 	bl	408bbc <memcpy>
  409fea:	2201      	movs	r2, #1
  409fec:	4629      	mov	r1, r5
  409fee:	4620      	mov	r0, r4
  409ff0:	f000 fd8e 	bl	40ab10 <__lshift>
  409ff4:	9b02      	ldr	r3, [sp, #8]
  409ff6:	f8dd 8018 	ldr.w	r8, [sp, #24]
  409ffa:	9707      	str	r7, [sp, #28]
  409ffc:	f003 0301 	and.w	r3, r3, #1
  40a000:	4607      	mov	r7, r0
  40a002:	9308      	str	r3, [sp, #32]
  40a004:	4631      	mov	r1, r6
  40a006:	4650      	mov	r0, sl
  40a008:	f7ff fb20 	bl	40964c <quorem>
  40a00c:	9907      	ldr	r1, [sp, #28]
  40a00e:	4605      	mov	r5, r0
  40a010:	f100 0930 	add.w	r9, r0, #48	; 0x30
  40a014:	4650      	mov	r0, sl
  40a016:	f000 fdcc 	bl	40abb2 <__mcmp>
  40a01a:	463a      	mov	r2, r7
  40a01c:	9002      	str	r0, [sp, #8]
  40a01e:	4631      	mov	r1, r6
  40a020:	4620      	mov	r0, r4
  40a022:	f000 fde0 	bl	40abe6 <__mdiff>
  40a026:	68c3      	ldr	r3, [r0, #12]
  40a028:	4602      	mov	r2, r0
  40a02a:	2b00      	cmp	r3, #0
  40a02c:	f040 80e2 	bne.w	40a1f4 <_dtoa_r+0xa8c>
  40a030:	4601      	mov	r1, r0
  40a032:	9009      	str	r0, [sp, #36]	; 0x24
  40a034:	4650      	mov	r0, sl
  40a036:	f000 fdbc 	bl	40abb2 <__mcmp>
  40a03a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a03c:	4603      	mov	r3, r0
  40a03e:	4611      	mov	r1, r2
  40a040:	4620      	mov	r0, r4
  40a042:	9309      	str	r3, [sp, #36]	; 0x24
  40a044:	f000 fbe0 	bl	40a808 <_Bfree>
  40a048:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a04a:	2b00      	cmp	r3, #0
  40a04c:	f040 80d4 	bne.w	40a1f8 <_dtoa_r+0xa90>
  40a050:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40a052:	2a00      	cmp	r2, #0
  40a054:	f040 80d0 	bne.w	40a1f8 <_dtoa_r+0xa90>
  40a058:	9a08      	ldr	r2, [sp, #32]
  40a05a:	2a00      	cmp	r2, #0
  40a05c:	f040 80cc 	bne.w	40a1f8 <_dtoa_r+0xa90>
  40a060:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40a064:	f000 80e8 	beq.w	40a238 <_dtoa_r+0xad0>
  40a068:	9b02      	ldr	r3, [sp, #8]
  40a06a:	2b00      	cmp	r3, #0
  40a06c:	dd01      	ble.n	40a072 <_dtoa_r+0x90a>
  40a06e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  40a072:	f108 0501 	add.w	r5, r8, #1
  40a076:	f888 9000 	strb.w	r9, [r8]
  40a07a:	e06a      	b.n	40a152 <_dtoa_r+0x9ea>
  40a07c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a07e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40a082:	e6f7      	b.n	409e74 <_dtoa_r+0x70c>
  40a084:	9b08      	ldr	r3, [sp, #32]
  40a086:	f109 36ff 	add.w	r6, r9, #4294967295
  40a08a:	42b3      	cmp	r3, r6
  40a08c:	bfbf      	itttt	lt
  40a08e:	9b08      	ldrlt	r3, [sp, #32]
  40a090:	9608      	strlt	r6, [sp, #32]
  40a092:	1af2      	sublt	r2, r6, r3
  40a094:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  40a096:	bfb7      	itett	lt
  40a098:	189b      	addlt	r3, r3, r2
  40a09a:	1b9e      	subge	r6, r3, r6
  40a09c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40a09e:	2600      	movlt	r6, #0
  40a0a0:	f1b9 0f00 	cmp.w	r9, #0
  40a0a4:	bfb9      	ittee	lt
  40a0a6:	eba8 0509 	sublt.w	r5, r8, r9
  40a0aa:	2300      	movlt	r3, #0
  40a0ac:	4645      	movge	r5, r8
  40a0ae:	464b      	movge	r3, r9
  40a0b0:	e6e2      	b.n	409e78 <_dtoa_r+0x710>
  40a0b2:	9e08      	ldr	r6, [sp, #32]
  40a0b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40a0b6:	4645      	mov	r5, r8
  40a0b8:	e6e7      	b.n	409e8a <_dtoa_r+0x722>
  40a0ba:	9a08      	ldr	r2, [sp, #32]
  40a0bc:	e710      	b.n	409ee0 <_dtoa_r+0x778>
  40a0be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40a0c0:	2b01      	cmp	r3, #1
  40a0c2:	dc18      	bgt.n	40a0f6 <_dtoa_r+0x98e>
  40a0c4:	9b02      	ldr	r3, [sp, #8]
  40a0c6:	b9b3      	cbnz	r3, 40a0f6 <_dtoa_r+0x98e>
  40a0c8:	9b03      	ldr	r3, [sp, #12]
  40a0ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40a0ce:	b9a3      	cbnz	r3, 40a0fa <_dtoa_r+0x992>
  40a0d0:	9b03      	ldr	r3, [sp, #12]
  40a0d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40a0d6:	0d1b      	lsrs	r3, r3, #20
  40a0d8:	051b      	lsls	r3, r3, #20
  40a0da:	b12b      	cbz	r3, 40a0e8 <_dtoa_r+0x980>
  40a0dc:	9b07      	ldr	r3, [sp, #28]
  40a0de:	3301      	adds	r3, #1
  40a0e0:	9307      	str	r3, [sp, #28]
  40a0e2:	f108 0801 	add.w	r8, r8, #1
  40a0e6:	2301      	movs	r3, #1
  40a0e8:	9308      	str	r3, [sp, #32]
  40a0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a0ec:	2b00      	cmp	r3, #0
  40a0ee:	f47f af11 	bne.w	409f14 <_dtoa_r+0x7ac>
  40a0f2:	2001      	movs	r0, #1
  40a0f4:	e716      	b.n	409f24 <_dtoa_r+0x7bc>
  40a0f6:	2300      	movs	r3, #0
  40a0f8:	e7f6      	b.n	40a0e8 <_dtoa_r+0x980>
  40a0fa:	9b02      	ldr	r3, [sp, #8]
  40a0fc:	e7f4      	b.n	40a0e8 <_dtoa_r+0x980>
  40a0fe:	f43f af23 	beq.w	409f48 <_dtoa_r+0x7e0>
  40a102:	9a07      	ldr	r2, [sp, #28]
  40a104:	331c      	adds	r3, #28
  40a106:	441a      	add	r2, r3
  40a108:	4498      	add	r8, r3
  40a10a:	441d      	add	r5, r3
  40a10c:	4613      	mov	r3, r2
  40a10e:	e71a      	b.n	409f46 <_dtoa_r+0x7de>
  40a110:	4603      	mov	r3, r0
  40a112:	e7f6      	b.n	40a102 <_dtoa_r+0x99a>
  40a114:	40240000 	.word	0x40240000
  40a118:	f1b9 0f00 	cmp.w	r9, #0
  40a11c:	dc33      	bgt.n	40a186 <_dtoa_r+0xa1e>
  40a11e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40a120:	2b02      	cmp	r3, #2
  40a122:	dd30      	ble.n	40a186 <_dtoa_r+0xa1e>
  40a124:	f8cd 9010 	str.w	r9, [sp, #16]
  40a128:	9b04      	ldr	r3, [sp, #16]
  40a12a:	b963      	cbnz	r3, 40a146 <_dtoa_r+0x9de>
  40a12c:	4631      	mov	r1, r6
  40a12e:	2205      	movs	r2, #5
  40a130:	4620      	mov	r0, r4
  40a132:	f000 fb80 	bl	40a836 <__multadd>
  40a136:	4601      	mov	r1, r0
  40a138:	4606      	mov	r6, r0
  40a13a:	4650      	mov	r0, sl
  40a13c:	f000 fd39 	bl	40abb2 <__mcmp>
  40a140:	2800      	cmp	r0, #0
  40a142:	f73f ad5c 	bgt.w	409bfe <_dtoa_r+0x496>
  40a146:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40a148:	9d06      	ldr	r5, [sp, #24]
  40a14a:	ea6f 0b03 	mvn.w	fp, r3
  40a14e:	2300      	movs	r3, #0
  40a150:	9307      	str	r3, [sp, #28]
  40a152:	4631      	mov	r1, r6
  40a154:	4620      	mov	r0, r4
  40a156:	f000 fb57 	bl	40a808 <_Bfree>
  40a15a:	2f00      	cmp	r7, #0
  40a15c:	f43f ae4b 	beq.w	409df6 <_dtoa_r+0x68e>
  40a160:	9b07      	ldr	r3, [sp, #28]
  40a162:	b12b      	cbz	r3, 40a170 <_dtoa_r+0xa08>
  40a164:	42bb      	cmp	r3, r7
  40a166:	d003      	beq.n	40a170 <_dtoa_r+0xa08>
  40a168:	4619      	mov	r1, r3
  40a16a:	4620      	mov	r0, r4
  40a16c:	f000 fb4c 	bl	40a808 <_Bfree>
  40a170:	4639      	mov	r1, r7
  40a172:	4620      	mov	r0, r4
  40a174:	f000 fb48 	bl	40a808 <_Bfree>
  40a178:	e63d      	b.n	409df6 <_dtoa_r+0x68e>
  40a17a:	2600      	movs	r6, #0
  40a17c:	4637      	mov	r7, r6
  40a17e:	e7e2      	b.n	40a146 <_dtoa_r+0x9de>
  40a180:	46bb      	mov	fp, r7
  40a182:	4637      	mov	r7, r6
  40a184:	e53b      	b.n	409bfe <_dtoa_r+0x496>
  40a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a188:	f8cd 9010 	str.w	r9, [sp, #16]
  40a18c:	2b00      	cmp	r3, #0
  40a18e:	f47f af13 	bne.w	409fb8 <_dtoa_r+0x850>
  40a192:	9d06      	ldr	r5, [sp, #24]
  40a194:	4631      	mov	r1, r6
  40a196:	4650      	mov	r0, sl
  40a198:	f7ff fa58 	bl	40964c <quorem>
  40a19c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  40a1a0:	f805 9b01 	strb.w	r9, [r5], #1
  40a1a4:	9b06      	ldr	r3, [sp, #24]
  40a1a6:	9a04      	ldr	r2, [sp, #16]
  40a1a8:	1aeb      	subs	r3, r5, r3
  40a1aa:	429a      	cmp	r2, r3
  40a1ac:	f300 8083 	bgt.w	40a2b6 <_dtoa_r+0xb4e>
  40a1b0:	9b06      	ldr	r3, [sp, #24]
  40a1b2:	2a01      	cmp	r2, #1
  40a1b4:	bfac      	ite	ge
  40a1b6:	189b      	addge	r3, r3, r2
  40a1b8:	3301      	addlt	r3, #1
  40a1ba:	4698      	mov	r8, r3
  40a1bc:	2300      	movs	r3, #0
  40a1be:	9307      	str	r3, [sp, #28]
  40a1c0:	4651      	mov	r1, sl
  40a1c2:	2201      	movs	r2, #1
  40a1c4:	4620      	mov	r0, r4
  40a1c6:	f000 fca3 	bl	40ab10 <__lshift>
  40a1ca:	4631      	mov	r1, r6
  40a1cc:	4682      	mov	sl, r0
  40a1ce:	f000 fcf0 	bl	40abb2 <__mcmp>
  40a1d2:	2800      	cmp	r0, #0
  40a1d4:	dc35      	bgt.n	40a242 <_dtoa_r+0xada>
  40a1d6:	d102      	bne.n	40a1de <_dtoa_r+0xa76>
  40a1d8:	f019 0f01 	tst.w	r9, #1
  40a1dc:	d131      	bne.n	40a242 <_dtoa_r+0xada>
  40a1de:	4645      	mov	r5, r8
  40a1e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a1e4:	2b30      	cmp	r3, #48	; 0x30
  40a1e6:	f105 32ff 	add.w	r2, r5, #4294967295
  40a1ea:	d1b2      	bne.n	40a152 <_dtoa_r+0x9ea>
  40a1ec:	4615      	mov	r5, r2
  40a1ee:	e7f7      	b.n	40a1e0 <_dtoa_r+0xa78>
  40a1f0:	4638      	mov	r0, r7
  40a1f2:	e6ff      	b.n	409ff4 <_dtoa_r+0x88c>
  40a1f4:	2301      	movs	r3, #1
  40a1f6:	e722      	b.n	40a03e <_dtoa_r+0x8d6>
  40a1f8:	9a02      	ldr	r2, [sp, #8]
  40a1fa:	2a00      	cmp	r2, #0
  40a1fc:	db04      	blt.n	40a208 <_dtoa_r+0xaa0>
  40a1fe:	d129      	bne.n	40a254 <_dtoa_r+0xaec>
  40a200:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40a202:	bb3a      	cbnz	r2, 40a254 <_dtoa_r+0xaec>
  40a204:	9a08      	ldr	r2, [sp, #32]
  40a206:	bb2a      	cbnz	r2, 40a254 <_dtoa_r+0xaec>
  40a208:	2b00      	cmp	r3, #0
  40a20a:	f77f af32 	ble.w	40a072 <_dtoa_r+0x90a>
  40a20e:	4651      	mov	r1, sl
  40a210:	2201      	movs	r2, #1
  40a212:	4620      	mov	r0, r4
  40a214:	f000 fc7c 	bl	40ab10 <__lshift>
  40a218:	4631      	mov	r1, r6
  40a21a:	4682      	mov	sl, r0
  40a21c:	f000 fcc9 	bl	40abb2 <__mcmp>
  40a220:	2800      	cmp	r0, #0
  40a222:	dc05      	bgt.n	40a230 <_dtoa_r+0xac8>
  40a224:	f47f af25 	bne.w	40a072 <_dtoa_r+0x90a>
  40a228:	f019 0f01 	tst.w	r9, #1
  40a22c:	f43f af21 	beq.w	40a072 <_dtoa_r+0x90a>
  40a230:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40a234:	f47f af1b 	bne.w	40a06e <_dtoa_r+0x906>
  40a238:	2339      	movs	r3, #57	; 0x39
  40a23a:	f888 3000 	strb.w	r3, [r8]
  40a23e:	f108 0801 	add.w	r8, r8, #1
  40a242:	4645      	mov	r5, r8
  40a244:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a248:	2b39      	cmp	r3, #57	; 0x39
  40a24a:	f105 32ff 	add.w	r2, r5, #4294967295
  40a24e:	d03a      	beq.n	40a2c6 <_dtoa_r+0xb5e>
  40a250:	3301      	adds	r3, #1
  40a252:	e03f      	b.n	40a2d4 <_dtoa_r+0xb6c>
  40a254:	2b00      	cmp	r3, #0
  40a256:	f108 0501 	add.w	r5, r8, #1
  40a25a:	dd05      	ble.n	40a268 <_dtoa_r+0xb00>
  40a25c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40a260:	d0ea      	beq.n	40a238 <_dtoa_r+0xad0>
  40a262:	f109 0901 	add.w	r9, r9, #1
  40a266:	e706      	b.n	40a076 <_dtoa_r+0x90e>
  40a268:	9b06      	ldr	r3, [sp, #24]
  40a26a:	9a04      	ldr	r2, [sp, #16]
  40a26c:	f805 9c01 	strb.w	r9, [r5, #-1]
  40a270:	1aeb      	subs	r3, r5, r3
  40a272:	4293      	cmp	r3, r2
  40a274:	46a8      	mov	r8, r5
  40a276:	d0a3      	beq.n	40a1c0 <_dtoa_r+0xa58>
  40a278:	4651      	mov	r1, sl
  40a27a:	2300      	movs	r3, #0
  40a27c:	220a      	movs	r2, #10
  40a27e:	4620      	mov	r0, r4
  40a280:	f000 fad9 	bl	40a836 <__multadd>
  40a284:	9b07      	ldr	r3, [sp, #28]
  40a286:	9907      	ldr	r1, [sp, #28]
  40a288:	42bb      	cmp	r3, r7
  40a28a:	4682      	mov	sl, r0
  40a28c:	f04f 0300 	mov.w	r3, #0
  40a290:	f04f 020a 	mov.w	r2, #10
  40a294:	4620      	mov	r0, r4
  40a296:	d104      	bne.n	40a2a2 <_dtoa_r+0xb3a>
  40a298:	f000 facd 	bl	40a836 <__multadd>
  40a29c:	9007      	str	r0, [sp, #28]
  40a29e:	4607      	mov	r7, r0
  40a2a0:	e6b0      	b.n	40a004 <_dtoa_r+0x89c>
  40a2a2:	f000 fac8 	bl	40a836 <__multadd>
  40a2a6:	2300      	movs	r3, #0
  40a2a8:	9007      	str	r0, [sp, #28]
  40a2aa:	220a      	movs	r2, #10
  40a2ac:	4639      	mov	r1, r7
  40a2ae:	4620      	mov	r0, r4
  40a2b0:	f000 fac1 	bl	40a836 <__multadd>
  40a2b4:	e7f3      	b.n	40a29e <_dtoa_r+0xb36>
  40a2b6:	4651      	mov	r1, sl
  40a2b8:	2300      	movs	r3, #0
  40a2ba:	220a      	movs	r2, #10
  40a2bc:	4620      	mov	r0, r4
  40a2be:	f000 faba 	bl	40a836 <__multadd>
  40a2c2:	4682      	mov	sl, r0
  40a2c4:	e766      	b.n	40a194 <_dtoa_r+0xa2c>
  40a2c6:	9b06      	ldr	r3, [sp, #24]
  40a2c8:	4293      	cmp	r3, r2
  40a2ca:	d105      	bne.n	40a2d8 <_dtoa_r+0xb70>
  40a2cc:	9a06      	ldr	r2, [sp, #24]
  40a2ce:	f10b 0b01 	add.w	fp, fp, #1
  40a2d2:	2331      	movs	r3, #49	; 0x31
  40a2d4:	7013      	strb	r3, [r2, #0]
  40a2d6:	e73c      	b.n	40a152 <_dtoa_r+0x9ea>
  40a2d8:	4615      	mov	r5, r2
  40a2da:	e7b3      	b.n	40a244 <_dtoa_r+0xadc>
  40a2dc:	4b09      	ldr	r3, [pc, #36]	; (40a304 <_dtoa_r+0xb9c>)
  40a2de:	f7ff baa5 	b.w	40982c <_dtoa_r+0xc4>
  40a2e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a2e4:	2b00      	cmp	r3, #0
  40a2e6:	f47f aa7f 	bne.w	4097e8 <_dtoa_r+0x80>
  40a2ea:	4b07      	ldr	r3, [pc, #28]	; (40a308 <_dtoa_r+0xba0>)
  40a2ec:	f7ff ba9e 	b.w	40982c <_dtoa_r+0xc4>
  40a2f0:	9b04      	ldr	r3, [sp, #16]
  40a2f2:	2b00      	cmp	r3, #0
  40a2f4:	f73f af4d 	bgt.w	40a192 <_dtoa_r+0xa2a>
  40a2f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40a2fa:	2b02      	cmp	r3, #2
  40a2fc:	f77f af49 	ble.w	40a192 <_dtoa_r+0xa2a>
  40a300:	e712      	b.n	40a128 <_dtoa_r+0x9c0>
  40a302:	bf00      	nop
  40a304:	0040cd48 	.word	0x0040cd48
  40a308:	0040cd6c 	.word	0x0040cd6c

0040a30c <__sflush_r>:
  40a30c:	898a      	ldrh	r2, [r1, #12]
  40a30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a312:	4605      	mov	r5, r0
  40a314:	0710      	lsls	r0, r2, #28
  40a316:	460c      	mov	r4, r1
  40a318:	d45a      	bmi.n	40a3d0 <__sflush_r+0xc4>
  40a31a:	684b      	ldr	r3, [r1, #4]
  40a31c:	2b00      	cmp	r3, #0
  40a31e:	dc05      	bgt.n	40a32c <__sflush_r+0x20>
  40a320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  40a322:	2b00      	cmp	r3, #0
  40a324:	dc02      	bgt.n	40a32c <__sflush_r+0x20>
  40a326:	2000      	movs	r0, #0
  40a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40a32e:	2e00      	cmp	r6, #0
  40a330:	d0f9      	beq.n	40a326 <__sflush_r+0x1a>
  40a332:	2300      	movs	r3, #0
  40a334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  40a338:	682f      	ldr	r7, [r5, #0]
  40a33a:	602b      	str	r3, [r5, #0]
  40a33c:	d033      	beq.n	40a3a6 <__sflush_r+0x9a>
  40a33e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  40a340:	89a3      	ldrh	r3, [r4, #12]
  40a342:	075a      	lsls	r2, r3, #29
  40a344:	d505      	bpl.n	40a352 <__sflush_r+0x46>
  40a346:	6863      	ldr	r3, [r4, #4]
  40a348:	1ac0      	subs	r0, r0, r3
  40a34a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40a34c:	b10b      	cbz	r3, 40a352 <__sflush_r+0x46>
  40a34e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40a350:	1ac0      	subs	r0, r0, r3
  40a352:	2300      	movs	r3, #0
  40a354:	4602      	mov	r2, r0
  40a356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40a358:	6a21      	ldr	r1, [r4, #32]
  40a35a:	4628      	mov	r0, r5
  40a35c:	47b0      	blx	r6
  40a35e:	1c43      	adds	r3, r0, #1
  40a360:	89a3      	ldrh	r3, [r4, #12]
  40a362:	d106      	bne.n	40a372 <__sflush_r+0x66>
  40a364:	6829      	ldr	r1, [r5, #0]
  40a366:	291d      	cmp	r1, #29
  40a368:	d84b      	bhi.n	40a402 <__sflush_r+0xf6>
  40a36a:	4a2b      	ldr	r2, [pc, #172]	; (40a418 <__sflush_r+0x10c>)
  40a36c:	40ca      	lsrs	r2, r1
  40a36e:	07d6      	lsls	r6, r2, #31
  40a370:	d547      	bpl.n	40a402 <__sflush_r+0xf6>
  40a372:	2200      	movs	r2, #0
  40a374:	6062      	str	r2, [r4, #4]
  40a376:	04d9      	lsls	r1, r3, #19
  40a378:	6922      	ldr	r2, [r4, #16]
  40a37a:	6022      	str	r2, [r4, #0]
  40a37c:	d504      	bpl.n	40a388 <__sflush_r+0x7c>
  40a37e:	1c42      	adds	r2, r0, #1
  40a380:	d101      	bne.n	40a386 <__sflush_r+0x7a>
  40a382:	682b      	ldr	r3, [r5, #0]
  40a384:	b903      	cbnz	r3, 40a388 <__sflush_r+0x7c>
  40a386:	6560      	str	r0, [r4, #84]	; 0x54
  40a388:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40a38a:	602f      	str	r7, [r5, #0]
  40a38c:	2900      	cmp	r1, #0
  40a38e:	d0ca      	beq.n	40a326 <__sflush_r+0x1a>
  40a390:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40a394:	4299      	cmp	r1, r3
  40a396:	d002      	beq.n	40a39e <__sflush_r+0x92>
  40a398:	4628      	mov	r0, r5
  40a39a:	f000 fcdf 	bl	40ad5c <_free_r>
  40a39e:	2000      	movs	r0, #0
  40a3a0:	6360      	str	r0, [r4, #52]	; 0x34
  40a3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a3a6:	6a21      	ldr	r1, [r4, #32]
  40a3a8:	2301      	movs	r3, #1
  40a3aa:	4628      	mov	r0, r5
  40a3ac:	47b0      	blx	r6
  40a3ae:	1c41      	adds	r1, r0, #1
  40a3b0:	d1c6      	bne.n	40a340 <__sflush_r+0x34>
  40a3b2:	682b      	ldr	r3, [r5, #0]
  40a3b4:	2b00      	cmp	r3, #0
  40a3b6:	d0c3      	beq.n	40a340 <__sflush_r+0x34>
  40a3b8:	2b1d      	cmp	r3, #29
  40a3ba:	d001      	beq.n	40a3c0 <__sflush_r+0xb4>
  40a3bc:	2b16      	cmp	r3, #22
  40a3be:	d101      	bne.n	40a3c4 <__sflush_r+0xb8>
  40a3c0:	602f      	str	r7, [r5, #0]
  40a3c2:	e7b0      	b.n	40a326 <__sflush_r+0x1a>
  40a3c4:	89a3      	ldrh	r3, [r4, #12]
  40a3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a3ca:	81a3      	strh	r3, [r4, #12]
  40a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a3d0:	690f      	ldr	r7, [r1, #16]
  40a3d2:	2f00      	cmp	r7, #0
  40a3d4:	d0a7      	beq.n	40a326 <__sflush_r+0x1a>
  40a3d6:	0793      	lsls	r3, r2, #30
  40a3d8:	680e      	ldr	r6, [r1, #0]
  40a3da:	bf08      	it	eq
  40a3dc:	694b      	ldreq	r3, [r1, #20]
  40a3de:	600f      	str	r7, [r1, #0]
  40a3e0:	bf18      	it	ne
  40a3e2:	2300      	movne	r3, #0
  40a3e4:	eba6 0807 	sub.w	r8, r6, r7
  40a3e8:	608b      	str	r3, [r1, #8]
  40a3ea:	f1b8 0f00 	cmp.w	r8, #0
  40a3ee:	dd9a      	ble.n	40a326 <__sflush_r+0x1a>
  40a3f0:	4643      	mov	r3, r8
  40a3f2:	463a      	mov	r2, r7
  40a3f4:	6a21      	ldr	r1, [r4, #32]
  40a3f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  40a3f8:	4628      	mov	r0, r5
  40a3fa:	47b0      	blx	r6
  40a3fc:	2800      	cmp	r0, #0
  40a3fe:	dc07      	bgt.n	40a410 <__sflush_r+0x104>
  40a400:	89a3      	ldrh	r3, [r4, #12]
  40a402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a406:	81a3      	strh	r3, [r4, #12]
  40a408:	f04f 30ff 	mov.w	r0, #4294967295
  40a40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a410:	4407      	add	r7, r0
  40a412:	eba8 0800 	sub.w	r8, r8, r0
  40a416:	e7e8      	b.n	40a3ea <__sflush_r+0xde>
  40a418:	20400001 	.word	0x20400001

0040a41c <_fflush_r>:
  40a41c:	b538      	push	{r3, r4, r5, lr}
  40a41e:	690b      	ldr	r3, [r1, #16]
  40a420:	4605      	mov	r5, r0
  40a422:	460c      	mov	r4, r1
  40a424:	b1db      	cbz	r3, 40a45e <_fflush_r+0x42>
  40a426:	b118      	cbz	r0, 40a430 <_fflush_r+0x14>
  40a428:	6983      	ldr	r3, [r0, #24]
  40a42a:	b90b      	cbnz	r3, 40a430 <_fflush_r+0x14>
  40a42c:	f000 f860 	bl	40a4f0 <__sinit>
  40a430:	4b0c      	ldr	r3, [pc, #48]	; (40a464 <_fflush_r+0x48>)
  40a432:	429c      	cmp	r4, r3
  40a434:	d109      	bne.n	40a44a <_fflush_r+0x2e>
  40a436:	686c      	ldr	r4, [r5, #4]
  40a438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a43c:	b17b      	cbz	r3, 40a45e <_fflush_r+0x42>
  40a43e:	4621      	mov	r1, r4
  40a440:	4628      	mov	r0, r5
  40a442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a446:	f7ff bf61 	b.w	40a30c <__sflush_r>
  40a44a:	4b07      	ldr	r3, [pc, #28]	; (40a468 <_fflush_r+0x4c>)
  40a44c:	429c      	cmp	r4, r3
  40a44e:	d101      	bne.n	40a454 <_fflush_r+0x38>
  40a450:	68ac      	ldr	r4, [r5, #8]
  40a452:	e7f1      	b.n	40a438 <_fflush_r+0x1c>
  40a454:	4b05      	ldr	r3, [pc, #20]	; (40a46c <_fflush_r+0x50>)
  40a456:	429c      	cmp	r4, r3
  40a458:	bf08      	it	eq
  40a45a:	68ec      	ldreq	r4, [r5, #12]
  40a45c:	e7ec      	b.n	40a438 <_fflush_r+0x1c>
  40a45e:	2000      	movs	r0, #0
  40a460:	bd38      	pop	{r3, r4, r5, pc}
  40a462:	bf00      	nop
  40a464:	0040cd9c 	.word	0x0040cd9c
  40a468:	0040cdbc 	.word	0x0040cdbc
  40a46c:	0040cd7c 	.word	0x0040cd7c

0040a470 <_cleanup_r>:
  40a470:	4901      	ldr	r1, [pc, #4]	; (40a478 <_cleanup_r+0x8>)
  40a472:	f000 b8a9 	b.w	40a5c8 <_fwalk_reent>
  40a476:	bf00      	nop
  40a478:	0040a41d 	.word	0x0040a41d

0040a47c <std.isra.0>:
  40a47c:	2300      	movs	r3, #0
  40a47e:	b510      	push	{r4, lr}
  40a480:	4604      	mov	r4, r0
  40a482:	6003      	str	r3, [r0, #0]
  40a484:	6043      	str	r3, [r0, #4]
  40a486:	6083      	str	r3, [r0, #8]
  40a488:	8181      	strh	r1, [r0, #12]
  40a48a:	6643      	str	r3, [r0, #100]	; 0x64
  40a48c:	81c2      	strh	r2, [r0, #14]
  40a48e:	6103      	str	r3, [r0, #16]
  40a490:	6143      	str	r3, [r0, #20]
  40a492:	6183      	str	r3, [r0, #24]
  40a494:	4619      	mov	r1, r3
  40a496:	2208      	movs	r2, #8
  40a498:	305c      	adds	r0, #92	; 0x5c
  40a49a:	f7fe fb9a 	bl	408bd2 <memset>
  40a49e:	4b05      	ldr	r3, [pc, #20]	; (40a4b4 <std.isra.0+0x38>)
  40a4a0:	6263      	str	r3, [r4, #36]	; 0x24
  40a4a2:	4b05      	ldr	r3, [pc, #20]	; (40a4b8 <std.isra.0+0x3c>)
  40a4a4:	62a3      	str	r3, [r4, #40]	; 0x28
  40a4a6:	4b05      	ldr	r3, [pc, #20]	; (40a4bc <std.isra.0+0x40>)
  40a4a8:	62e3      	str	r3, [r4, #44]	; 0x2c
  40a4aa:	4b05      	ldr	r3, [pc, #20]	; (40a4c0 <std.isra.0+0x44>)
  40a4ac:	6224      	str	r4, [r4, #32]
  40a4ae:	6323      	str	r3, [r4, #48]	; 0x30
  40a4b0:	bd10      	pop	{r4, pc}
  40a4b2:	bf00      	nop
  40a4b4:	0040b151 	.word	0x0040b151
  40a4b8:	0040b173 	.word	0x0040b173
  40a4bc:	0040b1ab 	.word	0x0040b1ab
  40a4c0:	0040b1cf 	.word	0x0040b1cf

0040a4c4 <__sfmoreglue>:
  40a4c4:	b570      	push	{r4, r5, r6, lr}
  40a4c6:	1e4a      	subs	r2, r1, #1
  40a4c8:	2568      	movs	r5, #104	; 0x68
  40a4ca:	4355      	muls	r5, r2
  40a4cc:	460e      	mov	r6, r1
  40a4ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
  40a4d2:	f000 fc91 	bl	40adf8 <_malloc_r>
  40a4d6:	4604      	mov	r4, r0
  40a4d8:	b140      	cbz	r0, 40a4ec <__sfmoreglue+0x28>
  40a4da:	2100      	movs	r1, #0
  40a4dc:	e880 0042 	stmia.w	r0, {r1, r6}
  40a4e0:	300c      	adds	r0, #12
  40a4e2:	60a0      	str	r0, [r4, #8]
  40a4e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
  40a4e8:	f7fe fb73 	bl	408bd2 <memset>
  40a4ec:	4620      	mov	r0, r4
  40a4ee:	bd70      	pop	{r4, r5, r6, pc}

0040a4f0 <__sinit>:
  40a4f0:	6983      	ldr	r3, [r0, #24]
  40a4f2:	b510      	push	{r4, lr}
  40a4f4:	4604      	mov	r4, r0
  40a4f6:	bb33      	cbnz	r3, 40a546 <__sinit+0x56>
  40a4f8:	6483      	str	r3, [r0, #72]	; 0x48
  40a4fa:	64c3      	str	r3, [r0, #76]	; 0x4c
  40a4fc:	6503      	str	r3, [r0, #80]	; 0x50
  40a4fe:	4b12      	ldr	r3, [pc, #72]	; (40a548 <__sinit+0x58>)
  40a500:	4a12      	ldr	r2, [pc, #72]	; (40a54c <__sinit+0x5c>)
  40a502:	681b      	ldr	r3, [r3, #0]
  40a504:	6282      	str	r2, [r0, #40]	; 0x28
  40a506:	4298      	cmp	r0, r3
  40a508:	bf04      	itt	eq
  40a50a:	2301      	moveq	r3, #1
  40a50c:	6183      	streq	r3, [r0, #24]
  40a50e:	f000 f81f 	bl	40a550 <__sfp>
  40a512:	6060      	str	r0, [r4, #4]
  40a514:	4620      	mov	r0, r4
  40a516:	f000 f81b 	bl	40a550 <__sfp>
  40a51a:	60a0      	str	r0, [r4, #8]
  40a51c:	4620      	mov	r0, r4
  40a51e:	f000 f817 	bl	40a550 <__sfp>
  40a522:	2200      	movs	r2, #0
  40a524:	60e0      	str	r0, [r4, #12]
  40a526:	2104      	movs	r1, #4
  40a528:	6860      	ldr	r0, [r4, #4]
  40a52a:	f7ff ffa7 	bl	40a47c <std.isra.0>
  40a52e:	2201      	movs	r2, #1
  40a530:	2109      	movs	r1, #9
  40a532:	68a0      	ldr	r0, [r4, #8]
  40a534:	f7ff ffa2 	bl	40a47c <std.isra.0>
  40a538:	2202      	movs	r2, #2
  40a53a:	2112      	movs	r1, #18
  40a53c:	68e0      	ldr	r0, [r4, #12]
  40a53e:	f7ff ff9d 	bl	40a47c <std.isra.0>
  40a542:	2301      	movs	r3, #1
  40a544:	61a3      	str	r3, [r4, #24]
  40a546:	bd10      	pop	{r4, pc}
  40a548:	0040cd34 	.word	0x0040cd34
  40a54c:	0040a471 	.word	0x0040a471

0040a550 <__sfp>:
  40a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a552:	4b1c      	ldr	r3, [pc, #112]	; (40a5c4 <__sfp+0x74>)
  40a554:	681e      	ldr	r6, [r3, #0]
  40a556:	69b3      	ldr	r3, [r6, #24]
  40a558:	4607      	mov	r7, r0
  40a55a:	b913      	cbnz	r3, 40a562 <__sfp+0x12>
  40a55c:	4630      	mov	r0, r6
  40a55e:	f7ff ffc7 	bl	40a4f0 <__sinit>
  40a562:	3648      	adds	r6, #72	; 0x48
  40a564:	68b4      	ldr	r4, [r6, #8]
  40a566:	6873      	ldr	r3, [r6, #4]
  40a568:	3b01      	subs	r3, #1
  40a56a:	d503      	bpl.n	40a574 <__sfp+0x24>
  40a56c:	6833      	ldr	r3, [r6, #0]
  40a56e:	b133      	cbz	r3, 40a57e <__sfp+0x2e>
  40a570:	6836      	ldr	r6, [r6, #0]
  40a572:	e7f7      	b.n	40a564 <__sfp+0x14>
  40a574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40a578:	b16d      	cbz	r5, 40a596 <__sfp+0x46>
  40a57a:	3468      	adds	r4, #104	; 0x68
  40a57c:	e7f4      	b.n	40a568 <__sfp+0x18>
  40a57e:	2104      	movs	r1, #4
  40a580:	4638      	mov	r0, r7
  40a582:	f7ff ff9f 	bl	40a4c4 <__sfmoreglue>
  40a586:	6030      	str	r0, [r6, #0]
  40a588:	2800      	cmp	r0, #0
  40a58a:	d1f1      	bne.n	40a570 <__sfp+0x20>
  40a58c:	230c      	movs	r3, #12
  40a58e:	603b      	str	r3, [r7, #0]
  40a590:	4604      	mov	r4, r0
  40a592:	4620      	mov	r0, r4
  40a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a596:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40a59a:	81e3      	strh	r3, [r4, #14]
  40a59c:	2301      	movs	r3, #1
  40a59e:	81a3      	strh	r3, [r4, #12]
  40a5a0:	6665      	str	r5, [r4, #100]	; 0x64
  40a5a2:	6025      	str	r5, [r4, #0]
  40a5a4:	60a5      	str	r5, [r4, #8]
  40a5a6:	6065      	str	r5, [r4, #4]
  40a5a8:	6125      	str	r5, [r4, #16]
  40a5aa:	6165      	str	r5, [r4, #20]
  40a5ac:	61a5      	str	r5, [r4, #24]
  40a5ae:	2208      	movs	r2, #8
  40a5b0:	4629      	mov	r1, r5
  40a5b2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40a5b6:	f7fe fb0c 	bl	408bd2 <memset>
  40a5ba:	6365      	str	r5, [r4, #52]	; 0x34
  40a5bc:	63a5      	str	r5, [r4, #56]	; 0x38
  40a5be:	64a5      	str	r5, [r4, #72]	; 0x48
  40a5c0:	64e5      	str	r5, [r4, #76]	; 0x4c
  40a5c2:	e7e6      	b.n	40a592 <__sfp+0x42>
  40a5c4:	0040cd34 	.word	0x0040cd34

0040a5c8 <_fwalk_reent>:
  40a5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a5cc:	4680      	mov	r8, r0
  40a5ce:	4689      	mov	r9, r1
  40a5d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
  40a5d4:	2600      	movs	r6, #0
  40a5d6:	b914      	cbnz	r4, 40a5de <_fwalk_reent+0x16>
  40a5d8:	4630      	mov	r0, r6
  40a5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a5de:	68a5      	ldr	r5, [r4, #8]
  40a5e0:	6867      	ldr	r7, [r4, #4]
  40a5e2:	3f01      	subs	r7, #1
  40a5e4:	d501      	bpl.n	40a5ea <_fwalk_reent+0x22>
  40a5e6:	6824      	ldr	r4, [r4, #0]
  40a5e8:	e7f5      	b.n	40a5d6 <_fwalk_reent+0xe>
  40a5ea:	89ab      	ldrh	r3, [r5, #12]
  40a5ec:	2b01      	cmp	r3, #1
  40a5ee:	d907      	bls.n	40a600 <_fwalk_reent+0x38>
  40a5f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  40a5f4:	3301      	adds	r3, #1
  40a5f6:	d003      	beq.n	40a600 <_fwalk_reent+0x38>
  40a5f8:	4629      	mov	r1, r5
  40a5fa:	4640      	mov	r0, r8
  40a5fc:	47c8      	blx	r9
  40a5fe:	4306      	orrs	r6, r0
  40a600:	3568      	adds	r5, #104	; 0x68
  40a602:	e7ee      	b.n	40a5e2 <_fwalk_reent+0x1a>

0040a604 <_localeconv_r>:
  40a604:	4b04      	ldr	r3, [pc, #16]	; (40a618 <_localeconv_r+0x14>)
  40a606:	681b      	ldr	r3, [r3, #0]
  40a608:	6a18      	ldr	r0, [r3, #32]
  40a60a:	4b04      	ldr	r3, [pc, #16]	; (40a61c <_localeconv_r+0x18>)
  40a60c:	2800      	cmp	r0, #0
  40a60e:	bf08      	it	eq
  40a610:	4618      	moveq	r0, r3
  40a612:	30f0      	adds	r0, #240	; 0xf0
  40a614:	4770      	bx	lr
  40a616:	bf00      	nop
  40a618:	20000178 	.word	0x20000178
  40a61c:	200001dc 	.word	0x200001dc

0040a620 <__swhatbuf_r>:
  40a620:	b570      	push	{r4, r5, r6, lr}
  40a622:	460e      	mov	r6, r1
  40a624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a628:	2900      	cmp	r1, #0
  40a62a:	b090      	sub	sp, #64	; 0x40
  40a62c:	4614      	mov	r4, r2
  40a62e:	461d      	mov	r5, r3
  40a630:	da07      	bge.n	40a642 <__swhatbuf_r+0x22>
  40a632:	2300      	movs	r3, #0
  40a634:	602b      	str	r3, [r5, #0]
  40a636:	89b3      	ldrh	r3, [r6, #12]
  40a638:	061a      	lsls	r2, r3, #24
  40a63a:	d410      	bmi.n	40a65e <__swhatbuf_r+0x3e>
  40a63c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a640:	e00e      	b.n	40a660 <__swhatbuf_r+0x40>
  40a642:	aa01      	add	r2, sp, #4
  40a644:	f000 feaa 	bl	40b39c <_fstat_r>
  40a648:	2800      	cmp	r0, #0
  40a64a:	dbf2      	blt.n	40a632 <__swhatbuf_r+0x12>
  40a64c:	9a02      	ldr	r2, [sp, #8]
  40a64e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a652:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40a656:	425a      	negs	r2, r3
  40a658:	415a      	adcs	r2, r3
  40a65a:	602a      	str	r2, [r5, #0]
  40a65c:	e7ee      	b.n	40a63c <__swhatbuf_r+0x1c>
  40a65e:	2340      	movs	r3, #64	; 0x40
  40a660:	2000      	movs	r0, #0
  40a662:	6023      	str	r3, [r4, #0]
  40a664:	b010      	add	sp, #64	; 0x40
  40a666:	bd70      	pop	{r4, r5, r6, pc}

0040a668 <__smakebuf_r>:
  40a668:	898b      	ldrh	r3, [r1, #12]
  40a66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40a66c:	079d      	lsls	r5, r3, #30
  40a66e:	4606      	mov	r6, r0
  40a670:	460c      	mov	r4, r1
  40a672:	d507      	bpl.n	40a684 <__smakebuf_r+0x1c>
  40a674:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40a678:	6023      	str	r3, [r4, #0]
  40a67a:	6123      	str	r3, [r4, #16]
  40a67c:	2301      	movs	r3, #1
  40a67e:	6163      	str	r3, [r4, #20]
  40a680:	b002      	add	sp, #8
  40a682:	bd70      	pop	{r4, r5, r6, pc}
  40a684:	ab01      	add	r3, sp, #4
  40a686:	466a      	mov	r2, sp
  40a688:	f7ff ffca 	bl	40a620 <__swhatbuf_r>
  40a68c:	9900      	ldr	r1, [sp, #0]
  40a68e:	4605      	mov	r5, r0
  40a690:	4630      	mov	r0, r6
  40a692:	f000 fbb1 	bl	40adf8 <_malloc_r>
  40a696:	b948      	cbnz	r0, 40a6ac <__smakebuf_r+0x44>
  40a698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a69c:	059a      	lsls	r2, r3, #22
  40a69e:	d4ef      	bmi.n	40a680 <__smakebuf_r+0x18>
  40a6a0:	f023 0303 	bic.w	r3, r3, #3
  40a6a4:	f043 0302 	orr.w	r3, r3, #2
  40a6a8:	81a3      	strh	r3, [r4, #12]
  40a6aa:	e7e3      	b.n	40a674 <__smakebuf_r+0xc>
  40a6ac:	4b0d      	ldr	r3, [pc, #52]	; (40a6e4 <__smakebuf_r+0x7c>)
  40a6ae:	62b3      	str	r3, [r6, #40]	; 0x28
  40a6b0:	89a3      	ldrh	r3, [r4, #12]
  40a6b2:	6020      	str	r0, [r4, #0]
  40a6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a6b8:	81a3      	strh	r3, [r4, #12]
  40a6ba:	9b00      	ldr	r3, [sp, #0]
  40a6bc:	6163      	str	r3, [r4, #20]
  40a6be:	9b01      	ldr	r3, [sp, #4]
  40a6c0:	6120      	str	r0, [r4, #16]
  40a6c2:	b15b      	cbz	r3, 40a6dc <__smakebuf_r+0x74>
  40a6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a6c8:	4630      	mov	r0, r6
  40a6ca:	f000 fe79 	bl	40b3c0 <_isatty_r>
  40a6ce:	b128      	cbz	r0, 40a6dc <__smakebuf_r+0x74>
  40a6d0:	89a3      	ldrh	r3, [r4, #12]
  40a6d2:	f023 0303 	bic.w	r3, r3, #3
  40a6d6:	f043 0301 	orr.w	r3, r3, #1
  40a6da:	81a3      	strh	r3, [r4, #12]
  40a6dc:	89a3      	ldrh	r3, [r4, #12]
  40a6de:	431d      	orrs	r5, r3
  40a6e0:	81a5      	strh	r5, [r4, #12]
  40a6e2:	e7cd      	b.n	40a680 <__smakebuf_r+0x18>
  40a6e4:	0040a471 	.word	0x0040a471

0040a6e8 <malloc>:
  40a6e8:	4b02      	ldr	r3, [pc, #8]	; (40a6f4 <malloc+0xc>)
  40a6ea:	4601      	mov	r1, r0
  40a6ec:	6818      	ldr	r0, [r3, #0]
  40a6ee:	f000 bb83 	b.w	40adf8 <_malloc_r>
  40a6f2:	bf00      	nop
  40a6f4:	20000178 	.word	0x20000178
	...

0040a700 <memchr>:
  40a700:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a704:	2a10      	cmp	r2, #16
  40a706:	db2b      	blt.n	40a760 <memchr+0x60>
  40a708:	f010 0f07 	tst.w	r0, #7
  40a70c:	d008      	beq.n	40a720 <memchr+0x20>
  40a70e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a712:	3a01      	subs	r2, #1
  40a714:	428b      	cmp	r3, r1
  40a716:	d02d      	beq.n	40a774 <memchr+0x74>
  40a718:	f010 0f07 	tst.w	r0, #7
  40a71c:	b342      	cbz	r2, 40a770 <memchr+0x70>
  40a71e:	d1f6      	bne.n	40a70e <memchr+0xe>
  40a720:	b4f0      	push	{r4, r5, r6, r7}
  40a722:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40a726:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40a72a:	f022 0407 	bic.w	r4, r2, #7
  40a72e:	f07f 0700 	mvns.w	r7, #0
  40a732:	2300      	movs	r3, #0
  40a734:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40a738:	3c08      	subs	r4, #8
  40a73a:	ea85 0501 	eor.w	r5, r5, r1
  40a73e:	ea86 0601 	eor.w	r6, r6, r1
  40a742:	fa85 f547 	uadd8	r5, r5, r7
  40a746:	faa3 f587 	sel	r5, r3, r7
  40a74a:	fa86 f647 	uadd8	r6, r6, r7
  40a74e:	faa5 f687 	sel	r6, r5, r7
  40a752:	b98e      	cbnz	r6, 40a778 <memchr+0x78>
  40a754:	d1ee      	bne.n	40a734 <memchr+0x34>
  40a756:	bcf0      	pop	{r4, r5, r6, r7}
  40a758:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a75c:	f002 0207 	and.w	r2, r2, #7
  40a760:	b132      	cbz	r2, 40a770 <memchr+0x70>
  40a762:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a766:	3a01      	subs	r2, #1
  40a768:	ea83 0301 	eor.w	r3, r3, r1
  40a76c:	b113      	cbz	r3, 40a774 <memchr+0x74>
  40a76e:	d1f8      	bne.n	40a762 <memchr+0x62>
  40a770:	2000      	movs	r0, #0
  40a772:	4770      	bx	lr
  40a774:	3801      	subs	r0, #1
  40a776:	4770      	bx	lr
  40a778:	2d00      	cmp	r5, #0
  40a77a:	bf06      	itte	eq
  40a77c:	4635      	moveq	r5, r6
  40a77e:	3803      	subeq	r0, #3
  40a780:	3807      	subne	r0, #7
  40a782:	f015 0f01 	tst.w	r5, #1
  40a786:	d107      	bne.n	40a798 <memchr+0x98>
  40a788:	3001      	adds	r0, #1
  40a78a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40a78e:	bf02      	ittt	eq
  40a790:	3001      	addeq	r0, #1
  40a792:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40a796:	3001      	addeq	r0, #1
  40a798:	bcf0      	pop	{r4, r5, r6, r7}
  40a79a:	3801      	subs	r0, #1
  40a79c:	4770      	bx	lr
  40a79e:	bf00      	nop

0040a7a0 <_Balloc>:
  40a7a0:	b570      	push	{r4, r5, r6, lr}
  40a7a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40a7a4:	4604      	mov	r4, r0
  40a7a6:	460e      	mov	r6, r1
  40a7a8:	b93d      	cbnz	r5, 40a7ba <_Balloc+0x1a>
  40a7aa:	2010      	movs	r0, #16
  40a7ac:	f7ff ff9c 	bl	40a6e8 <malloc>
  40a7b0:	6260      	str	r0, [r4, #36]	; 0x24
  40a7b2:	6045      	str	r5, [r0, #4]
  40a7b4:	6085      	str	r5, [r0, #8]
  40a7b6:	6005      	str	r5, [r0, #0]
  40a7b8:	60c5      	str	r5, [r0, #12]
  40a7ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40a7bc:	68eb      	ldr	r3, [r5, #12]
  40a7be:	b183      	cbz	r3, 40a7e2 <_Balloc+0x42>
  40a7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40a7c2:	68db      	ldr	r3, [r3, #12]
  40a7c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  40a7c8:	b9b8      	cbnz	r0, 40a7fa <_Balloc+0x5a>
  40a7ca:	2101      	movs	r1, #1
  40a7cc:	fa01 f506 	lsl.w	r5, r1, r6
  40a7d0:	1d6a      	adds	r2, r5, #5
  40a7d2:	0092      	lsls	r2, r2, #2
  40a7d4:	4620      	mov	r0, r4
  40a7d6:	f000 fab3 	bl	40ad40 <_calloc_r>
  40a7da:	b160      	cbz	r0, 40a7f6 <_Balloc+0x56>
  40a7dc:	6046      	str	r6, [r0, #4]
  40a7de:	6085      	str	r5, [r0, #8]
  40a7e0:	e00e      	b.n	40a800 <_Balloc+0x60>
  40a7e2:	2221      	movs	r2, #33	; 0x21
  40a7e4:	2104      	movs	r1, #4
  40a7e6:	4620      	mov	r0, r4
  40a7e8:	f000 faaa 	bl	40ad40 <_calloc_r>
  40a7ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40a7ee:	60e8      	str	r0, [r5, #12]
  40a7f0:	68db      	ldr	r3, [r3, #12]
  40a7f2:	2b00      	cmp	r3, #0
  40a7f4:	d1e4      	bne.n	40a7c0 <_Balloc+0x20>
  40a7f6:	2000      	movs	r0, #0
  40a7f8:	bd70      	pop	{r4, r5, r6, pc}
  40a7fa:	6802      	ldr	r2, [r0, #0]
  40a7fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  40a800:	2300      	movs	r3, #0
  40a802:	6103      	str	r3, [r0, #16]
  40a804:	60c3      	str	r3, [r0, #12]
  40a806:	bd70      	pop	{r4, r5, r6, pc}

0040a808 <_Bfree>:
  40a808:	b570      	push	{r4, r5, r6, lr}
  40a80a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40a80c:	4606      	mov	r6, r0
  40a80e:	460d      	mov	r5, r1
  40a810:	b93c      	cbnz	r4, 40a822 <_Bfree+0x1a>
  40a812:	2010      	movs	r0, #16
  40a814:	f7ff ff68 	bl	40a6e8 <malloc>
  40a818:	6270      	str	r0, [r6, #36]	; 0x24
  40a81a:	6044      	str	r4, [r0, #4]
  40a81c:	6084      	str	r4, [r0, #8]
  40a81e:	6004      	str	r4, [r0, #0]
  40a820:	60c4      	str	r4, [r0, #12]
  40a822:	b13d      	cbz	r5, 40a834 <_Bfree+0x2c>
  40a824:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40a826:	686a      	ldr	r2, [r5, #4]
  40a828:	68db      	ldr	r3, [r3, #12]
  40a82a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a82e:	6029      	str	r1, [r5, #0]
  40a830:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40a834:	bd70      	pop	{r4, r5, r6, pc}

0040a836 <__multadd>:
  40a836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a83a:	690d      	ldr	r5, [r1, #16]
  40a83c:	461f      	mov	r7, r3
  40a83e:	4606      	mov	r6, r0
  40a840:	460c      	mov	r4, r1
  40a842:	f101 0e14 	add.w	lr, r1, #20
  40a846:	2300      	movs	r3, #0
  40a848:	f8de 0000 	ldr.w	r0, [lr]
  40a84c:	b281      	uxth	r1, r0
  40a84e:	fb02 7101 	mla	r1, r2, r1, r7
  40a852:	0c0f      	lsrs	r7, r1, #16
  40a854:	0c00      	lsrs	r0, r0, #16
  40a856:	fb02 7000 	mla	r0, r2, r0, r7
  40a85a:	b289      	uxth	r1, r1
  40a85c:	3301      	adds	r3, #1
  40a85e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  40a862:	429d      	cmp	r5, r3
  40a864:	ea4f 4710 	mov.w	r7, r0, lsr #16
  40a868:	f84e 1b04 	str.w	r1, [lr], #4
  40a86c:	dcec      	bgt.n	40a848 <__multadd+0x12>
  40a86e:	b1d7      	cbz	r7, 40a8a6 <__multadd+0x70>
  40a870:	68a3      	ldr	r3, [r4, #8]
  40a872:	429d      	cmp	r5, r3
  40a874:	db12      	blt.n	40a89c <__multadd+0x66>
  40a876:	6861      	ldr	r1, [r4, #4]
  40a878:	4630      	mov	r0, r6
  40a87a:	3101      	adds	r1, #1
  40a87c:	f7ff ff90 	bl	40a7a0 <_Balloc>
  40a880:	6922      	ldr	r2, [r4, #16]
  40a882:	3202      	adds	r2, #2
  40a884:	f104 010c 	add.w	r1, r4, #12
  40a888:	4680      	mov	r8, r0
  40a88a:	0092      	lsls	r2, r2, #2
  40a88c:	300c      	adds	r0, #12
  40a88e:	f7fe f995 	bl	408bbc <memcpy>
  40a892:	4621      	mov	r1, r4
  40a894:	4630      	mov	r0, r6
  40a896:	f7ff ffb7 	bl	40a808 <_Bfree>
  40a89a:	4644      	mov	r4, r8
  40a89c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  40a8a0:	3501      	adds	r5, #1
  40a8a2:	615f      	str	r7, [r3, #20]
  40a8a4:	6125      	str	r5, [r4, #16]
  40a8a6:	4620      	mov	r0, r4
  40a8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040a8ac <__hi0bits>:
  40a8ac:	0c02      	lsrs	r2, r0, #16
  40a8ae:	0412      	lsls	r2, r2, #16
  40a8b0:	4603      	mov	r3, r0
  40a8b2:	b9b2      	cbnz	r2, 40a8e2 <__hi0bits+0x36>
  40a8b4:	0403      	lsls	r3, r0, #16
  40a8b6:	2010      	movs	r0, #16
  40a8b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40a8bc:	bf04      	itt	eq
  40a8be:	021b      	lsleq	r3, r3, #8
  40a8c0:	3008      	addeq	r0, #8
  40a8c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40a8c6:	bf04      	itt	eq
  40a8c8:	011b      	lsleq	r3, r3, #4
  40a8ca:	3004      	addeq	r0, #4
  40a8cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40a8d0:	bf04      	itt	eq
  40a8d2:	009b      	lsleq	r3, r3, #2
  40a8d4:	3002      	addeq	r0, #2
  40a8d6:	2b00      	cmp	r3, #0
  40a8d8:	db06      	blt.n	40a8e8 <__hi0bits+0x3c>
  40a8da:	005b      	lsls	r3, r3, #1
  40a8dc:	d503      	bpl.n	40a8e6 <__hi0bits+0x3a>
  40a8de:	3001      	adds	r0, #1
  40a8e0:	4770      	bx	lr
  40a8e2:	2000      	movs	r0, #0
  40a8e4:	e7e8      	b.n	40a8b8 <__hi0bits+0xc>
  40a8e6:	2020      	movs	r0, #32
  40a8e8:	4770      	bx	lr

0040a8ea <__lo0bits>:
  40a8ea:	6803      	ldr	r3, [r0, #0]
  40a8ec:	f013 0207 	ands.w	r2, r3, #7
  40a8f0:	4601      	mov	r1, r0
  40a8f2:	d00b      	beq.n	40a90c <__lo0bits+0x22>
  40a8f4:	07da      	lsls	r2, r3, #31
  40a8f6:	d423      	bmi.n	40a940 <__lo0bits+0x56>
  40a8f8:	0798      	lsls	r0, r3, #30
  40a8fa:	bf49      	itett	mi
  40a8fc:	085b      	lsrmi	r3, r3, #1
  40a8fe:	089b      	lsrpl	r3, r3, #2
  40a900:	2001      	movmi	r0, #1
  40a902:	600b      	strmi	r3, [r1, #0]
  40a904:	bf5c      	itt	pl
  40a906:	600b      	strpl	r3, [r1, #0]
  40a908:	2002      	movpl	r0, #2
  40a90a:	4770      	bx	lr
  40a90c:	b298      	uxth	r0, r3
  40a90e:	b9a8      	cbnz	r0, 40a93c <__lo0bits+0x52>
  40a910:	0c1b      	lsrs	r3, r3, #16
  40a912:	2010      	movs	r0, #16
  40a914:	f013 0fff 	tst.w	r3, #255	; 0xff
  40a918:	bf04      	itt	eq
  40a91a:	0a1b      	lsreq	r3, r3, #8
  40a91c:	3008      	addeq	r0, #8
  40a91e:	071a      	lsls	r2, r3, #28
  40a920:	bf04      	itt	eq
  40a922:	091b      	lsreq	r3, r3, #4
  40a924:	3004      	addeq	r0, #4
  40a926:	079a      	lsls	r2, r3, #30
  40a928:	bf04      	itt	eq
  40a92a:	089b      	lsreq	r3, r3, #2
  40a92c:	3002      	addeq	r0, #2
  40a92e:	07da      	lsls	r2, r3, #31
  40a930:	d402      	bmi.n	40a938 <__lo0bits+0x4e>
  40a932:	085b      	lsrs	r3, r3, #1
  40a934:	d006      	beq.n	40a944 <__lo0bits+0x5a>
  40a936:	3001      	adds	r0, #1
  40a938:	600b      	str	r3, [r1, #0]
  40a93a:	4770      	bx	lr
  40a93c:	4610      	mov	r0, r2
  40a93e:	e7e9      	b.n	40a914 <__lo0bits+0x2a>
  40a940:	2000      	movs	r0, #0
  40a942:	4770      	bx	lr
  40a944:	2020      	movs	r0, #32
  40a946:	4770      	bx	lr

0040a948 <__i2b>:
  40a948:	b510      	push	{r4, lr}
  40a94a:	460c      	mov	r4, r1
  40a94c:	2101      	movs	r1, #1
  40a94e:	f7ff ff27 	bl	40a7a0 <_Balloc>
  40a952:	2201      	movs	r2, #1
  40a954:	6144      	str	r4, [r0, #20]
  40a956:	6102      	str	r2, [r0, #16]
  40a958:	bd10      	pop	{r4, pc}

0040a95a <__multiply>:
  40a95a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a95e:	4614      	mov	r4, r2
  40a960:	690a      	ldr	r2, [r1, #16]
  40a962:	6923      	ldr	r3, [r4, #16]
  40a964:	429a      	cmp	r2, r3
  40a966:	bfb8      	it	lt
  40a968:	460b      	movlt	r3, r1
  40a96a:	4689      	mov	r9, r1
  40a96c:	bfbc      	itt	lt
  40a96e:	46a1      	movlt	r9, r4
  40a970:	461c      	movlt	r4, r3
  40a972:	f8d9 7010 	ldr.w	r7, [r9, #16]
  40a976:	f8d4 a010 	ldr.w	sl, [r4, #16]
  40a97a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40a97e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40a982:	eb07 060a 	add.w	r6, r7, sl
  40a986:	429e      	cmp	r6, r3
  40a988:	bfc8      	it	gt
  40a98a:	3101      	addgt	r1, #1
  40a98c:	f7ff ff08 	bl	40a7a0 <_Balloc>
  40a990:	f100 0514 	add.w	r5, r0, #20
  40a994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  40a998:	462b      	mov	r3, r5
  40a99a:	2200      	movs	r2, #0
  40a99c:	4543      	cmp	r3, r8
  40a99e:	d316      	bcc.n	40a9ce <__multiply+0x74>
  40a9a0:	f104 0214 	add.w	r2, r4, #20
  40a9a4:	f109 0114 	add.w	r1, r9, #20
  40a9a8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40a9ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  40a9b0:	9301      	str	r3, [sp, #4]
  40a9b2:	9c01      	ldr	r4, [sp, #4]
  40a9b4:	4294      	cmp	r4, r2
  40a9b6:	4613      	mov	r3, r2
  40a9b8:	d80c      	bhi.n	40a9d4 <__multiply+0x7a>
  40a9ba:	2e00      	cmp	r6, #0
  40a9bc:	dd03      	ble.n	40a9c6 <__multiply+0x6c>
  40a9be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  40a9c2:	2b00      	cmp	r3, #0
  40a9c4:	d054      	beq.n	40aa70 <__multiply+0x116>
  40a9c6:	6106      	str	r6, [r0, #16]
  40a9c8:	b003      	add	sp, #12
  40a9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a9ce:	f843 2b04 	str.w	r2, [r3], #4
  40a9d2:	e7e3      	b.n	40a99c <__multiply+0x42>
  40a9d4:	f8b3 a000 	ldrh.w	sl, [r3]
  40a9d8:	3204      	adds	r2, #4
  40a9da:	f1ba 0f00 	cmp.w	sl, #0
  40a9de:	d020      	beq.n	40aa22 <__multiply+0xc8>
  40a9e0:	46ae      	mov	lr, r5
  40a9e2:	4689      	mov	r9, r1
  40a9e4:	f04f 0c00 	mov.w	ip, #0
  40a9e8:	f859 4b04 	ldr.w	r4, [r9], #4
  40a9ec:	f8be b000 	ldrh.w	fp, [lr]
  40a9f0:	b2a3      	uxth	r3, r4
  40a9f2:	fb0a b303 	mla	r3, sl, r3, fp
  40a9f6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40a9fa:	f8de 4000 	ldr.w	r4, [lr]
  40a9fe:	4463      	add	r3, ip
  40aa00:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  40aa04:	fb0a c40b 	mla	r4, sl, fp, ip
  40aa08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40aa0c:	b29b      	uxth	r3, r3
  40aa0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40aa12:	454f      	cmp	r7, r9
  40aa14:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  40aa18:	f84e 3b04 	str.w	r3, [lr], #4
  40aa1c:	d8e4      	bhi.n	40a9e8 <__multiply+0x8e>
  40aa1e:	f8ce c000 	str.w	ip, [lr]
  40aa22:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  40aa26:	f1b9 0f00 	cmp.w	r9, #0
  40aa2a:	d01f      	beq.n	40aa6c <__multiply+0x112>
  40aa2c:	682b      	ldr	r3, [r5, #0]
  40aa2e:	46ae      	mov	lr, r5
  40aa30:	468c      	mov	ip, r1
  40aa32:	f04f 0a00 	mov.w	sl, #0
  40aa36:	f8bc 4000 	ldrh.w	r4, [ip]
  40aa3a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40aa3e:	fb09 b404 	mla	r4, r9, r4, fp
  40aa42:	44a2      	add	sl, r4
  40aa44:	b29b      	uxth	r3, r3
  40aa46:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40aa4a:	f84e 3b04 	str.w	r3, [lr], #4
  40aa4e:	f85c 3b04 	ldr.w	r3, [ip], #4
  40aa52:	f8be 4000 	ldrh.w	r4, [lr]
  40aa56:	0c1b      	lsrs	r3, r3, #16
  40aa58:	fb09 4303 	mla	r3, r9, r3, r4
  40aa5c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  40aa60:	4567      	cmp	r7, ip
  40aa62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  40aa66:	d8e6      	bhi.n	40aa36 <__multiply+0xdc>
  40aa68:	f8ce 3000 	str.w	r3, [lr]
  40aa6c:	3504      	adds	r5, #4
  40aa6e:	e7a0      	b.n	40a9b2 <__multiply+0x58>
  40aa70:	3e01      	subs	r6, #1
  40aa72:	e7a2      	b.n	40a9ba <__multiply+0x60>

0040aa74 <__pow5mult>:
  40aa74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40aa78:	4615      	mov	r5, r2
  40aa7a:	f012 0203 	ands.w	r2, r2, #3
  40aa7e:	4606      	mov	r6, r0
  40aa80:	460f      	mov	r7, r1
  40aa82:	d007      	beq.n	40aa94 <__pow5mult+0x20>
  40aa84:	3a01      	subs	r2, #1
  40aa86:	4c21      	ldr	r4, [pc, #132]	; (40ab0c <__pow5mult+0x98>)
  40aa88:	2300      	movs	r3, #0
  40aa8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40aa8e:	f7ff fed2 	bl	40a836 <__multadd>
  40aa92:	4607      	mov	r7, r0
  40aa94:	10ad      	asrs	r5, r5, #2
  40aa96:	d035      	beq.n	40ab04 <__pow5mult+0x90>
  40aa98:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40aa9a:	b93c      	cbnz	r4, 40aaac <__pow5mult+0x38>
  40aa9c:	2010      	movs	r0, #16
  40aa9e:	f7ff fe23 	bl	40a6e8 <malloc>
  40aaa2:	6270      	str	r0, [r6, #36]	; 0x24
  40aaa4:	6044      	str	r4, [r0, #4]
  40aaa6:	6084      	str	r4, [r0, #8]
  40aaa8:	6004      	str	r4, [r0, #0]
  40aaaa:	60c4      	str	r4, [r0, #12]
  40aaac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  40aab0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  40aab4:	b94c      	cbnz	r4, 40aaca <__pow5mult+0x56>
  40aab6:	f240 2171 	movw	r1, #625	; 0x271
  40aaba:	4630      	mov	r0, r6
  40aabc:	f7ff ff44 	bl	40a948 <__i2b>
  40aac0:	2300      	movs	r3, #0
  40aac2:	f8c8 0008 	str.w	r0, [r8, #8]
  40aac6:	4604      	mov	r4, r0
  40aac8:	6003      	str	r3, [r0, #0]
  40aaca:	f04f 0800 	mov.w	r8, #0
  40aace:	07eb      	lsls	r3, r5, #31
  40aad0:	d50a      	bpl.n	40aae8 <__pow5mult+0x74>
  40aad2:	4639      	mov	r1, r7
  40aad4:	4622      	mov	r2, r4
  40aad6:	4630      	mov	r0, r6
  40aad8:	f7ff ff3f 	bl	40a95a <__multiply>
  40aadc:	4639      	mov	r1, r7
  40aade:	4681      	mov	r9, r0
  40aae0:	4630      	mov	r0, r6
  40aae2:	f7ff fe91 	bl	40a808 <_Bfree>
  40aae6:	464f      	mov	r7, r9
  40aae8:	106d      	asrs	r5, r5, #1
  40aaea:	d00b      	beq.n	40ab04 <__pow5mult+0x90>
  40aaec:	6820      	ldr	r0, [r4, #0]
  40aaee:	b938      	cbnz	r0, 40ab00 <__pow5mult+0x8c>
  40aaf0:	4622      	mov	r2, r4
  40aaf2:	4621      	mov	r1, r4
  40aaf4:	4630      	mov	r0, r6
  40aaf6:	f7ff ff30 	bl	40a95a <__multiply>
  40aafa:	6020      	str	r0, [r4, #0]
  40aafc:	f8c0 8000 	str.w	r8, [r0]
  40ab00:	4604      	mov	r4, r0
  40ab02:	e7e4      	b.n	40aace <__pow5mult+0x5a>
  40ab04:	4638      	mov	r0, r7
  40ab06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ab0a:	bf00      	nop
  40ab0c:	0040ced0 	.word	0x0040ced0

0040ab10 <__lshift>:
  40ab10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ab14:	460c      	mov	r4, r1
  40ab16:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40ab1a:	6923      	ldr	r3, [r4, #16]
  40ab1c:	6849      	ldr	r1, [r1, #4]
  40ab1e:	eb0a 0903 	add.w	r9, sl, r3
  40ab22:	68a3      	ldr	r3, [r4, #8]
  40ab24:	4607      	mov	r7, r0
  40ab26:	4616      	mov	r6, r2
  40ab28:	f109 0501 	add.w	r5, r9, #1
  40ab2c:	42ab      	cmp	r3, r5
  40ab2e:	db31      	blt.n	40ab94 <__lshift+0x84>
  40ab30:	4638      	mov	r0, r7
  40ab32:	f7ff fe35 	bl	40a7a0 <_Balloc>
  40ab36:	2200      	movs	r2, #0
  40ab38:	4680      	mov	r8, r0
  40ab3a:	f100 0314 	add.w	r3, r0, #20
  40ab3e:	4611      	mov	r1, r2
  40ab40:	4552      	cmp	r2, sl
  40ab42:	db2a      	blt.n	40ab9a <__lshift+0x8a>
  40ab44:	6920      	ldr	r0, [r4, #16]
  40ab46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40ab4a:	f104 0114 	add.w	r1, r4, #20
  40ab4e:	f016 021f 	ands.w	r2, r6, #31
  40ab52:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  40ab56:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40ab5a:	d022      	beq.n	40aba2 <__lshift+0x92>
  40ab5c:	f1c2 0c20 	rsb	ip, r2, #32
  40ab60:	2000      	movs	r0, #0
  40ab62:	680e      	ldr	r6, [r1, #0]
  40ab64:	4096      	lsls	r6, r2
  40ab66:	4330      	orrs	r0, r6
  40ab68:	f843 0b04 	str.w	r0, [r3], #4
  40ab6c:	f851 0b04 	ldr.w	r0, [r1], #4
  40ab70:	458e      	cmp	lr, r1
  40ab72:	fa20 f00c 	lsr.w	r0, r0, ip
  40ab76:	d8f4      	bhi.n	40ab62 <__lshift+0x52>
  40ab78:	6018      	str	r0, [r3, #0]
  40ab7a:	b108      	cbz	r0, 40ab80 <__lshift+0x70>
  40ab7c:	f109 0502 	add.w	r5, r9, #2
  40ab80:	3d01      	subs	r5, #1
  40ab82:	4638      	mov	r0, r7
  40ab84:	f8c8 5010 	str.w	r5, [r8, #16]
  40ab88:	4621      	mov	r1, r4
  40ab8a:	f7ff fe3d 	bl	40a808 <_Bfree>
  40ab8e:	4640      	mov	r0, r8
  40ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab94:	3101      	adds	r1, #1
  40ab96:	005b      	lsls	r3, r3, #1
  40ab98:	e7c8      	b.n	40ab2c <__lshift+0x1c>
  40ab9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40ab9e:	3201      	adds	r2, #1
  40aba0:	e7ce      	b.n	40ab40 <__lshift+0x30>
  40aba2:	3b04      	subs	r3, #4
  40aba4:	f851 2b04 	ldr.w	r2, [r1], #4
  40aba8:	f843 2f04 	str.w	r2, [r3, #4]!
  40abac:	458e      	cmp	lr, r1
  40abae:	d8f9      	bhi.n	40aba4 <__lshift+0x94>
  40abb0:	e7e6      	b.n	40ab80 <__lshift+0x70>

0040abb2 <__mcmp>:
  40abb2:	6903      	ldr	r3, [r0, #16]
  40abb4:	690a      	ldr	r2, [r1, #16]
  40abb6:	1a9b      	subs	r3, r3, r2
  40abb8:	b530      	push	{r4, r5, lr}
  40abba:	d10c      	bne.n	40abd6 <__mcmp+0x24>
  40abbc:	0092      	lsls	r2, r2, #2
  40abbe:	3014      	adds	r0, #20
  40abc0:	3114      	adds	r1, #20
  40abc2:	1884      	adds	r4, r0, r2
  40abc4:	4411      	add	r1, r2
  40abc6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40abca:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40abce:	4295      	cmp	r5, r2
  40abd0:	d003      	beq.n	40abda <__mcmp+0x28>
  40abd2:	d305      	bcc.n	40abe0 <__mcmp+0x2e>
  40abd4:	2301      	movs	r3, #1
  40abd6:	4618      	mov	r0, r3
  40abd8:	bd30      	pop	{r4, r5, pc}
  40abda:	42a0      	cmp	r0, r4
  40abdc:	d3f3      	bcc.n	40abc6 <__mcmp+0x14>
  40abde:	e7fa      	b.n	40abd6 <__mcmp+0x24>
  40abe0:	f04f 33ff 	mov.w	r3, #4294967295
  40abe4:	e7f7      	b.n	40abd6 <__mcmp+0x24>

0040abe6 <__mdiff>:
  40abe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40abea:	460d      	mov	r5, r1
  40abec:	4607      	mov	r7, r0
  40abee:	4611      	mov	r1, r2
  40abf0:	4628      	mov	r0, r5
  40abf2:	4614      	mov	r4, r2
  40abf4:	f7ff ffdd 	bl	40abb2 <__mcmp>
  40abf8:	1e06      	subs	r6, r0, #0
  40abfa:	d108      	bne.n	40ac0e <__mdiff+0x28>
  40abfc:	4631      	mov	r1, r6
  40abfe:	4638      	mov	r0, r7
  40ac00:	f7ff fdce 	bl	40a7a0 <_Balloc>
  40ac04:	2301      	movs	r3, #1
  40ac06:	6103      	str	r3, [r0, #16]
  40ac08:	6146      	str	r6, [r0, #20]
  40ac0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ac0e:	bfa4      	itt	ge
  40ac10:	4623      	movge	r3, r4
  40ac12:	462c      	movge	r4, r5
  40ac14:	4638      	mov	r0, r7
  40ac16:	6861      	ldr	r1, [r4, #4]
  40ac18:	bfa6      	itte	ge
  40ac1a:	461d      	movge	r5, r3
  40ac1c:	2600      	movge	r6, #0
  40ac1e:	2601      	movlt	r6, #1
  40ac20:	f7ff fdbe 	bl	40a7a0 <_Balloc>
  40ac24:	692b      	ldr	r3, [r5, #16]
  40ac26:	60c6      	str	r6, [r0, #12]
  40ac28:	6926      	ldr	r6, [r4, #16]
  40ac2a:	f105 0914 	add.w	r9, r5, #20
  40ac2e:	f104 0214 	add.w	r2, r4, #20
  40ac32:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  40ac36:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40ac3a:	f100 0514 	add.w	r5, r0, #20
  40ac3e:	f04f 0c00 	mov.w	ip, #0
  40ac42:	f852 ab04 	ldr.w	sl, [r2], #4
  40ac46:	f859 4b04 	ldr.w	r4, [r9], #4
  40ac4a:	fa1c f18a 	uxtah	r1, ip, sl
  40ac4e:	b2a3      	uxth	r3, r4
  40ac50:	1ac9      	subs	r1, r1, r3
  40ac52:	0c23      	lsrs	r3, r4, #16
  40ac54:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  40ac58:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40ac5c:	b289      	uxth	r1, r1
  40ac5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  40ac62:	45c8      	cmp	r8, r9
  40ac64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40ac68:	4696      	mov	lr, r2
  40ac6a:	f845 3b04 	str.w	r3, [r5], #4
  40ac6e:	d8e8      	bhi.n	40ac42 <__mdiff+0x5c>
  40ac70:	45be      	cmp	lr, r7
  40ac72:	d305      	bcc.n	40ac80 <__mdiff+0x9a>
  40ac74:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40ac78:	b18b      	cbz	r3, 40ac9e <__mdiff+0xb8>
  40ac7a:	6106      	str	r6, [r0, #16]
  40ac7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ac80:	f85e 1b04 	ldr.w	r1, [lr], #4
  40ac84:	fa1c f381 	uxtah	r3, ip, r1
  40ac88:	141a      	asrs	r2, r3, #16
  40ac8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40ac8e:	b29b      	uxth	r3, r3
  40ac90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40ac94:	ea4f 4c22 	mov.w	ip, r2, asr #16
  40ac98:	f845 3b04 	str.w	r3, [r5], #4
  40ac9c:	e7e8      	b.n	40ac70 <__mdiff+0x8a>
  40ac9e:	3e01      	subs	r6, #1
  40aca0:	e7e8      	b.n	40ac74 <__mdiff+0x8e>

0040aca2 <__d2b>:
  40aca2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  40aca6:	2101      	movs	r1, #1
  40aca8:	461c      	mov	r4, r3
  40acaa:	4690      	mov	r8, r2
  40acac:	9e08      	ldr	r6, [sp, #32]
  40acae:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40acb0:	f7ff fd76 	bl	40a7a0 <_Balloc>
  40acb4:	f3c4 0213 	ubfx	r2, r4, #0, #20
  40acb8:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40acbc:	4607      	mov	r7, r0
  40acbe:	bb34      	cbnz	r4, 40ad0e <__d2b+0x6c>
  40acc0:	9201      	str	r2, [sp, #4]
  40acc2:	f1b8 0f00 	cmp.w	r8, #0
  40acc6:	d027      	beq.n	40ad18 <__d2b+0x76>
  40acc8:	a802      	add	r0, sp, #8
  40acca:	f840 8d08 	str.w	r8, [r0, #-8]!
  40acce:	f7ff fe0c 	bl	40a8ea <__lo0bits>
  40acd2:	9900      	ldr	r1, [sp, #0]
  40acd4:	b1f0      	cbz	r0, 40ad14 <__d2b+0x72>
  40acd6:	9a01      	ldr	r2, [sp, #4]
  40acd8:	f1c0 0320 	rsb	r3, r0, #32
  40acdc:	fa02 f303 	lsl.w	r3, r2, r3
  40ace0:	430b      	orrs	r3, r1
  40ace2:	40c2      	lsrs	r2, r0
  40ace4:	617b      	str	r3, [r7, #20]
  40ace6:	9201      	str	r2, [sp, #4]
  40ace8:	9b01      	ldr	r3, [sp, #4]
  40acea:	61bb      	str	r3, [r7, #24]
  40acec:	2b00      	cmp	r3, #0
  40acee:	bf14      	ite	ne
  40acf0:	2102      	movne	r1, #2
  40acf2:	2101      	moveq	r1, #1
  40acf4:	6139      	str	r1, [r7, #16]
  40acf6:	b1c4      	cbz	r4, 40ad2a <__d2b+0x88>
  40acf8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40acfc:	4404      	add	r4, r0
  40acfe:	6034      	str	r4, [r6, #0]
  40ad00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40ad04:	6028      	str	r0, [r5, #0]
  40ad06:	4638      	mov	r0, r7
  40ad08:	b002      	add	sp, #8
  40ad0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ad0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40ad12:	e7d5      	b.n	40acc0 <__d2b+0x1e>
  40ad14:	6179      	str	r1, [r7, #20]
  40ad16:	e7e7      	b.n	40ace8 <__d2b+0x46>
  40ad18:	a801      	add	r0, sp, #4
  40ad1a:	f7ff fde6 	bl	40a8ea <__lo0bits>
  40ad1e:	9b01      	ldr	r3, [sp, #4]
  40ad20:	617b      	str	r3, [r7, #20]
  40ad22:	2101      	movs	r1, #1
  40ad24:	6139      	str	r1, [r7, #16]
  40ad26:	3020      	adds	r0, #32
  40ad28:	e7e5      	b.n	40acf6 <__d2b+0x54>
  40ad2a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40ad2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40ad32:	6030      	str	r0, [r6, #0]
  40ad34:	6918      	ldr	r0, [r3, #16]
  40ad36:	f7ff fdb9 	bl	40a8ac <__hi0bits>
  40ad3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40ad3e:	e7e1      	b.n	40ad04 <__d2b+0x62>

0040ad40 <_calloc_r>:
  40ad40:	b538      	push	{r3, r4, r5, lr}
  40ad42:	fb02 f401 	mul.w	r4, r2, r1
  40ad46:	4621      	mov	r1, r4
  40ad48:	f000 f856 	bl	40adf8 <_malloc_r>
  40ad4c:	4605      	mov	r5, r0
  40ad4e:	b118      	cbz	r0, 40ad58 <_calloc_r+0x18>
  40ad50:	4622      	mov	r2, r4
  40ad52:	2100      	movs	r1, #0
  40ad54:	f7fd ff3d 	bl	408bd2 <memset>
  40ad58:	4628      	mov	r0, r5
  40ad5a:	bd38      	pop	{r3, r4, r5, pc}

0040ad5c <_free_r>:
  40ad5c:	b538      	push	{r3, r4, r5, lr}
  40ad5e:	4605      	mov	r5, r0
  40ad60:	2900      	cmp	r1, #0
  40ad62:	d045      	beq.n	40adf0 <_free_r+0x94>
  40ad64:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40ad68:	1f0c      	subs	r4, r1, #4
  40ad6a:	2b00      	cmp	r3, #0
  40ad6c:	bfb8      	it	lt
  40ad6e:	18e4      	addlt	r4, r4, r3
  40ad70:	f000 fb5a 	bl	40b428 <__malloc_lock>
  40ad74:	4a1f      	ldr	r2, [pc, #124]	; (40adf4 <_free_r+0x98>)
  40ad76:	6813      	ldr	r3, [r2, #0]
  40ad78:	4610      	mov	r0, r2
  40ad7a:	b933      	cbnz	r3, 40ad8a <_free_r+0x2e>
  40ad7c:	6063      	str	r3, [r4, #4]
  40ad7e:	6014      	str	r4, [r2, #0]
  40ad80:	4628      	mov	r0, r5
  40ad82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40ad86:	f000 bb50 	b.w	40b42a <__malloc_unlock>
  40ad8a:	42a3      	cmp	r3, r4
  40ad8c:	d90c      	bls.n	40ada8 <_free_r+0x4c>
  40ad8e:	6821      	ldr	r1, [r4, #0]
  40ad90:	1862      	adds	r2, r4, r1
  40ad92:	4293      	cmp	r3, r2
  40ad94:	bf04      	itt	eq
  40ad96:	681a      	ldreq	r2, [r3, #0]
  40ad98:	685b      	ldreq	r3, [r3, #4]
  40ad9a:	6063      	str	r3, [r4, #4]
  40ad9c:	bf04      	itt	eq
  40ad9e:	1852      	addeq	r2, r2, r1
  40ada0:	6022      	streq	r2, [r4, #0]
  40ada2:	6004      	str	r4, [r0, #0]
  40ada4:	e7ec      	b.n	40ad80 <_free_r+0x24>
  40ada6:	4613      	mov	r3, r2
  40ada8:	685a      	ldr	r2, [r3, #4]
  40adaa:	b10a      	cbz	r2, 40adb0 <_free_r+0x54>
  40adac:	42a2      	cmp	r2, r4
  40adae:	d9fa      	bls.n	40ada6 <_free_r+0x4a>
  40adb0:	6819      	ldr	r1, [r3, #0]
  40adb2:	1858      	adds	r0, r3, r1
  40adb4:	42a0      	cmp	r0, r4
  40adb6:	d10b      	bne.n	40add0 <_free_r+0x74>
  40adb8:	6820      	ldr	r0, [r4, #0]
  40adba:	4401      	add	r1, r0
  40adbc:	1858      	adds	r0, r3, r1
  40adbe:	4282      	cmp	r2, r0
  40adc0:	6019      	str	r1, [r3, #0]
  40adc2:	d1dd      	bne.n	40ad80 <_free_r+0x24>
  40adc4:	6810      	ldr	r0, [r2, #0]
  40adc6:	6852      	ldr	r2, [r2, #4]
  40adc8:	605a      	str	r2, [r3, #4]
  40adca:	4401      	add	r1, r0
  40adcc:	6019      	str	r1, [r3, #0]
  40adce:	e7d7      	b.n	40ad80 <_free_r+0x24>
  40add0:	d902      	bls.n	40add8 <_free_r+0x7c>
  40add2:	230c      	movs	r3, #12
  40add4:	602b      	str	r3, [r5, #0]
  40add6:	e7d3      	b.n	40ad80 <_free_r+0x24>
  40add8:	6820      	ldr	r0, [r4, #0]
  40adda:	1821      	adds	r1, r4, r0
  40addc:	428a      	cmp	r2, r1
  40adde:	bf04      	itt	eq
  40ade0:	6811      	ldreq	r1, [r2, #0]
  40ade2:	6852      	ldreq	r2, [r2, #4]
  40ade4:	6062      	str	r2, [r4, #4]
  40ade6:	bf04      	itt	eq
  40ade8:	1809      	addeq	r1, r1, r0
  40adea:	6021      	streq	r1, [r4, #0]
  40adec:	605c      	str	r4, [r3, #4]
  40adee:	e7c7      	b.n	40ad80 <_free_r+0x24>
  40adf0:	bd38      	pop	{r3, r4, r5, pc}
  40adf2:	bf00      	nop
  40adf4:	20000434 	.word	0x20000434

0040adf8 <_malloc_r>:
  40adf8:	b570      	push	{r4, r5, r6, lr}
  40adfa:	1ccd      	adds	r5, r1, #3
  40adfc:	f025 0503 	bic.w	r5, r5, #3
  40ae00:	3508      	adds	r5, #8
  40ae02:	2d0c      	cmp	r5, #12
  40ae04:	bf38      	it	cc
  40ae06:	250c      	movcc	r5, #12
  40ae08:	2d00      	cmp	r5, #0
  40ae0a:	4606      	mov	r6, r0
  40ae0c:	db01      	blt.n	40ae12 <_malloc_r+0x1a>
  40ae0e:	42a9      	cmp	r1, r5
  40ae10:	d903      	bls.n	40ae1a <_malloc_r+0x22>
  40ae12:	230c      	movs	r3, #12
  40ae14:	6033      	str	r3, [r6, #0]
  40ae16:	2000      	movs	r0, #0
  40ae18:	bd70      	pop	{r4, r5, r6, pc}
  40ae1a:	f000 fb05 	bl	40b428 <__malloc_lock>
  40ae1e:	4a23      	ldr	r2, [pc, #140]	; (40aeac <_malloc_r+0xb4>)
  40ae20:	6814      	ldr	r4, [r2, #0]
  40ae22:	4621      	mov	r1, r4
  40ae24:	b991      	cbnz	r1, 40ae4c <_malloc_r+0x54>
  40ae26:	4c22      	ldr	r4, [pc, #136]	; (40aeb0 <_malloc_r+0xb8>)
  40ae28:	6823      	ldr	r3, [r4, #0]
  40ae2a:	b91b      	cbnz	r3, 40ae34 <_malloc_r+0x3c>
  40ae2c:	4630      	mov	r0, r6
  40ae2e:	f000 f97f 	bl	40b130 <_sbrk_r>
  40ae32:	6020      	str	r0, [r4, #0]
  40ae34:	4629      	mov	r1, r5
  40ae36:	4630      	mov	r0, r6
  40ae38:	f000 f97a 	bl	40b130 <_sbrk_r>
  40ae3c:	1c43      	adds	r3, r0, #1
  40ae3e:	d126      	bne.n	40ae8e <_malloc_r+0x96>
  40ae40:	230c      	movs	r3, #12
  40ae42:	6033      	str	r3, [r6, #0]
  40ae44:	4630      	mov	r0, r6
  40ae46:	f000 faf0 	bl	40b42a <__malloc_unlock>
  40ae4a:	e7e4      	b.n	40ae16 <_malloc_r+0x1e>
  40ae4c:	680b      	ldr	r3, [r1, #0]
  40ae4e:	1b5b      	subs	r3, r3, r5
  40ae50:	d41a      	bmi.n	40ae88 <_malloc_r+0x90>
  40ae52:	2b0b      	cmp	r3, #11
  40ae54:	d90f      	bls.n	40ae76 <_malloc_r+0x7e>
  40ae56:	600b      	str	r3, [r1, #0]
  40ae58:	50cd      	str	r5, [r1, r3]
  40ae5a:	18cc      	adds	r4, r1, r3
  40ae5c:	4630      	mov	r0, r6
  40ae5e:	f000 fae4 	bl	40b42a <__malloc_unlock>
  40ae62:	f104 000b 	add.w	r0, r4, #11
  40ae66:	1d23      	adds	r3, r4, #4
  40ae68:	f020 0007 	bic.w	r0, r0, #7
  40ae6c:	1ac3      	subs	r3, r0, r3
  40ae6e:	d01b      	beq.n	40aea8 <_malloc_r+0xb0>
  40ae70:	425a      	negs	r2, r3
  40ae72:	50e2      	str	r2, [r4, r3]
  40ae74:	bd70      	pop	{r4, r5, r6, pc}
  40ae76:	428c      	cmp	r4, r1
  40ae78:	bf0d      	iteet	eq
  40ae7a:	6863      	ldreq	r3, [r4, #4]
  40ae7c:	684b      	ldrne	r3, [r1, #4]
  40ae7e:	6063      	strne	r3, [r4, #4]
  40ae80:	6013      	streq	r3, [r2, #0]
  40ae82:	bf18      	it	ne
  40ae84:	460c      	movne	r4, r1
  40ae86:	e7e9      	b.n	40ae5c <_malloc_r+0x64>
  40ae88:	460c      	mov	r4, r1
  40ae8a:	6849      	ldr	r1, [r1, #4]
  40ae8c:	e7ca      	b.n	40ae24 <_malloc_r+0x2c>
  40ae8e:	1cc4      	adds	r4, r0, #3
  40ae90:	f024 0403 	bic.w	r4, r4, #3
  40ae94:	42a0      	cmp	r0, r4
  40ae96:	d005      	beq.n	40aea4 <_malloc_r+0xac>
  40ae98:	1a21      	subs	r1, r4, r0
  40ae9a:	4630      	mov	r0, r6
  40ae9c:	f000 f948 	bl	40b130 <_sbrk_r>
  40aea0:	3001      	adds	r0, #1
  40aea2:	d0cd      	beq.n	40ae40 <_malloc_r+0x48>
  40aea4:	6025      	str	r5, [r4, #0]
  40aea6:	e7d9      	b.n	40ae5c <_malloc_r+0x64>
  40aea8:	bd70      	pop	{r4, r5, r6, pc}
  40aeaa:	bf00      	nop
  40aeac:	20000434 	.word	0x20000434
  40aeb0:	20000438 	.word	0x20000438

0040aeb4 <__sfputc_r>:
  40aeb4:	6893      	ldr	r3, [r2, #8]
  40aeb6:	3b01      	subs	r3, #1
  40aeb8:	2b00      	cmp	r3, #0
  40aeba:	b410      	push	{r4}
  40aebc:	6093      	str	r3, [r2, #8]
  40aebe:	da08      	bge.n	40aed2 <__sfputc_r+0x1e>
  40aec0:	6994      	ldr	r4, [r2, #24]
  40aec2:	42a3      	cmp	r3, r4
  40aec4:	db02      	blt.n	40aecc <__sfputc_r+0x18>
  40aec6:	b2cb      	uxtb	r3, r1
  40aec8:	2b0a      	cmp	r3, #10
  40aeca:	d102      	bne.n	40aed2 <__sfputc_r+0x1e>
  40aecc:	bc10      	pop	{r4}
  40aece:	f000 b983 	b.w	40b1d8 <__swbuf_r>
  40aed2:	6813      	ldr	r3, [r2, #0]
  40aed4:	1c58      	adds	r0, r3, #1
  40aed6:	6010      	str	r0, [r2, #0]
  40aed8:	7019      	strb	r1, [r3, #0]
  40aeda:	b2c8      	uxtb	r0, r1
  40aedc:	bc10      	pop	{r4}
  40aede:	4770      	bx	lr

0040aee0 <__sfputs_r>:
  40aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40aee2:	4606      	mov	r6, r0
  40aee4:	460f      	mov	r7, r1
  40aee6:	4614      	mov	r4, r2
  40aee8:	18d5      	adds	r5, r2, r3
  40aeea:	42ac      	cmp	r4, r5
  40aeec:	d101      	bne.n	40aef2 <__sfputs_r+0x12>
  40aeee:	2000      	movs	r0, #0
  40aef0:	e007      	b.n	40af02 <__sfputs_r+0x22>
  40aef2:	463a      	mov	r2, r7
  40aef4:	f814 1b01 	ldrb.w	r1, [r4], #1
  40aef8:	4630      	mov	r0, r6
  40aefa:	f7ff ffdb 	bl	40aeb4 <__sfputc_r>
  40aefe:	1c43      	adds	r3, r0, #1
  40af00:	d1f3      	bne.n	40aeea <__sfputs_r+0xa>
  40af02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040af04 <_vfiprintf_r>:
  40af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40af08:	b09d      	sub	sp, #116	; 0x74
  40af0a:	460c      	mov	r4, r1
  40af0c:	4617      	mov	r7, r2
  40af0e:	9303      	str	r3, [sp, #12]
  40af10:	4606      	mov	r6, r0
  40af12:	b118      	cbz	r0, 40af1c <_vfiprintf_r+0x18>
  40af14:	6983      	ldr	r3, [r0, #24]
  40af16:	b90b      	cbnz	r3, 40af1c <_vfiprintf_r+0x18>
  40af18:	f7ff faea 	bl	40a4f0 <__sinit>
  40af1c:	4b7c      	ldr	r3, [pc, #496]	; (40b110 <_vfiprintf_r+0x20c>)
  40af1e:	429c      	cmp	r4, r3
  40af20:	d157      	bne.n	40afd2 <_vfiprintf_r+0xce>
  40af22:	6874      	ldr	r4, [r6, #4]
  40af24:	89a3      	ldrh	r3, [r4, #12]
  40af26:	0718      	lsls	r0, r3, #28
  40af28:	d55d      	bpl.n	40afe6 <_vfiprintf_r+0xe2>
  40af2a:	6923      	ldr	r3, [r4, #16]
  40af2c:	2b00      	cmp	r3, #0
  40af2e:	d05a      	beq.n	40afe6 <_vfiprintf_r+0xe2>
  40af30:	2300      	movs	r3, #0
  40af32:	9309      	str	r3, [sp, #36]	; 0x24
  40af34:	2320      	movs	r3, #32
  40af36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40af3a:	2330      	movs	r3, #48	; 0x30
  40af3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  40af40:	f04f 0b01 	mov.w	fp, #1
  40af44:	46b8      	mov	r8, r7
  40af46:	4645      	mov	r5, r8
  40af48:	f815 3b01 	ldrb.w	r3, [r5], #1
  40af4c:	2b00      	cmp	r3, #0
  40af4e:	d155      	bne.n	40affc <_vfiprintf_r+0xf8>
  40af50:	ebb8 0a07 	subs.w	sl, r8, r7
  40af54:	d00b      	beq.n	40af6e <_vfiprintf_r+0x6a>
  40af56:	4653      	mov	r3, sl
  40af58:	463a      	mov	r2, r7
  40af5a:	4621      	mov	r1, r4
  40af5c:	4630      	mov	r0, r6
  40af5e:	f7ff ffbf 	bl	40aee0 <__sfputs_r>
  40af62:	3001      	adds	r0, #1
  40af64:	f000 80c4 	beq.w	40b0f0 <_vfiprintf_r+0x1ec>
  40af68:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40af6a:	4453      	add	r3, sl
  40af6c:	9309      	str	r3, [sp, #36]	; 0x24
  40af6e:	f898 3000 	ldrb.w	r3, [r8]
  40af72:	2b00      	cmp	r3, #0
  40af74:	f000 80bc 	beq.w	40b0f0 <_vfiprintf_r+0x1ec>
  40af78:	2300      	movs	r3, #0
  40af7a:	f04f 32ff 	mov.w	r2, #4294967295
  40af7e:	9304      	str	r3, [sp, #16]
  40af80:	9307      	str	r3, [sp, #28]
  40af82:	9205      	str	r2, [sp, #20]
  40af84:	9306      	str	r3, [sp, #24]
  40af86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40af8a:	931a      	str	r3, [sp, #104]	; 0x68
  40af8c:	2205      	movs	r2, #5
  40af8e:	7829      	ldrb	r1, [r5, #0]
  40af90:	4860      	ldr	r0, [pc, #384]	; (40b114 <_vfiprintf_r+0x210>)
  40af92:	f7ff fbb5 	bl	40a700 <memchr>
  40af96:	f105 0801 	add.w	r8, r5, #1
  40af9a:	9b04      	ldr	r3, [sp, #16]
  40af9c:	2800      	cmp	r0, #0
  40af9e:	d131      	bne.n	40b004 <_vfiprintf_r+0x100>
  40afa0:	06d9      	lsls	r1, r3, #27
  40afa2:	bf44      	itt	mi
  40afa4:	2220      	movmi	r2, #32
  40afa6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40afaa:	071a      	lsls	r2, r3, #28
  40afac:	bf44      	itt	mi
  40afae:	222b      	movmi	r2, #43	; 0x2b
  40afb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40afb4:	782a      	ldrb	r2, [r5, #0]
  40afb6:	2a2a      	cmp	r2, #42	; 0x2a
  40afb8:	d02c      	beq.n	40b014 <_vfiprintf_r+0x110>
  40afba:	9a07      	ldr	r2, [sp, #28]
  40afbc:	2100      	movs	r1, #0
  40afbe:	200a      	movs	r0, #10
  40afc0:	46a8      	mov	r8, r5
  40afc2:	3501      	adds	r5, #1
  40afc4:	f898 3000 	ldrb.w	r3, [r8]
  40afc8:	3b30      	subs	r3, #48	; 0x30
  40afca:	2b09      	cmp	r3, #9
  40afcc:	d96d      	bls.n	40b0aa <_vfiprintf_r+0x1a6>
  40afce:	b371      	cbz	r1, 40b02e <_vfiprintf_r+0x12a>
  40afd0:	e026      	b.n	40b020 <_vfiprintf_r+0x11c>
  40afd2:	4b51      	ldr	r3, [pc, #324]	; (40b118 <_vfiprintf_r+0x214>)
  40afd4:	429c      	cmp	r4, r3
  40afd6:	d101      	bne.n	40afdc <_vfiprintf_r+0xd8>
  40afd8:	68b4      	ldr	r4, [r6, #8]
  40afda:	e7a3      	b.n	40af24 <_vfiprintf_r+0x20>
  40afdc:	4b4f      	ldr	r3, [pc, #316]	; (40b11c <_vfiprintf_r+0x218>)
  40afde:	429c      	cmp	r4, r3
  40afe0:	bf08      	it	eq
  40afe2:	68f4      	ldreq	r4, [r6, #12]
  40afe4:	e79e      	b.n	40af24 <_vfiprintf_r+0x20>
  40afe6:	4621      	mov	r1, r4
  40afe8:	4630      	mov	r0, r6
  40afea:	f000 f959 	bl	40b2a0 <__swsetup_r>
  40afee:	2800      	cmp	r0, #0
  40aff0:	d09e      	beq.n	40af30 <_vfiprintf_r+0x2c>
  40aff2:	f04f 30ff 	mov.w	r0, #4294967295
  40aff6:	b01d      	add	sp, #116	; 0x74
  40aff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40affc:	2b25      	cmp	r3, #37	; 0x25
  40affe:	d0a7      	beq.n	40af50 <_vfiprintf_r+0x4c>
  40b000:	46a8      	mov	r8, r5
  40b002:	e7a0      	b.n	40af46 <_vfiprintf_r+0x42>
  40b004:	4a43      	ldr	r2, [pc, #268]	; (40b114 <_vfiprintf_r+0x210>)
  40b006:	1a80      	subs	r0, r0, r2
  40b008:	fa0b f000 	lsl.w	r0, fp, r0
  40b00c:	4318      	orrs	r0, r3
  40b00e:	9004      	str	r0, [sp, #16]
  40b010:	4645      	mov	r5, r8
  40b012:	e7bb      	b.n	40af8c <_vfiprintf_r+0x88>
  40b014:	9a03      	ldr	r2, [sp, #12]
  40b016:	1d11      	adds	r1, r2, #4
  40b018:	6812      	ldr	r2, [r2, #0]
  40b01a:	9103      	str	r1, [sp, #12]
  40b01c:	2a00      	cmp	r2, #0
  40b01e:	db01      	blt.n	40b024 <_vfiprintf_r+0x120>
  40b020:	9207      	str	r2, [sp, #28]
  40b022:	e004      	b.n	40b02e <_vfiprintf_r+0x12a>
  40b024:	4252      	negs	r2, r2
  40b026:	f043 0302 	orr.w	r3, r3, #2
  40b02a:	9207      	str	r2, [sp, #28]
  40b02c:	9304      	str	r3, [sp, #16]
  40b02e:	f898 3000 	ldrb.w	r3, [r8]
  40b032:	2b2e      	cmp	r3, #46	; 0x2e
  40b034:	d110      	bne.n	40b058 <_vfiprintf_r+0x154>
  40b036:	f898 3001 	ldrb.w	r3, [r8, #1]
  40b03a:	2b2a      	cmp	r3, #42	; 0x2a
  40b03c:	f108 0101 	add.w	r1, r8, #1
  40b040:	d137      	bne.n	40b0b2 <_vfiprintf_r+0x1ae>
  40b042:	9b03      	ldr	r3, [sp, #12]
  40b044:	1d1a      	adds	r2, r3, #4
  40b046:	681b      	ldr	r3, [r3, #0]
  40b048:	9203      	str	r2, [sp, #12]
  40b04a:	2b00      	cmp	r3, #0
  40b04c:	bfb8      	it	lt
  40b04e:	f04f 33ff 	movlt.w	r3, #4294967295
  40b052:	f108 0802 	add.w	r8, r8, #2
  40b056:	9305      	str	r3, [sp, #20]
  40b058:	4d31      	ldr	r5, [pc, #196]	; (40b120 <_vfiprintf_r+0x21c>)
  40b05a:	f898 1000 	ldrb.w	r1, [r8]
  40b05e:	2203      	movs	r2, #3
  40b060:	4628      	mov	r0, r5
  40b062:	f7ff fb4d 	bl	40a700 <memchr>
  40b066:	b140      	cbz	r0, 40b07a <_vfiprintf_r+0x176>
  40b068:	2340      	movs	r3, #64	; 0x40
  40b06a:	1b40      	subs	r0, r0, r5
  40b06c:	fa03 f000 	lsl.w	r0, r3, r0
  40b070:	9b04      	ldr	r3, [sp, #16]
  40b072:	4303      	orrs	r3, r0
  40b074:	9304      	str	r3, [sp, #16]
  40b076:	f108 0801 	add.w	r8, r8, #1
  40b07a:	f898 1000 	ldrb.w	r1, [r8]
  40b07e:	4829      	ldr	r0, [pc, #164]	; (40b124 <_vfiprintf_r+0x220>)
  40b080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  40b084:	2206      	movs	r2, #6
  40b086:	f108 0701 	add.w	r7, r8, #1
  40b08a:	f7ff fb39 	bl	40a700 <memchr>
  40b08e:	2800      	cmp	r0, #0
  40b090:	d034      	beq.n	40b0fc <_vfiprintf_r+0x1f8>
  40b092:	4b25      	ldr	r3, [pc, #148]	; (40b128 <_vfiprintf_r+0x224>)
  40b094:	bb03      	cbnz	r3, 40b0d8 <_vfiprintf_r+0x1d4>
  40b096:	9b03      	ldr	r3, [sp, #12]
  40b098:	3307      	adds	r3, #7
  40b09a:	f023 0307 	bic.w	r3, r3, #7
  40b09e:	3308      	adds	r3, #8
  40b0a0:	9303      	str	r3, [sp, #12]
  40b0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b0a4:	444b      	add	r3, r9
  40b0a6:	9309      	str	r3, [sp, #36]	; 0x24
  40b0a8:	e74c      	b.n	40af44 <_vfiprintf_r+0x40>
  40b0aa:	fb00 3202 	mla	r2, r0, r2, r3
  40b0ae:	2101      	movs	r1, #1
  40b0b0:	e786      	b.n	40afc0 <_vfiprintf_r+0xbc>
  40b0b2:	2300      	movs	r3, #0
  40b0b4:	9305      	str	r3, [sp, #20]
  40b0b6:	4618      	mov	r0, r3
  40b0b8:	250a      	movs	r5, #10
  40b0ba:	4688      	mov	r8, r1
  40b0bc:	3101      	adds	r1, #1
  40b0be:	f898 2000 	ldrb.w	r2, [r8]
  40b0c2:	3a30      	subs	r2, #48	; 0x30
  40b0c4:	2a09      	cmp	r2, #9
  40b0c6:	d903      	bls.n	40b0d0 <_vfiprintf_r+0x1cc>
  40b0c8:	2b00      	cmp	r3, #0
  40b0ca:	d0c5      	beq.n	40b058 <_vfiprintf_r+0x154>
  40b0cc:	9005      	str	r0, [sp, #20]
  40b0ce:	e7c3      	b.n	40b058 <_vfiprintf_r+0x154>
  40b0d0:	fb05 2000 	mla	r0, r5, r0, r2
  40b0d4:	2301      	movs	r3, #1
  40b0d6:	e7f0      	b.n	40b0ba <_vfiprintf_r+0x1b6>
  40b0d8:	ab03      	add	r3, sp, #12
  40b0da:	9300      	str	r3, [sp, #0]
  40b0dc:	4622      	mov	r2, r4
  40b0de:	4b13      	ldr	r3, [pc, #76]	; (40b12c <_vfiprintf_r+0x228>)
  40b0e0:	a904      	add	r1, sp, #16
  40b0e2:	4630      	mov	r0, r6
  40b0e4:	f7fd fe0e 	bl	408d04 <_printf_float>
  40b0e8:	f1b0 3fff 	cmp.w	r0, #4294967295
  40b0ec:	4681      	mov	r9, r0
  40b0ee:	d1d8      	bne.n	40b0a2 <_vfiprintf_r+0x19e>
  40b0f0:	89a3      	ldrh	r3, [r4, #12]
  40b0f2:	065b      	lsls	r3, r3, #25
  40b0f4:	f53f af7d 	bmi.w	40aff2 <_vfiprintf_r+0xee>
  40b0f8:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b0fa:	e77c      	b.n	40aff6 <_vfiprintf_r+0xf2>
  40b0fc:	ab03      	add	r3, sp, #12
  40b0fe:	9300      	str	r3, [sp, #0]
  40b100:	4622      	mov	r2, r4
  40b102:	4b0a      	ldr	r3, [pc, #40]	; (40b12c <_vfiprintf_r+0x228>)
  40b104:	a904      	add	r1, sp, #16
  40b106:	4630      	mov	r0, r6
  40b108:	f7fe f8aa 	bl	409260 <_printf_i>
  40b10c:	e7ec      	b.n	40b0e8 <_vfiprintf_r+0x1e4>
  40b10e:	bf00      	nop
  40b110:	0040cd9c 	.word	0x0040cd9c
  40b114:	0040cedc 	.word	0x0040cedc
  40b118:	0040cdbc 	.word	0x0040cdbc
  40b11c:	0040cd7c 	.word	0x0040cd7c
  40b120:	0040cee2 	.word	0x0040cee2
  40b124:	0040cee6 	.word	0x0040cee6
  40b128:	00408d05 	.word	0x00408d05
  40b12c:	0040aee1 	.word	0x0040aee1

0040b130 <_sbrk_r>:
  40b130:	b538      	push	{r3, r4, r5, lr}
  40b132:	4c06      	ldr	r4, [pc, #24]	; (40b14c <_sbrk_r+0x1c>)
  40b134:	2300      	movs	r3, #0
  40b136:	4605      	mov	r5, r0
  40b138:	4608      	mov	r0, r1
  40b13a:	6023      	str	r3, [r4, #0]
  40b13c:	f7fa f9c2 	bl	4054c4 <_sbrk>
  40b140:	1c43      	adds	r3, r0, #1
  40b142:	d102      	bne.n	40b14a <_sbrk_r+0x1a>
  40b144:	6823      	ldr	r3, [r4, #0]
  40b146:	b103      	cbz	r3, 40b14a <_sbrk_r+0x1a>
  40b148:	602b      	str	r3, [r5, #0]
  40b14a:	bd38      	pop	{r3, r4, r5, pc}
  40b14c:	2000092c 	.word	0x2000092c

0040b150 <__sread>:
  40b150:	b510      	push	{r4, lr}
  40b152:	460c      	mov	r4, r1
  40b154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b158:	f000 f968 	bl	40b42c <_read_r>
  40b15c:	2800      	cmp	r0, #0
  40b15e:	bfab      	itete	ge
  40b160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  40b162:	89a3      	ldrhlt	r3, [r4, #12]
  40b164:	181b      	addge	r3, r3, r0
  40b166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40b16a:	bfac      	ite	ge
  40b16c:	6563      	strge	r3, [r4, #84]	; 0x54
  40b16e:	81a3      	strhlt	r3, [r4, #12]
  40b170:	bd10      	pop	{r4, pc}

0040b172 <__swrite>:
  40b172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b176:	461f      	mov	r7, r3
  40b178:	898b      	ldrh	r3, [r1, #12]
  40b17a:	05db      	lsls	r3, r3, #23
  40b17c:	4605      	mov	r5, r0
  40b17e:	460c      	mov	r4, r1
  40b180:	4616      	mov	r6, r2
  40b182:	d505      	bpl.n	40b190 <__swrite+0x1e>
  40b184:	2302      	movs	r3, #2
  40b186:	2200      	movs	r2, #0
  40b188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b18c:	f000 f928 	bl	40b3e0 <_lseek_r>
  40b190:	89a3      	ldrh	r3, [r4, #12]
  40b192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b19a:	81a3      	strh	r3, [r4, #12]
  40b19c:	4632      	mov	r2, r6
  40b19e:	463b      	mov	r3, r7
  40b1a0:	4628      	mov	r0, r5
  40b1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b1a6:	f000 b869 	b.w	40b27c <_write_r>

0040b1aa <__sseek>:
  40b1aa:	b510      	push	{r4, lr}
  40b1ac:	460c      	mov	r4, r1
  40b1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b1b2:	f000 f915 	bl	40b3e0 <_lseek_r>
  40b1b6:	1c43      	adds	r3, r0, #1
  40b1b8:	89a3      	ldrh	r3, [r4, #12]
  40b1ba:	bf15      	itete	ne
  40b1bc:	6560      	strne	r0, [r4, #84]	; 0x54
  40b1be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40b1c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40b1c6:	81a3      	strheq	r3, [r4, #12]
  40b1c8:	bf18      	it	ne
  40b1ca:	81a3      	strhne	r3, [r4, #12]
  40b1cc:	bd10      	pop	{r4, pc}

0040b1ce <__sclose>:
  40b1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b1d2:	f000 b8d3 	b.w	40b37c <_close_r>
	...

0040b1d8 <__swbuf_r>:
  40b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b1da:	460e      	mov	r6, r1
  40b1dc:	4614      	mov	r4, r2
  40b1de:	4605      	mov	r5, r0
  40b1e0:	b118      	cbz	r0, 40b1ea <__swbuf_r+0x12>
  40b1e2:	6983      	ldr	r3, [r0, #24]
  40b1e4:	b90b      	cbnz	r3, 40b1ea <__swbuf_r+0x12>
  40b1e6:	f7ff f983 	bl	40a4f0 <__sinit>
  40b1ea:	4b21      	ldr	r3, [pc, #132]	; (40b270 <__swbuf_r+0x98>)
  40b1ec:	429c      	cmp	r4, r3
  40b1ee:	d12a      	bne.n	40b246 <__swbuf_r+0x6e>
  40b1f0:	686c      	ldr	r4, [r5, #4]
  40b1f2:	69a3      	ldr	r3, [r4, #24]
  40b1f4:	60a3      	str	r3, [r4, #8]
  40b1f6:	89a3      	ldrh	r3, [r4, #12]
  40b1f8:	071a      	lsls	r2, r3, #28
  40b1fa:	d52e      	bpl.n	40b25a <__swbuf_r+0x82>
  40b1fc:	6923      	ldr	r3, [r4, #16]
  40b1fe:	b363      	cbz	r3, 40b25a <__swbuf_r+0x82>
  40b200:	6923      	ldr	r3, [r4, #16]
  40b202:	6820      	ldr	r0, [r4, #0]
  40b204:	1ac0      	subs	r0, r0, r3
  40b206:	6963      	ldr	r3, [r4, #20]
  40b208:	b2f6      	uxtb	r6, r6
  40b20a:	4298      	cmp	r0, r3
  40b20c:	4637      	mov	r7, r6
  40b20e:	db04      	blt.n	40b21a <__swbuf_r+0x42>
  40b210:	4621      	mov	r1, r4
  40b212:	4628      	mov	r0, r5
  40b214:	f7ff f902 	bl	40a41c <_fflush_r>
  40b218:	bb28      	cbnz	r0, 40b266 <__swbuf_r+0x8e>
  40b21a:	68a3      	ldr	r3, [r4, #8]
  40b21c:	3b01      	subs	r3, #1
  40b21e:	60a3      	str	r3, [r4, #8]
  40b220:	6823      	ldr	r3, [r4, #0]
  40b222:	1c5a      	adds	r2, r3, #1
  40b224:	6022      	str	r2, [r4, #0]
  40b226:	701e      	strb	r6, [r3, #0]
  40b228:	6963      	ldr	r3, [r4, #20]
  40b22a:	3001      	adds	r0, #1
  40b22c:	4298      	cmp	r0, r3
  40b22e:	d004      	beq.n	40b23a <__swbuf_r+0x62>
  40b230:	89a3      	ldrh	r3, [r4, #12]
  40b232:	07db      	lsls	r3, r3, #31
  40b234:	d519      	bpl.n	40b26a <__swbuf_r+0x92>
  40b236:	2e0a      	cmp	r6, #10
  40b238:	d117      	bne.n	40b26a <__swbuf_r+0x92>
  40b23a:	4621      	mov	r1, r4
  40b23c:	4628      	mov	r0, r5
  40b23e:	f7ff f8ed 	bl	40a41c <_fflush_r>
  40b242:	b190      	cbz	r0, 40b26a <__swbuf_r+0x92>
  40b244:	e00f      	b.n	40b266 <__swbuf_r+0x8e>
  40b246:	4b0b      	ldr	r3, [pc, #44]	; (40b274 <__swbuf_r+0x9c>)
  40b248:	429c      	cmp	r4, r3
  40b24a:	d101      	bne.n	40b250 <__swbuf_r+0x78>
  40b24c:	68ac      	ldr	r4, [r5, #8]
  40b24e:	e7d0      	b.n	40b1f2 <__swbuf_r+0x1a>
  40b250:	4b09      	ldr	r3, [pc, #36]	; (40b278 <__swbuf_r+0xa0>)
  40b252:	429c      	cmp	r4, r3
  40b254:	bf08      	it	eq
  40b256:	68ec      	ldreq	r4, [r5, #12]
  40b258:	e7cb      	b.n	40b1f2 <__swbuf_r+0x1a>
  40b25a:	4621      	mov	r1, r4
  40b25c:	4628      	mov	r0, r5
  40b25e:	f000 f81f 	bl	40b2a0 <__swsetup_r>
  40b262:	2800      	cmp	r0, #0
  40b264:	d0cc      	beq.n	40b200 <__swbuf_r+0x28>
  40b266:	f04f 37ff 	mov.w	r7, #4294967295
  40b26a:	4638      	mov	r0, r7
  40b26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b26e:	bf00      	nop
  40b270:	0040cd9c 	.word	0x0040cd9c
  40b274:	0040cdbc 	.word	0x0040cdbc
  40b278:	0040cd7c 	.word	0x0040cd7c

0040b27c <_write_r>:
  40b27c:	b538      	push	{r3, r4, r5, lr}
  40b27e:	4c07      	ldr	r4, [pc, #28]	; (40b29c <_write_r+0x20>)
  40b280:	4605      	mov	r5, r0
  40b282:	4608      	mov	r0, r1
  40b284:	4611      	mov	r1, r2
  40b286:	2200      	movs	r2, #0
  40b288:	6022      	str	r2, [r4, #0]
  40b28a:	461a      	mov	r2, r3
  40b28c:	f7f5 fe1e 	bl	400ecc <_write>
  40b290:	1c43      	adds	r3, r0, #1
  40b292:	d102      	bne.n	40b29a <_write_r+0x1e>
  40b294:	6823      	ldr	r3, [r4, #0]
  40b296:	b103      	cbz	r3, 40b29a <_write_r+0x1e>
  40b298:	602b      	str	r3, [r5, #0]
  40b29a:	bd38      	pop	{r3, r4, r5, pc}
  40b29c:	2000092c 	.word	0x2000092c

0040b2a0 <__swsetup_r>:
  40b2a0:	4b32      	ldr	r3, [pc, #200]	; (40b36c <__swsetup_r+0xcc>)
  40b2a2:	b570      	push	{r4, r5, r6, lr}
  40b2a4:	681d      	ldr	r5, [r3, #0]
  40b2a6:	4606      	mov	r6, r0
  40b2a8:	460c      	mov	r4, r1
  40b2aa:	b125      	cbz	r5, 40b2b6 <__swsetup_r+0x16>
  40b2ac:	69ab      	ldr	r3, [r5, #24]
  40b2ae:	b913      	cbnz	r3, 40b2b6 <__swsetup_r+0x16>
  40b2b0:	4628      	mov	r0, r5
  40b2b2:	f7ff f91d 	bl	40a4f0 <__sinit>
  40b2b6:	4b2e      	ldr	r3, [pc, #184]	; (40b370 <__swsetup_r+0xd0>)
  40b2b8:	429c      	cmp	r4, r3
  40b2ba:	d10f      	bne.n	40b2dc <__swsetup_r+0x3c>
  40b2bc:	686c      	ldr	r4, [r5, #4]
  40b2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b2c2:	b29a      	uxth	r2, r3
  40b2c4:	0715      	lsls	r5, r2, #28
  40b2c6:	d42c      	bmi.n	40b322 <__swsetup_r+0x82>
  40b2c8:	06d0      	lsls	r0, r2, #27
  40b2ca:	d411      	bmi.n	40b2f0 <__swsetup_r+0x50>
  40b2cc:	2209      	movs	r2, #9
  40b2ce:	6032      	str	r2, [r6, #0]
  40b2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b2d4:	81a3      	strh	r3, [r4, #12]
  40b2d6:	f04f 30ff 	mov.w	r0, #4294967295
  40b2da:	bd70      	pop	{r4, r5, r6, pc}
  40b2dc:	4b25      	ldr	r3, [pc, #148]	; (40b374 <__swsetup_r+0xd4>)
  40b2de:	429c      	cmp	r4, r3
  40b2e0:	d101      	bne.n	40b2e6 <__swsetup_r+0x46>
  40b2e2:	68ac      	ldr	r4, [r5, #8]
  40b2e4:	e7eb      	b.n	40b2be <__swsetup_r+0x1e>
  40b2e6:	4b24      	ldr	r3, [pc, #144]	; (40b378 <__swsetup_r+0xd8>)
  40b2e8:	429c      	cmp	r4, r3
  40b2ea:	bf08      	it	eq
  40b2ec:	68ec      	ldreq	r4, [r5, #12]
  40b2ee:	e7e6      	b.n	40b2be <__swsetup_r+0x1e>
  40b2f0:	0751      	lsls	r1, r2, #29
  40b2f2:	d512      	bpl.n	40b31a <__swsetup_r+0x7a>
  40b2f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40b2f6:	b141      	cbz	r1, 40b30a <__swsetup_r+0x6a>
  40b2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40b2fc:	4299      	cmp	r1, r3
  40b2fe:	d002      	beq.n	40b306 <__swsetup_r+0x66>
  40b300:	4630      	mov	r0, r6
  40b302:	f7ff fd2b 	bl	40ad5c <_free_r>
  40b306:	2300      	movs	r3, #0
  40b308:	6363      	str	r3, [r4, #52]	; 0x34
  40b30a:	89a3      	ldrh	r3, [r4, #12]
  40b30c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  40b310:	81a3      	strh	r3, [r4, #12]
  40b312:	2300      	movs	r3, #0
  40b314:	6063      	str	r3, [r4, #4]
  40b316:	6923      	ldr	r3, [r4, #16]
  40b318:	6023      	str	r3, [r4, #0]
  40b31a:	89a3      	ldrh	r3, [r4, #12]
  40b31c:	f043 0308 	orr.w	r3, r3, #8
  40b320:	81a3      	strh	r3, [r4, #12]
  40b322:	6923      	ldr	r3, [r4, #16]
  40b324:	b94b      	cbnz	r3, 40b33a <__swsetup_r+0x9a>
  40b326:	89a3      	ldrh	r3, [r4, #12]
  40b328:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40b32c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b330:	d003      	beq.n	40b33a <__swsetup_r+0x9a>
  40b332:	4621      	mov	r1, r4
  40b334:	4630      	mov	r0, r6
  40b336:	f7ff f997 	bl	40a668 <__smakebuf_r>
  40b33a:	89a2      	ldrh	r2, [r4, #12]
  40b33c:	f012 0301 	ands.w	r3, r2, #1
  40b340:	d00c      	beq.n	40b35c <__swsetup_r+0xbc>
  40b342:	2300      	movs	r3, #0
  40b344:	60a3      	str	r3, [r4, #8]
  40b346:	6963      	ldr	r3, [r4, #20]
  40b348:	425b      	negs	r3, r3
  40b34a:	61a3      	str	r3, [r4, #24]
  40b34c:	6923      	ldr	r3, [r4, #16]
  40b34e:	b953      	cbnz	r3, 40b366 <__swsetup_r+0xc6>
  40b350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b354:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  40b358:	d1ba      	bne.n	40b2d0 <__swsetup_r+0x30>
  40b35a:	bd70      	pop	{r4, r5, r6, pc}
  40b35c:	0792      	lsls	r2, r2, #30
  40b35e:	bf58      	it	pl
  40b360:	6963      	ldrpl	r3, [r4, #20]
  40b362:	60a3      	str	r3, [r4, #8]
  40b364:	e7f2      	b.n	40b34c <__swsetup_r+0xac>
  40b366:	2000      	movs	r0, #0
  40b368:	e7f7      	b.n	40b35a <__swsetup_r+0xba>
  40b36a:	bf00      	nop
  40b36c:	20000178 	.word	0x20000178
  40b370:	0040cd9c 	.word	0x0040cd9c
  40b374:	0040cdbc 	.word	0x0040cdbc
  40b378:	0040cd7c 	.word	0x0040cd7c

0040b37c <_close_r>:
  40b37c:	b538      	push	{r3, r4, r5, lr}
  40b37e:	4c06      	ldr	r4, [pc, #24]	; (40b398 <_close_r+0x1c>)
  40b380:	2300      	movs	r3, #0
  40b382:	4605      	mov	r5, r0
  40b384:	4608      	mov	r0, r1
  40b386:	6023      	str	r3, [r4, #0]
  40b388:	f7fa f8c8 	bl	40551c <_close>
  40b38c:	1c43      	adds	r3, r0, #1
  40b38e:	d102      	bne.n	40b396 <_close_r+0x1a>
  40b390:	6823      	ldr	r3, [r4, #0]
  40b392:	b103      	cbz	r3, 40b396 <_close_r+0x1a>
  40b394:	602b      	str	r3, [r5, #0]
  40b396:	bd38      	pop	{r3, r4, r5, pc}
  40b398:	2000092c 	.word	0x2000092c

0040b39c <_fstat_r>:
  40b39c:	b538      	push	{r3, r4, r5, lr}
  40b39e:	4c07      	ldr	r4, [pc, #28]	; (40b3bc <_fstat_r+0x20>)
  40b3a0:	2300      	movs	r3, #0
  40b3a2:	4605      	mov	r5, r0
  40b3a4:	4608      	mov	r0, r1
  40b3a6:	4611      	mov	r1, r2
  40b3a8:	6023      	str	r3, [r4, #0]
  40b3aa:	f7fa f8c3 	bl	405534 <_fstat>
  40b3ae:	1c43      	adds	r3, r0, #1
  40b3b0:	d102      	bne.n	40b3b8 <_fstat_r+0x1c>
  40b3b2:	6823      	ldr	r3, [r4, #0]
  40b3b4:	b103      	cbz	r3, 40b3b8 <_fstat_r+0x1c>
  40b3b6:	602b      	str	r3, [r5, #0]
  40b3b8:	bd38      	pop	{r3, r4, r5, pc}
  40b3ba:	bf00      	nop
  40b3bc:	2000092c 	.word	0x2000092c

0040b3c0 <_isatty_r>:
  40b3c0:	b538      	push	{r3, r4, r5, lr}
  40b3c2:	4c06      	ldr	r4, [pc, #24]	; (40b3dc <_isatty_r+0x1c>)
  40b3c4:	2300      	movs	r3, #0
  40b3c6:	4605      	mov	r5, r0
  40b3c8:	4608      	mov	r0, r1
  40b3ca:	6023      	str	r3, [r4, #0]
  40b3cc:	f7fa f8c2 	bl	405554 <_isatty>
  40b3d0:	1c43      	adds	r3, r0, #1
  40b3d2:	d102      	bne.n	40b3da <_isatty_r+0x1a>
  40b3d4:	6823      	ldr	r3, [r4, #0]
  40b3d6:	b103      	cbz	r3, 40b3da <_isatty_r+0x1a>
  40b3d8:	602b      	str	r3, [r5, #0]
  40b3da:	bd38      	pop	{r3, r4, r5, pc}
  40b3dc:	2000092c 	.word	0x2000092c

0040b3e0 <_lseek_r>:
  40b3e0:	b538      	push	{r3, r4, r5, lr}
  40b3e2:	4c07      	ldr	r4, [pc, #28]	; (40b400 <_lseek_r+0x20>)
  40b3e4:	4605      	mov	r5, r0
  40b3e6:	4608      	mov	r0, r1
  40b3e8:	4611      	mov	r1, r2
  40b3ea:	2200      	movs	r2, #0
  40b3ec:	6022      	str	r2, [r4, #0]
  40b3ee:	461a      	mov	r2, r3
  40b3f0:	f7fa f8bb 	bl	40556a <_lseek>
  40b3f4:	1c43      	adds	r3, r0, #1
  40b3f6:	d102      	bne.n	40b3fe <_lseek_r+0x1e>
  40b3f8:	6823      	ldr	r3, [r4, #0]
  40b3fa:	b103      	cbz	r3, 40b3fe <_lseek_r+0x1e>
  40b3fc:	602b      	str	r3, [r5, #0]
  40b3fe:	bd38      	pop	{r3, r4, r5, pc}
  40b400:	2000092c 	.word	0x2000092c

0040b404 <__ascii_mbtowc>:
  40b404:	b082      	sub	sp, #8
  40b406:	b901      	cbnz	r1, 40b40a <__ascii_mbtowc+0x6>
  40b408:	a901      	add	r1, sp, #4
  40b40a:	b142      	cbz	r2, 40b41e <__ascii_mbtowc+0x1a>
  40b40c:	b14b      	cbz	r3, 40b422 <__ascii_mbtowc+0x1e>
  40b40e:	7813      	ldrb	r3, [r2, #0]
  40b410:	600b      	str	r3, [r1, #0]
  40b412:	7812      	ldrb	r2, [r2, #0]
  40b414:	1c10      	adds	r0, r2, #0
  40b416:	bf18      	it	ne
  40b418:	2001      	movne	r0, #1
  40b41a:	b002      	add	sp, #8
  40b41c:	4770      	bx	lr
  40b41e:	4610      	mov	r0, r2
  40b420:	e7fb      	b.n	40b41a <__ascii_mbtowc+0x16>
  40b422:	f06f 0001 	mvn.w	r0, #1
  40b426:	e7f8      	b.n	40b41a <__ascii_mbtowc+0x16>

0040b428 <__malloc_lock>:
  40b428:	4770      	bx	lr

0040b42a <__malloc_unlock>:
  40b42a:	4770      	bx	lr

0040b42c <_read_r>:
  40b42c:	b538      	push	{r3, r4, r5, lr}
  40b42e:	4c07      	ldr	r4, [pc, #28]	; (40b44c <_read_r+0x20>)
  40b430:	4605      	mov	r5, r0
  40b432:	4608      	mov	r0, r1
  40b434:	4611      	mov	r1, r2
  40b436:	2200      	movs	r2, #0
  40b438:	6022      	str	r2, [r4, #0]
  40b43a:	461a      	mov	r2, r3
  40b43c:	f7f5 fd1c 	bl	400e78 <_read>
  40b440:	1c43      	adds	r3, r0, #1
  40b442:	d102      	bne.n	40b44a <_read_r+0x1e>
  40b444:	6823      	ldr	r3, [r4, #0]
  40b446:	b103      	cbz	r3, 40b44a <_read_r+0x1e>
  40b448:	602b      	str	r3, [r5, #0]
  40b44a:	bd38      	pop	{r3, r4, r5, pc}
  40b44c:	2000092c 	.word	0x2000092c

0040b450 <__ascii_wctomb>:
  40b450:	b149      	cbz	r1, 40b466 <__ascii_wctomb+0x16>
  40b452:	2aff      	cmp	r2, #255	; 0xff
  40b454:	bf85      	ittet	hi
  40b456:	238a      	movhi	r3, #138	; 0x8a
  40b458:	6003      	strhi	r3, [r0, #0]
  40b45a:	700a      	strbls	r2, [r1, #0]
  40b45c:	f04f 30ff 	movhi.w	r0, #4294967295
  40b460:	bf98      	it	ls
  40b462:	2001      	movls	r0, #1
  40b464:	4770      	bx	lr
  40b466:	4608      	mov	r0, r1
  40b468:	4770      	bx	lr
	...

0040b46c <__aeabi_drsub>:
  40b46c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40b470:	e002      	b.n	40b478 <__adddf3>
  40b472:	bf00      	nop

0040b474 <__aeabi_dsub>:
  40b474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040b478 <__adddf3>:
  40b478:	b530      	push	{r4, r5, lr}
  40b47a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40b47e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40b482:	ea94 0f05 	teq	r4, r5
  40b486:	bf08      	it	eq
  40b488:	ea90 0f02 	teqeq	r0, r2
  40b48c:	bf1f      	itttt	ne
  40b48e:	ea54 0c00 	orrsne.w	ip, r4, r0
  40b492:	ea55 0c02 	orrsne.w	ip, r5, r2
  40b496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40b49a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40b49e:	f000 80e2 	beq.w	40b666 <__adddf3+0x1ee>
  40b4a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40b4a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40b4aa:	bfb8      	it	lt
  40b4ac:	426d      	neglt	r5, r5
  40b4ae:	dd0c      	ble.n	40b4ca <__adddf3+0x52>
  40b4b0:	442c      	add	r4, r5
  40b4b2:	ea80 0202 	eor.w	r2, r0, r2
  40b4b6:	ea81 0303 	eor.w	r3, r1, r3
  40b4ba:	ea82 0000 	eor.w	r0, r2, r0
  40b4be:	ea83 0101 	eor.w	r1, r3, r1
  40b4c2:	ea80 0202 	eor.w	r2, r0, r2
  40b4c6:	ea81 0303 	eor.w	r3, r1, r3
  40b4ca:	2d36      	cmp	r5, #54	; 0x36
  40b4cc:	bf88      	it	hi
  40b4ce:	bd30      	pophi	{r4, r5, pc}
  40b4d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b4d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40b4d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40b4dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40b4e0:	d002      	beq.n	40b4e8 <__adddf3+0x70>
  40b4e2:	4240      	negs	r0, r0
  40b4e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b4e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40b4ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40b4f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40b4f4:	d002      	beq.n	40b4fc <__adddf3+0x84>
  40b4f6:	4252      	negs	r2, r2
  40b4f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40b4fc:	ea94 0f05 	teq	r4, r5
  40b500:	f000 80a7 	beq.w	40b652 <__adddf3+0x1da>
  40b504:	f1a4 0401 	sub.w	r4, r4, #1
  40b508:	f1d5 0e20 	rsbs	lr, r5, #32
  40b50c:	db0d      	blt.n	40b52a <__adddf3+0xb2>
  40b50e:	fa02 fc0e 	lsl.w	ip, r2, lr
  40b512:	fa22 f205 	lsr.w	r2, r2, r5
  40b516:	1880      	adds	r0, r0, r2
  40b518:	f141 0100 	adc.w	r1, r1, #0
  40b51c:	fa03 f20e 	lsl.w	r2, r3, lr
  40b520:	1880      	adds	r0, r0, r2
  40b522:	fa43 f305 	asr.w	r3, r3, r5
  40b526:	4159      	adcs	r1, r3
  40b528:	e00e      	b.n	40b548 <__adddf3+0xd0>
  40b52a:	f1a5 0520 	sub.w	r5, r5, #32
  40b52e:	f10e 0e20 	add.w	lr, lr, #32
  40b532:	2a01      	cmp	r2, #1
  40b534:	fa03 fc0e 	lsl.w	ip, r3, lr
  40b538:	bf28      	it	cs
  40b53a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40b53e:	fa43 f305 	asr.w	r3, r3, r5
  40b542:	18c0      	adds	r0, r0, r3
  40b544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40b548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b54c:	d507      	bpl.n	40b55e <__adddf3+0xe6>
  40b54e:	f04f 0e00 	mov.w	lr, #0
  40b552:	f1dc 0c00 	rsbs	ip, ip, #0
  40b556:	eb7e 0000 	sbcs.w	r0, lr, r0
  40b55a:	eb6e 0101 	sbc.w	r1, lr, r1
  40b55e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40b562:	d31b      	bcc.n	40b59c <__adddf3+0x124>
  40b564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40b568:	d30c      	bcc.n	40b584 <__adddf3+0x10c>
  40b56a:	0849      	lsrs	r1, r1, #1
  40b56c:	ea5f 0030 	movs.w	r0, r0, rrx
  40b570:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40b574:	f104 0401 	add.w	r4, r4, #1
  40b578:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40b57c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40b580:	f080 809a 	bcs.w	40b6b8 <__adddf3+0x240>
  40b584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40b588:	bf08      	it	eq
  40b58a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40b58e:	f150 0000 	adcs.w	r0, r0, #0
  40b592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b596:	ea41 0105 	orr.w	r1, r1, r5
  40b59a:	bd30      	pop	{r4, r5, pc}
  40b59c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40b5a0:	4140      	adcs	r0, r0
  40b5a2:	eb41 0101 	adc.w	r1, r1, r1
  40b5a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b5aa:	f1a4 0401 	sub.w	r4, r4, #1
  40b5ae:	d1e9      	bne.n	40b584 <__adddf3+0x10c>
  40b5b0:	f091 0f00 	teq	r1, #0
  40b5b4:	bf04      	itt	eq
  40b5b6:	4601      	moveq	r1, r0
  40b5b8:	2000      	moveq	r0, #0
  40b5ba:	fab1 f381 	clz	r3, r1
  40b5be:	bf08      	it	eq
  40b5c0:	3320      	addeq	r3, #32
  40b5c2:	f1a3 030b 	sub.w	r3, r3, #11
  40b5c6:	f1b3 0220 	subs.w	r2, r3, #32
  40b5ca:	da0c      	bge.n	40b5e6 <__adddf3+0x16e>
  40b5cc:	320c      	adds	r2, #12
  40b5ce:	dd08      	ble.n	40b5e2 <__adddf3+0x16a>
  40b5d0:	f102 0c14 	add.w	ip, r2, #20
  40b5d4:	f1c2 020c 	rsb	r2, r2, #12
  40b5d8:	fa01 f00c 	lsl.w	r0, r1, ip
  40b5dc:	fa21 f102 	lsr.w	r1, r1, r2
  40b5e0:	e00c      	b.n	40b5fc <__adddf3+0x184>
  40b5e2:	f102 0214 	add.w	r2, r2, #20
  40b5e6:	bfd8      	it	le
  40b5e8:	f1c2 0c20 	rsble	ip, r2, #32
  40b5ec:	fa01 f102 	lsl.w	r1, r1, r2
  40b5f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  40b5f4:	bfdc      	itt	le
  40b5f6:	ea41 010c 	orrle.w	r1, r1, ip
  40b5fa:	4090      	lslle	r0, r2
  40b5fc:	1ae4      	subs	r4, r4, r3
  40b5fe:	bfa2      	ittt	ge
  40b600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40b604:	4329      	orrge	r1, r5
  40b606:	bd30      	popge	{r4, r5, pc}
  40b608:	ea6f 0404 	mvn.w	r4, r4
  40b60c:	3c1f      	subs	r4, #31
  40b60e:	da1c      	bge.n	40b64a <__adddf3+0x1d2>
  40b610:	340c      	adds	r4, #12
  40b612:	dc0e      	bgt.n	40b632 <__adddf3+0x1ba>
  40b614:	f104 0414 	add.w	r4, r4, #20
  40b618:	f1c4 0220 	rsb	r2, r4, #32
  40b61c:	fa20 f004 	lsr.w	r0, r0, r4
  40b620:	fa01 f302 	lsl.w	r3, r1, r2
  40b624:	ea40 0003 	orr.w	r0, r0, r3
  40b628:	fa21 f304 	lsr.w	r3, r1, r4
  40b62c:	ea45 0103 	orr.w	r1, r5, r3
  40b630:	bd30      	pop	{r4, r5, pc}
  40b632:	f1c4 040c 	rsb	r4, r4, #12
  40b636:	f1c4 0220 	rsb	r2, r4, #32
  40b63a:	fa20 f002 	lsr.w	r0, r0, r2
  40b63e:	fa01 f304 	lsl.w	r3, r1, r4
  40b642:	ea40 0003 	orr.w	r0, r0, r3
  40b646:	4629      	mov	r1, r5
  40b648:	bd30      	pop	{r4, r5, pc}
  40b64a:	fa21 f004 	lsr.w	r0, r1, r4
  40b64e:	4629      	mov	r1, r5
  40b650:	bd30      	pop	{r4, r5, pc}
  40b652:	f094 0f00 	teq	r4, #0
  40b656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40b65a:	bf06      	itte	eq
  40b65c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40b660:	3401      	addeq	r4, #1
  40b662:	3d01      	subne	r5, #1
  40b664:	e74e      	b.n	40b504 <__adddf3+0x8c>
  40b666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40b66a:	bf18      	it	ne
  40b66c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40b670:	d029      	beq.n	40b6c6 <__adddf3+0x24e>
  40b672:	ea94 0f05 	teq	r4, r5
  40b676:	bf08      	it	eq
  40b678:	ea90 0f02 	teqeq	r0, r2
  40b67c:	d005      	beq.n	40b68a <__adddf3+0x212>
  40b67e:	ea54 0c00 	orrs.w	ip, r4, r0
  40b682:	bf04      	itt	eq
  40b684:	4619      	moveq	r1, r3
  40b686:	4610      	moveq	r0, r2
  40b688:	bd30      	pop	{r4, r5, pc}
  40b68a:	ea91 0f03 	teq	r1, r3
  40b68e:	bf1e      	ittt	ne
  40b690:	2100      	movne	r1, #0
  40b692:	2000      	movne	r0, #0
  40b694:	bd30      	popne	{r4, r5, pc}
  40b696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40b69a:	d105      	bne.n	40b6a8 <__adddf3+0x230>
  40b69c:	0040      	lsls	r0, r0, #1
  40b69e:	4149      	adcs	r1, r1
  40b6a0:	bf28      	it	cs
  40b6a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40b6a6:	bd30      	pop	{r4, r5, pc}
  40b6a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40b6ac:	bf3c      	itt	cc
  40b6ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40b6b2:	bd30      	popcc	{r4, r5, pc}
  40b6b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b6b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40b6bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40b6c0:	f04f 0000 	mov.w	r0, #0
  40b6c4:	bd30      	pop	{r4, r5, pc}
  40b6c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40b6ca:	bf1a      	itte	ne
  40b6cc:	4619      	movne	r1, r3
  40b6ce:	4610      	movne	r0, r2
  40b6d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40b6d4:	bf1c      	itt	ne
  40b6d6:	460b      	movne	r3, r1
  40b6d8:	4602      	movne	r2, r0
  40b6da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40b6de:	bf06      	itte	eq
  40b6e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40b6e4:	ea91 0f03 	teqeq	r1, r3
  40b6e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40b6ec:	bd30      	pop	{r4, r5, pc}
  40b6ee:	bf00      	nop

0040b6f0 <__aeabi_ui2d>:
  40b6f0:	f090 0f00 	teq	r0, #0
  40b6f4:	bf04      	itt	eq
  40b6f6:	2100      	moveq	r1, #0
  40b6f8:	4770      	bxeq	lr
  40b6fa:	b530      	push	{r4, r5, lr}
  40b6fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40b700:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40b704:	f04f 0500 	mov.w	r5, #0
  40b708:	f04f 0100 	mov.w	r1, #0
  40b70c:	e750      	b.n	40b5b0 <__adddf3+0x138>
  40b70e:	bf00      	nop

0040b710 <__aeabi_i2d>:
  40b710:	f090 0f00 	teq	r0, #0
  40b714:	bf04      	itt	eq
  40b716:	2100      	moveq	r1, #0
  40b718:	4770      	bxeq	lr
  40b71a:	b530      	push	{r4, r5, lr}
  40b71c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40b720:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40b724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40b728:	bf48      	it	mi
  40b72a:	4240      	negmi	r0, r0
  40b72c:	f04f 0100 	mov.w	r1, #0
  40b730:	e73e      	b.n	40b5b0 <__adddf3+0x138>
  40b732:	bf00      	nop

0040b734 <__aeabi_f2d>:
  40b734:	0042      	lsls	r2, r0, #1
  40b736:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40b73a:	ea4f 0131 	mov.w	r1, r1, rrx
  40b73e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40b742:	bf1f      	itttt	ne
  40b744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40b748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40b74c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40b750:	4770      	bxne	lr
  40b752:	f092 0f00 	teq	r2, #0
  40b756:	bf14      	ite	ne
  40b758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40b75c:	4770      	bxeq	lr
  40b75e:	b530      	push	{r4, r5, lr}
  40b760:	f44f 7460 	mov.w	r4, #896	; 0x380
  40b764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40b76c:	e720      	b.n	40b5b0 <__adddf3+0x138>
  40b76e:	bf00      	nop

0040b770 <__aeabi_ul2d>:
  40b770:	ea50 0201 	orrs.w	r2, r0, r1
  40b774:	bf08      	it	eq
  40b776:	4770      	bxeq	lr
  40b778:	b530      	push	{r4, r5, lr}
  40b77a:	f04f 0500 	mov.w	r5, #0
  40b77e:	e00a      	b.n	40b796 <__aeabi_l2d+0x16>

0040b780 <__aeabi_l2d>:
  40b780:	ea50 0201 	orrs.w	r2, r0, r1
  40b784:	bf08      	it	eq
  40b786:	4770      	bxeq	lr
  40b788:	b530      	push	{r4, r5, lr}
  40b78a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40b78e:	d502      	bpl.n	40b796 <__aeabi_l2d+0x16>
  40b790:	4240      	negs	r0, r0
  40b792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b796:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40b79a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40b79e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40b7a2:	f43f aedc 	beq.w	40b55e <__adddf3+0xe6>
  40b7a6:	f04f 0203 	mov.w	r2, #3
  40b7aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40b7ae:	bf18      	it	ne
  40b7b0:	3203      	addne	r2, #3
  40b7b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40b7b6:	bf18      	it	ne
  40b7b8:	3203      	addne	r2, #3
  40b7ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40b7be:	f1c2 0320 	rsb	r3, r2, #32
  40b7c2:	fa00 fc03 	lsl.w	ip, r0, r3
  40b7c6:	fa20 f002 	lsr.w	r0, r0, r2
  40b7ca:	fa01 fe03 	lsl.w	lr, r1, r3
  40b7ce:	ea40 000e 	orr.w	r0, r0, lr
  40b7d2:	fa21 f102 	lsr.w	r1, r1, r2
  40b7d6:	4414      	add	r4, r2
  40b7d8:	e6c1      	b.n	40b55e <__adddf3+0xe6>
  40b7da:	bf00      	nop

0040b7dc <__aeabi_dmul>:
  40b7dc:	b570      	push	{r4, r5, r6, lr}
  40b7de:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b7e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40b7e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40b7ea:	bf1d      	ittte	ne
  40b7ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40b7f0:	ea94 0f0c 	teqne	r4, ip
  40b7f4:	ea95 0f0c 	teqne	r5, ip
  40b7f8:	f000 f8de 	bleq	40b9b8 <__aeabi_dmul+0x1dc>
  40b7fc:	442c      	add	r4, r5
  40b7fe:	ea81 0603 	eor.w	r6, r1, r3
  40b802:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40b806:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40b80a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40b80e:	bf18      	it	ne
  40b810:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40b814:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40b81c:	d038      	beq.n	40b890 <__aeabi_dmul+0xb4>
  40b81e:	fba0 ce02 	umull	ip, lr, r0, r2
  40b822:	f04f 0500 	mov.w	r5, #0
  40b826:	fbe1 e502 	umlal	lr, r5, r1, r2
  40b82a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40b82e:	fbe0 e503 	umlal	lr, r5, r0, r3
  40b832:	f04f 0600 	mov.w	r6, #0
  40b836:	fbe1 5603 	umlal	r5, r6, r1, r3
  40b83a:	f09c 0f00 	teq	ip, #0
  40b83e:	bf18      	it	ne
  40b840:	f04e 0e01 	orrne.w	lr, lr, #1
  40b844:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40b848:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40b84c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40b850:	d204      	bcs.n	40b85c <__aeabi_dmul+0x80>
  40b852:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40b856:	416d      	adcs	r5, r5
  40b858:	eb46 0606 	adc.w	r6, r6, r6
  40b85c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40b860:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40b864:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40b868:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40b86c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40b870:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40b874:	bf88      	it	hi
  40b876:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40b87a:	d81e      	bhi.n	40b8ba <__aeabi_dmul+0xde>
  40b87c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40b880:	bf08      	it	eq
  40b882:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40b886:	f150 0000 	adcs.w	r0, r0, #0
  40b88a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b88e:	bd70      	pop	{r4, r5, r6, pc}
  40b890:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40b894:	ea46 0101 	orr.w	r1, r6, r1
  40b898:	ea40 0002 	orr.w	r0, r0, r2
  40b89c:	ea81 0103 	eor.w	r1, r1, r3
  40b8a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40b8a4:	bfc2      	ittt	gt
  40b8a6:	ebd4 050c 	rsbsgt	r5, r4, ip
  40b8aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40b8ae:	bd70      	popgt	{r4, r5, r6, pc}
  40b8b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b8b4:	f04f 0e00 	mov.w	lr, #0
  40b8b8:	3c01      	subs	r4, #1
  40b8ba:	f300 80ab 	bgt.w	40ba14 <__aeabi_dmul+0x238>
  40b8be:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40b8c2:	bfde      	ittt	le
  40b8c4:	2000      	movle	r0, #0
  40b8c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40b8ca:	bd70      	pople	{r4, r5, r6, pc}
  40b8cc:	f1c4 0400 	rsb	r4, r4, #0
  40b8d0:	3c20      	subs	r4, #32
  40b8d2:	da35      	bge.n	40b940 <__aeabi_dmul+0x164>
  40b8d4:	340c      	adds	r4, #12
  40b8d6:	dc1b      	bgt.n	40b910 <__aeabi_dmul+0x134>
  40b8d8:	f104 0414 	add.w	r4, r4, #20
  40b8dc:	f1c4 0520 	rsb	r5, r4, #32
  40b8e0:	fa00 f305 	lsl.w	r3, r0, r5
  40b8e4:	fa20 f004 	lsr.w	r0, r0, r4
  40b8e8:	fa01 f205 	lsl.w	r2, r1, r5
  40b8ec:	ea40 0002 	orr.w	r0, r0, r2
  40b8f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40b8f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40b8f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40b8fc:	fa21 f604 	lsr.w	r6, r1, r4
  40b900:	eb42 0106 	adc.w	r1, r2, r6
  40b904:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40b908:	bf08      	it	eq
  40b90a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40b90e:	bd70      	pop	{r4, r5, r6, pc}
  40b910:	f1c4 040c 	rsb	r4, r4, #12
  40b914:	f1c4 0520 	rsb	r5, r4, #32
  40b918:	fa00 f304 	lsl.w	r3, r0, r4
  40b91c:	fa20 f005 	lsr.w	r0, r0, r5
  40b920:	fa01 f204 	lsl.w	r2, r1, r4
  40b924:	ea40 0002 	orr.w	r0, r0, r2
  40b928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b92c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40b930:	f141 0100 	adc.w	r1, r1, #0
  40b934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40b938:	bf08      	it	eq
  40b93a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40b93e:	bd70      	pop	{r4, r5, r6, pc}
  40b940:	f1c4 0520 	rsb	r5, r4, #32
  40b944:	fa00 f205 	lsl.w	r2, r0, r5
  40b948:	ea4e 0e02 	orr.w	lr, lr, r2
  40b94c:	fa20 f304 	lsr.w	r3, r0, r4
  40b950:	fa01 f205 	lsl.w	r2, r1, r5
  40b954:	ea43 0302 	orr.w	r3, r3, r2
  40b958:	fa21 f004 	lsr.w	r0, r1, r4
  40b95c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b960:	fa21 f204 	lsr.w	r2, r1, r4
  40b964:	ea20 0002 	bic.w	r0, r0, r2
  40b968:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40b96c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40b970:	bf08      	it	eq
  40b972:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40b976:	bd70      	pop	{r4, r5, r6, pc}
  40b978:	f094 0f00 	teq	r4, #0
  40b97c:	d10f      	bne.n	40b99e <__aeabi_dmul+0x1c2>
  40b97e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40b982:	0040      	lsls	r0, r0, #1
  40b984:	eb41 0101 	adc.w	r1, r1, r1
  40b988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b98c:	bf08      	it	eq
  40b98e:	3c01      	subeq	r4, #1
  40b990:	d0f7      	beq.n	40b982 <__aeabi_dmul+0x1a6>
  40b992:	ea41 0106 	orr.w	r1, r1, r6
  40b996:	f095 0f00 	teq	r5, #0
  40b99a:	bf18      	it	ne
  40b99c:	4770      	bxne	lr
  40b99e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40b9a2:	0052      	lsls	r2, r2, #1
  40b9a4:	eb43 0303 	adc.w	r3, r3, r3
  40b9a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40b9ac:	bf08      	it	eq
  40b9ae:	3d01      	subeq	r5, #1
  40b9b0:	d0f7      	beq.n	40b9a2 <__aeabi_dmul+0x1c6>
  40b9b2:	ea43 0306 	orr.w	r3, r3, r6
  40b9b6:	4770      	bx	lr
  40b9b8:	ea94 0f0c 	teq	r4, ip
  40b9bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40b9c0:	bf18      	it	ne
  40b9c2:	ea95 0f0c 	teqne	r5, ip
  40b9c6:	d00c      	beq.n	40b9e2 <__aeabi_dmul+0x206>
  40b9c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b9cc:	bf18      	it	ne
  40b9ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b9d2:	d1d1      	bne.n	40b978 <__aeabi_dmul+0x19c>
  40b9d4:	ea81 0103 	eor.w	r1, r1, r3
  40b9d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b9dc:	f04f 0000 	mov.w	r0, #0
  40b9e0:	bd70      	pop	{r4, r5, r6, pc}
  40b9e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b9e6:	bf06      	itte	eq
  40b9e8:	4610      	moveq	r0, r2
  40b9ea:	4619      	moveq	r1, r3
  40b9ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b9f0:	d019      	beq.n	40ba26 <__aeabi_dmul+0x24a>
  40b9f2:	ea94 0f0c 	teq	r4, ip
  40b9f6:	d102      	bne.n	40b9fe <__aeabi_dmul+0x222>
  40b9f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40b9fc:	d113      	bne.n	40ba26 <__aeabi_dmul+0x24a>
  40b9fe:	ea95 0f0c 	teq	r5, ip
  40ba02:	d105      	bne.n	40ba10 <__aeabi_dmul+0x234>
  40ba04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40ba08:	bf1c      	itt	ne
  40ba0a:	4610      	movne	r0, r2
  40ba0c:	4619      	movne	r1, r3
  40ba0e:	d10a      	bne.n	40ba26 <__aeabi_dmul+0x24a>
  40ba10:	ea81 0103 	eor.w	r1, r1, r3
  40ba14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ba18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ba1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ba20:	f04f 0000 	mov.w	r0, #0
  40ba24:	bd70      	pop	{r4, r5, r6, pc}
  40ba26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ba2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40ba2e:	bd70      	pop	{r4, r5, r6, pc}

0040ba30 <__aeabi_ddiv>:
  40ba30:	b570      	push	{r4, r5, r6, lr}
  40ba32:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ba36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ba3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ba3e:	bf1d      	ittte	ne
  40ba40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ba44:	ea94 0f0c 	teqne	r4, ip
  40ba48:	ea95 0f0c 	teqne	r5, ip
  40ba4c:	f000 f8a7 	bleq	40bb9e <__aeabi_ddiv+0x16e>
  40ba50:	eba4 0405 	sub.w	r4, r4, r5
  40ba54:	ea81 0e03 	eor.w	lr, r1, r3
  40ba58:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ba5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ba60:	f000 8088 	beq.w	40bb74 <__aeabi_ddiv+0x144>
  40ba64:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ba68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40ba6c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40ba70:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40ba74:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40ba78:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40ba7c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40ba80:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40ba84:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ba88:	429d      	cmp	r5, r3
  40ba8a:	bf08      	it	eq
  40ba8c:	4296      	cmpeq	r6, r2
  40ba8e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40ba92:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40ba96:	d202      	bcs.n	40ba9e <__aeabi_ddiv+0x6e>
  40ba98:	085b      	lsrs	r3, r3, #1
  40ba9a:	ea4f 0232 	mov.w	r2, r2, rrx
  40ba9e:	1ab6      	subs	r6, r6, r2
  40baa0:	eb65 0503 	sbc.w	r5, r5, r3
  40baa4:	085b      	lsrs	r3, r3, #1
  40baa6:	ea4f 0232 	mov.w	r2, r2, rrx
  40baaa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40baae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40bab2:	ebb6 0e02 	subs.w	lr, r6, r2
  40bab6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40baba:	bf22      	ittt	cs
  40babc:	1ab6      	subcs	r6, r6, r2
  40babe:	4675      	movcs	r5, lr
  40bac0:	ea40 000c 	orrcs.w	r0, r0, ip
  40bac4:	085b      	lsrs	r3, r3, #1
  40bac6:	ea4f 0232 	mov.w	r2, r2, rrx
  40baca:	ebb6 0e02 	subs.w	lr, r6, r2
  40bace:	eb75 0e03 	sbcs.w	lr, r5, r3
  40bad2:	bf22      	ittt	cs
  40bad4:	1ab6      	subcs	r6, r6, r2
  40bad6:	4675      	movcs	r5, lr
  40bad8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40badc:	085b      	lsrs	r3, r3, #1
  40bade:	ea4f 0232 	mov.w	r2, r2, rrx
  40bae2:	ebb6 0e02 	subs.w	lr, r6, r2
  40bae6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40baea:	bf22      	ittt	cs
  40baec:	1ab6      	subcs	r6, r6, r2
  40baee:	4675      	movcs	r5, lr
  40baf0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40baf4:	085b      	lsrs	r3, r3, #1
  40baf6:	ea4f 0232 	mov.w	r2, r2, rrx
  40bafa:	ebb6 0e02 	subs.w	lr, r6, r2
  40bafe:	eb75 0e03 	sbcs.w	lr, r5, r3
  40bb02:	bf22      	ittt	cs
  40bb04:	1ab6      	subcs	r6, r6, r2
  40bb06:	4675      	movcs	r5, lr
  40bb08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40bb0c:	ea55 0e06 	orrs.w	lr, r5, r6
  40bb10:	d018      	beq.n	40bb44 <__aeabi_ddiv+0x114>
  40bb12:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40bb16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40bb1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40bb1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40bb22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40bb26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40bb2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40bb2e:	d1c0      	bne.n	40bab2 <__aeabi_ddiv+0x82>
  40bb30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bb34:	d10b      	bne.n	40bb4e <__aeabi_ddiv+0x11e>
  40bb36:	ea41 0100 	orr.w	r1, r1, r0
  40bb3a:	f04f 0000 	mov.w	r0, #0
  40bb3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40bb42:	e7b6      	b.n	40bab2 <__aeabi_ddiv+0x82>
  40bb44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bb48:	bf04      	itt	eq
  40bb4a:	4301      	orreq	r1, r0
  40bb4c:	2000      	moveq	r0, #0
  40bb4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40bb52:	bf88      	it	hi
  40bb54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40bb58:	f63f aeaf 	bhi.w	40b8ba <__aeabi_dmul+0xde>
  40bb5c:	ebb5 0c03 	subs.w	ip, r5, r3
  40bb60:	bf04      	itt	eq
  40bb62:	ebb6 0c02 	subseq.w	ip, r6, r2
  40bb66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40bb6a:	f150 0000 	adcs.w	r0, r0, #0
  40bb6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40bb72:	bd70      	pop	{r4, r5, r6, pc}
  40bb74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40bb78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40bb7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40bb80:	bfc2      	ittt	gt
  40bb82:	ebd4 050c 	rsbsgt	r5, r4, ip
  40bb86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40bb8a:	bd70      	popgt	{r4, r5, r6, pc}
  40bb8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40bb90:	f04f 0e00 	mov.w	lr, #0
  40bb94:	3c01      	subs	r4, #1
  40bb96:	e690      	b.n	40b8ba <__aeabi_dmul+0xde>
  40bb98:	ea45 0e06 	orr.w	lr, r5, r6
  40bb9c:	e68d      	b.n	40b8ba <__aeabi_dmul+0xde>
  40bb9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40bba2:	ea94 0f0c 	teq	r4, ip
  40bba6:	bf08      	it	eq
  40bba8:	ea95 0f0c 	teqeq	r5, ip
  40bbac:	f43f af3b 	beq.w	40ba26 <__aeabi_dmul+0x24a>
  40bbb0:	ea94 0f0c 	teq	r4, ip
  40bbb4:	d10a      	bne.n	40bbcc <__aeabi_ddiv+0x19c>
  40bbb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40bbba:	f47f af34 	bne.w	40ba26 <__aeabi_dmul+0x24a>
  40bbbe:	ea95 0f0c 	teq	r5, ip
  40bbc2:	f47f af25 	bne.w	40ba10 <__aeabi_dmul+0x234>
  40bbc6:	4610      	mov	r0, r2
  40bbc8:	4619      	mov	r1, r3
  40bbca:	e72c      	b.n	40ba26 <__aeabi_dmul+0x24a>
  40bbcc:	ea95 0f0c 	teq	r5, ip
  40bbd0:	d106      	bne.n	40bbe0 <__aeabi_ddiv+0x1b0>
  40bbd2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40bbd6:	f43f aefd 	beq.w	40b9d4 <__aeabi_dmul+0x1f8>
  40bbda:	4610      	mov	r0, r2
  40bbdc:	4619      	mov	r1, r3
  40bbde:	e722      	b.n	40ba26 <__aeabi_dmul+0x24a>
  40bbe0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40bbe4:	bf18      	it	ne
  40bbe6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40bbea:	f47f aec5 	bne.w	40b978 <__aeabi_dmul+0x19c>
  40bbee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40bbf2:	f47f af0d 	bne.w	40ba10 <__aeabi_dmul+0x234>
  40bbf6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40bbfa:	f47f aeeb 	bne.w	40b9d4 <__aeabi_dmul+0x1f8>
  40bbfe:	e712      	b.n	40ba26 <__aeabi_dmul+0x24a>

0040bc00 <__gedf2>:
  40bc00:	f04f 3cff 	mov.w	ip, #4294967295
  40bc04:	e006      	b.n	40bc14 <__cmpdf2+0x4>
  40bc06:	bf00      	nop

0040bc08 <__ledf2>:
  40bc08:	f04f 0c01 	mov.w	ip, #1
  40bc0c:	e002      	b.n	40bc14 <__cmpdf2+0x4>
  40bc0e:	bf00      	nop

0040bc10 <__cmpdf2>:
  40bc10:	f04f 0c01 	mov.w	ip, #1
  40bc14:	f84d cd04 	str.w	ip, [sp, #-4]!
  40bc18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bc1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bc20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bc24:	bf18      	it	ne
  40bc26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40bc2a:	d01b      	beq.n	40bc64 <__cmpdf2+0x54>
  40bc2c:	b001      	add	sp, #4
  40bc2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40bc32:	bf0c      	ite	eq
  40bc34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40bc38:	ea91 0f03 	teqne	r1, r3
  40bc3c:	bf02      	ittt	eq
  40bc3e:	ea90 0f02 	teqeq	r0, r2
  40bc42:	2000      	moveq	r0, #0
  40bc44:	4770      	bxeq	lr
  40bc46:	f110 0f00 	cmn.w	r0, #0
  40bc4a:	ea91 0f03 	teq	r1, r3
  40bc4e:	bf58      	it	pl
  40bc50:	4299      	cmppl	r1, r3
  40bc52:	bf08      	it	eq
  40bc54:	4290      	cmpeq	r0, r2
  40bc56:	bf2c      	ite	cs
  40bc58:	17d8      	asrcs	r0, r3, #31
  40bc5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40bc5e:	f040 0001 	orr.w	r0, r0, #1
  40bc62:	4770      	bx	lr
  40bc64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bc68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bc6c:	d102      	bne.n	40bc74 <__cmpdf2+0x64>
  40bc6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40bc72:	d107      	bne.n	40bc84 <__cmpdf2+0x74>
  40bc74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bc78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bc7c:	d1d6      	bne.n	40bc2c <__cmpdf2+0x1c>
  40bc7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40bc82:	d0d3      	beq.n	40bc2c <__cmpdf2+0x1c>
  40bc84:	f85d 0b04 	ldr.w	r0, [sp], #4
  40bc88:	4770      	bx	lr
  40bc8a:	bf00      	nop

0040bc8c <__aeabi_cdrcmple>:
  40bc8c:	4684      	mov	ip, r0
  40bc8e:	4610      	mov	r0, r2
  40bc90:	4662      	mov	r2, ip
  40bc92:	468c      	mov	ip, r1
  40bc94:	4619      	mov	r1, r3
  40bc96:	4663      	mov	r3, ip
  40bc98:	e000      	b.n	40bc9c <__aeabi_cdcmpeq>
  40bc9a:	bf00      	nop

0040bc9c <__aeabi_cdcmpeq>:
  40bc9c:	b501      	push	{r0, lr}
  40bc9e:	f7ff ffb7 	bl	40bc10 <__cmpdf2>
  40bca2:	2800      	cmp	r0, #0
  40bca4:	bf48      	it	mi
  40bca6:	f110 0f00 	cmnmi.w	r0, #0
  40bcaa:	bd01      	pop	{r0, pc}

0040bcac <__aeabi_dcmpeq>:
  40bcac:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bcb0:	f7ff fff4 	bl	40bc9c <__aeabi_cdcmpeq>
  40bcb4:	bf0c      	ite	eq
  40bcb6:	2001      	moveq	r0, #1
  40bcb8:	2000      	movne	r0, #0
  40bcba:	f85d fb08 	ldr.w	pc, [sp], #8
  40bcbe:	bf00      	nop

0040bcc0 <__aeabi_dcmplt>:
  40bcc0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bcc4:	f7ff ffea 	bl	40bc9c <__aeabi_cdcmpeq>
  40bcc8:	bf34      	ite	cc
  40bcca:	2001      	movcc	r0, #1
  40bccc:	2000      	movcs	r0, #0
  40bcce:	f85d fb08 	ldr.w	pc, [sp], #8
  40bcd2:	bf00      	nop

0040bcd4 <__aeabi_dcmple>:
  40bcd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bcd8:	f7ff ffe0 	bl	40bc9c <__aeabi_cdcmpeq>
  40bcdc:	bf94      	ite	ls
  40bcde:	2001      	movls	r0, #1
  40bce0:	2000      	movhi	r0, #0
  40bce2:	f85d fb08 	ldr.w	pc, [sp], #8
  40bce6:	bf00      	nop

0040bce8 <__aeabi_dcmpge>:
  40bce8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bcec:	f7ff ffce 	bl	40bc8c <__aeabi_cdrcmple>
  40bcf0:	bf94      	ite	ls
  40bcf2:	2001      	movls	r0, #1
  40bcf4:	2000      	movhi	r0, #0
  40bcf6:	f85d fb08 	ldr.w	pc, [sp], #8
  40bcfa:	bf00      	nop

0040bcfc <__aeabi_dcmpgt>:
  40bcfc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bd00:	f7ff ffc4 	bl	40bc8c <__aeabi_cdrcmple>
  40bd04:	bf34      	ite	cc
  40bd06:	2001      	movcc	r0, #1
  40bd08:	2000      	movcs	r0, #0
  40bd0a:	f85d fb08 	ldr.w	pc, [sp], #8
  40bd0e:	bf00      	nop

0040bd10 <__aeabi_dcmpun>:
  40bd10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bd14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bd18:	d102      	bne.n	40bd20 <__aeabi_dcmpun+0x10>
  40bd1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40bd1e:	d10a      	bne.n	40bd36 <__aeabi_dcmpun+0x26>
  40bd20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bd24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bd28:	d102      	bne.n	40bd30 <__aeabi_dcmpun+0x20>
  40bd2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40bd2e:	d102      	bne.n	40bd36 <__aeabi_dcmpun+0x26>
  40bd30:	f04f 0000 	mov.w	r0, #0
  40bd34:	4770      	bx	lr
  40bd36:	f04f 0001 	mov.w	r0, #1
  40bd3a:	4770      	bx	lr

0040bd3c <__aeabi_d2iz>:
  40bd3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40bd40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40bd44:	d215      	bcs.n	40bd72 <__aeabi_d2iz+0x36>
  40bd46:	d511      	bpl.n	40bd6c <__aeabi_d2iz+0x30>
  40bd48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40bd4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40bd50:	d912      	bls.n	40bd78 <__aeabi_d2iz+0x3c>
  40bd52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40bd56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40bd5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40bd5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40bd62:	fa23 f002 	lsr.w	r0, r3, r2
  40bd66:	bf18      	it	ne
  40bd68:	4240      	negne	r0, r0
  40bd6a:	4770      	bx	lr
  40bd6c:	f04f 0000 	mov.w	r0, #0
  40bd70:	4770      	bx	lr
  40bd72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40bd76:	d105      	bne.n	40bd84 <__aeabi_d2iz+0x48>
  40bd78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40bd7c:	bf08      	it	eq
  40bd7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40bd82:	4770      	bx	lr
  40bd84:	f04f 0000 	mov.w	r0, #0
  40bd88:	4770      	bx	lr
  40bd8a:	bf00      	nop

0040bd8c <__aeabi_d2uiz>:
  40bd8c:	004a      	lsls	r2, r1, #1
  40bd8e:	d211      	bcs.n	40bdb4 <__aeabi_d2uiz+0x28>
  40bd90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40bd94:	d211      	bcs.n	40bdba <__aeabi_d2uiz+0x2e>
  40bd96:	d50d      	bpl.n	40bdb4 <__aeabi_d2uiz+0x28>
  40bd98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40bd9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40bda0:	d40e      	bmi.n	40bdc0 <__aeabi_d2uiz+0x34>
  40bda2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40bda6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40bdaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40bdae:	fa23 f002 	lsr.w	r0, r3, r2
  40bdb2:	4770      	bx	lr
  40bdb4:	f04f 0000 	mov.w	r0, #0
  40bdb8:	4770      	bx	lr
  40bdba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40bdbe:	d102      	bne.n	40bdc6 <__aeabi_d2uiz+0x3a>
  40bdc0:	f04f 30ff 	mov.w	r0, #4294967295
  40bdc4:	4770      	bx	lr
  40bdc6:	f04f 0000 	mov.w	r0, #0
  40bdca:	4770      	bx	lr

0040bdcc <__aeabi_uldivmod>:
  40bdcc:	b953      	cbnz	r3, 40bde4 <__aeabi_uldivmod+0x18>
  40bdce:	b94a      	cbnz	r2, 40bde4 <__aeabi_uldivmod+0x18>
  40bdd0:	2900      	cmp	r1, #0
  40bdd2:	bf08      	it	eq
  40bdd4:	2800      	cmpeq	r0, #0
  40bdd6:	bf1c      	itt	ne
  40bdd8:	f04f 31ff 	movne.w	r1, #4294967295
  40bddc:	f04f 30ff 	movne.w	r0, #4294967295
  40bde0:	f000 b97a 	b.w	40c0d8 <__aeabi_idiv0>
  40bde4:	f1ad 0c08 	sub.w	ip, sp, #8
  40bde8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40bdec:	f000 f806 	bl	40bdfc <__udivmoddi4>
  40bdf0:	f8dd e004 	ldr.w	lr, [sp, #4]
  40bdf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40bdf8:	b004      	add	sp, #16
  40bdfa:	4770      	bx	lr

0040bdfc <__udivmoddi4>:
  40bdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40be00:	468c      	mov	ip, r1
  40be02:	460d      	mov	r5, r1
  40be04:	4604      	mov	r4, r0
  40be06:	9e08      	ldr	r6, [sp, #32]
  40be08:	2b00      	cmp	r3, #0
  40be0a:	d151      	bne.n	40beb0 <__udivmoddi4+0xb4>
  40be0c:	428a      	cmp	r2, r1
  40be0e:	4617      	mov	r7, r2
  40be10:	d96d      	bls.n	40beee <__udivmoddi4+0xf2>
  40be12:	fab2 fe82 	clz	lr, r2
  40be16:	f1be 0f00 	cmp.w	lr, #0
  40be1a:	d00b      	beq.n	40be34 <__udivmoddi4+0x38>
  40be1c:	f1ce 0c20 	rsb	ip, lr, #32
  40be20:	fa01 f50e 	lsl.w	r5, r1, lr
  40be24:	fa20 fc0c 	lsr.w	ip, r0, ip
  40be28:	fa02 f70e 	lsl.w	r7, r2, lr
  40be2c:	ea4c 0c05 	orr.w	ip, ip, r5
  40be30:	fa00 f40e 	lsl.w	r4, r0, lr
  40be34:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40be38:	0c25      	lsrs	r5, r4, #16
  40be3a:	fbbc f8fa 	udiv	r8, ip, sl
  40be3e:	fa1f f987 	uxth.w	r9, r7
  40be42:	fb0a cc18 	mls	ip, sl, r8, ip
  40be46:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40be4a:	fb08 f309 	mul.w	r3, r8, r9
  40be4e:	42ab      	cmp	r3, r5
  40be50:	d90a      	bls.n	40be68 <__udivmoddi4+0x6c>
  40be52:	19ed      	adds	r5, r5, r7
  40be54:	f108 32ff 	add.w	r2, r8, #4294967295
  40be58:	f080 8123 	bcs.w	40c0a2 <__udivmoddi4+0x2a6>
  40be5c:	42ab      	cmp	r3, r5
  40be5e:	f240 8120 	bls.w	40c0a2 <__udivmoddi4+0x2a6>
  40be62:	f1a8 0802 	sub.w	r8, r8, #2
  40be66:	443d      	add	r5, r7
  40be68:	1aed      	subs	r5, r5, r3
  40be6a:	b2a4      	uxth	r4, r4
  40be6c:	fbb5 f0fa 	udiv	r0, r5, sl
  40be70:	fb0a 5510 	mls	r5, sl, r0, r5
  40be74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40be78:	fb00 f909 	mul.w	r9, r0, r9
  40be7c:	45a1      	cmp	r9, r4
  40be7e:	d909      	bls.n	40be94 <__udivmoddi4+0x98>
  40be80:	19e4      	adds	r4, r4, r7
  40be82:	f100 33ff 	add.w	r3, r0, #4294967295
  40be86:	f080 810a 	bcs.w	40c09e <__udivmoddi4+0x2a2>
  40be8a:	45a1      	cmp	r9, r4
  40be8c:	f240 8107 	bls.w	40c09e <__udivmoddi4+0x2a2>
  40be90:	3802      	subs	r0, #2
  40be92:	443c      	add	r4, r7
  40be94:	eba4 0409 	sub.w	r4, r4, r9
  40be98:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40be9c:	2100      	movs	r1, #0
  40be9e:	2e00      	cmp	r6, #0
  40bea0:	d061      	beq.n	40bf66 <__udivmoddi4+0x16a>
  40bea2:	fa24 f40e 	lsr.w	r4, r4, lr
  40bea6:	2300      	movs	r3, #0
  40bea8:	6034      	str	r4, [r6, #0]
  40beaa:	6073      	str	r3, [r6, #4]
  40beac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40beb0:	428b      	cmp	r3, r1
  40beb2:	d907      	bls.n	40bec4 <__udivmoddi4+0xc8>
  40beb4:	2e00      	cmp	r6, #0
  40beb6:	d054      	beq.n	40bf62 <__udivmoddi4+0x166>
  40beb8:	2100      	movs	r1, #0
  40beba:	e886 0021 	stmia.w	r6, {r0, r5}
  40bebe:	4608      	mov	r0, r1
  40bec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bec4:	fab3 f183 	clz	r1, r3
  40bec8:	2900      	cmp	r1, #0
  40beca:	f040 808e 	bne.w	40bfea <__udivmoddi4+0x1ee>
  40bece:	42ab      	cmp	r3, r5
  40bed0:	d302      	bcc.n	40bed8 <__udivmoddi4+0xdc>
  40bed2:	4282      	cmp	r2, r0
  40bed4:	f200 80fa 	bhi.w	40c0cc <__udivmoddi4+0x2d0>
  40bed8:	1a84      	subs	r4, r0, r2
  40beda:	eb65 0503 	sbc.w	r5, r5, r3
  40bede:	2001      	movs	r0, #1
  40bee0:	46ac      	mov	ip, r5
  40bee2:	2e00      	cmp	r6, #0
  40bee4:	d03f      	beq.n	40bf66 <__udivmoddi4+0x16a>
  40bee6:	e886 1010 	stmia.w	r6, {r4, ip}
  40beea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40beee:	b912      	cbnz	r2, 40bef6 <__udivmoddi4+0xfa>
  40bef0:	2701      	movs	r7, #1
  40bef2:	fbb7 f7f2 	udiv	r7, r7, r2
  40bef6:	fab7 fe87 	clz	lr, r7
  40befa:	f1be 0f00 	cmp.w	lr, #0
  40befe:	d134      	bne.n	40bf6a <__udivmoddi4+0x16e>
  40bf00:	1beb      	subs	r3, r5, r7
  40bf02:	0c3a      	lsrs	r2, r7, #16
  40bf04:	fa1f fc87 	uxth.w	ip, r7
  40bf08:	2101      	movs	r1, #1
  40bf0a:	fbb3 f8f2 	udiv	r8, r3, r2
  40bf0e:	0c25      	lsrs	r5, r4, #16
  40bf10:	fb02 3318 	mls	r3, r2, r8, r3
  40bf14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40bf18:	fb0c f308 	mul.w	r3, ip, r8
  40bf1c:	42ab      	cmp	r3, r5
  40bf1e:	d907      	bls.n	40bf30 <__udivmoddi4+0x134>
  40bf20:	19ed      	adds	r5, r5, r7
  40bf22:	f108 30ff 	add.w	r0, r8, #4294967295
  40bf26:	d202      	bcs.n	40bf2e <__udivmoddi4+0x132>
  40bf28:	42ab      	cmp	r3, r5
  40bf2a:	f200 80d1 	bhi.w	40c0d0 <__udivmoddi4+0x2d4>
  40bf2e:	4680      	mov	r8, r0
  40bf30:	1aed      	subs	r5, r5, r3
  40bf32:	b2a3      	uxth	r3, r4
  40bf34:	fbb5 f0f2 	udiv	r0, r5, r2
  40bf38:	fb02 5510 	mls	r5, r2, r0, r5
  40bf3c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40bf40:	fb0c fc00 	mul.w	ip, ip, r0
  40bf44:	45a4      	cmp	ip, r4
  40bf46:	d907      	bls.n	40bf58 <__udivmoddi4+0x15c>
  40bf48:	19e4      	adds	r4, r4, r7
  40bf4a:	f100 33ff 	add.w	r3, r0, #4294967295
  40bf4e:	d202      	bcs.n	40bf56 <__udivmoddi4+0x15a>
  40bf50:	45a4      	cmp	ip, r4
  40bf52:	f200 80b8 	bhi.w	40c0c6 <__udivmoddi4+0x2ca>
  40bf56:	4618      	mov	r0, r3
  40bf58:	eba4 040c 	sub.w	r4, r4, ip
  40bf5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40bf60:	e79d      	b.n	40be9e <__udivmoddi4+0xa2>
  40bf62:	4631      	mov	r1, r6
  40bf64:	4630      	mov	r0, r6
  40bf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bf6a:	f1ce 0420 	rsb	r4, lr, #32
  40bf6e:	fa05 f30e 	lsl.w	r3, r5, lr
  40bf72:	fa07 f70e 	lsl.w	r7, r7, lr
  40bf76:	fa20 f804 	lsr.w	r8, r0, r4
  40bf7a:	0c3a      	lsrs	r2, r7, #16
  40bf7c:	fa25 f404 	lsr.w	r4, r5, r4
  40bf80:	ea48 0803 	orr.w	r8, r8, r3
  40bf84:	fbb4 f1f2 	udiv	r1, r4, r2
  40bf88:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40bf8c:	fb02 4411 	mls	r4, r2, r1, r4
  40bf90:	fa1f fc87 	uxth.w	ip, r7
  40bf94:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40bf98:	fb01 f30c 	mul.w	r3, r1, ip
  40bf9c:	42ab      	cmp	r3, r5
  40bf9e:	fa00 f40e 	lsl.w	r4, r0, lr
  40bfa2:	d909      	bls.n	40bfb8 <__udivmoddi4+0x1bc>
  40bfa4:	19ed      	adds	r5, r5, r7
  40bfa6:	f101 30ff 	add.w	r0, r1, #4294967295
  40bfaa:	f080 808a 	bcs.w	40c0c2 <__udivmoddi4+0x2c6>
  40bfae:	42ab      	cmp	r3, r5
  40bfb0:	f240 8087 	bls.w	40c0c2 <__udivmoddi4+0x2c6>
  40bfb4:	3902      	subs	r1, #2
  40bfb6:	443d      	add	r5, r7
  40bfb8:	1aeb      	subs	r3, r5, r3
  40bfba:	fa1f f588 	uxth.w	r5, r8
  40bfbe:	fbb3 f0f2 	udiv	r0, r3, r2
  40bfc2:	fb02 3310 	mls	r3, r2, r0, r3
  40bfc6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40bfca:	fb00 f30c 	mul.w	r3, r0, ip
  40bfce:	42ab      	cmp	r3, r5
  40bfd0:	d907      	bls.n	40bfe2 <__udivmoddi4+0x1e6>
  40bfd2:	19ed      	adds	r5, r5, r7
  40bfd4:	f100 38ff 	add.w	r8, r0, #4294967295
  40bfd8:	d26f      	bcs.n	40c0ba <__udivmoddi4+0x2be>
  40bfda:	42ab      	cmp	r3, r5
  40bfdc:	d96d      	bls.n	40c0ba <__udivmoddi4+0x2be>
  40bfde:	3802      	subs	r0, #2
  40bfe0:	443d      	add	r5, r7
  40bfe2:	1aeb      	subs	r3, r5, r3
  40bfe4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40bfe8:	e78f      	b.n	40bf0a <__udivmoddi4+0x10e>
  40bfea:	f1c1 0720 	rsb	r7, r1, #32
  40bfee:	fa22 f807 	lsr.w	r8, r2, r7
  40bff2:	408b      	lsls	r3, r1
  40bff4:	fa05 f401 	lsl.w	r4, r5, r1
  40bff8:	ea48 0303 	orr.w	r3, r8, r3
  40bffc:	fa20 fe07 	lsr.w	lr, r0, r7
  40c000:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40c004:	40fd      	lsrs	r5, r7
  40c006:	ea4e 0e04 	orr.w	lr, lr, r4
  40c00a:	fbb5 f9fc 	udiv	r9, r5, ip
  40c00e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40c012:	fb0c 5519 	mls	r5, ip, r9, r5
  40c016:	fa1f f883 	uxth.w	r8, r3
  40c01a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40c01e:	fb09 f408 	mul.w	r4, r9, r8
  40c022:	42ac      	cmp	r4, r5
  40c024:	fa02 f201 	lsl.w	r2, r2, r1
  40c028:	fa00 fa01 	lsl.w	sl, r0, r1
  40c02c:	d908      	bls.n	40c040 <__udivmoddi4+0x244>
  40c02e:	18ed      	adds	r5, r5, r3
  40c030:	f109 30ff 	add.w	r0, r9, #4294967295
  40c034:	d243      	bcs.n	40c0be <__udivmoddi4+0x2c2>
  40c036:	42ac      	cmp	r4, r5
  40c038:	d941      	bls.n	40c0be <__udivmoddi4+0x2c2>
  40c03a:	f1a9 0902 	sub.w	r9, r9, #2
  40c03e:	441d      	add	r5, r3
  40c040:	1b2d      	subs	r5, r5, r4
  40c042:	fa1f fe8e 	uxth.w	lr, lr
  40c046:	fbb5 f0fc 	udiv	r0, r5, ip
  40c04a:	fb0c 5510 	mls	r5, ip, r0, r5
  40c04e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40c052:	fb00 f808 	mul.w	r8, r0, r8
  40c056:	45a0      	cmp	r8, r4
  40c058:	d907      	bls.n	40c06a <__udivmoddi4+0x26e>
  40c05a:	18e4      	adds	r4, r4, r3
  40c05c:	f100 35ff 	add.w	r5, r0, #4294967295
  40c060:	d229      	bcs.n	40c0b6 <__udivmoddi4+0x2ba>
  40c062:	45a0      	cmp	r8, r4
  40c064:	d927      	bls.n	40c0b6 <__udivmoddi4+0x2ba>
  40c066:	3802      	subs	r0, #2
  40c068:	441c      	add	r4, r3
  40c06a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40c06e:	eba4 0408 	sub.w	r4, r4, r8
  40c072:	fba0 8902 	umull	r8, r9, r0, r2
  40c076:	454c      	cmp	r4, r9
  40c078:	46c6      	mov	lr, r8
  40c07a:	464d      	mov	r5, r9
  40c07c:	d315      	bcc.n	40c0aa <__udivmoddi4+0x2ae>
  40c07e:	d012      	beq.n	40c0a6 <__udivmoddi4+0x2aa>
  40c080:	b156      	cbz	r6, 40c098 <__udivmoddi4+0x29c>
  40c082:	ebba 030e 	subs.w	r3, sl, lr
  40c086:	eb64 0405 	sbc.w	r4, r4, r5
  40c08a:	fa04 f707 	lsl.w	r7, r4, r7
  40c08e:	40cb      	lsrs	r3, r1
  40c090:	431f      	orrs	r7, r3
  40c092:	40cc      	lsrs	r4, r1
  40c094:	6037      	str	r7, [r6, #0]
  40c096:	6074      	str	r4, [r6, #4]
  40c098:	2100      	movs	r1, #0
  40c09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c09e:	4618      	mov	r0, r3
  40c0a0:	e6f8      	b.n	40be94 <__udivmoddi4+0x98>
  40c0a2:	4690      	mov	r8, r2
  40c0a4:	e6e0      	b.n	40be68 <__udivmoddi4+0x6c>
  40c0a6:	45c2      	cmp	sl, r8
  40c0a8:	d2ea      	bcs.n	40c080 <__udivmoddi4+0x284>
  40c0aa:	ebb8 0e02 	subs.w	lr, r8, r2
  40c0ae:	eb69 0503 	sbc.w	r5, r9, r3
  40c0b2:	3801      	subs	r0, #1
  40c0b4:	e7e4      	b.n	40c080 <__udivmoddi4+0x284>
  40c0b6:	4628      	mov	r0, r5
  40c0b8:	e7d7      	b.n	40c06a <__udivmoddi4+0x26e>
  40c0ba:	4640      	mov	r0, r8
  40c0bc:	e791      	b.n	40bfe2 <__udivmoddi4+0x1e6>
  40c0be:	4681      	mov	r9, r0
  40c0c0:	e7be      	b.n	40c040 <__udivmoddi4+0x244>
  40c0c2:	4601      	mov	r1, r0
  40c0c4:	e778      	b.n	40bfb8 <__udivmoddi4+0x1bc>
  40c0c6:	3802      	subs	r0, #2
  40c0c8:	443c      	add	r4, r7
  40c0ca:	e745      	b.n	40bf58 <__udivmoddi4+0x15c>
  40c0cc:	4608      	mov	r0, r1
  40c0ce:	e708      	b.n	40bee2 <__udivmoddi4+0xe6>
  40c0d0:	f1a8 0802 	sub.w	r8, r8, #2
  40c0d4:	443d      	add	r5, r7
  40c0d6:	e72b      	b.n	40bf30 <__udivmoddi4+0x134>

0040c0d8 <__aeabi_idiv0>:
  40c0d8:	4770      	bx	lr
  40c0da:	bf00      	nop
  40c0dc:	65480a0a 	.word	0x65480a0a
  40c0e0:	206f6c6c 	.word	0x206f6c6c
  40c0e4:	72696843 	.word	0x72696843
  40c0e8:	2d202170 	.word	0x2d202170
  40c0ec:	69684320 	.word	0x69684320
  40c0f0:	53207072 	.word	0x53207072
  40c0f4:	63696e6f 	.word	0x63696e6f
  40c0f8:	2062694c 	.word	0x2062694c
  40c0fc:	6d617845 	.word	0x6d617845
  40c100:	20656c70 	.word	0x20656c70
  40c104:	6c707041 	.word	0x6c707041
  40c108:	74616369 	.word	0x74616369
  40c10c:	0a6e6f69 	.word	0x0a6e6f69
  40c110:	00000000 	.word	0x00000000
  40c114:	323a3631 	.word	0x323a3631
  40c118:	31303a37 	.word	0x31303a37
  40c11c:	00000000 	.word	0x00000000
  40c120:	20706553 	.word	0x20706553
  40c124:	32203320 	.word	0x32203320
  40c128:	00313230 	.word	0x00313230
  40c12c:	20202020 	.word	0x20202020
  40c130:	706d6f43 	.word	0x706d6f43
  40c134:	20656c69 	.word	0x20656c69
  40c138:	656d6974 	.word	0x656d6974
  40c13c:	2520203a 	.word	0x2520203a
  40c140:	73252073 	.word	0x73252073
  40c144:	0000000a 	.word	0x0000000a
  40c148:	20202020 	.word	0x20202020
  40c14c:	73726556 	.word	0x73726556
  40c150:	3a6e6f69 	.word	0x3a6e6f69
  40c154:	2e752520 	.word	0x2e752520
  40c158:	252e7525 	.word	0x252e7525
  40c15c:	00000075 	.word	0x00000075
  40c160:	20202020 	.word	0x20202020
  40c164:	696e6f53 	.word	0x696e6f53
  40c168:	62694c63 	.word	0x62694c63
  40c16c:	72657620 	.word	0x72657620
  40c170:	6e6f6973 	.word	0x6e6f6973
  40c174:	7525203a 	.word	0x7525203a
  40c178:	2e75252e 	.word	0x2e75252e
  40c17c:	000a7525 	.word	0x000a7525
  40c180:	0000000a 	.word	0x0000000a
  40c184:	74696e49 	.word	0x74696e49
  40c188:	696c6169 	.word	0x696c6169
  40c18c:	676e697a 	.word	0x676e697a
  40c190:	6e657320 	.word	0x6e657320
  40c194:	28726f73 	.word	0x28726f73
  40c198:	2e2e2973 	.word	0x2e2e2973
  40c19c:	0000202e 	.word	0x0000202e
  40c1a0:	72617473 	.word	0x72617473
  40c1a4:	676e6974 	.word	0x676e6974
  40c1a8:	6f726720 	.word	0x6f726720
  40c1ac:	2e2e7075 	.word	0x2e2e7075
  40c1b0:	0000202e 	.word	0x0000202e
  40c1b4:	000a4b4f 	.word	0x000a4b4f
  40c1b8:	4c494146 	.word	0x4c494146
  40c1bc:	203a4445 	.word	0x203a4445
  40c1c0:	000a6425 	.word	0x000a6425
  40c1c4:	736e6553 	.word	0x736e6553
  40c1c8:	5409726f 	.word	0x5409726f
  40c1cc:	20657079 	.word	0x20657079
  40c1d0:	20202009 	.word	0x20202009
  40c1d4:	71657246 	.word	0x71657246
  40c1d8:	52200909 	.word	0x52200909
  40c1dc:	43204354 	.word	0x43204354
  40c1e0:	09206c61 	.word	0x09206c61
  40c1e4:	6d726946 	.word	0x6d726946
  40c1e8:	65726177 	.word	0x65726177
  40c1ec:	0000000a 	.word	0x0000000a
  40c1f0:	43096425 	.word	0x43096425
  40c1f4:	09642548 	.word	0x09642548
  40c1f8:	20752520 	.word	0x20752520
  40c1fc:	25097a48 	.word	0x25097a48
  40c200:	75254075 	.word	0x75254075
  40c204:	2509736d 	.word	0x2509736d
  40c208:	00000a73 	.word	0x00000a73
  40c20c:	666e6f43 	.word	0x666e6f43
  40c210:	72756769 	.word	0x72756769
  40c214:	20676e69 	.word	0x20676e69
  40c218:	736e6573 	.word	0x736e6573
  40c21c:	7328726f 	.word	0x7328726f
  40c220:	2e2e2e29 	.word	0x2e2e2e29
  40c224:	0000000a 	.word	0x0000000a
  40c228:	69766544 	.word	0x69766544
  40c22c:	25206563 	.word	0x25206563
  40c230:	45203a64 	.word	0x45203a64
  40c234:	726f7272 	.word	0x726f7272
  40c238:	72756420 	.word	0x72756420
  40c23c:	20676e69 	.word	0x20676e69
  40c240:	735f6863 	.word	0x735f6863
  40c244:	635f7465 	.word	0x635f7465
  40c248:	69666e6f 	.word	0x69666e6f
  40c24c:	0a292867 	.word	0x0a292867
  40c250:	00000000 	.word	0x00000000
  40c254:	74696e49 	.word	0x74696e49
  40c258:	696c6169 	.word	0x696c6169
  40c25c:	676e697a 	.word	0x676e697a
  40c260:	6d617320 	.word	0x6d617320
  40c264:	20656c70 	.word	0x20656c70
  40c268:	656d6974 	.word	0x656d6974
  40c26c:	6f662072 	.word	0x6f662072
  40c270:	64252072 	.word	0x64252072
  40c274:	6920736d 	.word	0x6920736d
  40c278:	7265746e 	.word	0x7265746e
  40c27c:	2e6c6176 	.word	0x2e6c6176
  40c280:	00202e2e 	.word	0x00202e2e
  40c284:	72617453 	.word	0x72617453
  40c288:	676e6974 	.word	0x676e6974
  40c28c:	61656d20 	.word	0x61656d20
  40c290:	65727573 	.word	0x65727573
  40c294:	746e656d 	.word	0x746e656d
  40c298:	00000a73 	.word	0x00000a73
  40c29c:	656d6954 	.word	0x656d6954
  40c2a0:	73617020 	.word	0x73617020
  40c2a4:	2e252073 	.word	0x2e252073
  40c2a8:	73206636 	.word	0x73206636
  40c2ac:	00000000 	.word	0x00000000
  40c2b0:	454c4449 	.word	0x454c4449
  40c2b4:	00000000 	.word	0x00000000
  40c2b8:	45455246 	.word	0x45455246
  40c2bc:	004e5552 	.word	0x004e5552
  40c2c0:	47495254 	.word	0x47495254
  40c2c4:	45524547 	.word	0x45524547
  40c2c8:	58545f44 	.word	0x58545f44
  40c2cc:	0058525f 	.word	0x0058525f
  40c2d0:	47495254 	.word	0x47495254
  40c2d4:	45524547 	.word	0x45524547
  40c2d8:	58525f44 	.word	0x58525f44
  40c2dc:	4c4e4f5f 	.word	0x4c4e4f5f
  40c2e0:	00000059 	.word	0x00000059
  40c2e4:	4e4b4e55 	.word	0x4e4b4e55
  40c2e8:	004e574f 	.word	0x004e574f
  40c2ec:	736e6553 	.word	0x736e6553
  40c2f0:	2520726f 	.word	0x2520726f
  40c2f4:	6d093a64 	.word	0x6d093a64
  40c2f8:	725f7861 	.word	0x725f7861
  40c2fc:	65676e61 	.word	0x65676e61
  40c300:	6d64253d 	.word	0x6d64253d
  40c304:	6d09206d 	.word	0x6d09206d
  40c308:	3d65646f 	.word	0x3d65646f
  40c30c:	20207325 	.word	0x20207325
  40c310:	00000000 	.word	0x00000000
  40c314:	74617473 	.word	0x74617473
  40c318:	725f6369 	.word	0x725f6369
  40c31c:	65676e61 	.word	0x65676e61
  40c320:	2064253d 	.word	0x2064253d
  40c324:	706d6173 	.word	0x706d6173
  40c328:	0073656c 	.word	0x0073656c
  40c32c:	4420200a 	.word	0x4420200a
  40c330:	63657465 	.word	0x63657465
  40c334:	6e6f6974 	.word	0x6e6f6974
  40c338:	72687420 	.word	0x72687420
  40c33c:	6f687365 	.word	0x6f687365
  40c340:	3a73646c 	.word	0x3a73646c
  40c344:	0000000a 	.word	0x0000000a
  40c348:	20202020 	.word	0x20202020
  40c34c:	09642520 	.word	0x09642520
  40c350:	72617473 	.word	0x72617473
  40c354:	25203a74 	.word	0x25203a74
  40c358:	6c096432 	.word	0x6c096432
  40c35c:	6c657665 	.word	0x6c657665
  40c360:	6425203a 	.word	0x6425203a
  40c364:	0000000a 	.word	0x0000000a
  40c368:	76654420 	.word	0x76654420
  40c36c:	20656369 	.word	0x20656369
  40c370:	203a6425 	.word	0x203a6425
  40c374:	6f727245 	.word	0x6f727245
  40c378:	75642072 	.word	0x75642072
  40c37c:	676e6972 	.word	0x676e6972
  40c380:	5f686320 	.word	0x5f686320
  40c384:	5f746567 	.word	0x5f746567
  40c388:	65726874 	.word	0x65726874
  40c38c:	6c6f6873 	.word	0x6c6f6873
  40c390:	29287364 	.word	0x29287364
  40c394:	00000000 	.word	0x00000000
  40c398:	76654420 	.word	0x76654420
  40c39c:	20656369 	.word	0x20656369
  40c3a0:	203a6425 	.word	0x203a6425
  40c3a4:	6f727245 	.word	0x6f727245
  40c3a8:	75642072 	.word	0x75642072
  40c3ac:	676e6972 	.word	0x676e6972
  40c3b0:	5f686320 	.word	0x5f686320
  40c3b4:	5f746567 	.word	0x5f746567
  40c3b8:	666e6f63 	.word	0x666e6f63
  40c3bc:	29286769 	.word	0x29286769
  40c3c0:	0000000a 	.word	0x0000000a
  40c3c4:	74726f50 	.word	0x74726f50
  40c3c8:	3a642520 	.word	0x3a642520
  40c3cc:	20202020 	.word	0x20202020
  40c3d0:	20202020 	.word	0x20202020
  40c3d4:	6f6e2020 	.word	0x6f6e2020
  40c3d8:	72617420 	.word	0x72617420
  40c3dc:	20746567 	.word	0x20746567
  40c3e0:	6e756f66 	.word	0x6e756f66
  40c3e4:	20202064 	.word	0x20202064
  40c3e8:	20202020 	.word	0x20202020
  40c3ec:	00000020 	.word	0x00000020
  40c3f0:	74726f50 	.word	0x74726f50
  40c3f4:	3a642520 	.word	0x3a642520
  40c3f8:	61522020 	.word	0x61522020
  40c3fc:	3a65676e 	.word	0x3a65676e
  40c400:	2e302520 	.word	0x2e302520
  40c404:	6d206631 	.word	0x6d206631
  40c408:	4120206d 	.word	0x4120206d
  40c40c:	203a706d 	.word	0x203a706d
  40c410:	20207525 	.word	0x20207525
  40c414:	00000000 	.word	0x00000000
  40c418:	72696843 	.word	0x72696843
  40c41c:	65732070 	.word	0x65732070
  40c420:	726f736e 	.word	0x726f736e
  40c424:	00203020 	.word	0x00203020
  40c428:	6e756f66 	.word	0x6e756f66
  40c42c:	00000a64 	.word	0x00000a64
  40c430:	20746f6e 	.word	0x20746f6e
  40c434:	6e756f66 	.word	0x6e756f66
  40c438:	00000a64 	.word	0x00000a64
  40c43c:	72696843 	.word	0x72696843
  40c440:	65732070 	.word	0x65732070
  40c444:	726f736e 	.word	0x726f736e
  40c448:	00203120 	.word	0x00203120
  40c44c:	72696843 	.word	0x72696843
  40c450:	65732070 	.word	0x65732070
  40c454:	726f736e 	.word	0x726f736e
  40c458:	00203220 	.word	0x00203220
  40c45c:	72696843 	.word	0x72696843
  40c460:	65732070 	.word	0x65732070
  40c464:	726f736e 	.word	0x726f736e
  40c468:	00203320 	.word	0x00203320
  40c46c:	72696843 	.word	0x72696843
  40c470:	65732070 	.word	0x65732070
  40c474:	726f736e 	.word	0x726f736e
  40c478:	64644920 	.word	0x64644920
  40c47c:	6c25203a 	.word	0x6c25203a
  40c480:	41752064 	.word	0x41752064
  40c484:	00000a0a 	.word	0x00000a0a

0040c488 <adc_interrupt_mask>:
  40c488:	00000001 00000002 00000004 00000008     ................
  40c498:	00000010 00000020 00000040 00000080     .... ...@.......
  40c4a8:	00800000 01000000 02000000 04000000     ................
  40c4b8:	08000000 10000000 00000000 00000000     ................
	...
  40c4e8:	6d727067 37765f74 00000000 00766564     gprmt_v7....dev.

0040c4f8 <ram_ch201_gprmt_init>:
  40c4f8:	07d01388 01900320 00af00fa 00000006     .... ...........
  40c508:	0000fa00 0c000064 00010000              ....d.......

0040c514 <ch201_gprmt_fw>:
  40c514:	1209120a 12071208 12051206 80311204     ..............1.
  40c524:	4d81000c 93c2000a 20050208 01c24036     ...M....... 6@..
  40c534:	012c4034 42563c04 42140208 43050216     4@,..<VB...B...C
  40c544:	4f81430f 4f810006 430a0004 247b930c     .C.O...O...C..{$
  40c554:	00024c81 43474308 00129038 90f22c1c     .L...CGC8....,..
  40c564:	02010020 480f2418 403e5f0f 5f0e022a      ....$.H._>@*.._
  40c574:	0932503f 411d432c 934d000a 4e2d2006     ?P2.,C.A..M.. -N
  40c584:	00008fae 00004d8f 4eaf3c02 832e0000     .....M...<.N....
  40c594:	831c832f 411f23f0 934f000a 480e204f     /....#.A..O.O .H
  40c5a4:	960a5e0e 5357201c 24129357 240d9367     .^... WSW..$g..$
  40c5b4:	00039077 92672407 43062402 425f3c0c     w....$g..$.C.<_B
  40c5c4:	3c080215 020d425f 425f3c05 3c02020c     ...<_B...<_B...<
  40c5d4:	0209425f 474f5f06 4f145f0f 403d0216     _B..._OG._.O..=@
  40c5e4:	480f0228 5f0f531f 4f815d0f 5e0d0000     (..H.S._.].O...^
  40c5f4:	4d2c4d0b 12b04f2d 9381ff26 201e0006     .M,M-O..&...... 
  40c604:	0211425f 9a0f5f0f 93052c19 9c042005     _B..._...,... ..
  40c614:	4a812c15 43150008 412f4b2c 12b04f2d     .,.J...C,K/A-O..
  40c624:	911cfe16 28030004 00044c81 4a093c07     .......(.L...<.J
  40c634:	00088119 43058319 00064391 531a5328     .......C.C..(S.S
  40c644:	00028391 93052389 93812006 20060006     .....#... ..... 
  40c654:	022443b2 4a093c42 00088119 0004411c     .C$.B<.J.....A..
  40c664:	c3124c08 411a1008 590a0008 fffd9039     .L.....A...Y9...
  40c674:	403f3818 4a060228 53165606 5f065606     .8?@(..J.V.S.V._
  40c684:	57074a07 5f075707 4c055229 462d472c     .J.W.W._)R.L,G-F
  40c694:	fe1612b0 2805980c 82278226 8319831a     .......(&.'.....
  40c6a4:	4c0e23f4 411f5e0e c31f0004 8c058e0f     .#.L.^.A........
  40c6b4:	434e423d 9f055e4e 850f2c02 5f0f535e     =BNCN^...,..^S._
  40c6c4:	23f8831d 12b04a0c 4e4eff16 de0c110e     ...#.J....NN....
  40c6d4:	02244c82 00044192 50310226 4030000c     .L$..A..&.1P..0@
  40c6e4:	120fffa6 120d120e 120b120c 403a120a     ..............:@
  40c6f4:	4a820177 c3d201a6 93c2097c 203a0214     w..J....|.....: 
  40c704:	421c431b 421d023a 12b00238 921cff26     .C.B:..B8...&...
  40c714:	28190980 023a421f 821f110f 931f0238     ...(.B:.....8...
  40c724:	433f3802 431f3c01 098293c2 425e2407     .8?C.<.C.....$^B
  40c734:	118e0982 24029e0f 3c02430b 097e5f82     .......$.C.<._~.
  40c744:	09824fc2 50b23c0f 097e0014 012d90b2     .O...<.P..~...-.
  40c754:	2806097e 00c880b2 c312097e 09801012     ~..(....~.......
  40c764:	098243c2 203c930b 021443d2 3f1e40b2     .C....< .C...@.?
  40c774:	3c360962 021493d2 90f22031 09680003     b.6<....1 ....h.
  40c784:	93c2240a 20040968 185840b2 3c150954     .$..h.. .@X.T..<
  40c794:	096883d2 421c3c12 421d023a 12b00238     ..h..<.B:..B8...
  40c7a4:	9c82ff26 2805097a 097a4c82 09765392     &...z..(.Lz..Sv.
  40c7b4:	43e23c04 83920968 93e20976 240b0968     .<.Ch...v...h..$
  40c7c4:	096893c2 43e2200d d3e20214 40b2097c     ..h.. .C....|..@
  40c7d4:	01d01080 43d23c05 3c020201 01f04382     .....<.C...<.C..
  40c7e4:	000390f2 2c070968 0207425c 425d5c0c     ....h..,\B...\]B
  40c7f4:	12b00968 93e2f800 280d0214 01e0d3d2     h..........(....
  40c804:	01e0c3d2 067740b2 423c01a6 ffc412b0     .....@w...<B....
  40c814:	01a64a82 435c3c05 fc3612b0 0192c2a2     .J...<\C..6.....
  40c824:	0192d2a2 096642d2 c0b101e0 000c00f0     .....Bf.........
  40c834:	413b413a 413d413c 413f413e 120a1300     :A;A<A=A>A?A....
  40c844:	5a8040b2 42e20120 43d201e0 40f201e2     .@.Z ..B...C...@
  40c854:	02010040 003c40f2 40f20207 02040006     @....@<....@....
  40c864:	000940f2 40f20200 0208001a 000d40f2     .@.....@.....@..
  40c874:	40f20209 020c0011 001740f2 40f2020d     ...@.....@.....@
  40c884:	02150028 001e40f2 403f0210 403d0216     (....@....?@..=@
  40c894:	403e0006 532f096a fffe4ebf 23fb831d     ..>@j./S.N.....#
  40c8a4:	020543d2 021143c2 008040b2 40f20202     .C...C...@.....@
  40c8b4:	01c20003 020040b2 40b201a6 01a60600     .....@.....@....
  40c8c4:	022840b2 40b201b0 01b20012 017740b2     .@(....@.....@w.
  40c8d4:	40b201a6 01900080 000740b2 430a0192     ...@.....@.....C
  40c8e4:	93c23c05 2402097c 0018d032 0201425f     .<..|..$2..._B..
  40c8f4:	24239f0a 0201425a 803f4a0f 241b0010     ..#$ZB...J?....$
  40c904:	0010803f 803f2418 20100020 021443c2     ?....$?. .. .C..
  40c914:	096842e2 181e40b2 421f0962 503f097e     .Bh..@..b..B~.?P
  40c924:	4f821000 435c01f0 fc3612b0 096642e2     ...O..\C..6..Bf.
  40c934:	01e0c3e2 d3e23c02 93c201e0 23d1097c     .....<......|..#
  40c944:	0058d032 d3d23fd3 421f097c 503f097e     2.X..?..|..B~.?P
  40c954:	4f821000 90f201f0 02010040 92d22449     ...O....@...I$..
  40c964:	09780207 42d22431 09780207 0204425f     ..x.1$.B..x._B..
  40c974:	803f5f0f 425e000b 5e0e0207 803e8f0e     ._?...^B...^..>.
  40c984:	93c2000b 20040968 185840b2 3c030954     ....h.. .@X.T..<
  40c994:	245840b2 5f0f0954 5f0f5f0f 2c00503f     .@X$T.._._._?P.,
  40c9a4:	09564f82 4ff8403b 0958403d b03e436f     .OV.;@.O=@X.oC>.
  40c9b4:	2017ff80 5e0e5e0e 503e5e0e 4e8d4c00     ... .^.^.^>P.L.N
  40c9c4:	535f0000 09694fc2 2004934c 108240b2     .._S.Oi.L.. .@..
  40c9d4:	3c1901a2 108640b2 429201a2 01a00962     ...<.@.....Bb...
  40c9e4:	532d3c12 fffe4b8d 803e535f 3fdf007f     .<-S.K.._S>....?
  40c9f4:	204040b2 43d20954 42920969 01a00962     .@@ T..Ci..Bb...
  40ca04:	108640b2 425f01a2 930f0969 403e2406     .@...._Bi....$>@
  40ca14:	4eb20954 831f01a4 93c223fc 24030214     T..N.....#.....$
  40ca24:	0018d0b2 439201a2 43a201ae 413001ae     .......C...C..0A
  40ca34:	120e120f 120c120d 120a120b 0202421d     .............B..
  40ca44:	93e24d0a 201d0201 098483d2 425e201a     .M..... ..... ^B
  40ca54:	4ec20205 425c0984 425f0207 5f0f0207     ...N..\B.._B..._
  40ca64:	5f0f5f0f 936e8c0f 9f0a2808 5d0a2c06     ._._..n..(...,.]
  40ca74:	098483d2 098493e2 435c2ff8 fc3612b0     ........./\C..6.
  40ca84:	40b23c09 01a60677 12b0423c 40b2ffc4     .<.@w...<B.....@
  40ca94:	01a60177 01904a82 00f0c0b1 413a000c     w....J........:A
  40caa4:	413c413b 413e413d 1300413f 425f120f     ;A<A=A>A?A...._B
  40cab4:	930f0985 831f2415 831f2426 90b22029     .....$..&$..) ..
  40cac4:	09640022 421f2c07 42df0964 020001c1     ".d..,.Bd..B....
  40cad4:	09645392 096783d2 43c2201b 3c180985     .Sd...g.. .C...<
  40cae4:	01c1425f 09644f82 098543d2 02004fd2     _B...Od..C...O..
  40caf4:	903f01c0 200c0006 002440f2 40b201e0     ..?.... .@$....@
  40cb04:	01d80003 42d23c05 096701c1 098543e2     .....<.B..g..C..
  40cb14:	0010d0f2 d0f201c2 01c20020 00f0c0b1     ........ .......
  40cb24:	413f0002 120a1300 3403931d 531de33d     ..?A.......4=..S
  40cb34:	e33c3c02 4d0e531c 110e4c0f 430b110f     .<<..S.M.L.....C
  40cb44:	4b0d4e0c fece12b0 4f0c4c0a 12b04b0d     .N.K.....L.O.K..
  40cb54:	931ffece 8c0e3403 3c025a0f 8a0f5c0e     .....4...Z.<.\..
  40cb64:	922b531b 4e0c3bed 4130413a 120e120f     .S+..;.N:A0A....
  40cb74:	120c120d b3e2120b 241201e0 01e042d2     ...........$.B..
  40cb84:	c3e20966 c2a201e0 434c0192 002090f2     f.........LC.. .
  40cb94:	24010201 12b0435c c0b1fc36 000a00f0     ...$\C..6.......
  40cba4:	413c413b 413e413d 1300413f 43c2120f     ;A<A=A>A?A.....C
  40cbb4:	53920985 90b20964 09640730 43822803     ...Sd...0.d..(.C
  40cbc4:	3c050964 0964421f 02004fd2 d0f201c0     d..<.Bd..O......
  40cbd4:	01c20020 00f0c0b1 413f0002 f03d1300      .........?A..=.
  40cbe4:	e03d000f 5d0d000f 110c5d00 110c110c     ..=....].]......
  40cbf4:	110c110c 110c110c 110c110c 110c110c     ................
  40cc04:	110c110c 110c110c f03d4130 e03d000f     ........0A=...=.
  40cc14:	5d0d000f 5c0c5d00 5c0c5c0c 5c0c5c0c     ...].].\.\.\.\.\
  40cc24:	5c0c5c0c 5c0c5c0c 5c0c5c0c 5c0c5c0c     .\.\.\.\.\.\.\.\
  40cc34:	5c0c5c0c 931c4130 e33c3402 4c0f531c     .\.\0A...4<..S.L
  40cc44:	3402931d 531de33d 9f0c4d0c 4c0e2c03     ...4=..S.M...,.L
  40cc54:	4e0f4f0c 100fc312 5f0c110f 120f4130     .O.N......._0A..
  40cc64:	ffeff0b2 403f01a2 521f2800 4f820976     ......?@.(.Rv..O
  40cc74:	c0b101a0 000200f0 1300413f 01da4292     ........?A...B..
  40cc84:	4382020a 42e201d8 c0b101e0 000000f0     ...C...B........
  40cc94:	40311300 12b00a00 430cffd2 fb2e12b0     ..1@.......C....
  40cca4:	ffd612b0 097cc3e2 01d24292 c0b10222     ......|..B.."...
  40ccb4:	000000f0 41341300 41364135 41384137     ......4A5A6A7A8A
  40ccc4:	413a4139 40b24130 01a61377 00f0c0b1     9A:A0A.@w.......
  40ccd4:	13000000 4303831c 413023fd 0010d032     .......C.#0A2...
  40cce4:	431c3ffd 43034130 13003fff 00000000     .?.C0A.C.?......
  40ccf4:	fd9cfe9c ff6cffda 0000fe5c f9d2ffcc     ......l.\.......
  40cd04:	ffb6ff4e 0000ffcc fd20ff94 ff82ffcc     N......... .....
  40cd14:	000009c4 000009c4 00000bc4 fffc4003     .............@..
  40cd24:	000f4240 000000c0 00000800 00000000     @B..............

0040cd34 <_global_impure_ptr>:
  40cd34:	2000017c 00464e49 00666e69 004e414e     |.. INF.inf.NAN.
  40cd44:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  40cd54:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  40cd64:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  40cd74:	4e614e00 00000000                       .NaN....

0040cd7c <__sf_fake_stderr>:
	...

0040cd9c <__sf_fake_stdin>:
	...

0040cdbc <__sf_fake_stdout>:
	...

0040cde0 <__mprec_bigtens>:
  40cde0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40cdf0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40ce00:	7f73bf3c 75154fdd                       <.s..O.u

0040ce08 <__mprec_tens>:
  40ce08:	00000000 3ff00000 00000000 40240000     .......?......$@
  40ce18:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40ce28:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40ce38:	00000000 412e8480 00000000 416312d0     .......A......cA
  40ce48:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40ce58:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40ce68:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40ce78:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40ce88:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40ce98:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40cea8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40ceb8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40cec8:	79d99db4 44ea7843                       ...yCx.D

0040ced0 <p05.6047>:
  40ced0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  40cee0:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  40cef0:	5849534f 00002e00                                OSIX...

0040cef7 <_ctype_>:
  40cef7:	20202000 20202020 28282020 20282828     .         ((((( 
  40cf07:	20202020 20202020 20202020 20202020                     
  40cf17:	10108820 10101010 10101010 10101010      ...............
  40cf27:	04040410 04040404 10040404 10101010     ................
  40cf37:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40cf47:	01010101 01010101 01010101 10101010     ................
  40cf57:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40cf67:	02020202 02020202 02020202 10101010     ................
  40cf77:	00000020 00000000 00000000 00000000      ...............
	...

0040cff8 <_init>:
  40cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cffa:	bf00      	nop
  40cffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40cffe:	bc08      	pop	{r3}
  40d000:	469e      	mov	lr, r3
  40d002:	4770      	bx	lr

0040d004 <__init_array_start>:
  40d004:	0040016d 	.word	0x0040016d

0040d008 <_fini>:
  40d008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d00a:	bf00      	nop
  40d00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d00e:	bc08      	pop	{r3}
  40d010:	469e      	mov	lr, r3
  40d012:	4770      	bx	lr

0040d014 <__fini_array_start>:
  40d014:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <efc_perform_read_sequence>:
2000000a:	b480      	push	{r7}
2000000c:	b089      	sub	sp, #36	; 0x24
2000000e:	af00      	add	r7, sp, #0
20000010:	60f8      	str	r0, [r7, #12]
20000012:	60b9      	str	r1, [r7, #8]
20000014:	607a      	str	r2, [r7, #4]
20000016:	603b      	str	r3, [r7, #0]
20000018:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000001c:	61bb      	str	r3, [r7, #24]
2000001e:	683b      	ldr	r3, [r7, #0]
20000020:	2b00      	cmp	r3, #0
20000022:	d101      	bne.n	20000028 <efc_perform_read_sequence+0x1e>
20000024:	2302      	movs	r3, #2
20000026:	e03c      	b.n	200000a2 <efc_perform_read_sequence+0x98>
20000028:	68fb      	ldr	r3, [r7, #12]
2000002a:	681b      	ldr	r3, [r3, #0]
2000002c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000030:	68fb      	ldr	r3, [r7, #12]
20000032:	601a      	str	r2, [r3, #0]
20000034:	68bb      	ldr	r3, [r7, #8]
20000036:	b2db      	uxtb	r3, r3
20000038:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
2000003c:	68fb      	ldr	r3, [r7, #12]
2000003e:	605a      	str	r2, [r3, #4]
20000040:	68fb      	ldr	r3, [r7, #12]
20000042:	689b      	ldr	r3, [r3, #8]
20000044:	617b      	str	r3, [r7, #20]
20000046:	697b      	ldr	r3, [r7, #20]
20000048:	f003 0301 	and.w	r3, r3, #1
2000004c:	2b01      	cmp	r3, #1
2000004e:	d0f7      	beq.n	20000040 <efc_perform_read_sequence+0x36>
20000050:	2300      	movs	r3, #0
20000052:	61fb      	str	r3, [r7, #28]
20000054:	e00c      	b.n	20000070 <efc_perform_read_sequence+0x66>
20000056:	69fb      	ldr	r3, [r7, #28]
20000058:	009b      	lsls	r3, r3, #2
2000005a:	683a      	ldr	r2, [r7, #0]
2000005c:	4413      	add	r3, r2
2000005e:	69fa      	ldr	r2, [r7, #28]
20000060:	0092      	lsls	r2, r2, #2
20000062:	69b9      	ldr	r1, [r7, #24]
20000064:	440a      	add	r2, r1
20000066:	6812      	ldr	r2, [r2, #0]
20000068:	601a      	str	r2, [r3, #0]
2000006a:	69fb      	ldr	r3, [r7, #28]
2000006c:	3301      	adds	r3, #1
2000006e:	61fb      	str	r3, [r7, #28]
20000070:	69fa      	ldr	r2, [r7, #28]
20000072:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000074:	429a      	cmp	r2, r3
20000076:	d3ee      	bcc.n	20000056 <efc_perform_read_sequence+0x4c>
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	b2db      	uxtb	r3, r3
2000007c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	605a      	str	r2, [r3, #4]
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	689b      	ldr	r3, [r3, #8]
20000088:	617b      	str	r3, [r7, #20]
2000008a:	697b      	ldr	r3, [r7, #20]
2000008c:	f003 0301 	and.w	r3, r3, #1
20000090:	2b01      	cmp	r3, #1
20000092:	d1f7      	bne.n	20000084 <efc_perform_read_sequence+0x7a>
20000094:	68fb      	ldr	r3, [r7, #12]
20000096:	681b      	ldr	r3, [r3, #0]
20000098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
2000009c:	68fb      	ldr	r3, [r7, #12]
2000009e:	601a      	str	r2, [r3, #0]
200000a0:	2300      	movs	r3, #0
200000a2:	4618      	mov	r0, r3
200000a4:	3724      	adds	r7, #36	; 0x24
200000a6:	46bd      	mov	sp, r7
200000a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200000ac:	4770      	bx	lr

200000ae <efc_write_fmr>:
200000ae:	b480      	push	{r7}
200000b0:	b083      	sub	sp, #12
200000b2:	af00      	add	r7, sp, #0
200000b4:	6078      	str	r0, [r7, #4]
200000b6:	6039      	str	r1, [r7, #0]
200000b8:	687b      	ldr	r3, [r7, #4]
200000ba:	683a      	ldr	r2, [r7, #0]
200000bc:	601a      	str	r2, [r3, #0]
200000be:	bf00      	nop
200000c0:	370c      	adds	r7, #12
200000c2:	46bd      	mov	sp, r7
200000c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200000c8:	4770      	bx	lr

200000ca <efc_perform_fcr>:
200000ca:	b480      	push	{r7}
200000cc:	b085      	sub	sp, #20
200000ce:	af00      	add	r7, sp, #0
200000d0:	6078      	str	r0, [r7, #4]
200000d2:	6039      	str	r1, [r7, #0]
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	683a      	ldr	r2, [r7, #0]
200000d8:	605a      	str	r2, [r3, #4]
200000da:	687b      	ldr	r3, [r7, #4]
200000dc:	689b      	ldr	r3, [r3, #8]
200000de:	60fb      	str	r3, [r7, #12]
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	f003 0301 	and.w	r3, r3, #1
200000e6:	2b01      	cmp	r3, #1
200000e8:	d1f7      	bne.n	200000da <efc_perform_fcr+0x10>
200000ea:	68fb      	ldr	r3, [r7, #12]
200000ec:	f003 030e 	and.w	r3, r3, #14
200000f0:	4618      	mov	r0, r3
200000f2:	3714      	adds	r7, #20
200000f4:	46bd      	mov	sp, r7
200000f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200000fa:	4770      	bx	lr

200000fc <chirp_ch201_thresholds>:
200000fc:	0000 1388 001a 07d0 0027 0320 0038 0190     ........'. .8...
2000010c:	004f 00fa 0059 00af                         O...Y...

20000114 <g_interrupt_enabled>:
20000114:	0001 0000                                   ....

20000118 <chirp_i2c_addrs>:
20000118:	2b2d 2a2c                                   -+,*

2000011c <chirp_i2c_buses>:
2000011c:	0000 0101                                   ....

20000120 <chirp_pin_prog>:
20000120:	0010 0000 0012 0000 0013 0000 001f 0000     ................

20000130 <chirp_pin_io>:
20000130:	0015 0000 0016 0000 0017 0000 001d 0000     ................

20000140 <chirp_pin_io_irq>:
20000140:	0000 0020 0000 0040 0000 0080 0000 2000     .. ...@........ 

20000150 <chirp_led_pins>:
20000150:	0000 0000 002f 0000 0005 0000 0001 0000     ..../...........

20000160 <ultrasound_timer_period_in_tick>:
20000160:	ffff 0000                                   ....

20000164 <adc_local>:
20000164:	8000 4003                                   ...@

20000168 <adc_reg>:
20000168:	8094 4003                                   ...@

2000016c <ul_flash_in_wait_mode>:
2000016c:	0000 0020                                   .. .

20000170 <SystemCoreClock>:
20000170:	1200 007a                                   ..z.

20000174 <ch201_gprmt_version>:
20000174:	c4e8 0040                                   ..@.

20000178 <_impure_ptr>:
20000178:	017c 2000                                   |.. 

2000017c <impure_data>:
2000017c:	0000 0000 cd9c 0040 cdbc 0040 cd7c 0040     ......@...@.|.@.
	...

200001dc <__global_locale>:
200001dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200001fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000021c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000023c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000025c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000027c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000029c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200002bc:	b451 0040 b405 0040 0000 0000 cef7 0040     Q.@...@.......@.
200002cc:	cef5 0040 cee1 0040 cee1 0040 cee1 0040     ..@...@...@...@.
200002dc:	cee1 0040 cee1 0040 cee1 0040 cee1 0040     ..@...@...@...@.
200002ec:	cee1 0040 cee1 0040 ffff ffff ffff ffff     ..@...@.........
200002fc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000324:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
